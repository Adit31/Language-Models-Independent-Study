def def def def def def fast_path_path_path_emits ( self ) : def fast_path_path_emits ( self ) : NEW_LINE INDENT return self . _fast_path_path_emits . get_fast_path_emits ( ) NEW_LINE DEDENT def fast_LINE INDENT return self . _fast_path_path_emits . get_fast_path ( ) NEW_LINE DEDENT

Observable < Event > emits ( Observable < Event > source , Comparator < Event > comparator ) { Observable < Event > observable = Observable . create ( source ) ; if ( comparator != null ) { observable . setComparator ( comparator ) ; } return observable ; }
observe ( self , scheduler ) : NEW_LINE INDENT self . scheduler = scheduler NEW_LINE if self . scheduler is not None : NEW_LINE INDENT self . scheduler . observe ( self . scheduler ) NEW_LINE DEDENT DEDENT
static UnicastProcessor createUnicastProcessor ( final int internalBufferCapacity , final int internalBufferSize ) { if ( internalBufferCapacity <= 0 ) { throw new IllegalArgumentException ( " Internal buffer capacity must be greater than 0 . " ) ; } if ( internalBufferSize <= 0 ) { throw new IllegalArgumentException ( " Internal buffer capacity must be greater than 0 . " ) ; } return new UnicastProcessor ( internalBufferCapacity , internalBufferSize ) ; }
static UnicastProcessor createUnicastProcessor ( ) { return new UnicastProcessor ( null , null , null , null , null , null ) ; }
subscribe ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _publisher . subscribe ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _publisher . subscribe ( self ) NEW_LINE DEDENT DEDENT

reset_handlers ( self ) : NEW_LINE INDENT self . _handlers . clear ( ) NEW_LINE self . _handlers . clear ( ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def _ public Completable def def def def def _ public Completable def def def def def get ( Completable def def def _ public Completable def def def def get ( Completable__python__ def def def _ def _ def _ _get_ Completable def _get_ Completable

_retries_until_predicate ( predicate ) : NEW_LINE INDENT if not predicate . predicate ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static boolean isNull ( Object object ) { if ( object == null ) { return false ; } if ( object == null ) { return true ; } if ( object . getClass ( ) == null ) { return false ; } if ( object . getClass ( ) == null ) { return true ; } return object . getClass ( ) . isInstance ( object ) ; }
identity ( self , * args , ** kwargs ) : NEW_LINE INDENT return self . _identity ( * args , ** kwargs ) NEW_LINE DEDENT
get ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( value , Callable ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return Callable ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT DEDENT
get ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static Class < ? > cast ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } return clazz ; }
static UnicastSubject createUnicastSubject ( ) { return new UnicastSubject ( ) ; }
UnicastSubject createUnicastSubject ( ) { return new UnicastSubject ( ) ; }
UnicastSubject createUnicastSubject ( ) { return new UnicastSubject ( ) ; }
static UnicastSubject createUnicastSubject ( ) { return new UnicastSubject ( ) ; }
block ( self ) : NEW_LINE INDENT if self . latch is not None : NEW_LINE INDENT self . latch . block ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . latch = None NEW_LINE DEDENT DEDENT
wait ( latch , timeout = None ) : NEW_LINE INDENT if timeout is None : NEW_LINE INDENT timeout = None NEW_LINE DEDENT else : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT if timeout is None : NEW_LINE INDENT timeout = None NEW_LINE DEDENT else : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT if timeout is not None : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT else : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT if timeout is not None : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT if timeout is not None : NEW_LINE INDENT timeout = int ( timeout ) NEW_LINE DEDENT return timeout NEW_LINE DEDENT
wait ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . wait ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
drain_queue ( self , queue ) : NEW_LINE INDENT if not queue : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if queue . size ( ) == 0 : NEW
prefetch ( self , prefetch ) : NEW_LINE INDENT if prefetch is not None : NEW_LINE INDENT return prefetch NEW_LINE DEDENT if prefetch is None : NEW_LINE INDENT return None NEW_LINE DEDENT return prefetch NEW_LINE DEDENT


public public void onNext ( Notification notification ) { if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } if ( notification == null ) { return ; } }
void onError ( Throwable throwable ) { if ( throwable == null ) { return ; } if ( throwable . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } if ( throwable . getCause ( ) . getCause ( ) == null ) { return ; } }

public void update ( final AtomicReference < ? extends Disposable > next ) throws ProtocolViolationException { if ( next != null && next != null ) { if ( next != null && next != null ) { throw new ProtocolViolationException ( ) ; } else if ( next != null ) { throw new ProtocolViolationException ( ) ; } else if ( next != null ) { throw new ProtocolViolationException ( ) ; } else { throw new ProtocolViolationException ( ) ; } } }
Subscription cancel ( Subscription subscription ) { if ( subscription == null ) { return null ; } Subscription cancelled = subscription . cancel ( ) ; if ( cancelled == null ) { return null ; } if ( cancelled instanceof Subscription ) { Subscription cancelled = ( Subscription ) cancelled ; } else { Subscription cancelled = ( Subscription ) cancelled ; } return cancelled ; }

sum ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return sum ( values ) NEW_LINE DEDENT DEDENT
def def def def def public public public public public void add def def def def def def public public public public public public void add def def def public public public public public public static public static public static final public static final long [ def def def def def def _ public static public static public static final public static final public static final long [
add ( long n ) : NEW_LINE INDENT if n < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT if n > Long . MAX_VALUE : NEW_LINE INDENT return NEW_LINE DEDENT
static Throwable create ( Throwable throwable ) { if ( throwable == null ) { throw new NullPointerException ( ) ; } if ( throwable instanceof NullPointerException ) { throw ( ( NullPointerException ) throwable ) ; } return throwable ; }
add ( self , list ) : NEW_LINE INDENT self . list . append ( list ) NEW_LINE DEDENT
purge ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _purge ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _purge ( ) NEW_LINE DEDENT DEDENT
ScheduledExecutorService createScheduledExecutorService ( ) { ScheduledExecutorService scheduledExecutorService = Executors . newSingleThreadScheduledExecutor ( ) ; if ( scheduledExecutorService != null ) { return scheduledExecutorService ; } ScheduledExecutorService scheduledExecutorService = Executors . newSingleThreadScheduledExecutor ( ) ; if ( scheduledExecutorService != null ) { return scheduledExecutorService ; } return scheduledExecutorService ; }
setSubscription ( self , subscription ) : NEW_LINE INDENT self . subscriptions . add ( subscription ) NEW_LINE DEDENT
def process_notifications ( self ) : NEW_LINE INDENT while True : NEW_LINE INDENT notifications = self . queue . get_notifications ( ) NEW_LINE if not notifications : NEW_LINE INDENT break NEW_LINE DEDENT if len ( notifications ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT
static RuntimeException wrap ( Throwable throwable ) { if ( throwable instanceof RuntimeException ) { return ( RuntimeException ) throwable ; } else { return new RuntimeException ( throwable ) ; } }

static Throwable wrap ( Throwable throwable ) { if ( throwable == null ) { throw new NullPointerException ( " throwable " ) ; } if ( throwable instanceof Throwable ) { throw ( ( Throwable ) throwable ) ; } return throwable ; }
void clear ( ) { if ( container != null ) { container . dispose ( ) ; container = null ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
subscribe ( self , source ) : NEW_LINE INDENT try : NEW_LINE INDENT source . subscribe ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT return source NEW_LINE DEDENT

static NotificationLite createNotificationLite ( ) { NotificationLite notificationLite = new NotificationLite ( ) ; notificationLite . setCallback ( this ) ; return notificationLite ; }
public static Observer < NotificationLite > createObserver ( ) { return new Observer < NotificationLite > ( ) { @ Override public void notifyObservers ( NotificationLite notification ) { synchronized ( this ) { if ( this . observers != null ) { this . observers . add ( notification ) ; } } } } }


offer ( self , item ) : NEW_LINE INDENT return self . queue . offer ( item ) NEW_LINE DEDENT
static Disposable get ( Container container ) { if ( container == null ) { return null ; } if ( container instanceof Disposable ) { return ( ( Disposable ) container ) . getDisposable ( ) ; } return null ; }
def complete ( self , target ) : NEW_LINE INDENT if self . value is not None : NEW_LINE INDENT return self . value NEW_LINE DEDENT else : NEW_LINE INDENT return self . value NEW_LINE DEDENT DEDENT
complete_target ( self , target ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _complete_target ( target ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _complete_target ( target ) NEW_LINE DEDENT return self . _complete_target ( target ) NEW_LINE DEDENT
complete_target ( self , target ) : NEW_LINE INDENT if self . target is None : NEW_LINE INDENT return NEW_LINE DEDENT self . target = target NEW_LINE return self . target NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
concatenate ( self , item ) : NEW_LINE INDENT if isinstance ( item , Iterable ) : NEW_LINE INDENT return item NEW_LINE DEDENT else : NEW_LINE INDENT return self . _concat ( item ) NEW_LINE DEDENT DEDENT
static Flowable < T > emits ( Flowable < T > source , Comparator < T > comparator ) { Flowable < T > result = Flowable . create ( source ) ; if ( comparator != null ) { result . setComparator ( comparator ) ; } else { result . setComparator ( comparator ) ; } return result ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
boolean addSubscriber ( Subscriber subscriber ) { if ( subscriber == null ) { return false ; } if ( subscriber . isTerminated ( ) ) { return true ; } if ( subscriber . isUnsubscribed ( ) ) { return false ; } if ( subscriber . isUnsubscribed ( ) ) { return true ; } if ( subscriber . isUnsubscribed ( ) ) { return true ; } return false ; }
void removeSubscriber ( Subscriber subscriber ) { if ( subscriber == null ) { return ; } if ( subscriber . isUnsubscribed ( ) ) { return ; } subscriber . unsubscribe ( ) ; }
void observe ( Observable < ConnectableObservable > observable ) { if ( observable instanceof ConnectableObservable ) { ( ( ConnectableObservable ) observable ) . observe ( ) ; } else { Observable < ConnectableObservable > observable = observable ; } }
static < T > T getService ( Class < T > serviceClass ) { return serviceClass . getConstructor ( ) . newInstance ( ) ; }
set_network_round_trip_delay ( self , round_trip_delay ) : NEW_LINE INDENT if round_trip_delay is not None : NEW_LINE INDENT self . _network_round_trip_delay = round_trip_delay NEW_LINE DEDENT DEDENT
def error ( self ) : NEW_LINE INDENT return self . _error ( ) NEW_LINE DEDENT
def delay ( self , response ) : NEW_LINE INDENT return self . _delay ( response ) NEW_LINE DEDENT
create_dir ( self ) : NEW_LINE INDENT self . _mkdir ( ) NEW_LINE self . _mkdir ( ) NEW_LINE self . _mkdir ( ) NEW_LINE DEDENT
static HttpMethod get ( String method ) { if ( method == null || method . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( method . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( method . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } return new HttpMethod ( method ) ; }
get_user_details ( self ) : NEW_LINE INDENT user_details = { } NEW_LINE for user in self . ldapUserDetails : NEW_LINE INDENT user_details [ user ] = self . ldapUserDetails [ user ] NEW_LINE DEDENT return user_details NEW_LINE DEDENT
static byte [ ] encodePassword ( byte [ ] password , byte [ ] salt ) throws NoSuchAlgorithmException { if ( salt == null ) { throw new NoSuchAlgorithmException ( " No salt specified . " ) ; } if ( salt . length == 0 ) { throw new NoSuchAlgorithmException ( " No salt specified . " ) ; } if ( salt . length == 0 ) { throw new NoSuchAlgorithmException ( " No salt specified . " ) ; } if ( salt . length == 0 ) { throw new NoSuchAlgorithmException ( " No salt specified . " ) ; } if ( salt . length == 0 ) { throw new NoSuchAlgorithmException ( " No salt specified . " ) ; } return password ; }
static String encodePassword ( String rawpassword , String salt ) { return rawpassword . replace ( salt , salt ) ; }
check_version ( self ) : NEW_LINE INDENT version = self . _get_version ( ) NEW_LINE if version : NEW_LINE INDENT return version NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_version ( ) NEW_LINE DEDENT DEDENT
static void setSpringVersion ( String springVersion , String springSecurityVersion ) { this . springVersion = springVersion ; this . springSecurityVersion = springSecurityVersion ; }
load_spring_version ( self ) : NEW_LINE INDENT if self . version is not None : NEW_LINE INDENT return self . version NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_attribute_exchange ( self , pattern ) : NEW_LINE INDENT return self . _get_attribute_exchange ( ) NEW_LINE DEDENT



compare ( self , directory , attribute ) : NEW_LINE INDENT if attribute is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( directory , LDAPDirectoryEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT
def Composes an object from the attributes of the given DN .
search ( self , filter ) : NEW_LINE INDENT self . filter = filter NEW_LINE return self . filter NEW_LINE DEDENT
search ( self , filter ) : NEW_LINE INDENT self . filter = filter NEW_LINE return self . filter NEW_LINE DEDENT
extract_code ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . code NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
search ( self ) : NEW_LINE INDENT if self . searchControls : NEW_LINE INDENT return self . searchControls NEW_LINE DEDENT else : NEW_LINE INDENT return self . searchControls NEW_LINE DEDENT DEDENT
public static List < AclImpl > find ( Map < String , AclImpl > aclsMap ) { List < AclImpl > acls = new ArrayList < AclImpl > ( ) ; return aclsMap . values ( ) ; }
def def build_authentication_details ( self , authentication_details ) : NEW_LINE INDENT return self . _build_authentication_details ( authentication_details ) NEW_LINE DEDENT
url ( self ) : NEW_LINE INDENT if self . url is None : NEW_LINE INDENT self . url = None NEW_LINE DEDENT else : NEW_LINE INDENT self . url = self . url . strip ( ) NEW_LINE DEDENT DEDENT
add_api_integration_filter ( self ) : NEW_LINE INDENT if self . api_integration_filter is None : NEW_LINE INDENT self . api_integration_filter = self . api_integration_filter NEW_LINE DEDENT return self . api_integration_filter NEW_LINE DEDENT
add_api_integration_filter ( self , api_integration_filter ) : NEW_LINE INDENT self . api_integration_filter = api_integration_filter NEW_LINE self . api_integration_filter . add_api_integration_filter ( api_integration_filter ) NEW_LINE DEDENT
static TypeResolverBuilder createTypeResolverBuilder ( ) { TypeResolverBuilder builder = new TypeResolverBuilder ( ) ; builder . setTypeResolver ( this ) ; return builder ; }
filter ( springSecurityFilterChain ) : NEW_LINE INDENT return springSecurityFilterChain . filter ( springSecurityFilterChain ) NEW_LINE DEDENT

public public static List < String > map ( List < String > list ) { return new ArrayList < String > ( ) { @ Override public List < String > map ( List < String > list ) { return new ArrayList < > ( ) ; } } }
Cipher createCipher ( ) { Cipher cipher = new Cipher ( ) ; cipher . init ( ) ; return cipher ; }
check_required_properties ( self , properties ) : NEW_LINE INDENT if len ( properties ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( properties ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
authenticate ( self , user ) : NEW_LINE INDENT if not self . authenticated : NEW_LINE INDENT self . authenticated = True NEW_LINE DEDENT else : NEW_LINE INDENT self . authenticated = False NEW_LINE DEDENT return self NEW_LINE DEDENT
static boolean isPrincipalChanged ( Principal principal ) { if ( principal == null ) { return false ; } if ( principal . equals ( principal ) ) { return true ; } if ( principal . equals ( principal ) ) { return true ; } return false ; }
authenticate ( self ) : NEW_LINE INDENT if not self . authenticated : NEW_LINE INDENT self . authenticated = True NEW_LINE DEDENT else : NEW_LINE INDENT self . authenticated = False NEW_LINE DEDENT return self NEW_LINE DEDENT
write ( self , response ) : NEW_LINE INDENT contentWritten = len ( response . content ) NEW_LINE if contentWritten == 0 : NEW_LINE INDENT return NEW_LINE DEDENT contentLength = len ( response . content ) NEW_LINE if contentLength == 0 : NEW_LINE INDENT contentLength = 0 NEW_LINE DEDENT else : NEW_LINE INDENT contentLength = len ( response . content ) NEW_LINE DEDENT return contentLength NEW_LINE DEDENT
createMapping ( ) : NEW_LINE INDENT mapping = new Mapping ( ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping . put ( " prefix " , prefix ) NEW_LINE mapping .
validate_credentials ( self , credentials ) : NEW_LINE INDENT if credentials is None : NEW_LINE INDENT credentials = { } NEW_LINE DEDENT else : NEW_LINE INDENT credentials = credentials . copy ( ) NEW_LINE DEDENT return credentials NEW_LINE DEDENT
update_default_values ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . default_values = self . default_values NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
update_default_values ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . default_values = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . default_values = { } NEW_LINE DEDENT DEDENT
create_user_password ( self , user , password ) : NEW_LINE INDENT if password is None : NEW_LINE INDENT password = getpass . getuser ( ) NEW_LINE DEDENT else : NEW_LINE INDENT password = getpass . getuser ( ) NEW_LINE DEDENT if password is not None : NEW_LINE INDENT return password NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
remember_cookie ( self , name , value ) : NEW_LINE INDENT cookie = self . cookies . get ( name ) NEW_LINE if cookie is not None : NEW_LINE INDENT return cookie . value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
decodeCookie ( self , cookies ) : NEW_LINE INDENT if not cookies : NEW_LINE INDENT return None NEW_LINE DEDENT cookies = cookies . copy ( ) NEW_LINE for cookie in cookies : NEW_LINE INDENT cookies . remove ( cookie ) NEW_LINE DEDENT return cookies NEW_LINE DEDENT
set_cookie ( self , cookie ) : NEW_LINE INDENT if cookie is None : NEW_LINE INDENT return NEW_LINE DEDENT self . cookie = cookie NEW_LINE DEDENT
inject ( self , controller ) : NEW_LINE INDENT self . controller = controller NEW_LINE return self . controller . inject ( ) NEW_LINE DEDENT

get_port ( self ) : NEW_LINE INDENT port = self . port NEW_LINE if port is None : NEW_LINE INDENT port = self . port NEW_LINE DEDENT return port NEW_LINE DEDENT
get_principals ( self ) : NEW_LINE INDENT principals = [ ] NEW_LINE for user in self . users : NEW_LINE INDENT principals . append ( user . getPrincipal ( ) ) NEW_LINE DEDENT return principals NEW_LINE DEDENT
request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT DEDENT
login ( self , principal , credential ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _login ( principal , credential ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _login ( principal , credential ) NEW_LINE DEDENT DEDENT

create_context ( self ) : NEW_LINE INDENT context = self . _create_context ( ) NEW_LINE if context is None : NEW_LINE INDENT context = self . _create_context ( ) NEW_LINE DEDENT return context NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
process_end_tag ( self , end_tag ) : NEW_LINE INDENT if end_tag is not None : NEW_LINE INDENT return self . process_end_tag ( end_tag ) NEW_LINE DEDENT return self . process_end_tag ( end_tag ) NEW_LINE DEDENT
PopulateUsers ( self ) : NEW_LINE INDENT users = [ ] NEW_LINE for user in self . users . values ( ) : NEW_LINE INDENT users . append ( user ) NEW_LINE DEDENT return users NEW_LINE DEDENT
static UserDetails getUserDetails ( ) { UserDetails userDetails = new UserDetails ( ) ; if ( userDetails != null ) { return userDetails ; } return null ; }
def add_additional_parameters ( self ) : NEW_LINE INDENT params = { } NEW_LINE params = { } NEW_LINE params = { } NEW_LINE params . update ( self . params ) NEW_LINE params . update ( params ) NEW_LINE return params NEW_LINE DEDENT
proxy ( self , * args , ** kwargs ) : NEW_LINE INDENT proxy = self . _proxy ( * args , ** kwargs ) NEW_LINE if proxy : NEW_LINE INDENT return proxy NEW_LINE DEDENT else : NEW_LINE INDENT return self . _proxy ( * args , ** kwargs ) NEW_LINE DEDENT DEDENT
def def process_service_ticket ( self , request ) : NEW_LINE INDENT if request . is_eligible ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
is_authenticated ( self ) : NEW_LINE INDENT if self . authenticated : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def _get_proxy_proxy_proxy_receptor ( self ) : NEW_LINE INDENT return self . _proxy_receptor . is_eligible_proxy_request ( ) NEW_LINE DEDENT
root ( self ) : NEW_LINE INDENT root = self . _root ( ) NEW_LINE if root is None : NEW_LINE INDENT root = self . _root ( ) NEW_LINE DEDENT return root NEW_LINE DEDENT
static void update ( String url ) { if ( url == null ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } if ( url . endsWith ( " / " ) ) { return ; } }
def encode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _encode ( ) NEW_LINE DEDENT except UnicodeEncodeError : NEW_LINE INDENT return self . _encode ( ) NEW_LINE DEDENT DEDENT
List < GrantedAuthority > getAuthorities ( ) { List < GrantedAuthority > authorities = new ArrayList < GrantedAuthority > ( ) ; for ( int i = 0 ; i < Authorities . size ( ) ; i ++ ) { authorities . add ( Authorities . get ( i ) ) ; } return authorities ; }
static UserDetails retrieveUserDetails ( String username ) { UserDetails userDetails = null ; if ( username != null ) { userDetails = new UserDetails ( username ) ; } else { userDetails = new UserDetails ( ) ; } return userDetails ; }
def get_user_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _user_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _user_name NEW_LINE DEDENT DEDENT
static byte [ ] toByteArray ( byte [ ] array ) { if ( array == null ) { return new byte [ 0 ] ; } if ( array . length == 0 ) { return new byte [ 0 ] ; } return array ; }
static byte [ ] extractBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
public public static Map < String , GrantedAuthorities > map ( String [ ] attributes ) { return new HashMap < String , Object > ( ) { @ Override public Map < String , Object > map ( String [ ] attributes ) { return new HashMap < String , Object > ( ) ; } } }
static GrantedAuthority [ ] convert ( Map < String , GrantedAuthority > map ) { if ( map == null ) { return new GrantedAuthority [ 0 ] ; } return map . values ( ) ; }
the given value to a collection of Granted Authorities .
the given value to a collection of Granted Authorities adding the result to the given result collection .
get_user_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . user_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static Object getSharedObject ( ) { if ( sharedObject == null ) { sharedObject = new Object ( ) ; } return sharedObject ; }
redirect_to_https ( self , request ) : NEW_LINE INDENT if request . is_secure ( ) : NEW_LINE INDENT return self . _redirect_to_https ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _redirect_to_https ( request ) NEW_LINE DEDENT DEDENT
static < T extends AspectJ > T method ( Class < T > clazz ) { return clazz . getConstructor ( ) . newInstance ( ) ; }
static String create ( String user , String role ) { if ( role == null || role . length ( ) == 0 ) { return null ; } if ( role . length ( ) == 0 ) { return null ; } if ( role . length ( ) == 0 ) { return null ; } if ( role . length ( ) == 1 ) { return null ; } if ( role . length ( ) == 2 ) { return null ; } if ( role . length ( ) == 1 ) { return null ; } if ( role . length ( ) == 2 ) { return null ; } return role ; }
create_user_role_name ( self ) : NEW_LINE INDENT if self . roles . size ( ) > 1 : NEW_LINE INDENT return self . roles [ 0 ] NEW_LINE DEDENT elif self . roles . size ( ) > 1 : NEW_LINE INDENT return self . roles [ 0 ] NEW_LINE DEDENT return self . roles [ 0 ] NEW_LINE DEDENT
void setSeriesId ( String seriesId ) { this . seriesId = seriesId ; if ( this . seriesId != null ) { this . seriesId = this . seriesId ; } }
public public public void add ( final String token , final String token ) { if ( token != null ) { if ( token != null ) { if ( token != null ) { if ( token != null ) { token . setSeriesNumber ( token ) ; token . setSeriesNumber ( token . seriesNumber ) ; token . setSeriesNumber ( token . seriesNumber ) ; } else { token . setSeriesNumber ( token . seriesNumber ) ; } } } } } }
switch_to_user ( self , user_id ) : NEW_LINE INDENT if user_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT if not user_id . isdigit ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not user_id . isdigit ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not user_id . isdigit ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not user_id . isdigit ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not user_id . isdigit ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return user_id NEW_LINE DEDENT
exit ( self , user = None ) : NEW_LINE INDENT if user is None : NEW_LINE INDENT user = self . user NEW_LINE DEDENT else : NEW_LINE INDENT user = self . user NEW_LINE DEDENT if user is not None : NEW_LINE INDENT user . exit ( ) NEW_LINE DEDENT DEDENT
exit_user_processing ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . exit_user_processing ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . exit_user_processing ( ) NEW_LINE DEDENT DEDENT
static final int [ ] public_index_page ( ) { return public_index_page ; }

validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _validate ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _validate ( ) NEW_LINE DEDENT DEDENT
authorization_decision ( self , expression ) : NEW_LINE INDENT if expression is not None : NEW_LINE INDENT return self . authorization_decision ( expression ) NEW_LINE DEDENT return self . authorization_decision ( expression ) NEW_LINE DEDENT
authorization ( self ) : NEW_LINE INDENT url = self . url NEW_LINE method = self . method NEW_LINE if method is None : NEW_LINE INDENT method = ' GET ' NEW_LINE DEDENT if method == ' GET ' : NEW_LINE INDENT method = ' POST ' NEW_LINE DEDENT if method == ' POST ' : NEW_LINE INDENT method = ' PUT ' NEW_LINE DEDENT if method == ' DELETE ' : NEW_LINE INDENT method = ' DELETE ' NEW_LINE DEDENT if method == ' GET ' : NEW_LINE INDENT method = ' GET ' NEW_LINE DEDENT if method == ' POST ' : NEW_LINE INDENT method = ' POST ' NEW_LINE DEDENT if method == ' PUT ' : NEW_LINE INDENT method = ' PUT ' NEW_LINE DEDENT if method == ' DELETE ' : NEW_LINE INDENT method = ' DELETE ' NEW_LINE DEDENT if method == ' POST ' : NEW_LINE INDENT method = ' POST
extract_ authorities ( self ) : NEW_LINE INDENT authorities = [ ] NEW_LINE for authority in self . authorities : NEW_LINE INDENT authorities . append ( authority ) NEW_LINE DEDENT return authorities NEW_LINE DEDENT
def def generate_token ( self , token ) : NEW_LINE INDENT token = self . _generate_token ( token ) NEW_LINE return self . _generate_token ( token ) NEW_LINE DEDENT
get_permission_admin_page ( self , contact ) : NEW_LINE INDENT return self . _get_permission_admin_page ( contact ) NEW_LINE DEDENT
add_permission_page ( self ) : NEW_LINE INDENT self . add_permission_page = True NEW_LINE self . add_permission_page = False NEW_LINE return self . add_permission_page NEW_LINE DEDENT
submit_add_permission ( self ) : NEW_LINE INDENT self . _add_permission ( ) NEW_LINE self . _add_permission ( ) NEW_LINE self . _add_permission ( ) NEW_LINE DEDENT
delete_permission ( self , permission ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _delete_permission ( permission ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _delete_permission ( permission ) NEW_LINE DEDENT DEDENT
static String defaultRolePrefix ( String defaultRolePrefix ) { if ( defaultRolePrefix != null ) { return defaultRolePrefix ; } else { return " " ; } }
static UserDetailsResourceFactoryBean create ( String resource ) { if ( resource == null ) { throw new IllegalArgumentException ( ) ; } return new UserDetailsResourceFactoryBean ( resource ) ; }
get_values_for_attribute ( self , attribute ) : NEW_LINE INDENT if attribute is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_first_attribute_value ( self , attribute_name ) : NEW_LINE INDENT if attribute_name is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return getattr ( self , attribute_name ) NEW_LINE DEDENT DEDENT
static byte [ ] getBytes ( String str ) { if ( str == null ) { return null ; } if ( str . length ( ) == 0 ) { return new byte [ 0 ] ; } if ( str . length ( ) == 1 ) { return new byte [ 0 ] ; } if ( str . length ( ) == 2 ) { return new byte [ 0 ] ; } return new byte [ 0 ] ; }
decode ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT else : NEW_LINE INDENT return self . _decode ( bytes ) NEW_LINE DEDENT DEDENT
get_parameter_names ( self ) : NEW_LINE INDENT if self . parameter_names is None : NEW_LINE INDENT return self . parameter_names NEW_LINE DEDENT return self . parameter_names NEW_LINE DEDENT
create_new_instance ( self , username , email ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_instance ( username , email ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_instance ( username , email ) NEW_LINE DEDENT DEDENT
find_method_inheritance ( self ) : NEW_LINE INDENT return self . method_inheritance_tree . find_method_inheritance ( self ) NEW_LINE DEDENT
secure_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _secure_method ( method ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _secure_method ( method ) NEW_LINE DEDENT DEDENT
_get_configuration_attributes ( self ) : NEW_LINE INDENT return self . _get_configuration_attributes ( ) NEW_LINE DEDENT
boolean matches ( String name ) { if ( name == null || name . length ( ) == 0 ) { return false ; } if ( name . length ( ) == 0 ) { return false ; } return true ; }
def def request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _request ( request ) NEW_LINE DEDENT return self . _request ( request ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def inspect__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def bind__python____python____python____python____python____python____python____python____python__ def def def def def def bind__python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python____python__ def def def def def def bind__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def
publicMethod ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . method NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_authentication_related_data ( self ) : NEW_LINE INDENT if self . authentication_related_data is not None : NEW_LINE INDENT self . authentication_related_data = self . authentication_related_data . copy ( ) NEW_LINE DEDENT DEDENT
public public public static Field locateField ( Class < ? > clazz , String fieldName , Class < ? extends Field > field ) { if ( field == null ) { return null ; } else if ( field == null ) { return null ; } else { return field ; } } }
static ServiceUrl createServiceUrl ( String serviceUrl ) { ServiceUrl serviceUrl = new ServiceUrl ( serviceUrl ) ; serviceUrl . setServiceUrl ( serviceUrl ) ; return serviceUrl ; }
getRedirection ( self ) : NEW_LINE INDENT url = self . getRedirectionUrl ( ) NEW_LINE if url : NEW_LINE INDENT return url NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String getHashPrefix ( String hashPrefix ) { if ( hashPrefix == null ) { return null ; } if ( hashPrefix . length ( ) == 0 ) { return null ; } if ( hashPrefix . length ( ) == 0 ) { return null ; } if ( hashPrefix . length ( ) == 0 ) { return null ; } return hashPrefix ; }
get_error_code ( self , code ) : NEW_LINE INDENT if code == 403 : NEW_LINE INDENT return '403 Forbidden ' NEW_LINE DEDENT elif code == 401 : NEW_LINE INDENT return '403 Forbidden ' NEW_LINE DEDENT elif code == 403 : NEW_LINE INDENT return '403 Forbidden ' NEW_LINE DEDENT else : NEW_LINE INDENT return '403 Forbidden ' NEW_LINE DEDENT DEDENT
static List < String > filterErrors ( List < String > errors ) { List < String > filterErrors = new ArrayList < String > ( ) ; for ( String error : errors ) { filterErrors . add ( error ) ; } return filterErrors ; }


static AccessDecisionManager createAccessDecisionManager ( ) { AccessDecisionManager accessDecisionManager = new AccessDecisionManager ( ) ; if ( accessDecisionManager . isEnabled ( ) ) { return accessDecisionManager ; } return accessDecisionManager ; }
static Set < GrantedAuthority > convert ( List < GrantedAuthority > authorities ) { Set < GrantedAuthority > set = new HashSet < GrantedAuthority > ( ) ; for ( GrantedAuthority grantedAuthority : authorities ) { set . add ( grantedAuthority ) ; } return set ; }
static boolean is_constant ( String value ) { if ( value == null ) { return false ; } if ( value . length ( ) == 0 ) { return false ; } if ( value . length ( ) == 0 ) { return false ; } return true ; }
def def _get_failure_destination_url ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return urllib . parse . urljoin ( self . failure_url , self . failure_url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . failure_url NEW_LINE DEDENT DEDENT
resolve ( self , input ) : NEW_LINE INDENT if isinstance ( input , str ) : NEW_LINE INDENT return input NEW_LINE DEDENT else : NEW_LINE INDENT return self . _resolve ( input ) NEW_LINE DEDENT DEDENT
def def get_url_fragment ( url ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse ( url ) . fragment NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
isAbsolute ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse ( url ) . scheme NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
iter_patterns ( self , patterns ) : NEW_LINE INDENT if not patterns : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( patterns ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static String convert ( String rawType , String type ) { if ( rawType == null ) { throw new IllegalArgumentException ( ) ; } if ( rawType . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( rawType . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( rawType . length ( ) == 2 ) { throw new IllegalArgumentException ( ) ; } if ( rawType . length ( ) == 3 ) { throw new IllegalArgumentException ( ) ; } return type ; }
add_acl_entry ( self , acl_entry ) : NEW_LINE INDENT if acl_entry is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAcl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAcl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAcl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAclEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAclEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAclEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAclEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( acl_entry , MutableAclEntry ) : NEW_LINE INDENT return NEW_LINE DEDENT
create_acl_object_identity ( self , acl_object_identity ) : NEW_LINE INDENT self . acl_object_identity = acl_object_identity NEW_LINE self . acl_object_identity . sid = acl_object_identity . sid NEW_LINE DEDENT
update_acl_object_identity ( acl_object_identity ) : NEW_LINE INDENT if acl_object_identity is None : NEW_LINE INDENT acl_object_identity = acl_object_identity NEW_LINE DEDENT else : NEW_LINE INDENT acl_object_identity = acl_object_identity . clone ( ) NEW_LINE acl_object_identity . set_acl_sid ( acl_object_identity . get_acl_sid ( ) ) NEW_LINE acl_object_identity . set_acl_sid ( acl_object_identity . get_acl_sid ( ) ) NEW_LINE acl_object_identity . set_acl_sid ( acl_object_identity . get_acl_sid ( ) ) NEW_LINE acl_object_identity . set_acl_sid ( acl_object_identity . get_acl_sid ( ) ) NEW_LINE DEDENT return acl_object_identity NEW_LINE DEDENT
store_current_request ( self ) : NEW_LINE INDENT request = self . request NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . request is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . request is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . request NEW_LINE DEDENT
matcher ( self , method , patterns ) : NEW_LINE INDENT if len ( patterns ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( patterns ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( patterns ) == 1 : NEW_LINE INDENT return patterns [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
matchesExchange ( exchange ) : NEW_LINE INDENT if exchange is None : NEW_LINE INDENT return False NEW_LINE DEDENT if exchange is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
encrypt ( self , text ) : NEW_LINE INDENT if isinstance ( text , six . string_types ) : NEW_LINE INDENT text = text . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( text , six . string_types ) : NEW_LINE INDENT text = text . decode ( ' utf - 8' ) NEW_LINE DEDENT return text NEW_LINE DEDENT
encrypt ( text ) : NEW_LINE INDENT if isinstance ( text , str ) : NEW_LINE INDENT return text NEW_LINE DEDENT else : NEW_LINE INDENT return text NEW_LINE DEDENT DEDENT
encrypt ( self , text ) : NEW_LINE INDENT if len ( text ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif len ( text ) == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif len ( text ) == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
write_header_value ( self , header_value ) : NEW_LINE INDENT if header_value is None : NEW_LINE INDENT header_value = header_value NEW_LINE DEDENT else : NEW_LINE INDENT header_value = header_value NEW_LINE DEDENT return header_value NEW_LINE DEDENT
static String getTargetUrl ( ) { if ( targetUrl == null ) { return " " ; } if ( targetUrl == null ) { return " " ; } return targetUrl ; }
static String getTargetUrl ( ) { if ( targetUrl == null ) { return " " ; } if ( targetUrl . isEmpty ( ) ) { return " " ; } return targetUrl ; }
set_target_url ( self , target_url ) : NEW_LINE INDENT self . target_url = target_url NEW_LINE if self . target_url is not None : NEW_LINE INDENT self . target_url = self . target_url NEW_LINE DEDENT DEDENT
build_full_directory_hierarchy ( self ) : NEW_LINE INDENT return self . _build_full_directory_hierarchy ( ) NEW_LINE DEDENT
def public static String getDistinguishedName ( String username ) { if ( username == null ) { return null ; } else { return username ; } }
static void createSharedObjects ( ) { for ( int i = 0 ; i < sharedObjects . size ( ) ; i ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int i = 0 ; i < sharedObjects . size ( ) ; i ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int j = 0 ; j < sharedObjects . size ( ) ; j ++ ) { for ( int k = 0 ; k <
login_config_url ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . config . url NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . config . url NEW_LINE DEDENT DEDENT
def get_current_date ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _current_date NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _current_date NEW_LINE DEDENT DEDENT
parse_date ( self , formatters ) : NEW_LINE INDENT if formatters : NEW_LINE INDENT return self . _parse_date ( formatters ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _parse_date ( formatters ) NEW_LINE DEDENT DEDENT
update_cache ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _update_cache ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

security_name ( self , subject ) : NEW_LINE INDENT security_name = self . security_name ( subject ) NEW_LINE return security_name NEW_LINE DEDENT
get_websphere_group_names ( self , security_name ) : NEW_LINE INDENT group_names = [ ] NEW_LINE for security_name in self . security_names : NEW_LINE INDENT group_names . append ( security_name ) NEW_LINE DEDENT for security_name in self . security_names : NEW_LINE INDENT group_names . append ( security_name ) NEW_LINE DEDENT return group_names NEW_LINE DEDENT
password ( self , username , password ) : NEW_LINE INDENT if username is None : NEW_LINE INDENT return None NEW_LINE DEDENT if password is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT

customise ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many arguments . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many arguments . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many arguments . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many arguments . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many arguments . " ) NEW_LINE DEDENT DEDENT
def def public public public public public public public final public Authentication authenticate ( final Authentication authentication , final Authentication authentication , final Authentication authentication , final Authentication authentication ) throws AuthenticationException { if ( authentication . getPrincipal ( ) !=
def def def get_first_filter_chain ( self ) : NEW_LINE INDENT return self . filter_chain . filter_chain . filter_chain . filter_chain ( ) NEW_LINE DEDENT
test_convenience_method ( self ) : NEW_LINE INDENT def test_convenience_method ( self ) : NEW_LINE INDENT self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_LINE self . assertIsNotNone ( self . _convenience ) NEW_
override_application_context ( self , application_context ) : NEW_LINE INDENT self . application_context = application_context NEW_LINE return self . application_context NEW_LINE DEDENT
def def get_full_dn ( self ) : NEW_LINE INDENT name = self . name NEW_LINE if self . base_name is not None : NEW_LINE INDENT name = self . base_name NEW_LINE DEDENT else : NEW_LINE INDENT name = self . base_name NEW_LINE DEDENT return name NEW_LINE DEDENT
set_session_attributes ( self , session_attributes ) : NEW_LINE INDENT self . session_attributes = session_attributes NEW_LINE DEDENT
def preemptive_http_basic_authentication ( self , request ) : NEW_LINE INDENT if self . http_basic_authentication is not None : NEW_LINE INDENT return self . http_basic_authentication ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . http_basic_authentication ( request ) NEW_LINE DEDENT DEDENT
def add_default_filters ( request , filters ) : NEW_LINE INDENT request . filters . add ( filters ) NEW_LINE return request NEW_LINE DEDENT
apply_filters ( request , filters ) : NEW_LINE INDENT if filters is None : NEW_LINE INDENT filters = [ ] NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT filters = [ ] NEW_LINE DEDENT for filter in filters : NEW_LINE INDENT filters . append ( filter ) NEW_LINE DEDENT return filters NEW_LINE DEDENT
def def def def def def get_basic_basic_auth def get_http_basic_basic_authentication_authentication_authentication_scheme ( self ) : NEW_LINE def get_basic_basic_authentication ( self ) : NEW_LINE def get_basic_basic_authentication ( self ) : NEW_LINE def get_basic_basic_authentication_scheme ( self ) : NEW_LINE INDENT return self . _basic_authentication_authentication_scheme ( ) NEW_LINE DEDENT def get_basic_authentication ( self ) : NEW_LINE INDENT return self . _basic_authentication_scheme ( ) NEW_LINE DEDENT
def def create_authentication_scheme ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_authentication_scheme ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_authentication_scheme ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
redirect_config ( self ) : NEW_LINE INDENT if self . redirect_config : NEW_LINE INDENT return self . redirect_config NEW_LINE DEDENT return None NEW_LINE DEDENT
def def get_default_charset ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_default_charset ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _get_default_charset ( ) NEW_LINE DEDENT DEDENT
create_object_mapper ( self , object_mapper ) : NEW_LINE INDENT self . object_mapper = object_mapper NEW_LINE return self . object_mapper NEW_LINE DEDENT
create_object_mapper_factory ( self ) : NEW_LINE INDENT mapper = self . _create_object_mapper_factory ( ) NEW_LINE if mapper is None : NEW_LINE INDENT mapper = self . _create_object_mapper_factory ( ) NEW_LINE DEDENT return mapper NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def set_session_config ( self , session_config ) : NEW_LINE INDENT self . session_config = session_config NEW_LINE DEDENT
def def set_object_mapper_config ( self , object_mapper_config ) : NEW_LINE INDENT self . object_mapper_config = object_mapper_config NEW_LINE self . object_mapper_config = object_mapper_config NEW_LINE DEDENT
def def set_json_config ( self , config ) : NEW_LINE INDENT self . config = config NEW_LINE return self . config NEW_LINE DEDENT
set_config ( self , config ) : NEW_LINE INDENT self . config = config NEW_LINE DEDENT
set_encoder_config ( self , encoder_config ) : NEW_LINE INDENT self . encoder_config = encoder_config NEW_LINE DEDENT
set_header_config ( self , header_config ) : NEW_LINE INDENT self . header_config = header_config NEW_LINE DEDENT
set_async_config ( self , async_config ) : NEW_LINE INDENT self . async_config = async_config NEW_LINE DEDENT
set_mock_mvc_config ( self , config ) : NEW_LINE INDENT self . _mock_mvc_config = config NEW_LINE return self . _mock_mvc_config NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_parameter_config ( self , parameter_config ) : NEW_LINE INDENT self . parameter_config = parameter_config NEW_LINE DEDENT
set_matcher_config ( self , matcher_config ) : NEW_LINE INDENT self . matcher_config = matcher_config NEW_LINE DEDENT

parse_namespaces ( self ) : NEW_LINE INDENT if self . _namespaces is None : NEW_LINE INDENT self . _namespaces = { } NEW_LINE DEDENT return self . _namespaces NEW_LINE DEDENT
_declares_namespace ( self , namespace ) : NEW_LINE INDENT if namespace is None : NEW_LINE INDENT namespace = self . namespace NEW_LINE DEDENT return namespace NEW_LINE DEDENT
def def parse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_request ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_request ( ) NEW_LINE DEDENT DEDENT
def set_default_headers ( self , builder ) : NEW_LINE INDENT if self . default_headers is not None : NEW_LINE INDENT self . default_headers = self . default_headers NEW_LINE DEDENT DEDENT
def def set_default_http_proxy ( self ) : NEW_LINE INDENT self . _http_proxy = None NEW_LINE self . _http_proxy = None NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_header ( self , multipart ) : NEW_LINE INDENT if not self . _headers : NEW_LINE INDENT self . _headers = [ ] NEW_LINE DEDENT self . _headers . append ( multipart ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def set_ntlm_credentials ( self , host , port = None , port = None ) : NEW_LINE INDENT if port is not None : NEW_LINE INDENT port = int ( port ) NEW_LINE DEDENT elif port is not None : NEW_LINE INDENT port = int ( port ) NEW_LINE DEDENT else : NEW_LINE INDENT port = None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
reset_static_configurations ( self ) : NEW_LINE INDENT self . static_configurations . clear ( ) NEW_LINE self . static_configurations . addAll ( self . static_configurations ) NEW_LINE DEDENT
set_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return NEW_LINE DEDENT self . header = header NEW_LINE DEDENT
def def get_actual_response ( self ) : NEW_LINE INDENT return self . response NEW_LINE DEDENT
def is_cookie def is_cookie_satisfied ( self , cookie , matcher ) : NEW_LINE INDENT return cookie . matches ( matcher ) NEW_LINE DEDENT
boolean comment ( String cookie ) { if ( cookie == null ) { return false ; } if ( cookie . length ( ) == 0 ) { return true ; } if ( cookie . length ( ) == 1 ) { return true ; } if ( cookie . length ( ) == 2 ) { return true ; } if ( cookie . length ( ) == 3 ) { return true ; } return false ; }
get_expiry_date ( self , cookie ) : NEW_LINE INDENT expiry_date = cookie . expiry_date NEW_LINE if expiry_date is None : NEW_LINE INDENT return None NEW_LINE DEDENT return expiry_date NEW_LINE DEDENT
public public static boolean isDomainMatch ( String cookie , String cookie ) { if ( cookie == null ) { return false ; } if ( cookie . length ( ) == 0 ) { return false ; } return true ; }
boolean matches ( Cookie cookie ) { if ( cookie == null ) { return false ; } if ( cookie . getPath ( ) == null ) { return false ; } if ( cookie . getPath ( ) . length == 0 ) { return false ; } if ( cookie . getPath ( ) . length == 0 ) { return false ; } return true ; }
boolean isSecured ( String cookie ) { if ( cookie == null ) { return false ; } if ( cookie . length ( ) == 0 ) { return false ; } if ( cookie . length ( ) == 0 ) { return false ; } return true ; }
def public public static boolean isHttpOnly ( String cookie ) { return this . matcher . matcher . matches ( cookie ) ; }
boolean matches ( String cookie ) { if ( cookie == null ) { return false ; } if ( cookie . length ( ) == 0 ) { return true ; } if ( cookie . length ( ) == 1 ) { return true ; } if ( cookie . length ( ) == 2 ) { return true ; } return false ; }
max_age ( self , cookie ) : NEW_LINE INDENT max_age = self . max_age ( cookie ) NEW_LINE return max_age NEW_LINE DEDENT
def def def _verify_response_headers ( self ) : NEW_LINE INDENT response = self . response . headers . get ( ' Content - Type ' , ' ' ) NEW_LINE if self . response . headers . get ( ' Content - Type ' , ' ' ) == ' text / plain ' : NEW_LINE INDENT response . headers . put ( ' Content - Type ' , ' text / plain ' ) NEW_LINE DEDENT return response . headers . get ( ' Content - Type ' , ' text / plain ' ) NEW_LINE DEDENT
def def def def def def response___python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python__ def def def def def def response___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def def def _
def def get_response_cookie ( self , name , value ) : NEW_LINE INDENT return self . response_cookie . get ( name , value ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
JsonPath ( self , path ) : NEW_LINE INDENT if isinstance ( path , JsonPath ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
json_path ( self , parser_type ) : NEW_LINE INDENT if isinstance ( parser_type , basestring ) : NEW_LINE INDENT parser = json . loads ( parser_type ) NEW_LINE DEDENT else : NEW_LINE INDENT parser = json . loads ( parser_type ) NEW_LINE DEDENT return json . dumps ( parser ) NEW_LINE DEDENT
def def default_stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _default_stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _default_stream NEW_LINE DEDENT DEDENT
log ( self , request , response ) : NEW_LINE INDENT logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE logger . info ( self . __class__ . __name__ ) NEW_LINE DEDENT
get_request_type ( self , request_type ) : NEW_LINE INDENT request_type = request_type . lower ( ) NEW_LINE return request_type NEW_LINE DEDENT
multipart_boundary ( self ) : NEW_LINE INDENT if self . multipart_boundary : NEW_LINE INDENT return self . multipart_boundary NEW_LINE DEDENT return self . multipart_boundary NEW_LINE DEDENT
def request_request_attribute ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request = self . request NEW_LINE if request . method == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return request NEW_LINE DEDENT else : NEW_LINE INDENT return request NEW_LINE DEDENT DEDENT
def def send_request_headers ( self , request ) : NEW_LINE INDENT headers = { } NEW_LINE headers = { } NEW_LINE for header in request . headers : NEW_LINE INDENT headers [ header ] = request . headers . get ( header ) NEW_LINE DEDENT return headers NEW_LINE DEDENT
send_multipart_form_data ( self , multipart_form_data ) : NEW_LINE INDENT if multipart_form_data is None : NEW_LINE INDENT multipart_form_data = { } NEW_LINE DEDENT else : NEW_LINE INDENT multipart_form_data = multipart_form_data NEW_LINE DEDENT return multipart_form_data NEW_LINE DEDENT
add_result_handler ( self , result_handler ) : NEW_LINE INDENT self . result_handler = result_handler NEW_LINE return self . result_handler NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_parameters ( self , parameters ) : NEW_LINE INDENT if len ( parameters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 6 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static HttpClient createHttpClient ( ) { HttpClient client = null ; try { client = new HttpClient ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( e ) ; } return client ; }

def _get_boolean_path_expression ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return Boolean . valueOf ( self . path_expression ) NEW_LINE DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT


def get_short_path_expression ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_short_path_expression ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_short_expression ( ) NEW_LINE DEDENT DEDENT
def def get_float_path_expression ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return float ( self . path_expression ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return float ( self . path_expression ) NEW_LINE DEDENT return self . path_expression NEW_LINE DEDENT
_get_double_path_expression ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . path_expression NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . path_expression NEW_LINE DEDENT DEDENT

def get_path_expression ( Object path ) : NEW_LINE INDENT if isinstance ( path , Object . class ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_path_expression_map ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _path_map . get ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _path_map . get ( ) NEW_LINE DEDENT DEDENT
_get_xml_document ( self ) : NEW_LINE INDENT xml = self . _get_xml_document ( ) NEW_LINE if not xml : NEW_LINE INDENT return None NEW_LINE DEDENT return xml NEW_LINE DEDENT
public static Object request ( String request ) throws IOException { return new ObjectMapper ( ) . readValue ( request , Object . class ) ; }
def def send_cookie ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT elif request . method == ' GET ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT DEDENT
send_request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT elif request . method == ' DELETE ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_strategy ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def def def create ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python__ def def def def def create___python____python____python____python____python____python____python__ def def def def def create___python____python____python____python____python____python__ def def def def create___python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python__ def def def _ def create___python____python____python____python____python____python____python____python__ def def def create___python____python____python____python____python____python____python__ def def def _ def create___python____python____python____python____python____python____python____python__ def def def create___python__ def _
static Cookies create ( ) { Cookies cookies = new Cookies ( ) ; cookies . setName ( " Cookies " ) ; return cookies ; }
remove_injectors ( self , injectors ) : NEW_LINE INDENT if isinstance ( injectors , dict ) : NEW_LINE INDENT for injectors in injectors . values ( ) : NEW_LINE INDENT self . remove_injectors ( injectors ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for injectors in injectors . values ( ) : NEW_LINE INDENT self . remove_injectors ( injectors ) NEW_LINE DEDENT DEDENT DEDENT

_get_binding ( self ) : NEW_LINE INDENT binding = self . parent . getBinding ( ) NEW_LINE if binding is not None : NEW_LINE INDENT return binding NEW_LINE DEDENT return self . parent . getBinding ( ) NEW_LINE DEDENT
def
clean ( self , bindings ) : NEW_LINE INDENT if not bindings : NEW_LINE INDENT return NEW_LINE DEDENT for binding in bindings . values ( ) : NEW_LINE INDENT if not binding : NEW_LINE INDENT continue NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT continue NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( binding , Binding ) : NEW_LINE INDENT
def def clean ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cache . clear ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _cache . clear ( ) NEW_LINE DEDENT DEDENT
get_dependencies ( self , bindings ) : NEW_LINE INDENT if not bindings : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def createBinding def def def def createBinding def def def def createBinding
def def public public public public public public public public static String [ public public public public public public public String [ public public public public public String [ public public public public String [ public public public public String [ public public public public String [ public String [ public String [ ] getParameterValues ( ) { return public String [ ] getParameterValues ( ) { return this . getParameterValues ( ) ; public String [ ] getParameterValues ( ) { return this . getParameterValues ( ) ; } public String [ ] getParameterValues ( ) { return this . getParameterValues ( ) ; } } } }

static Logger getLogger ( ) { Logger logger = LoggerFactory . getLogger ( getClass ( ) . getName ( ) ) ; if ( logger == null ) { logger = LoggerFactory . getLogger ( getClass ( ) . getName ( ) ) ; } return logger ; }
boolean isBindingAnnotation ( String bindingAnnotation ) { if ( bindingAnnotation == null ) { return false ; } if ( bindingAnnotation . length ( ) == 0 ) { return false ; } if ( bindingAnnotation . length ( ) == 1 ) { return true ; } return false ; }
static boolean overrides ( Class < ? > a , Class < ? > b ) { if ( a . equals ( b ) ) { return true ; } if ( b . equals ( a ) ) { return true ; } if ( b . equals ( a ) ) { return true ; } return false ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static ClassLoader canonicalize ( ClassLoader loader ) { if ( loader == null ) { return null ; } if ( loader . getClass ( ) . getClassLoader ( ) == null ) { return loader ; } return loader . getClass ( ) . getClassLoader ( ) ; }
static boolean isFastClass ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . isInterface ( ) ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } return true ; }
static boolean isCalled ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . getSuperclass ( ) == null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } if ( clazz . getSuperclass ( ) != null ) { return false ; } return true ; }
replaceAnnotations ( self , key , value ) : NEW_LINE INDENT if isinstance ( key , AnnotationType ) : NEW_LINE INDENT return self . replaceAnnotations ( key , value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . replaceAnnotations ( key , value ) NEW_LINE DEDENT DEDENT
public static void register ( final InjectionStep step , final InjectionPoint injectionPoint injectionPoint ) { if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final InjectionPoint injectionPoint = injectionPoint . getMemberInjectionPoint ( ) ; if ( injectionPoint == null ) { return ; } final
static void injectMembers ( Injector injector ) { if ( injector == null ) { return ; } injector . injectMembers ( injector ) ; }
static < T > T getInstance ( Class < T > clazz ) { if ( clazz == null ) { throw new NullPointerException ( " clazz must not be null " ) ; } return clazz . newInstance ( ) ; }


void addScope ( AnnotationScope scope ) { if ( scope == null ) { throw new IllegalArgumentException ( " scope cannot be null . " ) ; } if ( scope . getScope ( ) == null ) { throw new IllegalArgumentException ( " scope cannot be null . " ) ; } if ( scope . getScope ( ) == null ) { throw new IllegalArgumentException ( " scope cannot be null . " ) ; } }
unescaping ( path ) : NEW_LINE INDENT if isinstance ( path , six . string_types ) : NEW_LINE INDENT path = path . decode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( path , six . string_types ) : NEW_LINE INDENT path = path . decode ( ' utf - 8' ) NEW_LINE DEDENT return path NEW_LINE DEDENT
public static Annotation getAnnotation ( Class < ? extends Annotation > annotationClass ) { return new Annotation ( annotationClass ) ; }
boolean isRetained ( Annotation annotation ) { if ( annotation == null ) { return false ; } if ( annotation instanceof RetainedAnnotation ) { RetainedAnnotation ret = ( RetainedAnnotation ) annotation ; return ret . isRetained ( ) ; } return false ; }
scoping ( self ) : NEW_LINE INDENT if self . scoping is not None : NEW_LINE INDENT return self . scoping NEW_LINE DEDENT else : NEW_LINE INDENT return self . scoping NEW_LINE DEDENT DEDENT
get_key ( self ) : NEW_LINE INDENT key = self . key NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return key NEW_LINE DEDENT
String toString ( ) { String name = null ; if ( annotation != null ) { name = annotation . toString ( ) ; } else { name = null ; } return name ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def addBinding ( self , binding ) : NEW_LINE INDENT if self . bindings . containsKey ( binding ) : NEW_LINE INDENT return self . bindings . get ( binding ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . bindings [ binding ] NEW_LINE DEDENT DEDENT

static boolean isScopeAnnotation ( Class < ? > class ) { if ( class . getAnnotation ( Scope . class ) != null ) { return false ; } return class . getAnnotation ( Scope . class ) != null ; }

add_binding ( self , key , value ) : NEW_LINE INDENT if key not in self . bindings : NEW_LINE INDENT self . bindings [ key ] = value NEW_LINE DEDENT else : NEW_LINE INDENT self . bindings [ key ] = value NEW_LINE DEDENT DEDENT
static T newT ( ) { return new T ( ) ; }
def convert_sources_to_strings ( self , sources ) : NEW_LINE INDENT if isinstance ( sources , str ) : NEW_LINE INDENT return sources NEW_LINE DEDENT else : NEW_LINE INDENT return self . _convert_sources_to_strings ( sources ) NEW_LINE DEDENT DEDENT
create_provider ( module ) : NEW_LINE INDENT if isinstance ( module , Provider ) : NEW_LINE INDENT return module NEW_LINE DEDENT else : NEW_LINE INDENT return module . create_provider ( ) NEW_LINE DEDENT DEDENT
void set ( Collection < ? > collection ) { if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 0 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size ( ) == 1 ) { return ; } if ( collection . size (
static boolean isConfigurationException ( ConfigurationException exception ) { if ( exception instanceof ConfigurationException ) { return ( ( ConfigurationException ) exception ) . isConfigurationException ( ) ; } return false ; }
static boolean isAnnotated ( Constructor < ? > constructor ) { if ( constructor == null ) { return false ; } if ( constructor . isAnnotated ( ) ) { return true ; } return false ; }
calculate_dependencies ( self ) : NEW_LINE INDENT dependencies = [ ] NEW_LINE for dependency in self . dependencies : NEW_LINE INDENT dependencies . extend ( dependency . dependencies ) NEW_LINE DEDENT return dependencies NEW_LINE DEDENT
get_non_assisted_dependencies ( self ) : NEW_LINE INDENT dependencies = self . get_dependencies ( ) NEW_LINE if dependencies : NEW_LINE INDENT return dependencies NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
static boolean isOptimized ( Injector injector , Provider < ? extends Injector > injector ) { return injector . isOptimized ( ) ; }
def
static < T > T getInstance ( Class < T > type ) { if ( type == null ) { throw new NullPointerException ( " type is null " ) ; } return type . newInstance ( ) ; }
void addBindingMessage ( Message message ) { if ( message instanceof BindingMessage ) { ( ( BindingMessage ) message ) . addBindingMessage ( ( ( BindingMessage ) message ) ) ; } }
newSetBinder ( self ) : NEW_LINE INDENT return self . newSetBinder ( ) NEW_LINE DEDENT
add ( self , key , value ) : NEW_LINE INDENT if key not in self . set : NEW_LINE INDENT self . set . add ( key , value ) NEW_LINE DEDENT return self . set . add ( key , value ) NEW_LINE DEDENT
filter ( self ) : NEW_LINE INDENT filter = self . filter NEW_LINE if filter is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return filter NEW_LINE DEDENT DEDENT
static boolean isInjectAnnotation ( Annotation annotation ) { if ( annotation == null ) { return false ; } if ( annotation . annotationType ( ) . isAnnotationPresent ( inject . annotationType ( ) ) ) { return true ; } return false ; }
clean ( self ) : NEW_LINE INDENT if self . injection_point is None : NEW_LINE INDENT self . injection_point = None NEW_LINE DEDENT return self . injection_point NEW_LINE DEDENT
clean ( self ) : NEW_LINE INDENT if self . dependencies : NEW_LINE INDENT self . dependencies . clear ( ) NEW_LINE DEDENT return self . dependencies NEW_LINE DEDENT
create_bindings ( self , scanner ) : NEW_LINE INDENT bindings = { } NEW_LINE for key , value in scanner . bindings . items ( ) : NEW_LINE INDENT bindings [ key ] = value NEW_LINE DEDENT return bindings NEW_LINE DEDENT
static Annotation getAnnotation ( @ Nonnull Annotation annotation ) { if ( annotation == null ) { return null ; } if ( annotation . annotationType ( ) == null ) { return null ; } if ( annotation . annotationType ( ) != null ) { return annotation ; } return null ; }
get_line_number ( self , member ) : NEW_LINE INDENT line_number = self . _get_line_number ( member ) NEW_LINE if line_number is None : NEW_LINE INDENT return None NEW_LINE DEDENT return line_number NEW_LINE DEDENT
initialize_lookups ( injector , lookups ) : NEW_LINE INDENT if lookups is None : NEW_LINE INDENT lookups = [ ] NEW_LINE DEDENT if isinstance ( lookups , list ) : NEW_LINE INDENT lookups = [ lookups ] NEW_LINE DEDENT if isinstance ( lookups , dict ) : NEW_LINE INDENT lookups = [ lookups ] NEW_LINE DEDENT if isinstance ( lookups , dict ) : NEW_LINE INDENT lookups = [ lookups ] NEW_LINE DEDENT return lookups NEW_LINE DEDENT
def def process ( self , callable ) : NEW_LINE INDENT if callable is not None : NEW_LINE INDENT return callable ( callable ) NEW_LINE DEDENT else : NEW_LINE INDENT return callable ( callable ) NEW_LINE DEDENT DEDENT
def def _transfers_request ( self , callable ) : NEW_LINE INDENT if callable is not None : NEW_LINE INDENT return callable ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return callable NEW_LINE DEDENT DEDENT
void validate ( Object key , Object value ) { if ( key == null || value == null ) { throw new IllegalArgumentException ( " Key and value must not be null . " ) ; } if ( key == null || value == null ) { throw new IllegalArgumentException ( " Key and value must not be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Value must not be null . " ) ; } }



def
get_strategy ( self , annotation ) : NEW_LINE INDENT return self . _get_strategy ( annotation ) NEW_LINE DEDENT
get_strategy_for_annotation_type ( annotation_type ) : NEW_LINE INDENT if isinstance ( annotation_type , AnnotationType ) : NEW_LINE INDENT return annotation_type NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
void removeStackTrace ( Throwable throwable ) { if ( throwable != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null && throwable . getStackTrace ( ) != null ; }

def format_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _format_message ( message ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT return self . _format_message ( message ) NEW_LINE DEDENT DEDENT
Message create ( ) { return new Message ( ) ; }
static Message createMessage ( String cause ) { if ( cause == null ) { throw new IllegalArgumentException ( ) ; } if ( cause . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( cause . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( cause . length ( ) == 2 ) { throw new IllegalArgumentException ( ) ; } if ( cause . length ( ) == 3 ) { throw new IllegalArgumentException ( ) ; } return new Message ( cause ) ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
is_skipped ( self , className ) : NEW_LINE INDENT if isinstance ( className , six . string_types ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( className , six . string_types ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def _get_non_skipped_module_class_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) { if ( args . length == 0 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 4 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 )
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def add__python__ def def def def def def add__python__ def def def def def ___python____python____python__ def def def def add def _

static Initializable initializable ( Class < ? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( " clazz must not be null " ) ; } if ( clazz . isInterface ( ) ) { throw new IllegalArgumentException ( " clazz must not be null " ) ; } return new Initializable ( clazz ) ; }
static void rethrow ( Throwable throwable ) { if ( throwable instanceof ErrorsException ) { throw ( ( ErrorsException ) throwable ) ; } }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_result ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . result NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . result NEW_LINE DEDENT DEDENT
launder ( throwable ) : NEW_LINE INDENT if isinstance ( throwable , Throwable ) : NEW_LINE INDENT return throwable NEW_LINE DEDENT else : NEW_LINE INDENT return throwable NEW_LINE DEDENT DEDENT
processCommand ( self , cmdCode ) : NEW_LINE INDENT cmd = self . _processCommand ( cmdCode ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd = self . _processCommand ( cmd ) NEW_LINE if not cmd : NEW_LINE INDENT return NEW_LINE DEDENT cmd .
process_default_processor ( self ) : NEW_LINE INDENT if self . processor is None : NEW_LINE INDENT self . processor = self . default_processor NEW_LINE DEDENT else : NEW_LINE INDENT self . processor = self . processor NEW_LINE DEDENT return self . processor NEW_LINE DEDENT
get_processor_by_command_code ( self , cmdCode ) : NEW_LINE INDENT processor = self . get_processor_by_command_code ( cmdCode ) NEW_LINE if processor : NEW_LINE INDENT return processor NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def get ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( self . key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . cache . get ( self . key ) NEW_LINE DEDENT DEDENT
decode_protocol_code ( self , protocol_code ) : NEW_LINE INDENT if protocol_code is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return protocol_code NEW_LINE DEDENT DEDENT
get_all_connections ( self ) : NEW_LINE INDENT connections = [ ] NEW_LINE for poolKey in self . pool . keys ( ) : NEW_LINE INDENT connections . append ( poolKey ) NEW_LINE DEDENT for poolKey in self . pool . keys ( ) : NEW_LINE INDENT connections . append ( poolKey ) NEW_LINE DEDENT return connections NEW_LINE DEDENT
schedule_scan ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _schedule_scan ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _schedule_scan ( ) NEW_LINE DEDENT DEDENT
initialize_connections ( self ) : NEW_LINE INDENT if self . connections is None : NEW_LINE INDENT self . connections = { } NEW_LINE DEDENT self . connections = { } NEW_LINE DEDENT
static int numberOfConnections ( ) { int numberOfConnections = 0 ; for ( int i = 0 ; i < numberOfConnections ; i ++ ) { numberOfConnections += 1 ; } return numberOfConnections ; }
remove_all_connections ( self ) : NEW_LINE INDENT for task in self . connections : NEW_LINE INDENT self . connections . remove ( task ) NEW_LINE DEDENT DEDENT
heal_connections ( self , pool ) : NEW_LINE INDENT if len ( pool ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( pool [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
create_connections ( self ) : NEW_LINE INDENT connections = [ ] NEW_LINE for connection in self . connections : NEW_LINE INDENT connections . append ( connection ) NEW_LINE DEDENT for connection in self . connections : NEW_LINE INDENT connections . append ( connection ) NEW_LINE DEDENT return connections NEW_LINE DEDENT
close_all_connections ( self , address ) : NEW_LINE INDENT try : NEW_LINE INDENT self . close_all_connections ( address ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return NEW_LINE DEDENT self . closed = True NEW_LINE DEDENT
close_connection ( self ) : NEW_LINE INDENT if self . connection : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT
set_attribute ( self , key , value ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return NEW_LINE DEDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
register_interest_user_processor ( self , interest_user_processor ) : NEW_LINE INDENT self . interest_user_processor = interest_user_processor NEW_LINE self . interest_user_processor . register_interest_user_processor ( interest_user_processor ) NEW_LINE DEDENT

dispatch_request_command ( self , request_command ) : NEW_LINE INDENT if request_command is not None : NEW_LINE INDENT return request_command NEW_LINE DEDENT if request_command is not None : NEW_LINE INDENT return request_command NEW_LINE DEDENT elif request_command is not None : NEW_LINE INDENT return request_command NEW_LINE DEDENT DEDENT
deserialize_request_command ( self , request_command ) : NEW_LINE INDENT if request_command is None : NEW_LINE INDENT return None NEW_LINE DEDENT if request_command is not None : NEW_LINE INDENT return request_command NEW_LINE DEDENT return request_command NEW_LINE DEDENT
process_context ( self , context ) : NEW_LINE INDENT context = context . copy ( ) NEW_LINE context . clear ( ) NEW_LINE context . clear ( ) NEW_LINE context . clear ( ) NEW_LINE context . clear ( ) NEW_LINE context . clear ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
debug_log ( self ) : NEW_LINE INDENT if self . debug_log : NEW_LINE INDENT return self . debug_log NEW_LINE DEDENT else : NEW_LINE INDENT return self . debug_log NEW_LINE DEDENT DEDENT
remoting ( self , command ) : NEW_LINE INDENT executor = self . executor NEW_LINE if executor is None : NEW_LINE INDENT executor = self . defaultExecutor NEW_LINE DEDENT if executor == self . defaultExecutor : NEW_LINE INDENT executor = self . defaultExecutor NEW_LINE DEDENT if executor == self . defaultExecutor : NEW_LINE INDENT executor = self . defaultExecutor NEW_LINE DEDENT return executor NEW_LINE DEDENT
callback ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _callback ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _callback ( ) NEW_LINE DEDENT DEDENT
invocation ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
static byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
def from_byte_to_bit_set ( self , byte_to_bit_set ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _from_byte_to_bit_set ( byte_to_bit_set ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
stop_connection ( self ) : NEW_LINE INDENT if self . reconnect_thread is not None : NEW_LINE INDENT self . reconnect_thread . stop ( ) NEW_LINE DEDENT DEDENT
remoting_request ( self ) : NEW_LINE INDENT request = self . request NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT return request NEW_LINE DEDENT

close_connections ( self ) : NEW_LINE INDENT connections = self . _connections NEW_LINE if connections is not None : NEW_LINE INDENT connections . close ( ) NEW_LINE DEDENT return connections NEW_LINE DEDENT
close_connection ( self ) : NEW_LINE INDENT if self . connection : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT
get_system_property ( self ) : NEW_LINE INDENT return self . _get_system_property ( ) NEW_LINE DEDENT
info_log_info ( self ) : NEW_LINE INDENT info_log_info = { } NEW_LINE info_log_info . update ( self ) NEW_LINE info_log_info . update ( self ) NEW_LINE return info_log_info NEW_LINE DEDENT
timeout ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT request = self . request NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT request = self . request NEW_LINE DEDENT return request NEW_LINE DEDENT
get_user_processor ( self ) : NEW_LINE INDENT user_processors = [ ] NEW_LINE for processor in self . _user_processors : NEW_LINE INDENT user_processors . append ( processor ) NEW_LINE DEDENT return user_processors NEW_LINE DEDENT
get_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_default ( self ) : NEW_LINE INDENT return self . get ( ' default ' ) NEW_LINE DEDENT
get_property_value ( self , key ) : NEW_LINE INDENT return self . _get_property_value ( key ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_response_to_application_response ( self , response ) : NEW_LINE INDENT response = self . _convert_response_to_application_response ( response ) NEW_LINE if response : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
static Throwable convertResponse ( String response ) { if ( response == null ) { return null ; } if ( response . length ( ) == 0 ) { return null ; } if ( response . length ( ) == 1 ) { return response ; } if ( response . length ( ) == 2 ) { return response ; } if ( response . length ( ) == 3 ) { return response ; } if ( response . length ( ) == 4 ) { return response ; } if ( response . length ( ) == 5 ) { return response ; } return response ; }
def def error_msg ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . error_msg NEW_LINE DEDENT except ValueError as e : NEW_LINE INDENT return self . error_msg NEW_LINE DEDENT DEDENT
createServerException ( Throwable throwable ) : NEW_LINE INDENT if ( throwable . getCause ( ) != null ) { throw new RuntimeException ( throwable . getCause ( ) ) ; } else if ( throwable . getCause ( ) != null ) { throw new RuntimeException ( throwable . getCause ( ) ) ; } }
trace_log ( self ) : NEW_LINE INDENT if self . trace_log is not None : NEW_LINE INDENT return self . trace_log NEW_LINE DEDENT return self . trace_log NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remote_address ( channel ) : NEW_LINE INDENT try : NEW_LINE INDENT return channel . remote_address NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return channel . remote_address NEW_LINE DEDENT DEDENT
parse_local_address ( self , channel ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_local_address ( channel ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_local_address ( ) NEW_LINE DEDENT DEDENT
static String getRemoteHostIp ( Channel channel ) { String remoteHostIp = channel . getRemoteHostIp ( ) ; if ( remoteHostIp != null ) { return remoteHostIp ; } else { return null ; } }
static String getRemoteHostname ( Channel channel ) { if ( channel == null ) { return null ; } String remoteHostname = channel . getRemoteHostname ( ) ; if ( remoteHostname == null ) { return null ; } return remoteHostname ; }
static String getLocalHostIp ( Channel channel ) { if ( channel == null ) { return null ; } String hostIp = channel . getHostIp ( ) ; if ( hostIp == null ) { return null ; } if ( hostIp . length ( ) == 0 ) { return null ; } return hostIp ; }


static String getHostIp ( String socketAddress ) { if ( socketAddress == null ) { return null ; } if ( socketAddress . length ( ) == 0 ) { return null ; } return socketAddress . substring ( 0 , socketAddress . length ( ) - 1 ) ; }
add_connection ( self , connection ) : NEW_LINE INDENT self . connection = connection NEW_LINE DEDENT
removeAndTryClose ( connection ) : NEW_LINE INDENT try : NEW_LINE INDENT connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def register_serializer ( cls , serializer ) : NEW_LINE INDENT serializer . register_class ( cls ) NEW_LINE return serializer NEW_LINE DEDENT
get_custom_serializer ( self , class_name ) : NEW_LINE INDENT serializer = self . get_serializer ( class_name ) NEW_LINE if serializer : NEW_LINE INDENT return serializer NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def register_command_code_serializer ( self , serializer ) : NEW_LINE INDENT serializer . register_command_code ( self ) NEW_LINE return serializer NEW_LINE DEDENT
get_custom_serializer ( self ) : NEW_LINE INDENT serializer = self . get_serializer ( ) NEW_LINE if serializer : NEW_LINE INDENT return serializer NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
schedule_task ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _schedule_task ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _schedule_task ( ) NEW_LINE DEDENT DEDENT
check_client_address_connected ( self ) : NEW_LINE INDENT if self . client_address is None : NEW_LINE INDENT return False NEW_LINE DEDENT if self . client_address is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
write_buffer_water_mark ( self , buffer ) : NEW_LINE INDENT self . write_buffer_water_mark ( buffer ) NEW_LINE DEDENT
get_frame ( self , opcode ) : NEW_LINE INDENT frame = self . _get_frame ( opcode ) NEW_LINE if frame is None : NEW_LINE INDENT return None NEW_LINE DEDENT return frame NEW_LINE DEDENT
def isFlushed ( self ) : NEW_LINE INDENT return self . outQueue . isFlushed ( ) NEW_LINE DEDENT
set_close_code ( self , close_code ) : NEW_LINE INDENT self . close_code = close_code NEW_LINE DEDENT
validate_utf8 ( self , payload ) : NEW_LINE INDENT if isinstance ( payload , unicode ) : NEW_LINE INDENT return payload NEW_LINE DEDENT elif isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT elif isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT elif isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT elif isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT else : NEW_LINE INDENT return payload NEW_LINE DEDENT DEDENT
update_close_reason ( self , close_code , reason ) : NEW_LINE INDENT if close_code is None : NEW_LINE INDENT return None NEW_LINE DEDENT if reason is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( close_code , int ) : NEW_LINE INDENT return close_code NEW_LINE DEDENT if isinstance ( reason , int ) : NEW_LINE INDENT return reason NEW_LINE DEDENT return None NEW_LINE DEDENT
check_requested_protocol ( self , protocol ) : NEW_LINE INDENT if protocol is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( protocol , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( protocol , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( protocol , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( protocol , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
check_frame_size ( self , frame_size ) : NEW_LINE INDENT if frame_size > self . max_frame_size : NEW_LINE INDENT return False NEW_LINE DEDENT if frame_size > self . max_frame_size : NEW_LINE INDENT return False NEW_LINE DEDENT if frame_size > self . max_frame_size : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
check_max_packet_size ( self ) : NEW_LINE INDENT if self . max_packet_size is not None : NEW_LINE INDENT return self . max_packet_size NEW_LINE DEDENT DEDENT
generate_key ( self , input_string ) : NEW_LINE INDENT if isinstance ( input_string , six . string_types ) : NEW_LINE INDENT return self . _generate_key ( input_string ) NEW_LINE DEDENT return self . _generate_key ( input_string ) NEW_LINE DEDENT
process_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
process_frame ( self , frame ) : NEW_LINE INDENT if isinstance ( frame , binary_frame ) : NEW_LINE INDENT return self . process_frame ( frame ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_frame ( frame ) NEW_LINE DEDENT DEDENT

process_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , textFrame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , textFrame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , textFrame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , textFrame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame , textFrame ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
process_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
process_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT if frame is not None : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
process_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( frame ,Frame ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
check_frame_size ( self , frame_size ) : NEW_LINE INDENT if frame_size > self . max_allowed_frame_size : NEW_LINE INDENT return False NEW_LINE DEDENT if frame_size > self . max_allowed_frame_size : NEW_LINE INDENT return True NEW_LINE DEDENT if frame_size > self . max_allowed_frame_size : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
generate_full_ bytebuffer ( self ) : NEW_LINE INDENT if self . fragmented_frame_payload is not None : NEW_LINE INDENT return self . fragmented_frame_payload NEW_LINE DEDENT else : NEW_LINE INDENT return self . fragmented_frame_payload NEW_LINE DEDENT DEDENT
get_current_size ( self ) : NEW_LINE INDENT return self . bytebuffer . size ( ) NEW_LINE DEDENT
handshake ( role ) : NEW_LINE INDENT try : NEW_LINE INDENT return role . handshake ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
handshake ( self , role ) : NEW_LINE INDENT if isinstance ( role , Role ) : NEW_LINE INDENT return role NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
decode ( ByteBuffer byteBuffer ) : NEW_LINE INDENT try : NEW_LINE INDENT return decoder . decode ( byteBuffer ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return decoder . decode ( byteBuffer ) NEW_LINE DEDENT DEDENT
close_connection ( self ) : NEW_LINE INDENT if self . connection is not None : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT
void closeConnection ( ) throws IOException { if ( connection != null ) { connection . close ( ) ; connection = null ; } }
def def Generate a simple response for a simple response for the corresponding endpoint to indicate some error message .
sendText ( self , text ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _sendText ( text ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _sendText ( text ) NEW_LINE DEDENT DEDENT
allow_reconnect ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return True NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def public public public public static void init ( ) throws IOException { if ( connection . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection ( ) . getConnection
extract_port ( self , port ) : NEW_LINE INDENT try : NEW_LINE INDENT port = int ( port ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return port NEW_LINE DEDENT
handshake ( self , handshake ) : NEW_LINE INDENT if handshake is None : NEW_LINE INDENT return None NEW_LINE DEDENT if handshake is not None : NEW_LINE INDENT return handshake NEW_LINE DEDENT return None NEW_LINE DEDENT
check_for_lost_connections ( self ) : NEW_LINE INDENT self . check_for_lost_connections ( ) NEW_LINE self . check_for_lost_connections ( ) NEW_LINE self . check_for_lost_connections ( ) NEW_LINE DEDENT
stop_connection_lost ( self ) : NEW_LINE INDENT if self . connection_lost : NEW_LINE INDENT self . connection_lost = False NEW_LINE self . connection_lost = True NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
reset_connection_lost ( self ) : NEW_LINE INDENT self . _connection_lost = True NEW_LINE self . _connection_lost = False NEW_LINE self . _connection_lost = True NEW_LINE DEDENT
ping ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . ping ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . connection . close ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
cancel_connection_lost_detection ( self ) : NEW_LINE INDENT if self . connection_lost_detection : NEW_LINE INDENT self . connection_lost_detection = False NEW_LINE self . connection_lost_detection = True NEW_LINE DEDENT DEDENT
static void overwrite ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( name . equals ( " " ) ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( name . equals ( " " ) ) { throw new IllegalArgumentException ( " name must not be null " ) ; } }
ping ( self , payload ) : NEW_LINE INDENT if payload is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT if isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT if isinstance ( payload , bytes ) : NEW_LINE INDENT return payload NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . socket is not None : NEW_LINE INDENT self . socket . close ( ) NEW_LINE DEDENT self . socket . close ( ) NEW_LINE DEDENT
static int getPort ( int port ) { if ( port == - 1 ) { return - 1 ; } if ( port == - 2 ) { return - 1 ; } if ( port == - 3 ) { return - 1 ; } if ( port == - 4 ) { return - 1 ; } return port ; }
read ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read ( ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT return self . _read ( ) NEW_LINE DEDENT DEDENT
execute_accept_operation ( self , operation ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . execute_accept_operation ( operation ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
execute_read_operation ( self , read_operation ) : NEW_LINE INDENT if read_operation is not None : NEW_LINE INDENT return self . execute_read_operation ( read_operation ) NEW_LINE DEDENT elif read_operation is not None : NEW_LINE INDENT return self . execute_read_operation ( read_operation ) NEW_LINE DEDENT DEDENT
execute_write_operation ( self , write_operation ) : NEW_LINE INDENT self . write_operation = write_operation NEW_LINE return self . write_operation NEW_LINE DEDENT
setup_selector_thread ( self , selector_thread ) : NEW_LINE INDENT self . selector_thread = selector_thread NEW_LINE self . selector_thread . start ( ) NEW_LINE DEDENT
start_websocket ( self ) : NEW_LINE INDENT if self . websocket_server is not None : NEW_LINE INDENT self . websocket_server . start ( ) NEW_LINE DEDENT return self . websocket_server NEW_LINE DEDENT
shutdown ( self ) : NEW_LINE INDENT if self . _shutdown : NEW_LINE INDENT return NEW_LINE DEDENT self . _shutdown = True NEW_LINE DEDENT
get_socket ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT socket = self . socket NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT socket = self . socket NEW_LINE DEDENT return socket NEW_LINE DEDENT
static byte [ ] toBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } return bytes [ 2 ] ; }

cacheFrames ( self , frames ) : NEW_LINE INDENT if len ( frames ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 1 : NEW_LINE INDENT return frames [ 0 ] NEW_LINE DEDENT if len ( frames ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( frames ) == 1 : NEW_LINE INDENT
public public static void setFills ( final List < DraftFrame > draftFrames ) { draftFrames = new ArrayList < > ( draftFrames ) ; draftFrames . add ( draftFrames ) ; draftFrames . add ( draftFrames ) ; draftFrames . add ( draftFrames ) ; }
transfer ( ByteBuffer byteBuffer , ByteBuffer byteBuffer2 , ByteBuffer byteBuffer3 ) : NEW_LINE INDENT if byteBuffer2 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT if byteBuffer3 is None : NEW_LINE INDENT return None NEW_LINE DEDENT return byteBuffer3 NEW_LINE DEDENT

EntityManager createEntityManager ( String persistenceUnitName ) { EntityManager entityManager = new EntityManager ( ) ; entityManager . setName ( persistenceUnitName ) ; return entityManager ; }
static EntityManager createEntityManager ( ) { EntityManager entityManager = null ; try { entityManager = new EntityManager ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return entityManager ; }
_wrap_ varargs ( self , varargs ) : NEW_LINE INDENT if varargs is None : NEW_LINE INDENT varargs = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT varargs = [ varargs ] NEW_LINE DEDENT return varargs NEW_LINE DEDENT
def def def def def def def def parse__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def parse__python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def def ____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python__
Translates ( self ) : NEW_LINE INDENT return self . _translates ( ) NEW_LINE DEDENT
_translates_first_defined_message ( self , message ) : NEW_LINE INDENT if not message . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if message . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif message . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif message . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
check_message_key ( self , message_key ) : NEW_LINE INDENT if isinstance ( message_key , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( message_key , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( message_key , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( message_key , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_messages_context ( self , candidates ) : NEW_LINE INDENT context = { } NEW_LINE for candidates in candidates : NEW_LINE INDENT context [ ' candidates ' ] = candidates NEW_LINE DEDENT context [ ' messages ' ] = [ ] NEW_LINE for candidates in candidates : NEW_LINE INDENT context [ ' candidates ' ] = candidates NEW_LINE DEDENT return context NEW_LINE DEDENT
get_messages_context ( self , request ) : NEW_LINE INDENT context = { } NEW_LINE context . update ( request . context ) NEW_LINE return context NEW_LINE DEDENT
def def get_result ( self , lang ) : NEW_LINE INDENT if not isinstance ( self . result , Result ) : NEW_LINE INDENT return self . result NEW_LINE DEDENT else : NEW_LINE INDENT return self . result NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def public public static void addBindings ( final Module module , final Module module ) { if ( module != null ) { return ; } final Module [ ] bindings = module . getModules ( ) ; final Module [ ] bindings = module . getModules ( ) ; if ( bindings == null ) { return ; } final Module [ ] bindings = module . getModules ( ) ; if ( bindings == null ) { return ; } final Module [ ] bindings = module . getModules ( ) ; for ( final Module module : bindings ) { final Module [ ] bindings = module . getModules ( ) ; if ( bindings == null ) { return ; } final Module [ ] bindings = module . getModules ( ) ; for ( final Module module : bindings ) { final Module [ ] bindings = module . getModules ( ) ; for ( final Module module : bindings ) { final Module [ ] bindings = module . getModules ( ) ;
override_bindings ( self , bindings ) : NEW_LINE INDENT if isinstance ( bindings , dict ) : NEW_LINE INDENT return bindings NEW_LINE DEDENT elif isinstance ( bindings , list ) : NEW_LINE INDENT return bindings NEW_LINE DEDENT elif isinstance ( bindings , dict ) : NEW_LINE INDENT return bindings NEW_LINE DEDENT else : NEW_LINE INDENT return bindings NEW_LINE DEDENT DEDENT
def def override_bindings ( self ) : NEW_LINE INDENT bindings = { } NEW_LINE for key in self . bindings : NEW_LINE INDENT bindings [ key ] = self . bindings . get ( key ) NEW_LINE DEDENT return bindings NEW_LINE DEDENT
disable_modules ( self ) : NEW_LINE INDENT self . _modules = [ ] NEW_LINE for module in self . _modules : NEW_LINE INDENT self . _modules . append ( module ) NEW_LINE DEDENT DEDENT
execute ( self ) : NEW_LINE INDENT context = self . _get_context ( ) NEW_LINE if context is not None : NEW_LINE INDENT return context . execute ( self ) NEW_LINE DEDENT return context . execute ( self ) NEW_LINE DEDENT
execute ( self , action ) : NEW_LINE INDENT result = self . _execute ( action ) NEW_LINE if result : NEW_LINE INDENT return result NEW_LINE DEDENT return result NEW_LINE DEDENT
Optional < File > getFile ( String path ) { if ( path == null ) { return Optional . empty ( ) ; } else { return Optional . of ( new File ( path ) ) ; } }

a tuple of A B tuples .
def def _construct_tuple ( self , * args , ** kwargs ) : NEW_LINE INDENT if isinstance ( args [ 0 ] , tuple ) : NEW_LINE INDENT return tuple ( args ) NEW_LINE DEDENT else : NEW_LINE INDENT return tuple ( args ) NEW_LINE DEDENT DEDENT
prepare ( self ) : NEW_LINE INDENT executor = self . executor NEW_LINE if executor is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( self ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( self ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( self ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( context ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( context ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( context ) NEW_LINE if context is None : NEW_LINE INDENT return NEW_LINE DEDENT context = executor . prepare ( context ) NEW_LINE return context NEW_LINE DEDENT



__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
addValidator ( self , validator ) : NEW_LINE INDENT if isinstance ( validator , type ) : NEW_LINE INDENT self . _validator = validator NEW_LINE DEDENT else : NEW_LINE INDENT self . _validator = validator NEW_LINE DEDENT DEDENT
def def def def def def def def do___python____python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def def do___python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def do___python____python____python____python____python__ def def def def def def do___python____python____python____python____python____python____python____python____python__ def def def def def def def do___python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def get___python__
static void findMethod ( String name ) { if ( name == null || name . length ( ) == 0 ) { throw new IllegalArgumentException ( " The given name cannot be null or empty . " ) ; } else { throw new IllegalArgumentException ( " The given name cannot be null or empty . " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def request___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def request__python____python____python____python____python____python__ def def def def def request__python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def def request__python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def request__python____python____python____python____python____python__ def def def def def def request__python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def request__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def def request__python____python____python____python____python____python__ def def def def _
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def def ___python____python____python____python__
def def def def get_handler ( self , resource ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def _ def get___python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def get_ def get ( self ) : NEW def get_handler ( self ) : NEW def get_handler ( self ) : NEW__python__ def get_handler ( self , resource ) : NEW__python__ def get_handler ( self ) : NEW__python__ def get_handler ( self ) : NEW__python__ def get_handler ( self ) : NEW__python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
log_server_errors ( self ) : NEW_LINE INDENT logger = logging . getLogger ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE logger . error ( self . __class__ . __name__ ) NEW_LINE DEDENT



BuildDocHandler buildDocHandler ( String baseDir ) { if ( baseDir == null ) { throw new IllegalArgumentException ( " baseDir must not be null " ) ; } if ( baseDir . length ( ) == 0 ) { throw new IllegalArgumentException ( " baseDir must not be null " ) ; } return new BuildDocHandler ( baseDir ) ; }
BuildDocHandler buildDocHandler ( ) { return new BuildDocHandler ( ) ; }
BuildDocHandler buildDocHandler ( ) { return new BuildDocHandler ( ) ; }
BuildDocHandler buildDocHandler ( ) { return new BuildDocHandler ( ) ; }
BuildDocHandler buildDocHandler ( ) { return new BuildDocHandler ( ) ; }
consume ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return NEW_LINE DEDENT data = data . copy ( ) NEW_LINE data = data . copy ( ) NEW_LINE data = data . copy ( ) NEW_LINE data = data . copy ( ) NEW_LINE data = data . copy ( ) NEW_LINE data = data . copy ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_entity_from_string ( self , String str ) : NEW_LINE INDENT if not str : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_entity_from_string ( str ) NEW_LINE DEDENT DEDENT
convert ( self , source ) : NEW_LINE INDENT if isinstance ( source , bytes ) : NEW_LINE INDENT return source NEW_LINE DEDENT elif isinstance ( source , bytes ) : NEW_LINE INDENT return source NEW_LINE DEDENT elif isinstance ( source , bytes ) : NEW_LINE INDENT return source NEW_LINE DEDENT DEDENT
def def def def generate ( self ) : public static final String result = json . dumps ( self ) : NEW_LINE INDENT return json . encode ( self . json_content ) NEW_LINE DEDENT def generate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT result = json . loads ( self . json_content ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT result = json . dumps ( self . json_content ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def def def def def generate_simple_result ( self , content ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def generate ( self ) : NEW def def def public public public public public public static final public static final void generate ( byte [ public static final String content , final String content , final String content , final String content , final String content , final String content ) throws IOException { if ( content != null ) { if ( content == null ) { return NEW_LINE if ( content == null ) { return NEW_LINE DEDENT if ( content == null ) { return ; } else { return NEW_LINE DEDENT if ( content == null || content . length ( ) == 0 ) { return NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def generate_result ( self ) : NEW_LINE INDENT result = [ ] NEW_LINE result . append ( self ) NEW_LINE result . append ( self ) NEW_LINE return result NEW_LINE DEDENT

static String preferredLanguage ( List < String > candidates ) { String preferredLanguage = null ; if ( candidates != null ) { preferredLanguage = candidates . get ( 0 ) ; } if ( preferredLanguage != null ) { preferredLanguage = preferredLanguage . trim ( ) ; } return preferredLanguage ; }
append_identifier ( self , identifier ) : NEW_LINE INDENT if identifier is not None : NEW_LINE INDENT self . append ( identifier ) NEW_LINE DEDENT else : NEW_LINE INDENT self . append ( identifier ) NEW_LINE DEDENT DEDENT
static Call newInstance ( Fragment fragment ) { if ( fragment == null ) { throw new IllegalArgumentException ( " Fragment must not be null " ) ; } return new Call ( fragment ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

create_function_wrapper ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_function_wrapper ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_server ( self , block ) : NEW_LINE INDENT server = self . _create_server ( block ) NEW_LINE if server : NEW_LINE INDENT return server NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
JsonNode convertObject ( Object obj ) { JsonNode json = new JsonNode ( obj ) ; JsonNode jsonNode = new JsonNode ( json ) ; JsonNode jsonNode = new JsonNode ( jsonNode ) ; JsonNode jsonNode = new JsonNode ( jsonNode ) ; JsonNode jsonNode = new JsonNode ( jsonNode ) ; return jsonNode ; }
JsonNode convert ( JsonNode value ) { if ( value == null ) { return null ; } if ( value instanceof JsonNode ) { return ( JsonNode ) value ; } return value ; }
parse_json ( self , json ) : NEW_LINE INDENT if isinstance ( json , str ) : NEW_LINE INDENT return json NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
parse_json ( self , json ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_json ( json ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_json ( json ) NEW_LINE DEDENT DEDENT
def def targetPath ( self , startPath , targetPath ) : NEW_LINE INDENT targetPath = os . path . abspath ( targetPath ) NEW_LINE targetPath = os . path . abspath ( targetPath ) NEW_LINE targetPath = os . path . join ( targetPath , targetPath ) NEW_LINE return targetPath NEW_LINE DEDENT
canonical_path ( path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT elif path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT elif path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
convert_constraints_to_human_readable ( self , constraints ) : NEW_LINE INDENT return self . _convert_constraints_to_human_readable ( constraints ) NEW_LINE DEDENT
convert_constraint_to_human_readable ( self , constraint ) : NEW_LINE INDENT if isinstance ( constraint , Constraint ) : NEW_LINE INDENT return constraint NEW_LINE DEDENT else : NEW_LINE INDENT return self . _convert_constraint_to_human_readable ( constraint ) NEW_LINE DEDENT DEDENT

public static boolean isClass ( Class < ? > [ ] classes ) { if ( Classes . length == 0 ) { return false ; } else { return true ; } }
parse ( self , expression ) : NEW_LINE INDENT if expression is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( expression , basestring ) : NEW_LINE INDENT expression = expression . strip ( ) NEW_LINE DEDENT return expression NEW_LINE DEDENT
def def _get_number_of_milliseconds ( self ) : NEW_LINE INDENT return self . _number_of_milliseconds ( ) NEW_LINE DEDENT
static AsyncHttpClient createAsyncHttpClient ( ) { AsyncHttpClient client = null ; try { client = new AsyncHttpClient ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return client ; }
static Builder builder ( Context context ) { if ( context == null ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } return new Builder ( context ) ; }
Generates a 501 NOT_IMPLEMENTED simple result . Generates a 501 NOT_IMPLEMENTED simple result . Generates a 501 NOT_IMPLEMENTED simple result . Generates a 501 NOT_IMPLEMENTED simple result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates a 501 NOT_IMPLEMENTED result . Generates
put ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . session . put ( key , value ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
put ( self , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _value = value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _value = value NEW_LINE DEDENT DEDENT
def def def def def def def get_annotation_annotation_annotation_annotation_binding_key ( self ) { if ( annotation . getAnnotation ( ) . getAnnotation ( ) . getAnnotation ( ) . getAnnotation ( ) . getAnnotation ( ) . getAnnotation ( ) ) . getAnnotation ( ) . getAnnotation ( ) . getAnnotation ( ) . getAnnotationType ( ) . annotationType ( ) . getAnnotation ( ) . annotationType ( ) . getAnnotationType ( ) ) ; return annotation . getAnnotation ( ) . getAnnotation ( ) . annotationType ( ) . getAnnotation ( ) ; }

bind_key ( cls , binding_key ) : NEW_LINE INDENT if isinstance ( binding_key , str ) : NEW_LINE INDENT return binding_key NEW_LINE DEDENT if isinstance ( binding_key , str ) : NEW_LINE INDENT return binding_key NEW_LINE DEDENT return binding_key NEW_LINE DEDENT
bind_provider_instance ( self , provider_instance , binding_key ) : NEW_LINE INDENT if binding_key is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( provider_instance , Provider ) : NEW_LINE INDENT return provider_instance NEW_LINE DEDENT if isinstance ( provider_instance , Provider ) : NEW_LINE INDENT return provider_instance NEW_LINE DEDENT if isinstance ( provider_instance , Provider ) : NEW_LINE INDENT return provider_instance NEW_LINE DEDENT DEDENT
bind_to_instance ( self , instance , binding_key ) : NEW_LINE INDENT self . _bind_to_instance ( instance , binding_key ) NEW_LINE self . _bind_to_instance ( instance ) NEW_LINE DEDENT

bind_provider_key ( self , provider_key ) : NEW_LINE INDENT if self . provider_key is not None : NEW_LINE INDENT return self . provider_key NEW_LINE DEDENT else : NEW_LINE INDENT return self . provider_key NEW_LINE DEDENT DEDENT
get_available_languages ( self ) : NEW_LINE INDENT return self . _get_available_languages ( ) NEW_LINE DEDENT
get_preferred_lang ( self , langs ) : NEW_LINE INDENT if langs is None : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( langs ) == 1 : NEW_LINE INDENT return langs [ 0 ] NEW_LINE DEDENT return langs [ 0 ] NEW_LINE DEDENT
def create_evolutions_reader ( self ) : NEW_LINE INDENT evolutions = self . _get_evolutions ( ) NEW_LINE if evolutions is None : NEW_LINE INDENT return None NEW_LINE DEDENT return evolutions NEW_LINE DEDENT
def create_evolutions_reader ( self ) : NEW_LINE INDENT evolutions = [ ] NEW_LINE for evolution in self . evolutions : NEW_LINE INDENT evolutions . append ( evolution ) NEW_LINE DEDENT return evolutions NEW_LINE DEDENT
cleanup_evolutions ( self , database ) : NEW_LINE INDENT self . _cleanup_evolutions ( database ) NEW_LINE DEDENT
def def setInitialInitialConfigurationLoader ( ) : NEW_LINE INDENT loader = new ConfigurationLoader ( ) NEW_LINE loader . setInitial ( ) NEW_LINE loader . setInitial ( ) ; }
set_module_loader ( module_loader ) : NEW_LINE INDENT if not module_loader : NEW_LINE INDENT return NEW_LINE DEDENT module_loader . set_module_loader ( module_loader ) NEW_LINE DEDENT
def def load_module_loader ( self ) : NEW_LINE INDENT if self . module_loader is not None : NEW_LINE INDENT return self . module_loader NEW_LINE DEDENT else : NEW_LINE INDENT return self . module_loader NEW_LINE DEDENT DEDENT
static ModuleLoader getLoader ( ) { if ( moduleLoader == null ) { moduleLoader = new ModuleLoader ( ) ; } return moduleLoader ; }
load_module_loader ( self ) : NEW_LINE INDENT if self . module_loader is not None : NEW_LINE INDENT return self . module_loader NEW_LINE DEDENT else : NEW_LINE INDENT return self . module_loader NEW_LINE DEDENT DEDENT
load ( self ) : NEW_LINE INDENT if self . module_loader : NEW_LINE INDENT return self . module_loader . load ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . module_loader . load ( ) NEW_LINE DEDENT DEDENT
create ( self ) : NEW_LINE INDENT if self . injector is None : NEW_LINE INDENT self . injector = self NEW_LINE DEDENT return self NEW_LINE DEDENT
def def set_cookie ( self , cookie ) : NEW_LINE INDENT try : NEW_LINE INDENT cookie = self . cookies . get ( cookie ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT cookie = self . cookies . get ( cookie ) NEW_LINE DEDENT if cookie is not None : NEW_LINE INDENT cookie = self . cookies . get ( cookie ) NEW_LINE DEDENT if cookie is not None : NEW_LINE INDENT cookie = self . cookies . get ( cookie ) NEW_LINE DEDENT return cookie NEW_LINE DEDENT
EntityManager getDefaultEntityManager ( ) { EntityManager entityManager = null ; try { entityManager = EntityManager . getInstance ( ) ; } catch ( Exception e ) { } if ( entityManager == null ) { return null ; } return entityManager ; }
get_stack ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _stack NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void push ( EntityManager em ) { if ( em == null ) { throw new IllegalArgumentException ( " em is null " ) ; } else { if ( em != null ) { em . push ( em ) ; } else { throw new IllegalArgumentException ( " em is null " ) ; } } }
def byp def def _ def byp def _ def _b def _b def _b__python__ def _b def _byp def _byp def _byp def _byp def _split ( self ) : NEW_LINE INDENT splitter ( ) : NEW_LINE INDENT splitter = self . splitter . splitter ( ) NEW_LINE splitter = self . splitter . splitter ( ) NEW_LINE return self . splitter ( ) NEW_LINE DEDENT
def def def def def def def _ def def def def def def _ def def def def def def _ def def def def def def _ def def def def def _ def def def def _ def def def def def _ def def def def _ def def def def _ public static final public static final public static void bypass ( ) { if ( !
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def create___python____python____python____python__ def def def def def def create___python____python____python____python____python__ def def def def def def create___python____python____python____python____python__ def def def def def create___python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python__ def def def def def create___python____python____python____python____python____python____python__ def def def def def _ def create___python____python____python____python____python__ def def _ def create_ def create_ def create_
def def _convert_error_arguments ( self , error_arguments ) : NEW_LINE INDENT error_arguments = [ ] NEW_LINE for arg in error_arguments : NEW_LINE INDENT error_arguments . append ( arg ) NEW_LINE DEDENT return error_arguments NEW_LINE DEDENT
populate_edit_form ( self , form ) : NEW_LINE INDENT if form . is_valid ( ) : NEW_LINE INDENT return form . save ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_global_errors ( self ) : NEW_LINE INDENT global_errors = [ ] NEW_LINE for key in self . global_errors . keys ( ) : NEW_LINE INDENT global_errors [ key ] = self . global_errors [ key ] NEW_LINE DEDENT return global_errors NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def f__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def F__python____python____python____python____python____python____python____python__ def def def def def def F__python____python____python____python____python____python____python__ def def def def def def def def F__python____python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def def def def f__python____python____python____python____python____python__ def def def def def def def def F__python____python____python____python____python__ def def def def def def f__python____python____python____python____python____python____python__ def def def def def def def f__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python__ def def def def F__python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python__ def def _
parse ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
parse_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , basestring ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
display_string ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
static String getDisplayString ( String value ) { if ( value == null ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } return value ; }
static String displayString ( String value ) { if ( value == null ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } if ( value . length ( ) == 1 ) { return " " ; } if ( value . length ( ) == 2 ) { return " " ; } if ( value . length ( ) == 3 ) { return " " ; } if ( value . length ( ) == 4 ) { return " " ; } if ( value . length ( ) == 2 ) { return " " ; } return value . substring ( 0 , 2 ) ; }
static < T > Optional < T > of ( final String s ) { return new Optional < T > ( s ) ; }


def set_cookie ( self , cookie ) : NEW_LINE INDENT if cookie is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cookie , Cookie ) : NEW_LINE INDENT cookie = cookie . value NEW_LINE DEDENT else : NEW_LINE INDENT cookie = cookie . value NEW_LINE DEDENT return cookie NEW_LINE DEDENT
static NodeList selectNodes ( XPath expression ) throws XPathExpressionException { List < Node > nodes = new ArrayList < Node > ( ) ; for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { if ( nodes . get ( i ) != null ) { nodes . add ( nodes . get ( i ) ) ; } } return nodes ; }
static < T > List < T > toList ( List < T > list ) { List < T > list = new ArrayList < T > ( list ) ; return list ; }
_convert_to_scala_array ( self , array ) : NEW_LINE INDENT return self . _convert_to_scala_array ( array ) NEW_LINE DEDENT
varargs ( self , varargs ) : NEW_LINE INDENT if varargs is None : NEW_LINE INDENT varargs = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT varargs = [ varargs ] NEW_LINE DEDENT return varargs NEW_LINE DEDENT
static Acceptor for JSON WebSockets ( ) { return new Acceptor ( ) { @ Override public void accept ( WebSocket websocket ) { if ( websocket != null && websocket . isOpen ( ) ) { if ( websocket . isOpen ( ) ) { websocket . close ( ) ; } } } } ; }
create_handlers ( self ) : NEW_LINE INDENT handlers = [ ] NEW_LINE for handler in self . handlers : NEW_LINE INDENT handlers . append ( handler ) NEW_LINE DEDENT return handlers NEW_LINE DEDENT
def get_default_access_class ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _access_class ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _access_class ( ) NEW_LINE DEDENT DEDENT
public
get_object_transformation_cost ( self ) : NEW_LINE INDENT return self . object_transformation_cost NEW_LINE DEDENT
static int getNumberOfSteps ( Class < ? > sourceClass , Class < ? > destinationClass ) { if ( sourceClass != null && destinationClass != null ) { return sourceClass . getSimpleName ( ) . length ( ) + destinationClass . getSimpleName ( ) . length ( ) ; } else { return sourceClass . getSimpleName ( ) . length ( ) + destinationClass . getSimpleName ( ) . length ( ) ; } }
get_message ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_message ( key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _get_message ( key ) NEW_LINE DEDENT DEDENT
get_message ( self , key ) : NEW_LINE INDENT message = self . get_message ( key ) NEW_LINE if message : NEW_LINE INDENT return message NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_pooled_database ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_pooled_database ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
sort ( self , array ) : NEW_LINE INDENT if isinstance ( array , ParallelSorter ) : NEW_LINE INDENT return self . _sort ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _sort ( array ) NEW_LINE DEDENT DEDENT
sort ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return self . _sort ( array ) NEW_LINE DEDENT return self . _sort ( array ) NEW_LINE DEDENT
sort ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
invoke_original_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . original_method ( method ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . original_method ( method ) NEW_LINE DEDENT DEDENT

push ( self , method ) : NEW_LINE INDENT self . method = method NEW_LINE if self . method is None : NEW_LINE INDENT self . method = None NEW_LINE DEDENT DEDENT
public public static void fix ( ) { try { if ( EmitUtils . isProtected ( ) ) { return ; } else if ( EmitUtils . isProtected ( ) { return ; } else { return ; } } }
static void push ( Object argument ) { if ( argument == null ) { throw new NullPointerException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } if ( argument . getClass ( ) . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } }
void unbox ( Object object ) { if ( object == null ) { return ; } if ( object . getClass ( ) . isArray ( ) && object . getClass ( ) . getComponentType ( ) . isPrimitive ( ) ) { if ( object . getClass ( ) . isArray ( ) && object . getClass ( ) . getComponentType ( ) . isPrimitive ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( ) . isArray ( ) ) { if ( object . getClass ( )
process_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT else : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT return array NEW_LINE DEDENT
static void pop ( ) { if ( stack . isEmpty ( ) ) { return ; } if ( stack . peek ( ) == null ) { throw new NullPointerException ( ) ; } if ( stack . peek ( ) == null ) { throw new NullPointerException ( ) ; } stack . pop ( ) ; }
find_bridge_methods ( self ) : NEW_LINE INDENT return self . _find_bridge_methods ( ) NEW_LINE DEDENT
static final List < Callback > getAllCallbacks ( ) { return new ArrayList < Callback > ( Arrays . asList ( Callback . class . getMethods ( ) ) ) ; }
static void filterConstructors ( List < Constructor < ? > constructors ) { if ( constructors . isEmpty ( ) ) { return ; } if ( constructors . size ( ) == 0 ) { return ; } if ( constructors . size ( ) == 0 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if ( constructors . size ( ) == 2 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if ( constructors . size ( ) == 2 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if ( constructors . size ( ) == 2 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if ( constructors . size ( ) == 2 ) { return ; } if ( constructors . size ( ) == 1 ) { return ; } if
static final Class < ? > getClass ( final Class < ? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( " Class must not be null " ) ; } if ( clazz . getSuperclass ( ) == null ) { throw new IllegalArgumentException ( " Class must not be null " ) ; } return clazz ; }
def def hashcode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . hashcode ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . hashcode ( ) NEW_LINE DEDENT DEDENT
static void addMethod ( final String methodName , final Class < ? > interface ) { if ( interface . isInterface ( ) ) { throw new IllegalArgumentException ( methodName ) ; } if ( interface . isAbstract ( ) ) { throw new IllegalArgumentException ( methodName ) ; } if ( interface . isInterface ( ) ) { throw new IllegalArgumentException ( methodName ) ; } }
set_bit ( self , bit ) : NEW_LINE INDENT if bit == 31 : NEW_LINE INDENT self . set_bit ( bit ) NEW_LINE DEDENT elif bit == 32 : NEW_LINE INDENT self . set_bit ( bit ) NEW_LINE DEDENT else : NEW_LINE INDENT self . set_bit ( bit ) NEW_LINE DEDENT DEDENT
def default_naming_policy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _default_naming_policy NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

resolve ( self , child ) : NEW_LINE INDENT if isinstance ( child , str ) : NEW_LINE INDENT return self . resolve ( child ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . resolve ( child ) NEW_LINE DEDENT DEDENT
def def read_path_content ( self , path ) : NEW_LINE INDENT path = self . _read_path ( path ) NEW_LINE if not path : NEW_LINE INDENT return None NEW_LINE DEDENT return path NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static < T extends RequestBuilder > T requestBuilder ( T requestBuilder ) { return requestBuilder ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request . method = ' GET ' NEW_LINE request . method = ' GET ' NEW_LINE request . path = ' / ' NEW_LINE request . path = ' / ' NEW_LINE return request NEW_LINE DEDENT
def def post ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT request . method = ' POST ' NEW_LINE DEDENT else : NEW_LINE INDENT request . method = ' POST ' NEW_LINE DEDENT request . method = ' POST ' NEW_LINE request . headers = { ' Content - Type ' : ' application / json ' , ' Accept ' : ' application / json ' } NEW_LINE request . headers [ ' Content - Type ' ] = ' application / json ' NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def patch ( self , request ) : NEW_LINE INDENT if request . method == ' PATCH ' : NEW_LINE INDENT request . method = ' PATCH ' NEW_LINE DEDENT else : NEW_LINE INDENT request . method = ' POST ' NEW_LINE request . method = ' PATCH ' NEW_LINE DEDENT return request NEW_LINE DEDENT
delete_request ( self , request ) : NEW_LINE INDENT if request . method == ' DELETE ' : NEW_LINE INDENT return self . _delete_request ( request ) NEW_LINE DEDENT elif request . method == ' GET ' : NEW_LINE INDENT return self . _delete_request ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _delete_request ( request ) NEW_LINE DEDENT DEDENT
def def build_request ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request . method = ' HEAD ' NEW_LINE request . method = ' HEAD ' NEW_LINE request . headers = { ' Content - Type ' : ' application / json ' } NEW_LINE request . headers [ ' Content - Type ' ] = ' application / json ' NEW_LINE return request NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def parse def def public public public public public public static void addQuery ( String path , String path ) { if ( path != null ) { if ( path == null ) { throw new IllegalArgumentException ( ) ; } public static final String path = request . getRequestPath ( ) ; if ( path == null ) { throw new IllegalArgumentException ( ) ; } else if ( path == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } } }
def set_cookies ( self , request , cookies ) : NEW_LINE INDENT if cookies is None : NEW_LINE INDENT cookies = request . cookies NEW_LINE DEDENT else : NEW_LINE INDENT cookies = cookies . copy ( ) NEW_LINE DEDENT return cookies NEW_LINE DEDENT
def def def def def def parse__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def parse__python____python____python____python____python____python____python__ def def def def def parse__python____python____python____python____python____python__ def def def def def parse__python____python____python____python____python____python__ def def def def def ___python____python____python____python__ def def def def parse__python____python____python____python____python____python____python____python____python__ def def def def def def def parse__python____python____python____python____python____python__ def def def def def parse__python____python____python____python____python____python____python____python__ def def def def parse__python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def parse__python____python____python____python____python____python____python____python__ def def def ___python____python____python____python____python____python____python__ def def def _
def def def get_parameters ( self ) : NEW_LINE INDENT params = { } NEW_LINE for key , value in self . parameters . items ( ) : NEW_LINE INDENT params . put ( key , value ) NEW_LINE DEDENT def add_parameters ( self , key , value ) : NEW_LINE INDENT params . put ( key , value ) NEW_LINE DEDENT return params NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def query__python____python____python____python____python____python____python____python__ def def def def query__python____python____python____python____python____python____python__ def def def def def query__python____python____python____python____python____python__ def def def def def query__python____python____python____python____python__ def def def def def query__python____python____python____python____python__ def def def def def query__python____python____python__ def def def def query__python____python____python__ def def def def query__python____python____python____python____python__ def def def def def query__python____python____python__ def def def def query__python____python____python____python____python____python____python__ def def def def def query__python____python____python____python____python____python__ def def def def query__python____python____python____python____python____python__ def def def def query__python____python____python____python____python____python____python__ def def def def query__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def _
host_url ( self ) : NEW_LINE INDENT host_url = self . _host_url ( ) NEW_LINE if host_url is not None : NEW_LINE INDENT return host_url NEW_LINE DEDENT return host_url NEW_LINE DEDENT
def def basicAuthentication def def def def basicAuthentication def def def def basicAuthentication def basicAuthentication def basic_authentication def basic_auth def basic_auth def basic_basic_authentication ( self ) : NEW_LINE INDENT return basic_basic_basic_authentication_authentication_authentication ( self ) : NEW_LINE INDENT return basic_LINE DEDENT def basic_basic_authentication ( self ) : NEW_LINE INDENT return basic_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def prepare_request_buffer ( self ) : NEW_LINE INDENT request_buffer = self . request_buffer . copy ( ) NEW_LINE request_buffer . clear ( ) NEW_LINE request_buffer . clear ( ) NEW_LINE return request_buffer NEW_LINE DEDENT
static void add ( String name , String value ) { if ( name == null ) { return ; } if ( value == null ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } if ( value . equals ( " " ) ) { return ; } }
remove_range ( self , start , end ) : NEW_LINE INDENT if start >= end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if start < end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if start > end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if start < end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if start > end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if end > start : NEW_LINE INDENT return NEW_LINE DEDENT if start < end : NEW_LINE INDENT return NEW_LINE DEDENT if end < start : NEW_LINE INDENT return NEW_LINE DEDENT if
count_elements ( self , element ) : NEW_LINE INDENT return len ( self . handlers ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static List < ActionRuntimeConfiguration > getActionRuntimeConfigurations ( ) { List < ActionRuntimeConfiguration > configurations = new ArrayList < ActionRuntimeConfiguration > ( ) ; configurations . add ( new ActionRuntimeConfiguration ( ) ) ; configurations . add ( new ActionRuntimeConfiguration ( ) ) ; configurations . add ( new ActionRuntimeConfiguration ( ) ) ; configurations . add ( new ActionRuntimeConfiguration ( ) ) ; return configurations ; }

get_property_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _property_value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def first_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . name NEW_LINE DEDENT DEDENT

def def reference ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
lookup ( self , reference ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _lookup ( reference ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_entity_descriptor ( self , table_reference ) : NEW_LINE INDENT if table_reference is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return table_reference . entity_descriptor NEW_LINE DEDENT DEDENT



lookup ( self , table_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _lookup ( table_name ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT


def def inject ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT request . method = ' GET ' NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT request . method = ' POST ' NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT request . method = ' PUT ' NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_convert_column_name ( self , column_name ) : NEW_LINE INDENT column_name = column_name . strip ( ) NEW_LINE column_name = column_name . strip ( ) NEW_LINE return column_name NEW_LINE DEDENT
convert_column_name_to_property_name ( self , column_name ) : NEW_LINE INDENT column_name = column_name . strip ( ) NEW_LINE return column_name NEW_LINE DEDENT
_apply_column_naming_strategy ( self , column_name , column_name ) : NEW_LINE INDENT if column_name is None : NEW_LINE INDENT return column_name NEW_LINE DEDENT else : NEW_LINE INDENT return column_name NEW_LINE DEDENT DEDENT
store_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , datetime . timedelta ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , datetime . timedelta ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , datetime . timedelta ) : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
prepare_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _prepare_value ( value ) NEW_LINE DEDENT DEDENT
copy ( self ) : NEW_LINE INDENT return self . _copy ( ) NEW_LINE DEDENT
createWrapper ( cls ) : NEW_LINE INDENT wrapper = cls . getWrapper ( ) NEW_LINE if wrapper is not None : NEW_LINE INDENT return wrapper NEW_LINE DEDENT else : NEW_LINE INDENT return cls ( ) NEW_LINE DEDENT DEDENT
create_wrapper ( self ) : NEW_LINE INDENT wrapper = self . _create_wrapper ( ) NEW_LINE if not wrapper : NEW_LINE INDENT return wrapper NEW_LINE DEDENT wrapper = self . _create_wrapper ( ) NEW_LINE return wrapper NEW_LINE DEDENT
static String [ ] convert ( String [ ] separators ) { String [ ] separators = new String [ separators . length ] ; Arrays . sort ( separators ) ; return separators ; }
get_path ( self , path ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . join ( self . path , path ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String [ ] split ( String prefix , String extension ) { String [ ] parts = new String [ 4 ] ; parts [ 0 ] = prefix ; parts [ 1 ] = extension ; parts [ 2 ] = extension ; parts [ 3 ] = prefix ; parts [ 4 ] = extension ; parts [ 5 ] = extension ; parts [ 6 ] = prefix ; parts [ 7 ] = extension ; parts [ 8 ] = extension ; parts [ 9 ] = extension ; parts [ 10 ] = extension ; parts [ 11 ] = extension ; parts [ 12 ] = extension ; parts [ 13 ] = extension ; parts [ 14 ] = extension ; return parts ; }
relative_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT


static void main ( String [ ] args ) { System . out . println ( " Starting web application . . . " ) ; System . out . println ( " Starting web application . . . " ) ; System . out . println ( " Starting web application . . . " ) ; System . out . println ( " Starting web application . . . " ) ; System . out . println ( " Starting web application . . . " ) ; }
def def configure_defaults ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _defaults = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _defaults = { } NEW_LINE DEDENT DEDENT

exclude_jars ( self , jars ) : NEW_LINE INDENT excluded_jars = [ ] NEW_LINE for jar in jars : NEW_LINE INDENT excluded_jars . append ( jar ) NEW_LINE DEDENT for jar in jars : NEW_LINE INDENT excluded_jars . append ( jar ) NEW_LINE DEDENT return excluded_jars NEW_LINE DEDENT
def def def include_jars ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT jars = [ ] NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT jars = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT jars = [ ] NEW_LINE for jar in jars : NEW_LINE INDENT jars . append ( jars [ 0 ] ) NEW_LINE DEDENT DEDENT return jars NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void scan ( ZipFile archive ) throws IOException { if ( archive == null ) { throw new IllegalArgumentException ( " Archive cannot be null . " ) ; } if ( archive . isDirectory ( ) ) { throw new IllegalArgumentException ( " Archive is not a directory . " ) ; } if ( archive . isDirectory ( ) ) { throw new IllegalArgumentException ( " Archive is not a directory . " ) ; } }
def def classpath ( ) : NEW def def def def Sc def def def Sc def def def Sc def def def Sc def def def def Sc def def def def Sc def def def def Sc def def Sc def def Sc def _ def sc def def def Sc def def def _ def _ _get_classpath def _get_classpath def _get_classpath def _get_classpath def _get_classpath def _get_classpath def _get_classpath def _get_classpath def _get_classpath ( self ) : NEW_LINE INDENT return self . _get_classpath
static byte [ ] getTypeSignatureBytes ( Class < ? > clazz ) { byte [ ] typeSignatureBytes = null ; if ( clazz != null ) { typeSignatureBytes = clazz . getTypeSignatureBytes ( ) ; } if ( typeSignatureBytes == null ) { typeSignatureBytes = new byte [ 0 ] ; } return typeSignatureBytes ; }
def def def get_paths ( self , path ) : NEW_LINE def get_paths ( self ) : NEW_LINE INDENT paths = [ ] NEW_LINE def get_paths ( self , path ) : NEW_LINE INDENT return [ path ] NEW_LINE def get_paths ( self ) : NEW_LINE INDENT return [ path ] NEW_LINE def get_paths ( self ) : NEW_LINE INDENT return [ path ] NEW_LINE DEDENT def get_paths ( self ) : NEW_LINE INDENT return [ path ] NEW_LINE DEDENT return [ path ] NEW_LINE DEDENT return paths NEW_LINE DEDENT def get_paths ( self ) : NEW_LINE INDENT return [ path ] NEW_LINE DEDENT DEDENT
def start ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . scanner . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

lookup ( self , scope ) : NEW_LINE INDENT instance = self . get ( scope ) NEW_LINE if instance is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return instance NEW_LINE DEDENT DEDENT
search ( cls , scope ) : NEW_LINE INDENT if isinstance ( scope , cls ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , cls ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , cls ) : NEW_LINE INDENT return scope NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_scope ( self , scope ) : NEW_LINE INDENT if scope is None : NEW_LINE INDENT return None NEW_LINE DEDENT scope = scope . lower ( ) NEW_LINE scope = scope . lower ( ) NEW_LINE scope = scope . lower ( ) NEW_LINE scope = scope . lower ( ) NEW_LINE return scope NEW_LINE DEDENT
static char [ ] decode ( char [ ] data ) { if ( data == null ) { return null ; } if ( data . length == 0 ) { return null ; } return data . clone ( ) ; }
static String generateToken ( String token ) { if ( token == null ) { throw new IllegalArgumentException ( " Invalid CSRF token . " ) ; } if ( token . length ( ) == 0 ) { throw new IllegalArgumentException ( " Invalid CSRF token . " ) ; } return token ; }
_removes_expired_tokens ( self , token_set ) : NEW_LINE INDENT if token_set is None : NEW_LINE INDENT return self . _removes_expired_tokens ( ) NEW_LINE DEDENT return self . _removes_expired_tokens ( token_set ) NEW_LINE DEDENT
static String getTokenValue ( String token ) { if ( token == null ) { return " " ; } if ( token . length ( ) == 0 ) { return " " ; } if ( token . length ( ) == 1 ) { return " " ; } return token ; }
_detect_map ( self , map ) : NEW_LINE INDENT if isinstance ( map , dict ) : NEW_LINE INDENT return map NEW_LINE DEDENT if isinstance ( map , dict ) : NEW_LINE INDENT return map NEW_LINE DEDENT return None NEW_LINE DEDENT
copy ( self ) : NEW_LINE INDENT self . _copy ( ) NEW_LINE self . _copy ( ) NEW_LINE DEDENT
copy ( self , source , destination ) : NEW_LINE INDENT if source is None : NEW_LINE INDENT return NEW_LINE DEDENT if destination is None : NEW_LINE INDENT return NEW_LINE DEDENT if source is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( destination , Source )
register ( self ) : NEW_LINE INDENT registers = self . _registrations . copy ( ) NEW_LINE self . _registrations . clear ( ) NEW_LINE return registers NEW_LINE DEDENT
register_scope ( self , scope_type ) : NEW_LINE INDENT self . scope_type = scope_type NEW_LINE return self NEW_LINE DEDENT
def def register ( String name , String name , String value ) : public void register ( String name , String value ) { if ( value != null ) { if ( value == null ) { throw new IllegalArgumentException ( name ) ; public String value = value ; if ( value == null ) { throw new IllegalArgumentException ( name ) ; } } } else { throw new IllegalArgumentException ( ) ; } } }
register_bean ( self , bean ) : NEW_LINE INDENT if isinstance ( bean , basestring ) : NEW_LINE INDENT self . register_bean ( bean ) NEW_LINE DEDENT else : NEW_LINE INDENT self . register_bean ( bean ) NEW_LINE DEDENT DEDENT
removePetiteBean ( type ) : NEW_LINE INDENT if type . isPrimitive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if type . isPrimitive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if type . isPrimitive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if type . isPrimitive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if type . isPrimitive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT

injection_point ( self , injection_point ) : NEW_LINE INDENT if injection_point is None : NEW_LINE INDENT injection_point = self . injection_point NEW_LINE DEDENT else : NEW_LINE INDENT injection_point = self . injection_point NEW_LINE DEDENT return injection_point NEW_LINE DEDENT

setInjectionPoint ( self , injection_point ) : NEW_LINE INDENT self . injection_point = injection_point NEW_LINE DEDENT
injection_point ( self ) : NEW_LINE INDENT if self . injection_point is not None : NEW_LINE INDENT return self . injection_point NEW_LINE DEDENT return self . injection_point NEW_LINE DEDENT
init ( self ) : NEW_LINE INDENT if not self . _initialized : NEW_LINE INDENT return NEW_LINE DEDENT self . _initialized = True NEW_LINE if self . _initialized : NEW_LINE INDENT self . _initialized = False NEW_LINE DEDENT return self NEW_LINE DEDENT
destroy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _destroy ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
instance ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _instance ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _instance ( ) NEW_LINE DEDENT DEDENT

iter_ beans ( type ) : NEW_LINE INDENT beans = [ ] NEW_LINE for i in range ( len ( beans ) ) : NEW_LINE INDENT beans . append ( beans [ i ] ) NEW_LINE DEDENT return beans NEW_LINE DEDENT
def _defines_parameters ( self , parameters ) : NEW_LINE INDENT if len ( parameters ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return [ parameters [ 0 ] ] NEW_LINE DEDENT if len ( parameters ) == 2 : NEW_LINE INDENT return [ parameters [ 0 ] ] NEW_LINE DEDENT return [ parameters [ 1 ] ] NEW_LINE DEDENT
def def public public public public static void measure ( ) { } public static void measureActionInvocationTime ( final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time , final long time1 , final long time2 , final long time2 , final long time3 , final long time4 , final long time2 , final long time3 , final long time4 , final long time5
static java . lang . String getJavaVersion ( ) { return java . lang . Integer . toString ( java . lang . Integer . parseInt ( java . lang . Integer . parseInt ( java . lang . Integer . parseInt ( java . lang . Integer . parseInt ( java . lang . Integer . parseInt ( java . Integer . parseInt ( java . lang . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer . parseInt ( java . Integer .

validate_argument_index ( argument_index ) : NEW_LINE INDENT if argument_index is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( argument_index , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( argument_index , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( argument_index , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( argument_index , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( argument_index , int ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def _get_method_name ( self , method_name ) : NEW_LINE INDENT method_name = method_name . replace ( ' _ ' , ' _ ' ) NEW_LINE return method_name . replace ( ' _ ' , ' _ ' ) NEW_LINE DEDENT
load_method_arguments ( self ) : NEW_LINE INDENT method_arguments = [ ] NEW_LINE method_arguments . extend ( self . method_arguments ) NEW_LINE method_arguments . extend ( self . method_arguments ) NEW_LINE return method_arguments NEW_LINE DEDENT
load_method_arguments ( self ) : NEW_LINE INDENT method_arguments = [ ] NEW_LINE method_arguments . extend ( self . method_arguments ) NEW_LINE method_arguments . extend ( self . method_arguments ) NEW_LINE return method_arguments NEW_LINE DEDENT
static void load ( final Method method ) { if ( method . isStatic ( ) ) { return ; } if ( method . isStatic ( ) ) { return ; } if ( method . isVirtual ( ) ) { return ; } if ( method . isVirtual ( ) ) { return ; } }
load ( self , index ) : NEW_LINE INDENT if index == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if index == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index == 4 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
store ( self , index ) : NEW_LINE INDENT if index == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 6 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 7 : NEW_LINE INDENT return NEW_LINE DEDENT if index == 8 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
prepare ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , tuple ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
unique_key ( self ) : NEW_LINE INDENT if self . method_signatures : NEW_LINE INDENT return self . method_signatures NEW_LINE DEDENT else : NEW_LINE INDENT return self . method_signatures NEW_LINE DEDENT DEDENT

store_element ( self , element ) : NEW_LINE INDENT if isinstance ( element , int ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
extract_encoding_from_content_type ( self , content_type ) : NEW_LINE INDENT return self . _extract_encoding_from_content_type ( content_type ) NEW_LINE DEDENT
check_flags ( self , flags ) : NEW_LINE INDENT if len ( flags ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( flags ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( flags ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
get_token ( self ) : NEW_LINE INDENT token = self . _get_token ( ) NEW_LINE if token is None : NEW_LINE INDENT return None NEW_LINE DEDENT return token NEW_LINE DEDENT
def require_basic_authentication_headers ( realm , realm ) : NEW_LINE INDENT if realm == null : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return headers = { } NEW_LINE DEDENT DEDENT
download ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT response = self . _download ( ) NEW_LINE DEDENT except : NEW_LINE INDENT response = self . _download ( ) NEW_LINE raise NEW_LINE DEDENT if response . status == 200 : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
prepare_response ( self , response ) : NEW_LINE INDENT self . response = response NEW_LINE return self . response NEW_LINE DEDENT
get_cookies ( self ) : NEW_LINE INDENT cookies = self . cookies NEW_LINE if not cookies : NEW_LINE INDENT return None NEW_LINE DEDENT return cookies NEW_LINE DEDENT
read_request_body ( self ) : NEW_LINE INDENT body = self . request . body NEW_LINE if body is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return body NEW_LINE DEDENT DEDENT
read_request_body ( self ) : NEW_LINE INDENT body = self . request . body NEW_LINE if body is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return body NEW_LINE DEDENT DEDENT
_store_context_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
_store_context_path ( self , path ) : NEW_LINE INDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
get_parameters ( self ) : NEW_LINE INDENT params = [ ] NEW_LINE for param in self . params : NEW_LINE INDENT params . append ( param ) NEW_LINE DEDENT return params NEW_LINE DEDENT
prepare_parameters ( self ) : NEW_LINE INDENT parameters = self . _prepare_parameters ( ) NEW_LINE if self . _prepare_parameters ( ) : NEW_LINE INDENT return parameters NEW_LINE DEDENT return parameters NEW_LINE DEDENT
def request_parameters ( self ) : NEW_LINE INDENT request_parameters = { } NEW_LINE request_parameters . update ( self . request_parameters ) NEW_LINE request_parameters . update ( self . request_parameters ) NEW_LINE return request_parameters NEW_LINE DEDENT
def def tag_body ( self ) : NEW_LINE INDENT return self . _tag_body ( ) NEW_LINE DEDENT
render_tag_body ( self , tag_body ) : NEW_LINE INDENT if isinstance ( tag_body , str ) : NEW_LINE INDENT return tag_body NEW_LINE DEDENT elif isinstance ( tag_body , str ) : NEW_LINE INDENT return tag_body NEW_LINE DEDENT else : NEW_LINE INDENT return tag_body NEW_LINE DEDENT DEDENT
render_tag_body ( self , tag_body ) : NEW_LINE INDENT if isinstance ( tag_body , string_types ) : NEW_LINE INDENT return tag_body NEW_LINE DEDENT else : NEW_LINE INDENT return tag_body NEW_LINE DEDENT DEDENT
_init_methods ( self ) : NEW_LINE INDENT self . _init_methods ( ) NEW_LINE self . _init_methods ( ) NEW_LINE DEDENT
void destroy ( BeanData beanData ) { if ( beanData == null ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) ) { return ; } if ( beanData . isDestroyed ( ) )


action_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ 1 : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT return path NEW_LINE DEDENT
add_header_value ( self , key , value ) : NEW_LINE INDENT if key not in self . header_values : NEW_LINE INDENT self . header_values [ key ] = value NEW_LINE DEDENT else : NEW_LINE INDENT self . header_values [ key ] = value NEW_LINE DEDENT DEDENT
put ( self , key , value ) : NEW_LINE INDENT if self . key == key : NEW_LINE INDENT self . key = key NEW_LINE DEDENT else : NEW_LINE INDENT self . key = key NEW_LINE self . value = value NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def getProfileProperty ( self ) : NEW_LINE INDENT profile = self . _get_profile_property ( ) NEW_LINE if profile is None : NEW_LINE INDENT return None NEW_LINE DEDENT return profile NEW_LINE DEDENT
_get_macro_definitions ( self , props ) : NEW_LINE INDENT macros = [ ] NEW_LINE for macro in props : NEW_LINE INDENT macros . append ( macro ) NEW_LINE DEDENT return macros NEW_LINE DEDENT
static Map < String , String > map ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; Map < String , String > props = new HashMap < String , String > ( ) ; props . put ( " key " , " value " ) ; props . put ( " value " , " value " ) ; return map ; }
extract_key_material ( key_material ) : NEW_LINE INDENT key_material = key_material . strip ( ) NEW_LINE if key_material : NEW_LINE INDENT return key_material NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
hash_password ( password ) : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE DEDENT DEDENT
boolean matches ( String password ) { if ( password == null ) { return false ; } if ( password . length ( ) == 0 ) { return false ; } if ( password . length ( ) == 0 ) { return false ; } return true ; }
public static int copy ( InputStream stream , int boundary ) throws IOException { if ( boundary == - 1 ) { throw new EOFException ( ) ; } if ( boundary == - 1 ) { throw new EOFException ( ) ; } if ( boundary == - 1 ) { throw new EOFException ( ) ; } return boundary ; }
def def _get_max_bytes_to_output_stream ( self ) : NEW_LINE INDENT max_LINE INDENT return self . _max_bytes_to_output_stream . get_bytes ( ) NEW_LINE DEDENT
public static java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > > > > > > >
config ( self ) : NEW_LINE INDENT config = self . _config NEW_LINE config . update ( ) NEW_LINE return config NEW_LINE DEDENT
static boolean isAlias ( String alias ) { if ( alias == null ) { return false ; } if ( alias . length ( ) == 0 ) { return true ; } if ( alias . length ( ) == 1 ) { return true ; } return false ; }
static < T extends Annotation > T getAnnotation ( Class < T > clazz ) { if ( clazz == null ) { return null ; } return clazz . getAnnotation ( clazz ) ; }
static < T extends Annotation > T getAnnotation ( Class < T > clazz ) { if ( clazz == null ) { return null ; } return clazz . getAnnotation ( clazz ) ; }
static String getActionPath ( Class < ? extends Annotation > annotation ) { if ( annotation == null ) { return " " ; } if ( annotation . getAnnotation ( ) != null ) { return annotation . getAnnotation ( ) . value ( ) ; } return " " ; }
read_action_path ( self ) : NEW_LINE INDENT if self . action_path is None : NEW_LINE INDENT return None NEW_LINE DEDENT path = self . action_path NEW_LINE if path is None : NEW_LINE INDENT return None NEW_LINE DEDENT return path NEW_LINE DEDENT
alias_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
public
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def ____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python__ def def def def def ___python____python____python____python__
static < T > T getProxy ( Class < T > target ) { if ( target instanceof Proxy ) { return ( ( Proxy ) target ) . getProxy ( ) ; } return target ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static String nameFromJSON ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return " " ; } if ( name . length ( ) == 0 ) { return " " ; } return name ; }
static String name ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 1 ) { return name ; } if ( name . length ( ) == 2 ) { return name . substring ( 0 , 1 ) ; } return name . substring ( 1 ) ; }
get_includes ( self , type ) : NEW_LINE INDENT if not self . includes : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return self . includes [ type ] NEW_LINE DEDENT
def def def def _create def _create_type_data_type_data ( ) : def _create_type_data ( self ) : NEW_LINE INDENT return self . _create_type_data ( ) NEW_LINE DEDENT def _create_LINE def _create_type_data ( self ) : NEW_LINE INDENT return self . _create_type_data ( ) NEW_LINE DEDENT

static String getPropertyName ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 1 ) { return name . substring ( 0 , 1 ) ; } return name ; }
get_real_property_name ( self ) : NEW_LINE INDENT return self . _get_property_name ( ) NEW_LINE DEDENT
get_file_upload_item ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _file_upload_item NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

public static byte [ ] get_constant_pool_pool ( byte [ ] constant_pool_pool_count ) { if ( constant_pool_pool_count == null ) { return null ; } else { return constant_pool_pool_count ; } }


add_constant_methodref_info ( constant_methodref_info , constant_interface_methodref_info ) : NEW_LINE INDENT if isinstance ( constant_methodref_info , CONSTANT_Methodref_info ) : NEW_LINE INDENT return constant_methodref_info NEW_LINE DEDENT if isinstance ( constant_interface_methodref_info , CONSTANT_InterfaceMethodref_info ) : NEW_LINE INDENT return constant_interface_methodref_info NEW_LINE DEDENT else : NEW_LINE INDENT return constant_methodref_info NEW_LINE DEDENT DEDENT
CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info ( ) { CONSTANT_Fieldref_info CONSTANT_Methodref_info = new CONSTANT_Fieldref_info ( ) ; CONSTANT_InterfaceMethodref_info CONSTANT_Methodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Methodref_info = new CONSTANT_Methodref_info ( ) ; CONSTANT_InterfaceMethodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Methodref_info = new CONSTANT_Methodref_info ( ) ; CONSTANT_InterfaceMethodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; }
CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info ( ) { CONSTANT_Fieldref_info CONSTANT_Methodref_info = new CONSTANT_Fieldref_info ( ) ; CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Fieldref_info CONSTANT_Methodref_info = new CONSTANT_Methodref_info ( ) ; CONSTANT_InterfaceMethodref_info CONSTANT_Methodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Methodref_info = new CONSTANT_Methodref_info ( ) ; CONSTANT_InterfaceMethodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Methodref_info = new CONSTANT_Methodref_info ( ) ; CONSTANT_InterfaceMethodref_info = new CONSTANT_InterfaceMethodref_info ( ) ; CONSTANT_Methodref_info
add_constant_info ( self , symbol , constant_info ) : NEW_LINE INDENT if constant_info is None : NEW_LINE INDENT self . add_constant_info ( symbol ) NEW_LINE DEDENT else : NEW_LINE INDENT self . add_constant_info ( symbol ) NEW_LINE DEDENT DEDENT
CONSTANT_Integer_info or CONSTANT_Float_info ( ) { CONSTANT_Integer_info = new CONSTANT_Integer_info ( ) ; CONSTANT_Float_info = new CONSTANT_Float_info ( ) ; return CONSTANT_Integer_info ; }
add_constant_info_to_symbol_table ( symbol_table , constant_info ) : NEW_LINE INDENT if constant_info is not None : NEW_LINE INDENT return constant_info . add_constant_info_to_symbol_table ( symbol_table , constant_info ) NEW_LINE DEDENT DEDENT
CONSTANT_Long_info or CONSTANT_Double_info ( ) { return new CONSTANT_Long_info ( ) ; }
add_constant_nameAndType_info ( self , nameAndType_info ) : NEW_LINE INDENT self . _add_constant_nameAndType_info ( nameAndType_info ) NEW_LINE self . _add_constant_nameAndType_info ( nameAndType_info ) NEW_LINE DEDENT
CONSTANT_NameAndType_info add ( CONSTANT_NameAndType_info info ) { CONSTANT_NameAndType_info info = new CONSTANT_NameAndType_info ( ) ; info . add ( info ) ; return info ; }
CONSTANT_Utf8_info add ( CONSTANT_Utf8_info item ) { if ( item != null ) { return new CONSTANT_Utf8_info ( item ) ; } return new CONSTANT_Utf8_info ( item ) ; }
CONSTANT_String_info new CONSTANT_String_info ( ) { CONSTANT_String_info CONSTANT_String_info = new CONSTANT_String_info ( ) ; return CONSTANT_String_info ; }
CONSTANT_MethodHandle_info CONSTANT_MethodHandle_info ( ) { CONSTANT_MethodHandle_info CONSTANT_MethodHandle_info = new CONSTANT_MethodHandle_info ( ) ; return CONSTANT_MethodHandle_info ; }
CONSTANT_MethodHandle_info new CONSTANT_MethodHandle_info ( ) { CONSTANT_MethodHandle_info CONSTANT_MethodHandle_info = new CONSTANT_MethodHandle_info ( ) ; CONSTANT_MethodHandle_info . setMethodHandle ( CONSTANT_MethodHandle_info . getMethodHandle ( ) ) ; CONSTANT_MethodHandle_info . setMethodHandle ( CONSTANT_MethodHandle_info . getMethodHandle ( ) ) ; return CONSTANT_MethodHandle_info ; }
void addBootstrapMethod ( final SymbolTable symbolTable , final BootstrapMethod bootstrapMethod ) { if ( bootstrapMethod != null ) { symbolTable . addBootstrapMethod ( bootstrapMethod ) ; } else { symbolTable . addBootstrapMethod ( bootstrapMethod ) ; } }
void addBootstrapMethod ( final SymbolTable symbolTable , final BootstrapMethod bootstrapMethod ) { if ( bootstrapMethod != null ) { symbolTable . addBootstrapMethod ( bootstrapMethod ) ; } else { symbolTable . addBootstrapMethod ( bootstrapMethod ) ; } }
CONSTANT_InvokeDynamic_info get CONSTANT_InvokeDynamic_info ( ) { CONSTANT_InvokeDynamic_info info = new CONSTANT_InvokeDynamic_info ( ) ; return info ; }
static CONSTANT_Dynamic_info CONSTANT_InvokeDynamic_info = new CONSTANT_Dynamic_info ( ) { public CONSTANT_Dynamic_info CONSTANT_InvokeDynamic_info ( ) { return new CONSTANT_InvokeDynamic_info ( ) ; } }
CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info ( ) { return CONSTANT_Class_info . CONSTANT_String_info . CONSTANT_MethodType_info . CONSTANT_Module_info . CONSTANT_Package_info ; }
CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info ( ) { return CONSTANT_Class_info . CONSTANT_String_info . CONSTANT_MethodType_info . CONSTANT_Module_info . CONSTANT_Package_info ; }


hash ( self , input_string ) : NEW_LINE INDENT hash = hashlib . md5 ( input_string ) . hexdigest ( ) NEW_LINE return hash . hexdigest ( ) NEW_LINE DEDENT
clear ( self ) : NEW_LINE INDENT self . map . clear ( ) NEW_LINE DEDENT
get_all_values ( self , name ) : NEW_LINE INDENT return self . _get_all_values ( name ) NEW_LINE DEDENT
iterator ( self ) : NEW_LINE INDENT return self . _entries . iterator ( ) NEW_LINE DEDENT
List < CaseSensitivity > getCaseSensitivity ( ) { List < CaseSensitivity > result = new ArrayList < CaseSensitivity > ( ) ; for ( CaseSensitivity c : getCaseSensitivity ( ) ) { result . add ( c ) ; } return result ; }
def def def def _grows ( self , buffer ) : NEW def _grows ( self , buffer ) : NEW_LINE INDENT return self . _grows ( buffer ) NEW_LINE def _grows ( self , buffer ) : NEW_LINE INDENT return self . _grows ( buffer ) NEW_LINE def _grows ( self , buffer ) : NEW_LINE INDENT return self . _grows ( buffer ) NEW_LINE DEDENT def _grows ( self , buffer ) : NEW_LINE INDENT return self . _grows ( buffer ) NEW_LINE DEDENT DEDENT def _grows ( self , buffer ) : NEW_LINE INDENT return self . _grows ( buffer ) NEW_LINE DEDENT DEDENT
static void append ( String s ) { if ( s == null ) { return ; } StringBuffer buffer = new StringBuffer ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { buffer . append ( s [ i ] ) ; } buffer . append ( s ) ; }
target_method ( self , method ) : NEW_LINE INDENT if not self . target_method ( method ) : NEW_LINE INDENT return NEW_LINE DEDENT self . target_method ( method ) NEW_LINE DEDENT
proxy_methods ( self ) : NEW_LINE INDENT proxy_methods = [ ] NEW_LINE for method in self . methods : NEW_LINE INDENT proxy_methods . append ( method ) NEW_LINE DEDENT return proxy_methods NEW_LINE DEDENT
def def createChainDelegate ( self , chain ) : NEW_LINE INDENT self . chain = chain NEW_LINE self . chain . start ( ) NEW_LINE return self . chain NEW_LINE DEDENT
create_proxy_method ( self ) : NEW_LINE INDENT proxy = self . proxy NEW_LINE if not proxy : NEW_LINE INDENT return NEW_LINE DEDENT method = proxy . method NEW_LINE if not method . is_proxy ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return method NEW_LINE DEDENT
parse_path ( self , path ) : NEW_LINE INDENT if path is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( path , six . string_types ) : NEW_LINE INDENT return path NEW_LINE DEDENT if isinstance ( path , six . string_types ) : NEW_LINE INDENT return path NEW_LINE DEDENT if isinstance ( path , six . string_types ) : NEW_LINE INDENT return path NEW_LINE DEDENT return path NEW_LINE DEDENT
push ( self , path ) : NEW_LINE INDENT self . path . append ( path ) NEW_LINE DEDENT

read_method_name ( self , method_name ) : NEW_LINE INDENT method_name = method_name . strip ( ) NEW_LINE if not method_name : NEW_LINE INDENT return None NEW_LINE DEDENT return method_name ; }
static List < Field > getFields ( Collection < Field > fields ) { if ( fields == null ) { return new ArrayList < Field > ( ) ; } if ( fields . size ( ) == 0 ) { return new ArrayList < Field > ( ) ; } else { return new ArrayList < Field > ( ) ; } }
public static < T > T getProxetta ( Class < T > beanClass ) { return proxetta . getProxetta ( beanClass ) ; }
convert_transaction_mode ( self , transaction_mode ) : NEW_LINE INDENT if transaction_mode is not None : NEW_LINE INDENT return transaction_mode NEW_LINE DEDENT else : NEW_LINE INDENT return transaction_mode NEW_LINE DEDENT DEDENT
read_property ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties [ self . name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , String > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >

write ( self , content ) : NEW_LINE INDENT self . writer . write ( content ) NEW_LINE self . writer . flush ( ) NEW_LINE DEDENT
write_content ( self , content ) : NEW_LINE INDENT self . _write_content ( content ) NEW_LINE self . _write_content ( content ) NEW_LINE DEDENT
write ( self , content , progressListener ) : NEW_LINE INDENT self . progressListener = progressListener NEW_LINE self . content = content NEW_LINE DEDENT
static String getString ( String key ) { if ( key == null ) { return null ; } if ( key . length ( ) == 0 ) { return " " ; } if ( key . length ( ) == 1 ) { return " " ; } if ( key . length ( ) == 2 ) { return " " ; } if ( key . length ( ) == 3 ) { return " " ; } return key ; }
def def get_integer_value ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_integer_value ( key ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_integer_value ( key ) NEW_LINE DEDENT DEDENT
long getLong ( String key ) { if ( key == null ) { throw new IllegalArgumentException ( ) ; } long value = Long . parseLong ( key ) ; if ( value == - 1 ) { throw new IllegalArgumentException ( ) ; } return value ; }
double getDouble ( String key ) { if ( key == null ) { throw new IllegalArgumentException ( ) ; } double value = Double . parseDouble ( key ) ; if ( value == null ) { throw new IllegalArgumentException ( ) ; } return value ; }
float getFloat ( String key ) { if ( key == null || key . length ( ) == 0 ) { return 0 ; } float value = Float . parseFloat ( key ) ; if ( value == null ) { return 0 ; } return value ; }
get_value ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , key ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return getattr ( self , key ) NEW_LINE DEDENT DEDENT
def def put ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _json . put ( key , value ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _json . put ( key , value ) NEW_LINE DEDENT DEDENT
open_folder ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _open_folder ( name ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
main_email_receipt_method ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . email_receipt_method ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . email_receipt_method ( ) NEW_LINE self . email_receipt_method ( ) NEW_LINE DEDENT DEDENT
update_email_flags ( self , email_flags ) : NEW_LINE INDENT if not email_flags : NEW_LINE INDENT return NEW_LINE DEDENT email_flags = email_flags . copy ( ) NEW_LINE email_flags . update ( email_flags ) NEW_LINE return NEW_LINE DEDENT
close ( self ) : NEW_LINE INDENT if self . _closed : NEW_LINE INDENT return NEW_LINE DEDENT self . _closed = True NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

void reset ( ) { super . reset ( ) ; logger . debug ( " Validates action : { } " , this . getClass ( ) ) ; }

mime_type ( self , mime_type ) : NEW_LINE INDENT if mime_type is None : NEW_LINE INDENT mime_type = self . mime_type NEW_LINE DEDENT return mime_type NEW_LINE DEDENT
download_file ( self , name , mime_type = None ) : NEW_LINE INDENT if not mime_type : NEW_LINE INDENT mime_type = mimetypes . guess_type ( name ) [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT mime_type = mimetypes . guess_type ( name ) [ 0 ] NEW_LINE DEDENT if not mime_type : NEW_LINE INDENT mime_type = mimetypes . guess_type ( mime_type ) [ 0 ] NEW_LINE DEDENT return mime_type NEW_LINE DEDENT
def _parse_class_input_stream ( self , class_input_stream ) : NEW_LINE INDENT if isinstance ( class_input_stream , str ) : NEW_LINE INDENT return class_input_stream NEW_LINE DEDENT elif isinstance ( class_input_stream , str ) : NEW_LINE INDENT return class_input_stream NEW_LINE DEDENT DEDENT
static Class < ? > loadClass ( String className ) throws ClassNotFoundException { if ( className == null ) { throw new ClassNotFoundException ( className ) ; } Class < ? > clazz = Class . forName ( className ) ; if ( clazz == null ) { throw new ClassNotFoundException ( className ) ; } if ( clazz == null ) { throw new ClassNotFoundException ( className ) ; } return clazz ; }
target ( cls ) : NEW_LINE INDENT if isinstance ( cls , type ) : NEW_LINE INDENT return cls NEW_LINE DEDENT else : NEW_LINE INDENT return cls NEW_LINE DEDENT DEDENT
create_destination_class ( self ) : NEW_LINE INDENT def create_destination_class ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT return create_destination_class ( self ) NEW_LINE DEDENT
static byte [ ] getBytes ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isArray ( ) ) { return new byte [ 0 ] ; } return new byte [ 0 ] ; }
def def __init__ ( self , * args , ** kwargs ) : NEW_LINE INDENT self . args = args NEW_LINE self . kwargs = kwargs NEW_LINE DEDENT
create ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . __new__ ( cls ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_class_content ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_class_content ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _write_class_content ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def public public public public static final public static final void add public static final void add ( final String address , final String address , final String address ) { if ( address != null ) { if ( address != null ) { if ( address != null ) { if ( address != null ) { if ( address != null ) { if ( address != null ) { return ; }
public public static final void addAddress ( final String name , final String name , final String email , final String address ) { if ( name == null || name . isEmpty ( ) || name . equals ( " " " ) || name . isEmpty ( ) || name . equals ( " " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " ) || name . equals ( " " )
def def public public public public public static final public static final void add ( final String address , final String address ) { if ( addresses . isEmpty public public public public public static public static final public static final void add public static final public static final void add public static final void add public static final void add ( final String address , final String address ) { if ( addresses . size ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) > 0 ) { if ( addresses . size ( ) <

static String plainText ( String text ) { if ( text == null ) { return " " ; } if ( text . length ( ) == 0 ) { return " " ; } return text . trim ( ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String getSystemProperty ( String key ) { if ( key == null ) { return " " ; } if ( key . equals ( " " ) ) { return " " ; } if ( key . equals ( " " ) ) { return " " ; } if ( key . equals ( " " ) ) { return " " ; } if ( key . equals ( " " ) ) { return " " ; } if ( key . equals ( " " ) ) { return " " ; } return key ; }
boolean getBoolean ( String name ) { if ( name == null ) { return false ; } if ( name . equals ( " true " ) ) { return true ; } if ( name . equals ( " false " ) ) { return false ; } if ( name . equals ( " false " ) ) { return false ; } return true ; }
static int getSystemProperty ( String property ) { if ( System . getProperty ( property ) == null ) { System . setProperty ( property , " " ) ; } else { System . setProperty ( property , " " ) ; } return System . getProperty ( property ) ; }
static long getSystemProperty ( String name ) { if ( name == null ) { return - 1 ; } if ( name . length ( ) == 0 ) { return - 1 ; } if ( name . length ( ) == 0 ) { return - 1 ; } if ( name . length ( ) == 0 ) { return - 1 ; } if ( name . length ( ) == 0 ) { return - 1 ; } return - 1 ; }
parse_method_parameters ( self ) : NEW_LINE INDENT if self . method_parameters is None : NEW_LINE INDENT self . method_parameters = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . method_parameters = self . method_parameters . copy ( ) NEW_LINE DEDENT DEDENT
def serialize ( self , key , value ) : NEW_LINE INDENT return self . serializer . serialize ( key , value ) NEW_LINE DEDENT


result_path ( self ) : NEW_LINE INDENT result_path = self . result_path ( ) NEW_LINE if result_path is not None : NEW_LINE INDENT return result_path NEW_LINE DEDENT return result_path NEW_LINE DEDENT
resolve_full_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT if path . endswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
static String lastDot ( String slash ) { if ( slash == null || slash . length ( ) == 0 ) { return " " ; } return slash . substring ( 1 ) ; }


removesLastCamelWord ( self , word ) : NEW_LINE INDENT if not word : NEW_LINE INDENT return False NEW_LINE DEDENT if not word : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
static String getDefaultSchemaName ( ) { String defaultSchemaName = null ; if ( defaultSchemaName != null ) { defaultSchemaName = defaultSchemaName . trim ( ) ; } return defaultSchemaName ; }
static ColumnDescriptor getColumnDescriptor ( Entity entity ) { if ( entity != null ) { return new ColumnDescriptor ( entity ) ; } else { return new ColumnDescriptor ( ) ; } }
initialize ( self , key , tweak ) : NEW_LINE INDENT self . key = key NEW_LINE self . tweak = tweak NEW_LINE DEDENT
static void main ( String [ ] args ) { if ( args == null ) { return ; } if ( args . length == 0 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 4 ) { return ; } if ( args . length == 5 ) { return ; } if ( args . length == 6 ) { return ; } }
un_MIX_function ( self ) : NEW_LINE INDENT return self . _un_MIX_function ( ) NEW_LINE DEDENT
create_subkeys ( self ) : NEW_LINE INDENT subkeys = [ ] NEW_LINE for key in self . subkeys : NEW_LINE INDENT subkeys . append ( key ) NEW_LINE DEDENT return subkeys NEW_LINE DEDENT
init_cipher ( self , cipher ) : NEW_LINE INDENT self . cipher = cipher NEW_LINE DEDENT
encrypt ( self , block ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _encrypt ( block ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static long [ ] decode ( byte [ ] array ) { long [ ] array = new long [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = array [ i ] ; } return array ; }
remove ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . strip ( ) NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string . strip ( ) NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string . strip ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def path ( self , path ) : NEW_LINE INDENT if path is None : NEW_LINE INDENT return None NEW_LINE DEDENT return path NEW_LINE DEDENT
compress ( self , file ) : NEW_LINE INDENT if isinstance ( file , str ) : NEW_LINE INDENT file = open ( file , ' rb ' ) NEW_LINE DEDENT else : NEW_LINE INDENT file = file . read ( ) NEW_LINE DEDENT return file NEW_LINE DEDENT
compress ( self , file ) : NEW_LINE INDENT if isinstance ( file , str ) : NEW_LINE INDENT file = open ( file , ' rb ' ) NEW_LINE DEDENT else : NEW_LINE INDENT file = file . read ( ) NEW_LINE DEDENT return file NEW_LINE DEDENT
decompress ( self , archive ) : NEW_LINE INDENT try : NEW_LINE INDENT return gzip . decompress ( archive ) NEW_LINE DEDENT except zlib . error : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
zip_content ( self , content ) : NEW_LINE INDENT content = self . _flatten_content ( content ) NEW_LINE if self . _flatten_content ( content ) : NEW_LINE INDENT return content NEW_LINE DEDENT else : NEW_LINE INDENT return content NEW_LINE DEDENT DEDENT
extract_zip_file ( self , filename ) : NEW_LINE INDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return zipfile . ZipFile ( filename ) NEW_LINE DEDENT else : NEW_LINE INDENT return zipfile . ZipFile ( filename ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ZIP__python____python____python____python____python__ def def def def def def ZIP__python____python____python____python____python__ def def def def ZIP__python____python____python____python____python__ def def def def def ZIP__python____python____python____python____python__ def def def def ZIP__python____python____python____python____python__ def def def def def ___python____python____python____python__ def def def def _
def def add_content ( self , content ) : NEW_LINE INDENT if isinstance ( content , bytes ) : NEW_LINE INDENT content = BytesIO ( content ) NEW_LINE DEDENT else : NEW_LINE INDENT content = content . read ( ) NEW_LINE DEDENT return content NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_declared_flag ( self ) : NEW_LINE INDENT return self . _declared_flag NEW_LINE DEDENT


static String getCurrentLocale ( ) { if ( currentLocale == null ) { currentLocale = Locale . getDefault ( ) ; } if ( currentLocale == null ) { currentLocale = Locale . getDefault ( ) ; } return currentLocale . getLanguage ( ) ; }
String [ ] getParamKeys ( Object bean ) { if ( bean == null ) { return null ; } if ( bean . getClass ( ) . isArray ( ) ) { return new String [ ] { bean . getClass ( ) . getComponent ( ) . getName ( ) } ; } return null ; }


byte [ ] read ( InputStream input ) throws IOException { if ( input == null ) { throw new IOException ( " Input stream is null " ) ; } byte [ ] content = new byte [ input . readableBytes ( ) ] ; input . read ( content ) ; return content ; }
static Label getLabel ( int offset ) { if ( offset == - 1 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 2 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 2 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 2 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 2 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 1 ) { return null ; } if ( offset == - 2 ) { return null ; } if ( offset == - 1 ) { return null
static byte [ ] get_bytecode_offset ( JVMS type_annotation ) { if ( type_annotation != null ) { return type_annotation . get_bytecode_offset ( ) ; } if ( type_annotation != null ) { return type_annotation . get_bytecode_offset ( ) ; } if ( type_annotation != null ) { return type_annotation . get_bytecode_offset ( ) ; } return null ; }
the element values of a JVMS annotation structure . This method can also be used to read the values of the JVMS array_value field of an annotation .
static JVMS verification_type_info get ( int index ) { JVMS verification_type_info [ index ] = new JVMSVerificationTypeInfo ( ) ; return verification_type_info [ index ] ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


def def get_instance_map ( self , request ) : NEW_LINE INDENT return self . _instance_map . get ( request ) NEW_LINE DEDENT
static Map < String , String > instanceMap ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , key ) ; map . put ( " value " , value ) ; return map ; }
convert_array_to_array ( self , value ) : NEW_LINE INDENT if isinstance ( value , array ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
init ( self , manager , parser ) : NEW_LINE INDENT self . manager = manager NEW_LINE self . parser = parser NEW_LINE DEDENT
def def def file consumer ( self ) : NEW_LINE INDENT def consumer ( self ) : NEW_LINE INDENT return self . _file_consumer ( ) NEW_LINE DEDENT def consumer ( self ) : NEW_LINE INDENT return self . _file_consumer ( ) NEW_LINE DEDENT DEDENT
search_path ( self , uri ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _search_path ( uri ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _search_path ( uri ) NEW_LINE DEDENT DEDENT
search_path ( self , search_path ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _search_path ( search_path ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
include_patterns ( self , patterns ) : NEW_LINE INDENT patterns = [ ] NEW_LINE for pattern in patterns : NEW_LINE INDENT patterns . append ( pattern ) NEW_LINE DEDENT for pattern in patterns : NEW_LINE INDENT patterns . append ( pattern ) NEW_LINE DEDENT return patterns NEW_LINE DEDENT
exclude_patterns ( self , patterns ) : NEW_LINE INDENT for pattern in patterns : NEW_LINE INDENT if pattern in self . patterns : NEW_LINE INDENT self . patterns . remove ( pattern ) NEW_LINE DEDENT DEDENT DEDENT
add_file ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT if path . endswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT elif path . endswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT elif path . endswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT elif path . endswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT elif path . endswith ( " / " ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
find_all_files ( self ) : NEW_LINE INDENT files = [ ] NEW_LINE for f in self . files : NEW_LINE INDENT files . append ( f ) NEW_LINE DEDENT return files NEW_LINE DEDENT
walk ( self ) : NEW_LINE INDENT self . _walk ( ) NEW_LINE self . _walk ( ) NEW_LINE DEDENT
walk ( self ) : NEW_LINE INDENT return self . _walk ( ) NEW_LINE DEDENT
auto_wire ( self , annotation ) : NEW_LINE INDENT if not self . auto_wire : NEW_LINE INDENT return None NEW_LINE DEDENT self . auto_wire = True NEW_LINE return self . auto_wire NEW_LINE DEDENT
String resolveBeanName ( Class < ? > beanClass , String beanName ) { if ( beanClass != null ) { return beanClass . getName ( ) ; } if ( beanName != null ) { return beanName ; } if ( beanClass != null ) { return beanClass . getName ( ) ; } return null ; }
writer ( self ) : NEW_LINE INDENT writer = self . _writer NEW_LINE if writer is None : NEW_LINE INDENT return None NEW_LINE DEDENT return writer NEW_LINE DEDENT

String getName ( Class < ? > type ) { if ( type . isPrimitive ( ) ) { return type . getName ( ) ; } if ( type . isArray ( ) ) { return type . getName ( ) ; } return type . getName ( ) ; }
public public public public static final String get_descriptor ( Class < ? > clazz , String name ) { if ( clazz == null ) { return null ; } if ( clazz == null ) { return null ; } else { return clazz . getName ( ) ; } }
get_descriptor ( self , argument ) : NEW_LINE INDENT return self . _get_descriptor ( argument ) NEW_LINE DEDENT
get_descriptor ( self , method ) : NEW_LINE INDENT descriptor = self . _get_descriptor ( method ) NEW_LINE return descriptor NEW_LINE DEDENT

size ( self ) : NEW_LINE INDENT return self . _size NEW_LINE DEDENT
static int size ( ) { int size = 0 ; for ( int i = 0 ; i < arguments . size ( ) ; i ++ ) { size += arguments . get ( i ) ; } return size ; }
roll_back_transaction ( self , transaction ) : NEW_LINE INDENT if not self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid_transaction ( transaction ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
commit ( self ) : NEW_LINE INDENT self . _commit ( ) NEW_LINE self . _rollback ( ) NEW_LINE DEDENT
rollback ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
create ( self , resource ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create ( resource ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . error ( " Failed to create resource : % s " , e ) NEW_LINE raise e NEW_LINE DEDENT DEDENT
write_name ( self , name ) : NEW_LINE INDENT if isinstance ( name , str ) : NEW_LINE INDENT name = name . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( name , str ) : NEW_LINE INDENT name = name . encode ( ' utf - 8' ) NEW_LINE DEDENT return name NEW_LINE DEDENT
def write ( self , value ) : NEW_LINE INDENT if isinstance ( value , basestring ) : NEW_LINE INDENT value = value . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( value , unicode ) : NEW_LINE INDENT value = value . encode ( ' utf - 8' ) NEW_LINE DEDENT return value NEW_LINE DEDENT
unicode_representation ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _unicode_representation NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _unicode_representation NEW_LINE DEDENT DEDENT
static char [ ] toCharArray ( char [ ] buffer ) { if ( buffer == null ) { return new char [ 0 ] ; } if ( buffer . length == 0 ) { return new char [ 0 ] ; } if ( buffer . length == 0 ) { return new char [ 0 ] ; } return new char [ buffer . length ] ; }

set_region_length ( self , region_length ) : NEW_LINE INDENT self . region_length = region_length NEW_LINE DEDENT
is_attribute ( self , attribute ) : NEW_LINE INDENT if isinstance ( attribute , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( attribute , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( attribute , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def pseudo ( self ) : NEW_LINE INDENT return self . pseudo_function ( ) NEW_LINE DEDENT
def def get_pseudo_function ( self , pseudo_function_name ) : NEW_LINE INDENT pseudo_function_name = self . pseudo_function_name NEW_LINE if pseudo_function_name is not None : NEW_LINE INDENT return pseudo_function_name NEW_LINE DEDENT else : NEW_LINE INDENT return pseudo_function_name NEW_LINE DEDENT DEDENT
create_destination_header ( self ) : NEW_LINE INDENT self . _destination_header = [ ] NEW_LINE self . _destination_header . append ( self . _destination_header ) NEW_LINE self . _destination_header . append ( self . _destination_header ) NEW_LINE return self . _destination_header NEW_LINE DEDENT
public public public static void addDestinationTypeAnnotationsToTarget ( final Class < ? extends Annotation [ ] annotations , final Class < ? extends Annotation [ ] > destinationType annotations , final Class < ? extends Annotation [ ] > destinationTypeAnnotations , final Class < ? extends Annotation [ ] > destinationTypeAnnotations = new Class < ? extends Annotation [ ] > [ ] { } }
static void init ( ) { if ( ! initialized ) { return ; } initialized = true ; initialized = false ; }
void init ( ) throws Exception { if ( this . destination != null ) { this . destination . init ( ) ; this . destination . init ( ) ; } }
void check ( ) { if ( super . check ( ) ) { return ; } if ( super . check ( ) ) { return ; } }
find_last_index ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _find_last_index ( element ) NEW_LINE DEDENT DEDENT
chalked_string ( self , string ) : NEW_LINE INDENT return self . _chalked_string ( string ) NEW_LINE DEDENT
static ClassWriter roundtrip ( ClassReader classReader , ClassWriter classWriter ) { if ( classReader == null ) { throw new IllegalArgumentException ( " ClassReader is null . " ) ; } if ( classWriter == null ) { throw new IllegalArgumentException ( " ClassWriter is null . " ) ; } return classWriter . roundtrip ( classReader ) ; }
prototypes ( self ) : NEW_LINE INDENT return self . __class__ . __dict__ . copy ( ) NEW_LINE DEDENT
def def get_sql def get_sql_sql_types ( self ) : NEW_LINE INDENT return self . _sql_types . get_sql_types ( ) NEW_LINE DEDENT

def get_sql_type ( self ) : NEW_LINE INDENT return self . sql_types . get_sql_type ( ) NEW_LINE DEDENT
instance_instances ( self ) : NEW_LINE INDENT return self . _instance_instances ( ) NEW_LINE DEDENT
SOCKS4Proxy getProxy ( ) { if ( proxy == null ) { return null ; } SOCKS4Proxy proxy = new SOCKS4Proxy ( proxy ) ; return proxy ; }
SOCKS5Proxy getProxy ( ) throws SOCKS5Exception { SOCKS5Proxy proxy = new SOCKS5Proxy ( ) ; proxy . setName ( " SOCKS5Proxy " ) ; proxy . setType ( SOCKS5Type . SOCKS5 ) ; proxy . setProtocol ( SOCKS5Protocol . SOCKS5 ) ; proxy . setType ( SOCKS5Type . SOCKS5 ) ; return proxy ; }

get_total_transactions ( self ) : NEW_LINE INDENT transactions = [ ] NEW_LINE for transaction in self . transactions : NEW_LINE INDENT transactions . append ( transaction ) NEW_LINE DEDENT return transactions NEW_LINE DEDENT
total_transactions ( self ) : NEW_LINE INDENT status = self . status NEW_LINE if status is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return status NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_transaction_mode ( self ) : NEW_LINE INDENT if self . transaction_mode is not None : NEW_LINE INDENT return self . transaction_mode NEW_LINE DEDENT return self . transaction_mode NEW_LINE DEDENT
def def get_resource_manager ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _resource_manager . get_resource_manager ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _resource_manager NEW_LINE DEDENT DEDENT
proxy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . proxy NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void appendMethod ( final String methodName , final String path ) { if ( methodName == null ) { throw new IllegalArgumentException ( " Method name must not be null " ) ; } if ( path == null ) { throw new IllegalArgumentException ( " Method name must not be null " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " Method name must not be empty " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " Method name must not be empty " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " Method name must not be empty " ) ; } }

pretty_string ( obj ) : NEW_LINE INDENT if isinstance ( obj , str ) : NEW_LINE INDENT return obj NEW_LINE DEDENT else : NEW_LINE INDENT return obj NEW_LINE DEDENT DEDENT
String convert ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return null ; } if ( value . length ( ) == 1 ) { return value . substring ( 0 , 1 ) ; } return value ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_tabs_to_spaces ( self , tab_width ) : NEW_LINE INDENT self . tab_width = tab_width NEW_LINE self . tab_width = tab_width NEW_LINE return self . tab_width NEW_LINE DEDENT
public static String toString ( String s ) { return s . replaceAll ( " \\s + " , " " ) ; }
unescapes ( self , string ) : NEW_LINE INDENT if not isinstance ( string , six . string_types ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
static PetiteBean getInstance ( String beanName ) { if ( beanName == null ) { throw new IllegalArgumentException ( " Bean name cannot be null . " ) ; } return new PetiteBean ( beanName ) ; }
void inject ( Petite bean ) { if ( bean == null ) { throw new IllegalArgumentException ( " bean cannot be null . " ) ; } if ( bean . isConstructor ( ) ) { throw new IllegalArgumentException ( " bean cannot be injected . " ) ; } if ( bean . isProperty ( ) ) { throw new IllegalArgumentException ( " bean cannot be injected . " ) ; } }
initialize_bean ( self ) : NEW_LINE INDENT if self . bean_definition : NEW_LINE INDENT self . bean_definition = self . bean_definition . copy ( ) NEW_LINE DEDENT DEDENT
get_bean ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_bean ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void addSingletonBean ( Object bean ) { if ( bean instanceof SingletonBean ) { SingletonBean singletonBean = ( SingletonBean ) bean ; if ( singletonBean . isSingleton ( ) ) { singletonBean . addSingletonBean ( bean ) ; } } }
petite_bean_property ( self ) : NEW_LINE INDENT def petite_bean_property ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT return petite_bean_property NEW_LINE DEDENT
petite_bean_property_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
shutdown ( self ) : NEW_LINE INDENT if self . container is not None : NEW_LINE INDENT self . container . shutdown ( ) NEW_LINE self . container = None NEW_LINE DEDENT DEDENT
static < T > List < T > getMethods ( Class < T > target ) { if ( target == null ) { throw new IllegalArgumentException ( " target is null " ) ; } return new ArrayList < T > ( ) ; }
population ( self ) : NEW_LINE INDENT return self . _population NEW_LINE DEDENT
replace_macros ( self , macros ) : NEW_LINE INDENT return self . _replace_macros ( macros ) NEW_LINE DEDENT
def build_tree ( self ) : NEW_LINE INDENT return self . _build_tree ( ) NEW_LINE DEDENT
create_element ( self , element ) : NEW_LINE INDENT self . _element = element NEW_LINE return self . _element NEW_LINE DEDENT
tags ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _tags NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_last_child_node ( self , text ) : NEW_LINE INDENT if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT return text NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String getActionClassName ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } return clazz . getName ( ) ; }
calculate_calculates ( self ) : NEW_LINE INDENT self . _calculates = [ ] NEW_LINE self . _calculates . append ( self ) NEW_LINE return self . _calculates NEW_LINE DEDENT
iterate_collection ( self , collection ) : NEW_LINE INDENT for item in collection : NEW_LINE INDENT yield item NEW_LINE DEDENT DEDENT
iter_arrays ( self ) : NEW_LINE INDENT for i in range ( self . ndim ) : NEW_LINE INDENT for j in range ( self . ndim ) : NEW_LINE INDENT yield i NEW_LINE DEDENT DEDENT DEDENT
replace_pattern ( self , pattern , replacement ) : NEW_LINE INDENT return self . replace_pattern ( pattern , replacement ) NEW_LINE DEDENT
static String replaceCharacters ( String string , char c ) { return replaceCharacters ( string , c ) ; }
replace_characters ( self , characters ) : NEW_LINE INDENT if len ( characters ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT elif len ( characters ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
static String substring ( String string , int start , int end ) { if ( string == null ) { return null ; } return substring ( start , end ) ; }
static String firstOccurrence ( String str ) { if ( str == null ) { return null ; } if ( str . length ( ) == 0 ) { return " " ; } if ( str . length ( ) == 1 ) { return " " ; } return str . substring ( 0 , 1 ) ; }
replace_last_occurrence ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _replace_last_occurrence ( string ) NEW_LINE DEDENT
static String removeLastOccurrence ( String string ) { if ( string == null ) { return null ; } return string . substring ( 0 , string . length ( ) - 1 ) ; }
remove_substring_from_string ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT substring_count = len ( string ) NEW_LINE if substring_count == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif substring_count == 1 : NEW_LINE INDENT return string NEW_LINE DEDENT elif substring_count == 2 : NEW_LINE INDENT return string NEW_LINE DEDENT return string NEW_LINE DEDENT
remove_single_character_from_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return self . _remove_single_character_from_string ( string ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _remove_single_character_from_string ( string ) NEW_LINE DEDENT DEDENT
static boolean isEmptyString ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } return false ; }
static boolean isNullOrEmpty ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 0 ) { return true ; } return false ; }
convert_array_to_string ( self , input ) : NEW_LINE INDENT if isinstance ( input , array ) : NEW_LINE INDENT return input NEW_LINE DEDENT elif isinstance ( input , str ) : NEW_LINE INDENT return convert_array_to_string ( input ) NEW_LINE DEDENT elif isinstance ( input , list ) : NEW_LINE INDENT return convert_array_to_string ( input ) NEW_LINE DEDENT else : NEW_LINE INDENT return convert_array_to_string ( input ) NEW_LINE DEDENT DEDENT
void changeFirstCharacterCase ( String firstCharacterCase ) { if ( firstCharacterCase == null ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 0 ) { return ; } if ( firstCharacterCase . length ( ) == 1 ) { return ; } if ( firstCharacterCase . length ( ) == 1 ) { return

def Compress multiple occurrences of given char into one appearance .
static boolean startsWith ( String prefix , int index ) { if ( prefix == null ) { throw new IllegalArgumentException ( " prefix must not be null " ) ; } if ( index == - 1 ) { throw new IllegalArgumentException ( " index must not be null " ) ; } if ( index == - 1 ) { throw new IllegalArgumentException ( " index must not be null " ) ; } return index >= 0 ; }
static boolean endsWith ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 1 ) { return true ; } return false ; }
countOccurrences ( self , source ) : NEW_LINE INDENT try : NEW_LINE INDENT return len ( source ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
compare_string_arrays ( self , string_arrays ) : NEW_LINE INDENT if len ( string_arrays ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( string_arrays ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
first_index ( self , index ) : NEW_LINE INDENT index = self . index NEW_LINE if index is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return index NEW_LINE DEDENT DEDENT
strip_leading_char ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
strip_trailing_char ( self , string ) : NEW_LINE INDENT if len ( string ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( string ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( string ) == 2 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT return ' ' NEW_LINE DEDENT
def strip_leading_trailing_char ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _strip_leading_trailing_char ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def get_first_character ( self , char ) : NEW_LINE INDENT return self . _get_first_character ( ) NEW_LINE return self . _get_character ( ) NEW_LINE DEDENT
strip_first_character ( self , char ) : NEW_LINE INDENT return self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_character ( self . _strip_first_character ( self . _strip_character ( self . _strip_character (
static String [ ] getStringArray ( String [ ] stringArray ) { String [ ] stringArray = new String [ stringArray . length ] ; for ( int i = 0 ; i < stringArray . length ; i ++ ) { stringArray [ i ] = stringArray [ i ] . trim ( ) ; } return stringArray ; }
trim ( self , left , right ) : NEW_LINE INDENT if left == right : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
Trim whitespaces ( self , text ) : NEW_LINE INDENT text = text . strip ( ) NEW_LINE if text : NEW_LINE INDENT return text NEW_LINE DEDENT return text NEW_LINE DEDENT
def def get_region_indexes ( self , region ) : NEW_LINE INDENT return self . _regions . get_region ( region ) NEW_LINE DEDENT
static String join ( Collection < Object > objects , String separator ) { if ( separator == null ) { separator = " " ; } return separator . join ( objects ) ; }
static String join ( Object [ ] objects , String separator ) { if ( objects == null ) { return null ; } if ( separator == null ) { separator = " " ; } return separator . join ( objects ) ; }
static String charset ( String charset ) { if ( charset == null ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } if ( charset . length ( ) == 0 ) { return null ; } return charset ; }
compare_char ( self , char ) : NEW_LINE INDENT if isinstance ( char , str ) : NEW_LINE INDENT return self . compare_char ( char ) NEW_LINE DEDENT elif isinstance ( char , int ) : NEW_LINE INDENT return self . compare_char ( char ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . compare_char ( char ) NEW_LINE DEDENT DEDENT
static String strip ( String string ) { if ( string == null ) { return null ; } String prefix = string . trim ( ) ; String suffix = string . trim ( ) ; if ( suffix == null ) { return null ; } return prefix + suffix ; }
insert_prefix ( self , prefix ) : NEW_LINE INDENT if not prefix : NEW_LINE INDENT return NEW_LINE DEDENT if not prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT prefix = prefix [ len ( self . prefix ) : ] NEW_LINE if not prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT if not prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT prefix = prefix [ len ( self . prefix ) : ] NEW_LINE if not prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT return prefix NEW_LINE DEDENT
static String getAppendsSuffix ( String suffix ) { if ( suffix == null ) { return " " ; } if ( suffix . equals ( " " ) ) { return " " ; } if ( suffix . equals ( " " ) ) { return " " ; } return suffix ; }
cut_string ( self , substring ) : NEW_LINE INDENT if not substring : NEW_LINE INDENT return " " NEW_LINE DEDENT if not self . is_valid_substring ( substring ) : NEW_LINE INDENT return " " NEW_LINE DEDENT if not self . is_valid_substring ( substring ) : NEW_LINE INDENT return " " NEW_LINE DEDENT if not self . is_valid_substring ( substring ) : NEW_LINE INDENT return " " NEW_LINE DEDENT return " " NEW_LINE DEDENT
cut_string ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return string . substring ( 0 , len ( string ) - 1 ) NEW_LINE DEDENT DEDENT
prefix ( self , prefix ) : NEW_LINE INDENT if not prefix : NEW_LINE INDENT return None NEW_LINE DEDENT if not prefix : NEW_LINE INDENT return None NEW_LINE DEDENT return prefix NEW_LINE DEDENT
sufix ( self ) : NEW_LINE INDENT if not self . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if self . exists ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
remove_prefix_suffix ( prefix , suffixes ) : NEW_LINE INDENT prefix = prefix . strip ( ) NEW_LINE suffixes = suffixes . strip ( ) NEW_LINE for suffix in suffixes : NEW_LINE INDENT if suffix . startswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . endswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . startswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . endswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . startswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . endswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . startswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . endswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if suffix . startswith ( prefix ) : NEW_LINE INDENT continue NEW_LINE DEDENT if

static String create ( String string ) { if ( string . length ( ) == 0 ) { return " " ; } if ( string . length ( ) == 0 ) { return " " ; } return string . substring ( 0 , string . length ( ) - 1 ) ; }
reverse ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string . reverse ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
max_common_prefix ( self , prefix ) : NEW_LINE INDENT return self . _max_common_prefix ( prefix ) NEW_LINE DEDENT
static String findCommonPrefix ( List < String > arguments ) { if ( arguments == null ) { return null ; } String prefix = arguments . get ( 0 ) ; if ( prefix == null ) { prefix = " " ; } else { prefix = prefix . trim ( ) ; } return prefix ; }
static String toShorten ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } return string . substring ( 0 , string . length ( ) - 1 ) ; }
static String upperCase ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } return string . toUpperCase ( Locale . getDefault ( ) ) ; }
remove_quotes ( self ) : NEW_LINE INDENT return self . _remove_quotes ( ) NEW_LINE DEDENT
static String hexString ( byte [ ] bytes ) { String hexString = new String ( bytes ) ; if ( bytes . length == 0 ) { return hexString ; } else { return hexString ; } }
static byte [ ] getBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return new byte [ 0 ] ; } return bytes ; }
quote ( self , quote_char ) : NEW_LINE INDENT if quote_char : NEW_LINE INDENT return quote_char NEW_LINE DEDENT elif quote_char : NEW_LINE INDENT return quote_char NEW_LINE DEDENT elif quote_char : NEW_LINE INDENT return quote_char NEW_LINE DEDENT DEDENT
public void visitAnnotation ( Annotation annotation , String value ) { if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } } }



remove_entity ( self , entity ) : NEW_LINE INDENT if not entity . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT entity . delete ( ) NEW_LINE DEDENT
remove ( self , entity ) : NEW_LINE INDENT descriptor = self . _get_descriptor ( entity ) NEW_LINE if descriptor is None : NEW_LINE INDENT return None NEW_LINE DEDENT return descriptor . delete ( ) NEW_LINE DEDENT

def _get_interface ( self ) : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT
inject ( self , target ) : NEW_LINE INDENT if isinstance ( target , str ) : NEW_LINE INDENT return target NEW_LINE DEDENT else : NEW_LINE INDENT return target NEW_LINE DEDENT DEDENT

static DbOomEngine getInstance ( ) { return new DbOomEngine ( ) ; }
flush ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . output . flush ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . output . flush ( ) NEW_LINE self . output . flush ( ) NEW_LINE DEDENT DEDENT
write ( self , byte ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . write ( byte ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_session_identifiers ( self , session_identifiers ) : NEW_LINE INDENT if session_identifiers is not None : NEW_LINE INDENT return self . _remove_session_identifiers ( session_identifiers ) NEW_LINE DEDENT return self . _remove_session_identifiers ( ) NEW_LINE DEDENT
encode_attachment_name ( attachment_name ) : NEW_LINE INDENT attachment_name = attachment_name . encode ( ) NEW_LINE attachment_name = attachment_name . encode ( ) NEW_LINE attachment_name = attachment_name . encode ( ) NEW_LINE return attachment_name NEW_LINE DEDENT
byte [ ] getContent ( ) { if ( attachment != null ) { return attachment . getContent ( ) ; } return null ; }
save ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _save ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _save ( ) NEW_LINE DEDENT DEDENT
save ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _save ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _save ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
def add_description ( description ) : NEW_LINE INDENT description = description . replace ( ' ' ' , ' ' , ' ' ) NEW_LINE return description NEW_LINE DEDENT
static void addPrepends ( String description ) { if ( description == null ) { return ; } if ( description . length ( ) == 0 ) { return ; } if ( description . length ( ) == 0 ) { return ; } if ( description . length ( ) == 1 ) { return ; } if ( description . length ( ) == 2 ) { return ; } if ( description . length ( ) == 1 ) { return ; } if ( description . length ( ) == 2 ) { return ; } if ( description . length ( ) == 1 ) { return ; } if ( description . length ( ) == 2 ) { return ; } if ( description . length ( ) == 1 ) { return ; } if ( description . length ( ) == 2 ) { return ; } if ( description . length ( ) == 1 ) { return ; } if ( description . length ( ) == 2 ) { return ; } if ( description . length ( ) == 1
def def type ( self ) : NEW_LINE INDENT type = self . _type NEW_LINE if isinstance ( self . _type , type ) : NEW_LINE INDENT return self . _type NEW_LINE DEDENT return type NEW_LINE DEDENT
clean_ whitespaces ( self , whitespaces ) : NEW_LINE INDENT if whitespaces is not None : NEW_LINE INDENT return whitespaces NEW_LINE DEDENT else : NEW_LINE INDENT return whitespaces NEW_LINE DEDENT DEDENT
registerConverter ( cls , converter ) : NEW_LINE INDENT if converter is not None : NEW_LINE INDENT return converter NEW_LINE DEDENT return cls . registerConverter ( converter ) NEW_LINE DEDENT
def getConverter ( cls ) : NEW_LINE INDENT return converter . getConverter ( cls ) NEW_LINE def converter ( cls ) : NEW_LINE INDENT return cls ( cls ) NEW_LINE DEDENT DEDENT
static NodeList selectNodes ( NodeList nodeList ) { for ( int i = 0 ; i < nodeList . size ( ) ; i ++ ) { for ( int j = 0 ; j < nodeList . size ( ) ; j ++ ) { if ( nodeList . get ( j ) != null ) { return nodeList . get ( j ) ; } } } return nodeList ; }
def def _parse_css_selectors ( self ) : NEW_LINE INDENT return self . _parse_css_selectors ( ) NEW_LINE DEDENT
process_selectors ( self , selectors ) : NEW_LINE INDENT results = [ ] NEW_LINE for selector in selectors : NEW_LINE INDENT results . extend ( self . process_selectors ( selector ) ) NEW_LINE DEDENT return results NEW_LINE DEDENT
static Node select ( Node node ) { if ( node == null ) { return null ; } if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { return node ; } if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { return node ; } if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { return node ; } if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { return node ; } return node ; }
walk ( self ) : NEW_LINE INDENT if self . child_notes : NEW_LINE INDENT return self . child_notes NEW_LINE DEDENT else : NEW_LINE INDENT return self . child_notes NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_uncompress ( self ) : NEW_LINE INDENT return self . _uncompress ( ) NEW_LINE DEDENT
def def _ref def _refills_input_buffer ( self ) : NEW_LINE INDENT return self . _refills_input_buffer ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_first_select ( self , sql_query ) : NEW_LINE INDENT sql_query = sql_query . strip ( ) NEW_LINE sql_query = sql_query . strip ( ) NEW_LINE sql_query = sql_query . strip ( ) NEW_LINE sql_query = sql_query . strip ( ) NEW_LINE sql_query = sql_query . strip ( ) NEW_LINE sql_query = sql_query . strip ( ) NEW_LINE return sql_query NEW_LINE DEDENT
def def remove_sql ( self , sql ) : NEW_LINE INDENT return sql . strip ( sql . strip ( ) . strip ( ) ) NEW_LINE DEDENT
last_order_by ( self , order ) : NEW_LINE INDENT return self . _last_order_by ( order ) NEW_LINE DEDENT
unescape ( self , text ) : NEW_LINE INDENT text = self . unescape ( text ) NEW_LINE if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT return text NEW_LINE DEDENT
longest_character_reference_name ( self , position ) : NEW_LINE INDENT return self . longest_character_reference_name ( position ) NEW_LINE DEDENT


list ( self ) : NEW_LINE INDENT columns = self . columns NEW_LINE properties = self . properties NEW_LINE for column in columns . values ( ) : NEW_LINE INDENT properties [ column . name ] = column . value NEW_LINE DEDENT return columns NEW_LINE DEDENT


get_property_name ( self , column_name ) : NEW_LINE INDENT if column_name : NEW_LINE INDENT return column_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_column_name ( self ) : NEW_LINE INDENT column_name = self . column_name NEW_LINE if column_name is None : NEW_LINE INDENT column_name = self . column_name NEW_LINE DEDENT return column_name NEW_LINE DEDENT
def def def def def public public public public public public public static ID public static final String getId ( final String id ) { return this . public static final String getId ( final String id ) { return this . id ; } public static final String getId ( final String id ) { return this . id ; } public static final String id = this . id ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
unique_key ( self ) : NEW_LINE INDENT key = self . key NEW_LINE if key is None : NEW_LINE INDENT return None NEW_LINE DEDENT return key NEW_LINE DEDENT
static String getAppendsString ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return " " ; } return string ; }
def def new_index ( self ) : NEW_LINE INDENT new_index = self . new_index ( ) NEW_LINE new_index = self . new_index ( ) NEW_LINE new_index = self . new_index ( ) NEW_LINE return new_index NEW_LINE DEDENT
static String [ ] stringArray ( String [ ] stringArray ) { String [ ] stringArray = new String [ stringArray . length ] ; for ( int i = 0 ; i < stringArray . length ; i ++ ) { stringArray [ i ] = stringArray [ i ] ; } return stringArray ; }
string_length ( string ) : NEW_LINE INDENT return string . length ( ) NEW_LINE DEDENT
mixed_scope_message ( self , message ) : NEW_LINE INDENT message = message . copy ( ) NEW_LINE message . clear ( ) NEW_LINE message . append ( ' ' ) NEW_LINE message . append ( ' ' ) NEW_LINE message . append ( ' ' ) NEW_LINE message . append ( ' ' ) NEW_LINE return message NEW_LINE DEDENT
create_scoped_proxy_bean ( self , bean ) : NEW_LINE INDENT proxy = self . create_scoped_proxy_bean ( bean ) NEW_LINE if proxy : NEW_LINE INDENT return proxy NEW_LINE DEDENT else : NEW_LINE INDENT return proxy NEW_LINE DEDENT DEDENT
body ( self ) : NEW_LINE INDENT body = self . body NEW_LINE if not body : NEW_LINE INDENT return body NEW_LINE DEDENT return body NEW_LINE DEDENT
init_dir_watcher ( self ) : NEW_LINE INDENT self . _dir_watcher = self . _dir_watcher NEW_LINE self . _dir_watcher = self . _dir_watcher NEW_LINE DEDENT
accept ( self , file ) : NEW_LINE INDENT if isinstance ( file , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( file , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public void onFileChange ( final File file , final File file ) { if ( file == null ) { return ; } if ( file == null ) { return ; } if ( file . isDirectory ( ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isFile ( ) { return ; } if ( file . isFile ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } if ( file . isDirectory ( ) { return ; } if ( file . isFile ( ) ) { return ; } if ( file . isDirectory ( ) ) { return ; } return ; }

static int size ( FieldInfo field_info ) { if ( field_info != null ) { return field_info . size ( ) ; } if ( field_info != null ) { return field_info . size ( ) ; } return 0 ; }

create_common_target ( self , value ) : NEW_LINE INDENT return self . _create_common_target ( value ) NEW_LINE DEDENT
write_value ( self , target , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _write_value ( target , value ) NEW_LINE self . _write_value ( target , value ) NEW_LINE self . _write_value ( target , value ) NEW_LINE DEDENT
decorate ( self , template ) : NEW_LINE INDENT self . template = template NEW_LINE return self . template NEW_LINE DEDENT
extract_decora_regions ( self ) : NEW_LINE INDENT return self . _extract_decora_regions ( ) NEW_LINE DEDENT
decorate_content ( self , content ) : NEW_LINE INDENT self . content = content NEW_LINE if self . content is None : NEW_LINE INDENT self . content = content NEW_LINE DEDENT else : NEW_LINE INDENT self . content = content NEW_LINE DEDENT DEDENT
def def extract_regions ( self , regions ) : NEW_LINE INDENT for region in regions : NEW_LINE INDENT for region in regions : NEW_LINE INDENT for region in regions : NEW_LINE INDENT region = region . get_region ( ) NEW_LINE DEDENT DEDENT DEDENT return regions NEW_LINE DEDENT
startTunnel ( tunnel ) : NEW_LINE INDENT tunnel . start ( ) NEW_LINE tunnel . stop ( ) NEW_LINE DEDENT
execute ( self ) : NEW_LINE INDENT if self . exit_code : NEW_LINE INDENT self . exit_code = self . exit_code NEW_LINE DEDENT else : NEW_LINE INDENT self . exit_code = 0 NEW_LINE DEDENT DEDENT
email_store ( self ) : NEW_LINE INDENT return self . _email_store ( ) NEW_LINE DEDENT
ServletOutputStream getOutputStream ( ) throws IOException { return new ServletOutputStream ( new BufferedOutputStream ( new ByteArrayOutputStream ( ) ) ) ; }
count_hints ( self ) : NEW_LINE INDENT count = 0 NEW_LINE for hint in self . hints . values ( ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT

def def append_column_name ( self , column_name ) : NEW_LINE INDENT if column_name is None : NEW_LINE INDENT return column_name NEW_LINE DEDENT else : NEW_LINE INDENT return column_name NEW_LINE DEDENT DEDENT
add_rule ( self , rule ) : NEW_LINE INDENT if not self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_allowed ( rule ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
apply_rule ( self , rule , flag ) : NEW_LINE INDENT if not self . rules : NEW_LINE INDENT self . rules . append ( rule ) NEW_LINE DEDENT else : NEW_LINE INDENT self . rules . append ( rule ) NEW_LINE DEDENT DEDENT
process_rules ( self , rules ) : NEW_LINE INDENT for rule in rules : NEW_LINE INDENT self . process_rules ( rule ) NEW_LINE DEDENT return self NEW_LINE DEDENT
process_rules ( self , rules ) : NEW_LINE INDENT for rule in rules : NEW_LINE INDENT self . process_rule ( rule ) NEW_LINE DEDENT self . process_rule ( rules ) NEW_LINE DEDENT
def def def def get_class_class_name ( self ) : NEW_LINE def get_class_name ( self ) : NEW_LINE INDENT return self . _class_name NEW_LINE DEDENT def get_class_name ( self ) : NEW_LINE INDENT return self . _class_name NEW_LINE DEDENT def get_class_name ( self ) : NEW_LINE INDENT return self . _class_name NEW_LINE DEDENT
add ( self , collection ) : NEW_LINE INDENT list = [ ] NEW_LINE for item in collection : NEW_LINE INDENT list . append ( item ) NEW_LINE DEDENT return list NEW_LINE DEDENT
void insert ( int index , Object value ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( " index " + index ) ; } if ( value < 0 ) { throw new IndexOutOfBoundsException ( " value " + value ) ; } if ( value < 0 ) { throw new IndexOutOfBoundsException ( " value " + value ) ; } if ( value < 0 ) { throw new IndexOutOfBoundsException ( " value " + value ) ; } }
def def def public public public public void configure def def public public public public public public public void configure public public public public public void bind public public public public @ Override public void configure public public public public @ Override public void bind public public public public @ Override public void bind public public public public void bind public public public public void bind



def def setup_system_email_properties ( self ) : NEW_LINE INDENT self . _email_properties = { } NEW_LINE self . _email_properties = { } NEW_LINE DEDENT
validate_context ( self , context , value ) : NEW_LINE INDENT if context is None : NEW_LINE INDENT context = self . context NEW_LINE DEDENT if value is None : NEW_LINE INDENT value = self . value NEW_LINE DEDENT if context is None : NEW_LINE INDENT context = self . context NEW_LINE DEDENT if value is None : NEW_LINE INDENT value = self . value NEW_LINE DEDENT if context is None : NEW_LINE INDENT context = self . context NEW_LINE DEDENT if value is None : NEW_LINE INDENT value = self . value NEW_LINE DEDENT return context NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
fix_elements ( self ) : NEW_LINE INDENT self . _fix_elements ( ) NEW_LINE self . _fix_elements ( ) NEW_LINE DEDENT
destroy ( self ) : NEW_LINE INDENT if self . session . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT self . session . destroy ( ) NEW_LINE self . session . destroy ( ) NEW_LINE DEDENT
def def get_instance_map ( self ) : NEW_LINE INDENT return self . _instance_map ( ) NEW_LINE DEDENT
initialize ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE DEDENT

end_of_parse ( self ) : NEW_LINE INDENT if self . end_of_parse : NEW_LINE INDENT self . end_of_parse ( ) NEW_LINE DEDENT DEDENT
add ( self , section , key , value ) : NEW_LINE INDENT self . add ( section , key ) NEW_LINE self . add ( section , key ) NEW_LINE self . add ( section , value ) NEW_LINE DEDENT

add ( self , key , value ) : NEW_LINE INDENT self . key = key NEW_LINE self . value = value NEW_LINE return self NEW_LINE DEDENT
static String getClassName ( Class < ? > clazz ) throws ClassNotFoundException { if ( clazz == null ) { throw new ClassNotFoundException ( ) ; } return clazz . getName ( ) ; }

static java . lang . String getSignature ( final String signature ) { if ( signature == null ) { return null ; } if ( signature . length ( ) == 0 ) { return null ; } return signature . substring ( 0 , signature . length ( ) - 1 ) ; }
convert_type_ref ( type_ref ) : NEW_LINE INDENT if isinstance ( type_ref , type ) : NEW_LINE INDENT return type_ref NEW_LINE DEDENT elif isinstance ( type_ref , type ) : NEW_LINE INDENT return type_ref NEW_LINE DEDENT else : NEW_LINE INDENT return type_ref NEW_LINE DEDENT DEDENT

create_collection ( self ) : NEW_LINE INDENT target = self . target NEW_LINE if target is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
create_collection ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT else : NEW_LINE INDENT return collection NEW_LINE DEDENT DEDENT
static Collection < ? > convert ( Collection < ? > collection ) { if ( collection == null ) { throw new IllegalArgumentException ( " collection is null " ) ; } return collection ; }
convert_collection_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , collections . Collection ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , collections . Collection ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
target_collection ( self ) : NEW_LINE INDENT target_collection = self . _target_collection NEW_LINE return target_collection NEW_LINE DEDENT
def add_source_line_number ( self , label ) : NEW_LINE INDENT try : NEW_LINE INDENT source_LINE INDENT source_line_number = self . source_line_number NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT return source_LINE DEDENT
def def def def def def public public public public void visit ( Label label , public void visit ( Label label , String label , String label , String label , int lineNumber ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label != null ) { if ( label
static void put ( final Label label , final int bytecodeOffset ) { if ( bytecodeOffset == null ) { throw new IllegalArgumentException ( " bytecode offset cannot be null . " ) ; } if ( bytecodeOffset == 0 ) { throw new IllegalArgumentException ( " bytecode offset cannot be null . " ) ; } if ( bytecodeOffset == 0 ) { throw new IllegalArgumentException ( " bytecode offset cannot be null . " ) ; } if ( bytecodeOffset == - 1 ) { throw new IllegalArgumentException ( " bytecode offset cannot be null . " ) ; } if ( bytecodeOffset == - 1 ) { throw new IllegalArgumentException ( " bytecode offset cannot be null . " ) ; } }
void addForwardReference ( final Label label ) { if ( label == null ) { throw new IllegalArgumentException ( " The label must not be null . " ) ; } if ( ! label . isResolved ( ) ) { throw new IllegalArgumentException ( " The label must not be resolved . " ) ; } if ( ! label . isResolved ( ) ) { throw new IllegalArgumentException ( " The label must not be resolved . " ) ; } }
public static void addForwardReference ( final Label label , final int bytecodeOffset , final int bytecodeOffset , final int bytecodeOffset ) { if ( bytecodeOffset < 0 ) { throw new IllegalArgumentException ( " The bytecode offset of this label must be known . " ) ; } else if ( bytecodeOffset < 0 ) { throw new IllegalArgumentException ( " The bytecode offset of this label must be known . " ) ; } else if ( bytecodeOffset < 0 ) { throw new IllegalArgumentException ( " The bytecode offset of this label must be known . " ) ; } }
get_basic_blocks ( self , label ) : NEW_LINE INDENT return self . _get_basic_blocks ( label ) NEW_LINE DEDENT
def def Find def def def def Find def def Find__python__ def def find def find___python__ def def _ def find def _get_basicblock_basic_basic_block ( label = def _get_basic_basic_basic_block_edges_edges ( label ) : NEW_LINE INDENT for each block in basic_LINE INDENT for each block in basic_block_block : NEW_LINE INDENT if block_LINE INDENT for each block in basic_block : NEW_LINE INDENT if block_LINE INDENT if block_
longest_run_of_digits ( self , digits ) : NEW_LINE INDENT if len ( digits ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( digits ) == 1 : NEW_LINE INDENT return digits [ 0 ] NEW_LINE DEDENT elif len ( digits ) == 2 : NEW_LINE INDENT return digits [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return digits [ 0 ] NEW_LINE DEDENT DEDENT
def fix_accent_char ( char c ) : NEW_LINE INDENT try : NEW_LINE INDENT return unicodedata . normalize ( ' NFKD ' , c ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
byte [ ] toBytes ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } return bytes [ 0 ] ; }
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
put ( byte vector , byte vector ) : NEW_LINE INDENT if isinstance ( vector , int ) : NEW_LINE INDENT return vector . put ( vector ) NEW_LINE DEDENT else : NEW_LINE INDENT return vector . put ( vector ) NEW_LINE DEDENT DEDENT
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
put ( byte vector , byte vector ) : NEW_LINE INDENT byte vector . put ( vector ) NEW_LINE return vector NEW_LINE DEDENT
byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
public static byte [ ] getByteArray ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { if ( bytes [ i ] != 0 ) { bytes [ i ] = bytes [ i ] ; } } return bytes ; }
authenticate ( self ) : NEW_LINE INDENT token = self . _get_token ( ) NEW_LINE if token is None : NEW_LINE INDENT self . _get_token ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _get_token ( ) NEW_LINE DEDENT DEDENT
authenticate ( self ) : NEW_LINE INDENT token = self . token NEW_LINE if token is not None : NEW_LINE INDENT self . token = token NEW_LINE DEDENT else : NEW_LINE INDENT self . token = None NEW_LINE DEDENT return self . token NEW_LINE DEDENT
authenticate ( self ) : NEW_LINE INDENT token = self . token NEW_LINE if token is not None : NEW_LINE INDENT self . token = token NEW_LINE DEDENT else : NEW_LINE INDENT self . token = None NEW_LINE DEDENT DEDENT
public
public static final void invoke ( final Bundle bundle ) { if ( cache . isDisabled ( ) ) { throw new IllegalArgumentException ( " Cache is disabled . " ) ; } else if ( cache . isDisabled ( ) ) { throw new IllegalArgumentException ( " Cache is disabled . " ) ; } else { throw new IllegalArgumentException ( " Cache is disabled . " ) ; } }
def element ( self , index ) : NEW_LINE INDENT return self . _element ( index ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
insert_object ( self , object ) : NEW_LINE INDENT if isinstance ( object , basestring ) : NEW_LINE INDENT return self . insert_object ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . insert ( object ) NEW_LINE DEDENT DEDENT
update_single_entity ( self , entity ) : NEW_LINE INDENT if not entity : NEW_LINE INDENT return NEW_LINE DEDENT entity . update ( ) NEW_LINE entity . update ( ) NEW_LINE DEDENT
update_property ( self , property ) : NEW_LINE INDENT if not property : NEW_LINE INDENT return NEW_LINE DEDENT self . _update_property ( property ) NEW_LINE self . _update_property ( property ) NEW_LINE DEDENT
update_property ( self , property , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _update_property ( property , value ) NEW_LINE self . _update_property ( property , value ) NEW_LINE DEDENT


find_entity ( self , criteria ) : NEW_LINE INDENT entity = self . _find_entity ( criteria ) NEW_LINE if entity : NEW_LINE INDENT return entity NEW_LINE DEDENT DEDENT
delete_single_entity_by_id ( self , id ) : NEW_LINE INDENT self . delete_single_entity_by_id ( id ) NEW_LINE return self . delete_single_entity ( id ) NEW_LINE DEDENT
delete ( self , id ) : NEW_LINE INDENT self . _delete ( id ) NEW_LINE self . _delete ( id ) NEW_LINE self . _delete ( id ) NEW_LINE DEDENT
count_entities ( self ) : NEW_LINE INDENT return len ( self . entities ) NEW_LINE DEDENT

_decorate_property ( self , property ) : NEW_LINE INDENT if isinstance ( property , str ) : NEW_LINE INDENT return property NEW_LINE DEDENT elif isinstance ( property , str ) : NEW_LINE INDENT return property NEW_LINE DEDENT else : NEW_LINE INDENT return property NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
clearAttributes ( self , request ) : NEW_LINE INDENT if self . request is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . request is not None : NEW_LINE INDENT self . request . clear ( ) NEW_LINE DEDENT if self . request is not None : NEW_LINE INDENT self . request . clear ( ) NEW_LINE DEDENT DEDENT
def get_attributes ( self , http_request ) : NEW_LINE INDENT return self . _get_attributes ( http_request ) NEW_LINE DEDENT
save ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . _save ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . _save ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _save ( request ) NEW_LINE DEDENT DEDENT
remove_request_attribute ( self , request ) : NEW_LINE INDENT if not self . request : NEW_LINE INDENT return NEW_LINE DEDENT self . request = self . request . copy ( ) NEW_LINE self . request . clear ( ) NEW_LINE DEDENT
public public public void removeStackTraceElement ( ) { if ( stack . size ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } else if ( stack . size ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } } }
def def get_stack_trace ( self ) : NEW_LINE INDENT def get_stack_trace ( self ) : NEW_LINE INDENT return self . _get_stack_trace ( ) NEW_LINE DEDENT return self . _get_stack_trace ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__



__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def


def def getSystemClassLoader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _systemClassLoader . getSystemClassLoader ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _systemClassLoader . getSystemClassLoader ( ) NEW_LINE DEDENT DEDENT
read_resource ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT resource = self . _get_resource ( name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT resource = self . _get_resource ( name ) NEW_LINE DEDENT return resource NEW_LINE DEDENT
def def read ( String name ) : NEW def def def def read def read ( String name ) : def read ( String name ) throws IOException { def read ( ) throws IOException { if ( name != null ) { if ( name != null ) { throw new IllegalArgumentException ( name ) { throw new IllegalArgumentException ( name ) ; } def read ( ) { throw new IllegalArgumentException ( name ) ; } } return null ; } return null ; } return null ; }

def def read ( String name ) : NEW
add_child ( self , tree , child ) : NEW_LINE INDENT self . tree . add_child ( tree , child ) NEW_LINE DEDENT
def def find_new_chunk ( self , chunk ) : NEW_LINE INDENT return self . _find_chunk ( chunk ) NEW_LINE if not self . _exists ( chunk ) : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
parse_request ( self , request ) : NEW_LINE INDENT if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT if isinstance ( request , dict ) : NEW_LINE INDENT return request NEW_LINE DEDENT return request NEW_LINE DEDENT
def _convert_to_collection ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT else : NEW_LINE INDENT return collection NEW_LINE DEDENT DEDENT
set_setter_type ( self , setter_type ) : NEW_LINE INDENT self . set_setter_type ( setter_type ) NEW_LINE DEDENT
void set ( int index , int value ) { if ( index < 0 ) { throw new ArrayIndexOutOfBoundsException ( index ) ; } if ( value < 0 ) { throw new ArrayIndexOutOfBoundsException ( index ) ; } if ( value > 0 ) { throw new ArrayIndexOutOfBoundsException ( index ) ; } }
create ( self , name ) : NEW_LINE INDENT self . name = name NEW_LINE if self . name is None : NEW_LINE INDENT self . name = name NEW_LINE DEDENT return self NEW_LINE DEDENT
def def def def extract_type ( self ) : NEW def extract_type ( self ) : NEW_LINE INDENT return self . _current_property def extract_type ( self ) : NEW_LINE INDENT return self . _current_type NEW_LINE DEDENT def extract_LINE DEDENT
void remove ( String cookie ) { if ( cookie == null ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ; } if ( cookie . length ( ) == 0 ) { return ;
def def def start_user_session ( self ) : NEW_LINE INDENT user_session = self . _get_user_session ( ) NEW_LINE if user_session is None : NEW_LINE INDENT return NEW_LINE DEDENT session = self . _get_user_session ( ) NEW_LINE DEDENT
convert_local_date ( local_date ) : NEW_LINE INDENT if local_date : NEW_LINE INDENT return local_date NEW_LINE DEDENT else : NEW_LINE INDENT return local_date NEW_LINE DEDENT DEDENT
convert_local_date_time ( self , local_date_time ) : NEW_LINE INDENT if local_date_time is not None : NEW_LINE INDENT return local_date_time NEW_LINE DEDENT else : NEW_LINE INDENT return local_date_time NEW_LINE DEDENT DEDENT

add_validation_check ( self ) : NEW_LINE INDENT if self . validation_check is not None : NEW_LINE INDENT self . validation_check = self . validation_check NEW_LINE DEDENT DEDENT
resolve_validation_context ( self ) : NEW_LINE INDENT if self . validation_context is None : NEW_LINE INDENT self . validation_context = { } NEW_LINE DEDENT return self . validation_context NEW_LINE DEDENT
static void addAnnotations ( Class < ? > clazz ) { if ( clazz == null ) { throw new NullPointerException ( " clazz " ) ; } if ( clazz . isInterface ( ) ) { throw new IllegalArgumentException ( " clazz " ) ; } if ( clazz . isPrimitive ( ) ) { throw new IllegalArgumentException ( " clazz " ) ; } if ( clazz . isPrimitive ( ) ) { throw new IllegalArgumentException ( " clazz " ) ; } if ( clazz . isPrimitive ( ) ) { throw new IllegalArgumentException ( " clazz " ) ; } if ( clazz . isPrimitive ( ) ) { throw new IllegalArgumentException ( " clazz " ) ; } }
processAnnotations ( self , properties ) : NEW_LINE INDENT annotations = [ ] NEW_LINE for annotation in properties : NEW_LINE INDENT annotations . append ( annotation ) NEW_LINE DEDENT return annotations NEW_LINE DEDENT
static Annotation [ ] getAnnotations ( Class < ? > targetClass ) { Annotation [ ] annotations = new Annotation [ ] { } ; for ( int i = 0 ; i < targetClass . length ( ) ; i ++ ) { annotations [ i ] = targetClass [ i ] . getAnnotation ( ) ; } return annotations ; }
static void setDefaultProperties ( Annotation annotation ) { if ( annotation == null ) { return ; } if ( annotation . getAnnotation ( ) != null ) { return ; } if ( annotation . getAnnotation ( ) != null ) { return ; } if ( annotation . getAnnotation ( ) != null ) { return ; } if ( annotation . getAnnotation ( ) != null ) { return ; } }

static void setDefaultRFCPRules ( String defaultRFCPRules ) { if ( defaultRFCPRules == null ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if ( defaultRFCPRules . length ( ) == 0 ) { return ; } if
def def def encode ( self , encoding ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _encode ( self . _encode ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _encode ( ) NEW_LINE DEDENT DEDENT
def def def def encode ( self , host , encoding ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def parse def def def def public public public public public public public static public static final public static String encode ( URI
def def encode ( String path , String encoding ) : NEW_LINE INDENT try : NEW_LINE INDENT return URI . encode ( path , encoding ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return URI . encode ( path ) NEW_LINE DEDENT
def def def get_query_encoding ( self , encoding ) : NEW_LINE INDENT return self . _encode ( self . _encode ( self . _encode ( self . _encode ( encoding ) ) ) NEW_LINE DEDENT
def def encodeURI ( self , uri , encoding ) : NEW_LINE INDENT return self . _encodeURI ( uri , encoding ) NEW_LINE DEDENT
def def encode ( String fragment , String encoding ) : NEW_LINE INDENT return URI . encode ( fragment , encoding ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def get_property def get_property_descriptors ( self , name ) : NEW_LINE INDENT return self . _property_descriptors . get_property_descriptors ( ) NEW_LINE DEDENT
static List < Cookie > getCookies ( ) { if ( cookies == null ) { return new ArrayList < Cookie > ( ) ; } if ( cookies . isEmpty ( ) ) { return new ArrayList < Cookie > ( ) ; } return cookies ; }
static void removeContentEncodingHeader ( String content ) { if ( content == null ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( " content - encoding " ) ) { return ; } if ( content . startsWith ( "
close_connection ( self ) : NEW_LINE INDENT if self . connection is not None : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT self . connection = None NEW_LINE DEDENT
def _get_scoped_scoped_scopes ( self ) : NEW_LINE INDENT return self . _scoped_scoped_scopes . get_scoped_scoped_scopes ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
decrypt_content ( self , content ) : NEW_LINE INDENT content = content . strip ( ) NEW_LINE if not content : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( content , list ) : NEW_LINE INDENT content = [ content ] NEW_LINE DEDENT if isinstance ( content , dict ) : NEW_LINE INDENT content = [ content ] NEW_LINE DEDENT else : NEW_LINE INDENT content = [ content ] NEW_LINE DEDENT return content NEW_LINE DEDENT
convert_map_to_target_type ( map ) : NEW_LINE INDENT target_type = map . get ( " target _ type " ) NEW_LINE if target_type : NEW_LINE INDENT return target_type NEW_LINE DEDENT else : NEW_LINE INDENT return target_type NEW_LINE DEDENT DEDENT
def convert_list_elements_to_component_type ( self ) : NEW_LINE INDENT return self . _convert_elements_to_component_type ( self . component_type ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def _ def set ( self ) :__python____python____python____python____python____python__ def def def def def def set ( self ) :__python____python____python____python____python__ def def def def ___python____python____python____python__ def def def def def _ def set ( self ,__python__ def def def _ public static final public static final public static final void set
def def map ( self , key , value ) : NEW_LINE INDENT return self . _map ( key , value ) NEW_LINE DEDENT
sort_column ( self , column_name ) : NEW_LINE INDENT column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE return column_name NEW_LINE DEDENT
def add_default_header ( self , request ) : NEW_LINE INDENT if not request . headers : NEW_LINE INDENT return NEW_LINE DEDENT header = request . headers . copy ( ) NEW_LINE header . update ( self . default_headers ) NEW_LINE header . update ( self . default_headers ) NEW_LINE return NEW_LINE DEDENT
send_request ( self , request ) : NEW_LINE INDENT response = self . _send_request ( request ) NEW_LINE if response . status_code == 302 : NEW_LINE INDENT return response NEW_LINE DEDENT if response . status_code == 301 : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
def def send_response ( self , request , response ) : NEW_LINE INDENT response = self . connection . send ( request ) NEW_LINE if response is not None : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
def add_default_headers ( self , request ) : NEW_LINE INDENT if request . headers . has_key ( ' default _ header ' ) : NEW_LINE INDENT return request . headers [ ' default _ header ' ] NEW_LINE DEDENT return request . headers NEW_LINE DEDENT
read_cookies ( self , response ) : NEW_LINE INDENT cookies = [ ] NEW_LINE for cookie in response . cookies . values ( ) : NEW_LINE INDENT cookies . append ( cookie ) NEW_LINE DEDENT return cookies NEW_LINE DEDENT
add_cookies ( self , request , cookies ) : NEW_LINE INDENT if cookies is None : NEW_LINE INDENT cookies = { } NEW_LINE DEDENT else : NEW_LINE INDENT cookies = cookies . copy ( ) NEW_LINE cookies . update ( cookies ) NEW_LINE DEDENT return cookies NEW_LINE DEDENT
send_message ( self , message ) : NEW_LINE INDENT message_id = self . _get_message_id ( message ) NEW_LINE if message_id is None : NEW_LINE INDENT message_id = self . _get_message_id ( message ) NEW_LINE DEDENT message_id = self . _get_message_id ( message_id ) NEW_LINE return message_id NEW_LINE DEDENT
def def def def msgToSet ( self , msgToSet , msgToSet ) : NEW_LINE def msgToSet ( self ) : NEW_LINE INDENT msgToSet = msgToSet . copy ( ) NEW_LINE def msgToSet ( self , msgToSet ) : NEW_LINE INDENT msgToSet = msgToSet . copy ( ) NEW_LINE msgToSet . clear ( ) NEW_LINE msgToSet . clear ( ) NEW_LINE return msgToSet NEW_LINE DEDENT return msgToSet NEW_LINE DEDENT
def send_date ( self , msgToSet ) : NEW_LINE INDENT msgToSet = msgToSet . copy ( ) NEW_LINE msgToSet . clear ( ) NEW_LINE msgToSet . add ( msgToSet ) NEW_LINE return msgToSet NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_recipients ( self ) : NEW_LINE INDENT recipients = self . _get_recipients ( ) NEW_LINE return self . _get_recipients ( ) NEW_LINE DEDENT
def msgToSet ( self , msgToSet ) : NEW_LINE INDENT msgToSet = msgToSet . copy ( ) NEW_LINE msgToSet . clear ( ) NEW_LINE return msgToSet NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def emailWithData ( self , msgToSet ) : NEW_LINE INDENT msgToSet = [ ] NEW_LINE msgToSet . append ( msgToSet ) NEW_LINE msgToSet . append ( msgToSet ) NEW_LINE return msgToSet NEW_LINE DEDENT
def _create_attachment_body_part ( self ) : NEW_LINE INDENT return self . _create_attachment_body_part ( ) NEW_LINE DEDENT
def get_content_type ( self ) : NEW_LINE INDENT return self . request . headers . get ( ' Content - Type ' ) NEW_LINE DEDENT

close ( self , query ) : NEW_LINE INDENT if self . query is not None : NEW_LINE INDENT self . query . close ( ) NEW_LINE self . query = None NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . query is not None : NEW_LINE INDENT self . query . close ( ) NEW_LINE self . query = None NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . query is not None : NEW_LINE INDENT self . query . close ( ) NEW_LINE self . query = None NEW_LINE DEDENT DEDENT

limit ( self , limit ) : NEW_LINE INDENT if limit is not None : NEW_LINE INDENT return limit NEW_LINE DEDENT if limit is None : NEW_LINE INDENT return None NEW_LINE DEDENT if limit > 0 : NEW_LINE INDENT return limit NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
update ( self , query ) : NEW_LINE INDENT self . query = query NEW_LINE return self . query NEW_LINE DEDENT
count_queries ( self ) : NEW_LINE INDENT return self . _count_queries ( ) NEW_LINE DEDENT
get_generated_columns ( self ) : NEW_LINE INDENT columns = [ ] NEW_LINE for column in self . columns : NEW_LINE INDENT columns . append ( column ) NEW_LINE DEDENT return columns NEW_LINE DEDENT
def get_sql_string ( self ) : NEW_LINE INDENT sql = self . _get_sql_string ( ) NEW_LINE if not sql : NEW_LINE INDENT return " " NEW_LINE DEDENT return sql NEW_LINE DEDENT
proxy ( self , target , aspect ) : NEW_LINE INDENT return self . _proxy ( target , aspect ) NEW_LINE DEDENT
_get_collection ( self , iterator ) : NEW_LINE INDENT if isinstance ( iterator , collections . Iterator ) : NEW_LINE INDENT return self . _get_collection ( iterator ) NEW_LINE DEDENT return self . _get_collection ( iterator ) NEW_LINE DEDENT
def def def convert_iterator ( self , iterator ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_iterator_to_stream ( iterator ) NEW_LINE DEDENT def convert ( self , iterator ) : NEW_LINE INDENT return self . _convert_iterator_to_stream ( iterator ) NEW_LINE DEDENT def convert ( self , iterator ) : NEW_LINE INDENT return self . _convert_to_stream ( iterator ) NEW_LINE DEDENT DEDENT
two objects starting with first comparator ; if they are equals proceeds to the next comparator and so on .
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String getErrorMessage ( Level level ) { if ( level == null ) { return " " ; } if ( level == Level . OFF ) { return " " ; } if ( level == Level . OFF ) { return " " ; } return " " ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
shorten_class_name ( cls , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return cls . __name__ NEW_LINE DEDENT DEDENT
def _exclude_types ( self ) : NEW_LINE INDENT def _exclude_types ( self ) : NEW_LINE INDENT return self . _exclude_types ( ) NEW_LINE DEDENT return self . _exclude_types ( ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def public public public public public public public public public public public public public public public public public static public static public static void serialize public static final void serialize public static void serialize public static final void serialize public static final void serialize public static final void append ( final Object object , final Object object , final Object object , final Object value ) { if ( object . getClass public static final String toString ( ) { return null ; } public static final String toString ( ) { return object . toString ( ) ; } public static final
def def public public public public public static final void serialize ( Object object into source , final Object object ) { if ( source != null ) { return source . serialize ( source ) ; public void serialize ( final Object object , final Object object ) { if ( source == null ) { return ; public void serialize ( final Object object , final Object object ) { if ( source == null ) { throw new IllegalArgumentException ( ) ; } return ; } if ( source == null ) { throw new IllegalArgumentException ( ) ; } if ( source == null ) { throw new IllegalArgumentException ( ) ; } } } } }
static Object copy ( Object obj ) { if ( obj == null ) { throw new IllegalArgumentException ( " obj is null " ) ; } if ( obj . getClass ( ) . isAnonymousClass ( ) ) { throw new IllegalArgumentException ( " obj . getClass ( ) . isAnonymousClass ( ) " ) ; } if ( obj . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( " obj . getClass ( ) . isArray ( ) " ) ; } return obj ; }
write_file ( self , file ) : NEW_LINE INDENT if not file . exists ( ) : NEW_LINE INDENT raise IOError ( " File % s does not exist . " % self . filename ) NEW_LINE DEDENT if not file . exists ( ) : NEW_LINE INDENT raise IOError ( " File % s does not exist . " % self . filename ) NEW_LINE DEDENT DEDENT
read_serialized_object ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT serialized_object = json . loads ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT if serialized_object is None : NEW_LINE INDENT return None NEW_LINE DEDENT return serialized_object NEW_LINE DEDENT
static byte [ ] toBytes ( Object object ) { byte [ ] bytes = null ; if ( object != null ) { bytes = object . toString ( ) . getBytes ( ) ; } if ( bytes == null ) { bytes = new byte [ 0 ] ; } return bytes ; }
static byte [ ] serialize ( byte [ ] array ) { if ( array == null ) { return null ; } if ( array . length == 0 ) { return new byte [ 0 ] ; } else { return array ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

read_column_value ( self , column_name ) : NEW_LINE INDENT if column_name in self . column_names : NEW_LINE INDENT return self . column_values [ column_name ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . column_values [ column_name ] NEW_LINE DEDENT DEDENT
void ReplacesNewInstances ( ) { for ( int i = 0 ; i < entities . size ( ) ; i ++ ) { if ( entities . get ( i ) != null ) { entities . get ( i ) . delete ( ) ; } } }
def def getProviders def def def def def def def def def def def def def def def def def def def def def def def def def def Res
def def def def public public public public public public static final public static final void apply public static final void apply_table_name_name_hint ( final String table_name , final String table_name , final String table_name ) { if ( table_name == null ) { return ; } public static final String table_name = table_name . toLowerCase ( ) ; }
check_connection ( self , connection ) : NEW_LINE INDENT if connection is None : NEW_LINE INDENT return False NEW_LINE DEDENT if connection . isClosed ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if connection . isClosed ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if connection . isClosed ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
dispatch_view ( self ) : NEW_LINE INDENT if self . _view_name is not None : NEW_LINE INDENT self . _view_name = self . _view_name NEW_LINE DEDENT return self . _view_name NEW_LINE DEDENT
locate_target ( self , path ) : NEW_LINE INDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT elif path . endswith ( ' / ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT elif path . endswith ( ' / ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_buffered_writer ( self ) : NEW_LINE INDENT if self . buffered_writer : NEW_LINE INDENT return self . buffered_writer NEW_LINE DEDENT else : NEW_LINE INDENT return self . buffered_writer NEW_LINE DEDENT DEDENT
get_buffered_output_stream ( self ) : NEW_LINE INDENT if self . _buffered_output_stream is None : NEW_LINE INDENT return self . _buffered_output_stream NEW_LINE DEDENT if self . _buffered_output_stream is not None : NEW_LINE INDENT return self . _buffered_output_stream NEW_LINE DEDENT else : NEW_LINE INDENT return self . _buffered_output_stream NEW_LINE DEDENT DEDENT
write ( self , content , writer = None ) : NEW_LINE INDENT if writer is None : NEW_LINE INDENT writer = self . writer NEW_LINE DEDENT else : NEW_LINE INDENT writer = writer or self . writer NEW_LINE DEDENT return writer . write ( content ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void append ( String s ) { if ( s == null ) { return ; } StringBuffer buffer = new StringBuffer ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { buffer . append ( s ) ; } }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def parse_json_payload ( self , payload ) : NEW_LINE INDENT if isinstance ( payload , dict ) : NEW_LINE INDENT return json . loads ( payload ) NEW_LINE DEDENT else : NEW_LINE INDENT return payload NEW_LINE DEDENT DEDENT
login ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _login ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _login ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
def def hook ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT hook = self . hook NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT hook = self . hook NEW_LINE DEDENT else : NEW_LINE INDENT hook = self . hook NEW_LINE DEDENT return hook NEW_LINE DEDENT
static File getFile ( String filename ) { if ( filename == null ) { return null ; } if ( filename . length ( ) == 0 ) { return null ; } if ( filename . length ( ) == 0 ) { return null ; } return new File ( filename ) ; }
create_all_directories ( self ) : NEW_LINE INDENT directories = [ ] NEW_LINE for dir in self . directories : NEW_LINE INDENT directories . append ( dir ) NEW_LINE DEDENT return directories NEW_LINE DEDENT
create_single_directory ( self , directory ) : NEW_LINE INDENT self . _mkdir ( directory ) NEW_LINE self . _mkdir ( directory ) NEW_LINE self . _mkdir ( directory ) NEW_LINE self . _mkdir ( directory ) NEW_LINE DEDENT
copy ( self ) : NEW_LINE INDENT if self . pre_check : NEW_LINE INDENT self . pre_check ( ) NEW_LINE DEDENT if self . post_check : NEW_LINE INDENT self . post_check ( ) NEW_LINE DEDENT self . post_check ( ) NEW_LINE DEDENT
copy_params ( self ) : NEW_LINE INDENT copy_params = { } NEW_LINE copy_params . update ( self . copy_params ) NEW_LINE copy_params . update ( self . copy_params ) NEW_LINE return copy_params NEW_LINE DEDENT
move_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT os . remove ( file ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os . remove ( file ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
moves ( self , directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT elif os . path . isdir ( directory ) : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT DEDENT
delete_directory ( directory ) : NEW_LINE INDENT try : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_utf8_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_utf8_file ( ) NEW_LINE DEDENT except UnicodeDecodeError : NEW_LINE INDENT pass NEW_LINE DEDENT except UnicodeDecodeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_file_content ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT if file . read ( ) : NEW_LINE INDENT return file . read ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
append ( self , characters ) : NEW_LINE INDENT if not self . append : NEW_LINE INDENT self . append = True NEW_LINE DEDENT elif self . append : NEW_LINE INDENT self . append = True NEW_LINE DEDENT else : NEW_LINE INDENT self . append = False NEW_LINE DEDENT DEDENT
append ( self , text ) : NEW_LINE INDENT if not self . append : NEW_LINE INDENT self . append ( text ) NEW_LINE DEDENT else : NEW_LINE INDENT self . append ( text ) NEW_LINE DEDENT DEDENT
static String append ( String s ) { if ( s == null ) { return null ; } if ( s . length ( ) == 0 ) { return " " ; } return s ; }
read_file ( filename ) : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE contents = file . read ( ) NEW_LINE file . close ( ) NEW_LINE return contents NEW_LINE DEDENT
append ( bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT else : NEW_LINE INDENT return bytes NEW_LINE DEDENT DEDENT
append ( bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT return bytes NEW_LINE DEDENT
copy ( self , source , destination ) : NEW_LINE INDENT if isinstance ( source , str ) : NEW_LINE INDENT if isinstance ( destination , str ) : NEW_LINE INDENT shutil . copyfile ( source , destination ) NEW_LINE DEDENT else : NEW_LINE INDENT shutil . copyfile ( source , destination ) NEW_LINE DEDENT DEDENT elif isinstance ( source , str ) : NEW_LINE INDENT shutil . copyfile ( source , destination ) NEW_LINE DEDENT else : NEW_LINE INDENT shutil . copyfile ( source , destination ) NEW_LINE DEDENT DEDENT
delete ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT os . unlink ( self . destination_file ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if os . path . exists ( self . destination_file ) : NEW_LINE INDENT os . unlink ( self . destination_file ) NEW_LINE DEDENT DEDENT DEDENT

start_of_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT start_of_file = os . path . abspath ( file ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT start_of_file = os . path . abspath ( file ) NEW_LINE DEDENT return start_of_file NEW_LINE DEDENT
check_dir ( srcDir , destDir ) : NEW_LINE INDENT if not os . path . isdir ( srcDir ) : NEW_LINE INDENT return False NEW_LINE DEDENT if os . path . isdir ( srcDir ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isdir ( destDir ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isdir ( srcDir ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
check_file_copy ( self , file_copy ) : NEW_LINE INDENT if file_copy is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static void printUsageLine ( String usageLine ) { if ( usageLine == null ) { return ; } if ( usageLine . length ( ) == 0 ) { return ; } if ( usageLine . length ( ) == 0 ) { return ; } if ( usageLine . length ( ) == 1 ) { return ; } if ( usageLine . length ( ) == 2 ) { return ; } if ( usageLine . length ( ) == 1 ) { return ; } if ( usageLine . length ( ) == 2 ) { return ; } if ( usageLine . length ( ) == 1 ) { return ; } if ( usageLine . length ( ) == 2 ) { return ; } if ( usageLine . length ( ) == 1 ) { return ; } if ( usageLine . length ( ) == 2 ) { return ; } if ( usageLine . length ( ) == 1 ) { return ; } if ( usageLine . length ( ) == 2 )
action_method ( self , method_name ) : NEW_LINE INDENT method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE return method_name NEW_LINE DEDENT
register_action ( self , action_class , method_name ) : NEW_LINE INDENT self . _action_class = action_class NEW_LINE self . _method_name = method_name NEW_LINE DEDENT

next_value ( self ) : NEW_LINE INDENT return self . _next_value ( ) NEW_LINE DEDENT
static char [ ] createCharArray ( char [ ] array ) { if ( array == null ) { throw new NullPointerException ( " array is null " ) ; } return array ; }
invoke_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , method ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
uppercase ( self , char buffer ) : NEW_LINE INDENT if isinstance ( buffer , str ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT elif isinstance ( buffer , unicode ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT elif isinstance ( buffer , str ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT elif isinstance ( buffer , unicode ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT else : NEW_LINE INDENT return buffer NEW_LINE DEDENT DEDENT
static char [ ] subsequence ( char [ ] input ) { if ( input == null ) { return null ; } char [ ] subsequence = new char [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { subsequence [ i ] = input [ i ] ; } return subsequence ; }
static URL [ ] getClassLoaderUrls ( ClassLoader classloader ) { if ( classloader == null ) { return new URL [ 0 ] ; } else { URL [ ] urls = classloader . getResources ( ) ; return urls ; } }

def def def def def def def register___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def def def ____python____python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def ____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python__
get_type_serializer ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_type_serializer ( element ) NEW_LINE DEDENT DEDENT
extract_parameters ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . _extract_parameters ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _extract_parameters ( request ) NEW_LINE DEDENT DEDENT
def get_single_parameter_value ( self ) : NEW_LINE INDENT if len ( self . parameters ) > 1 : NEW_LINE INDENT return self . parameters [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . parameters [ 0 ] NEW_LINE DEDENT DEDENT
all_values ( self , request ) : NEW_LINE INDENT values = [ ] NEW_LINE for value in self . values : NEW_LINE INDENT values . append ( value ) NEW_LINE DEDENT return values NEW_LINE DEDENT
get_uploaded_file ( self ) : NEW_LINE INDENT uploaded_file = self . _get_uploaded_file ( ) NEW_LINE if uploaded_file : NEW_LINE INDENT return uploaded_file NEW_LINE DEDENT return None NEW_LINE DEDENT
get_uploaded_files ( self , request ) : NEW_LINE INDENT if self . request . method == ' GET ' : NEW_LINE INDENT return self . request . FILES NEW_LINE DEDENT elif self . request . method == ' POST ' : NEW_LINE INDENT return self . request . POST NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def template ( self ) : NEW_LINE INDENT template = self . _template NEW_LINE template = self . _template NEW_LINE template = self . _template NEW_LINE return template NEW_LINE DEDENT
find_macros ( self ) : NEW_LINE INDENT macros = self . macros NEW_LINE if not macros : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return macros NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
append ( self , node ) : NEW_LINE INDENT self . append_node ( node ) NEW_LINE DEDENT
append ( self , node ) : NEW_LINE INDENT self . append ( node ) NEW_LINE return self NEW_LINE DEDENT

parse_json ( self ) : NEW_LINE INDENT parser = self . _parser ( ) NEW_LINE try : NEW_LINE INDENT return parser . parse ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse ( self ) : NEW_LINE INDENT parser = self . parser NEW_LINE parser . parse ( self ) NEW_LINE return parser . parse ( self ) NEW_LINE DEDENT
static < T > Map < T , T > map ( T type ) { Map < T , T > map = new HashMap < T , T > ( ) ; map . put ( type , type ) ; map . put ( type , type ) ; map . put ( type , type ) ; return map ; }

parse_json ( self , json ) : NEW_LINE INDENT if isinstance ( json , dict ) : NEW_LINE INDENT return json NEW_LINE DEDENT elif isinstance ( json , list ) : NEW_LINE INDENT return json NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
_parse_lazy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT DEDENT
parse_complete ( self ) : NEW_LINE INDENT if self . parsed : NEW_LINE INDENT return self . parsed NEW_LINE DEDENT else : NEW_LINE INDENT return self . parsed NEW_LINE DEDENT DEDENT
def parse_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
def def parse_content ( self , content ) : NEW_LINE INDENT if len ( content ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( content ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT return content NEW_LINE DEDENT
unicode_character ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _unicode ( ) NEW_LINE DEDENT except UnicodeDecodeError : NEW_LINE INDENT return self . _unicode ( ) NEW_LINE DEDENT DEDENT
def def unquoted_string_content ( self , content ) : NEW_LINE INDENT content = content . replace ( ' \n ' , ' \n ' ) NEW_LINE content = content . replace ( ' \n ' , ' \n ' ) NEW_LINE return content NEW_LINE DEDENT
parse_numbers ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT return json . loads ( data ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def _parse_arrays ( self ) : NEW_LINE INDENT return self . _parse_arrays ( ) NEW_LINE def _parse ( self ) : NEW_LINE INDENT return self . _parse_arrays ( ) NEW_LINE DEDENT

create_method_wrapper ( self ) : NEW_LINE INDENT if self . proxy is not None : NEW_LINE INDENT return self . proxy . create_method_wrapper ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
static String rawTypeName ( Class < ? > classOrMethod ) { String rawTypeName = null ; if ( classOrMethod != null ) { rawTypeName = classOrMethod . getSimpleName ( ) ; } else { rawTypeName = classOrMethod . getSimpleName ( ) ; } return rawTypeName ; }
get_bean_reference ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_bean_reference ( name ) NEW_LINE DEDENT DEDENT
static < T > Takes ( final Method method , final Constructor < T > constructor ) { if ( constructor == null ) { throw new NullPointerException ( " constructor is null " ) ; } return constructor . newInstance ( ) ; }
extract_references ( self , method , constructor ) : NEW_LINE INDENT return self . _extract_references ( method , constructor ) NEW_LINE DEDENT
default_method_references ( self ) : NEW_LINE INDENT self . method_references = { } NEW_LINE return self . method_references NEW_LINE DEDENT

removeDuplicates ( self ) : NEW_LINE INDENT if self . name in self . names : NEW_LINE INDENT self . names . remove ( self . name ) NEW_LINE DEDENT DEDENT
String [ ] convert ( String [ ] beanReferences ) { String [ ] array = new String [ beanReferences . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = beanReferences [ i ] ; } return array ; }
static BeanReference [ ] parse ( String string ) { if ( StringUtils . isBlank ( string ) ) { return new BeanReference [ 0 ] ; } else { return new BeanReference [ 0 ] ; } }
run ( self ) : NEW_LINE INDENT if self . backend is not None : NEW_LINE INDENT return self . backend . run ( ) NEW_LINE DEDENT return self . backend . run ( ) NEW_LINE DEDENT
static Method getMethod ( String name ) { if ( name == null || name . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } return null ; }

public static < T > List < T > getAllInterfaces ( Class < ? extends T > type ) { if ( interfaces . size ( ) == 0 ) { return Collections . emptyList ( ) ; } if ( interfaces . size ( ) == 0 ) { return Collections . emptyList ( ) ; } return interfaces ; }
public public public static void sort ( Class < ? > clazz , Class < ? > clazz ) { if ( clazz == null ) { return ; } if ( clazz == null ) { return ; } if ( clazz == null ) { return ; } if ( clazz . getSuperclass ( ) == null ) { return ; } if ( clazz . getSuperclass ( ) == null ) { return ; } if ( clazz . getSuperclass ( ) == null ) { return ; } if ( clazz . getSuperclass ( ) == null ) { return ; } return clazz . getSuperclass ( ) ; }
static void checkAccess ( ) throws SecurityException { if ( ! isAccessible ( ) ) { throw new SecurityException ( " Access is denied . " ) ; } if ( isAccessible ( ) ) { throw new SecurityException ( " Access is denied . " ) ; } }
static < T > T create ( Class < T > clazz ) { if ( clazz . isInterface ( ) ) { return clazz . newInstance ( ) ; } else if ( clazz . isPrimitive ( ) ) { return clazz . newInstance ( ) ; } return clazz . newInstance ( ) ; }
static List < Class < ? > > getAllSuperclasses ( ) { List < Class < ? > > superclasses = new ArrayList < Class < ? > > ( ) ; return superclasses ; }
static Class < ? > getImmediateClass ( Class < ? > parentClass ) { if ( parentClass == null ) { return null ; } if ( parentClass . getSuperclass ( ) == null ) { return parentClass ; } return parentClass . getSuperclass ( ) ; }
static String getJar ( Class < ? > class ) { if ( class == null ) { return null ; } if ( class . getClassLoader ( ) == null ) { return null ; } return class . getClassLoader ( ) . getResource ( class . getName ( ) ) ; }

def def sleep ( long

daemon_thread_factory ( daemon_thread_factory ) : NEW_LINE INDENT daemon_thread_factory = daemon_thread_factory NEW_LINE daemon_thread_factory . setDaemon ( daemon ) NEW_LINE daemon_thread_factory . start ( ) NEW_LINE return daemon_thread_factory NEW_LINE DEDENT
compute_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
void visit ( Method method ) { super . visit ( method ) ; if ( method . getParameterTypes ( ) . size ( ) == 0 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 0 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 1 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 2 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 1 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 2 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 1 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 2 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) == 1 ) { return ; } if ( method . getParameterTypes ( ) . size ( ) ==
void visitAnnotation ( Annotation annotation ) { if ( annotation . annotationType ( ) == Annotation . class ) { return ; } if ( annotation . annotationType ( ) == Annotation . class ) { return ; } if ( annotation . annotationType ( ) == Annotation . class ) { return ; } }
static Annotation getAnnotation ( Class < ? > type ) { Annotation annotation = null ; if ( type != null ) { annotation = type . getAnnotation ( type ) ; } if ( annotation != null ) { return annotation ; } return null ; }
Annotation getAnnotation ( ) { if ( annotation != null ) { return annotation ; } return null ; }
static void visit ( Instruction instruction ) { if ( instruction == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
static void visitMethodInstruction ( Method instruction ) { if ( instruction == null ) { throw new IllegalArgumentException ( " Method instruction is null " ) ; } if ( instruction . instruction == null ) { throw new IllegalArgumentException ( " Method instruction is null " ) ; } if ( instruction . instruction == null ) { throw new IllegalArgumentException ( " Method instruction is null " ) ; } }

jump ( instruction ) : NEW_LINE INDENT if isinstance ( instruction , Instruction ) : NEW_LINE INDENT return instruction . jump ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

def def tryCatchBlock ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT try : NEW_LINE INDENT try : NEW_LINE INDENT try : NEW_LINE INDENT yield NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT DEDENT
public public void visitAnnotation ( Annotation annotation ) { if ( annotation . annotationType ( ) != null ) { if ( annotation . annotationType ( ) != null ) { return ; } if ( annotation . annotationType ( ) . getAnnotation ( ) != null ) { return ; } if ( annotation . annotationType ( ) . getAnnotation ( ) != null ) { return ; } } }
Java Properties to Jodd Props format ( Properties properties ) { if ( properties == null ) { throw new IllegalArgumentException ( " Properties cannot be null " ) ; } if ( properties instanceof JoddProps ) { JoddProps joddProps = ( JoddProps ) properties ; } return joddProps ; }
static byte [ ] read ( InputStream input ) throws IOException { byte [ ] data = new byte [ input . readableBytes ( ) ] ; input . readBytes ( data , 0 , data . length ) ; return data ; }
next_mapped_object ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . mapped_object NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
move ( self , element ) : NEW_LINE INDENT if isinstance ( element , list ) : NEW_LINE INDENT element = element [ 0 ] NEW_LINE DEDENT if isinstance ( element , tuple ) : NEW_LINE INDENT element = element [ 1 ] NEW_LINE DEDENT if isinstance ( element , list ) : NEW_LINE INDENT element = element [ 0 ] NEW_LINE DEDENT return element NEW_LINE DEDENT


resize_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT else : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT return array NEW_LINE DEDENT
def append ( self , element ) : NEW_LINE INDENT return self . array . append ( element ) NEW_LINE DEDENT
remove_sub_array ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 2 : NEW_LINE INDENT return



def def def def def XHTML__python____python____python____python____python____python____python__ def def def XHTML__python____python____python____python____python____python____python____python__ def def def def XHTML__python____python____python____python____python__ def def def def XHTML__python____python____python____python____python__ def def def def def XHTML def XHTML def XHTML def XHTML__python____python____python____python____python____python____python____python____python__ def def def def XHTML def XHTML__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def XHTML def XHTML__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def XHTML__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def XHTML__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def XHTML__python____python____python____python____python____python____python____python____python____python__ def def def
static DOMTree createDOMTree ( final String content ) { if ( content == null ) { return null ; } final DOMTree tree = new DOMTree ( ) ; if ( content . length ( ) == 0 ) { return tree ; } if ( content . length ( ) == 1 ) { return tree ; } if ( content . length ( ) == 2 ) { return tree ; } return tree ; }
parse_content ( self , content ) : NEW_LINE INDENT self . content = content NEW_LINE if self . content is None : NEW_LINE INDENT self . content = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . content . append ( self . content ) NEW_LINE DEDENT return self NEW_LINE DEDENT
maximumStackSize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _maximumStackSize NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
end_basic_block ( self ) : NEW_LINE INDENT if self . basic_block is not None : NEW_LINE INDENT return self . basic_block . end_basic_block ( ) NEW_LINE DEDENT return self . basic_block . end_basic_block ( ) NEW_LINE DEDENT
collect_attributes ( self ) : NEW_LINE INDENT def collect_attributes ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT def get_attributes ( self ) : NEW_LINE INDENT return self . _attributes NEW_LINE DEDENT DEDENT
inject ( self , context ) : NEW_LINE INDENT context = context . copy ( ) NEW_LINE context . update ( ) NEW_LINE return context NEW_LINE DEDENT


def def invoke ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _action . invoke ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _action . invoke ( ) NEW_LINE DEDENT DEDENT
static List < String > beanPropertyNames ( ) { List < String > beanPropertyNames = new ArrayList < String > ( ) ; beanPropertyNames . addAll ( Arrays . asList ( beanPropertyNames ) ) ; return beanPropertyNames ; }

compare_property_name ( property_name , property_name ) : NEW_LINE INDENT if property_name is None : NEW_LINE INDENT return False NEW_LINE DEDENT return property_name . equals ( property_name ) NEW_LINE DEDENT
resolve ( Class < ? > class ) : NEW_LINE INDENT for ( Class < ? > clazz : class . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null ) { for ( Class < ? > clazz : clazz . getSuperclass ( ) . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null ) { for ( Class < ? > clazz : clazz . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null ) { for ( Class < ? > clazz : clazz . getSuperclass ( ) . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null ) { for ( Class < ? > clazz : clazz . getSuperclass ( ) . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null ) { for ( Class < ? > clazz : clazz . getSuperclass ( ) . getDeclaredClasses ( ) ) { if ( clazz . getSuperclass ( ) != null
filter_config_parameters ( self ) : NEW_LINE INDENT filter_config_parameters = { } NEW_LINE filter_config_parameters . update ( self . config ) NEW_LINE filter_config_parameters . update ( self . config ) NEW_LINE return filter_config_parameters NEW_LINE DEDENT
def def def get_bundle_bundle_file ( self ) : NEW_LINE INDENT return self . _get_bundle_file ( ) NEW_LINE DEDENT

def _create_bundle ( self ) : NEW_LINE INDENT return self . _create_bundle ( ) NEW_LINE DEDENT
public
create_digest_from_string ( self , string ) : NEW_LINE INDENT digest = hashlib . md5 ( string ) . hexdigest ( ) NEW_LINE if not digest : NEW_LINE INDENT digest = hashlib . md5 ( ) . hexdigest ( ) NEW_LINE DEDENT return digest NEW_LINE DEDENT
create_bundle_file ( self ) : NEW_LINE INDENT if self . bundle_file is not None : NEW_LINE INDENT return self . bundle_file NEW_LINE DEDENT self . bundle_file = self . _create_bundle_file ( ) NEW_LINE return self . _create_bundle_file ( ) NEW_LINE DEDENT
clear ( self ) : NEW_LINE INDENT self . settings . clear ( ) NEW_LINE self . settings . clear ( ) NEW_LINE DEDENT
def def get_content ( self ) : NEW_LINE INDENT return self . _get_content ( ) NEW_LINE DEDENT
read_property_value ( self ) : NEW_LINE INDENT value = self . _get_value ( ) NEW_LINE if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_reference_name ( self , entity_type ) : NEW_LINE INDENT if isinstance ( entity_type , str ) : NEW_LINE INDENT return entity_type NEW_LINE DEDENT elif isinstance ( entity_type , str ) : NEW_LINE INDENT return entity_type NEW_LINE DEDENT elif isinstance ( entity_type , str ) : NEW_LINE INDENT return entity_type NEW_LINE DEDENT else : NEW_LINE INDENT return entity_type NEW_LINE DEDENT DEDENT
def get_session ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_session ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_session ( ) NEW_LINE DEDENT DEDENT
public static Array < String > array ( ) { return new Array < String > ( ) { @ Override public String toString ( ) { return new String ( ) ; } } ; }
static < T > Map < String , T > get ( Class < T > type ) { Map < String , T > map = new HashMap < String , T > ( ) ; map . put ( type . getSimpleName ( ) , type ) ; return map ; }
Res def get_all_collections ( self , type ) : NEW_LINE INDENT collections = [ ] NEW_LINE for type in self . _collections : NEW_LINE INDENT collections = self . _get_collections ( type ) NEW_LINE for collection in collections : NEW_LINE INDENT collections . append ( collection ) NEW_LINE DEDENT DEDENT return collections NEW_LINE DEDENT
public public static boolean isPropertyType ( String propertyName ) { return propertyTypes . contains ( propertyName ) ; }
def def def def def def def def def def def auto__python____python____python____python____python____python____python____python__ def def def def def def auto__python____python____python____python____python____python____python__ def def def def def def def auto__python____python____python____python____python____python__ def def def def def def def auto__python____python____python____python____python____python__ def def def def def def def auto__python____python____python____python____python____python____python__ def def def def def def def def auto__python____python____python____python____python____python__ def def def def def auto__python____python____python____python____python____python____python__ def def def def def auto__python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def auto__python____python____python____python____python____python____python____python____python__ def def def def def auto__python____python____python____python____python__
def transaction ( self , transaction ) : NEW_LINE INDENT try : NEW_LINE INDENT transaction = transaction . transaction ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return transaction NEW_LINE DEDENT DEDENT
current_transaction ( self ) : NEW_LINE INDENT transaction = self . transaction NEW_LINE if not transaction : NEW_LINE INDENT return None NEW_LINE DEDENT return transaction NEW_LINE DEDENT
commit ( self ) : NEW_LINE INDENT if not self . transaction : NEW_LINE INDENT return NEW_LINE DEDENT self . transaction . commit ( ) NEW_LINE self . transaction . commit ( ) NEW_LINE DEDENT
rollback ( self ) : NEW_LINE INDENT if self . transaction is None : NEW_LINE INDENT return NEW_LINE DEDENT self . transaction . rollback ( ) NEW_LINE DEDENT
def def create_properties ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT properties = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT properties = { } NEW_LINE DEDENT else : NEW_LINE INDENT properties = { } NEW_LINE DEDENT return properties NEW_LINE DEDENT

load_properties_from_string ( self , string ) : NEW_LINE INDENT properties = { } NEW_LINE for key in self . properties : NEW_LINE INDENT properties [ key ] = self . properties [ key ] NEW_LINE DEDENT return properties NEW_LINE DEDENT
static Properties copy ( Properties properties ) { Properties properties = new Properties ( ) ; properties . putAll ( properties ) ; return properties ; }
static Properties getProperties ( ) { if ( properties == null ) { properties = new Properties ( ) ; } else { properties . putAll ( this . properties ) ; } return properties ; }
String getProperty ( String key ) { if ( key == null ) { return null ; } if ( key . length ( ) == 0 ) { return null ; } if ( key . length ( ) == 1 ) { return null ; } if ( key . length ( ) == 2 ) { return null ; } if ( key . length ( ) == 3 ) { return null ; } if ( key . length ( ) == 4 ) { return null ; } if ( key . length ( ) == 5 ) { return null ; } if ( key . length ( ) == 6 ) { return null ; } if ( key . length ( ) == 7 ) { return null ; } if ( key . length ( ) == 8 ) { return null ; } if ( key . length ( ) == 4 ) { return null ; } if ( key . length ( ) == 6 ) { return null ; } if ( key . length ( ) == 8 ) { return null ; }
def def _reolves_variables ( self ) : NEW_LINE INDENT return self . _reolves_variables ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
scope ( self ) : NEW_LINE INDENT scope = self . scope ( ) NEW_LINE if scope is None : NEW_LINE INDENT return None NEW_LINE DEDENT return scope NEW_LINE DEDENT
void setReadTransactionMode ( int mode ) { if ( mode < 0 ) { throw new IllegalArgumentException ( ) ; } if ( mode > 1 ) { throw new IllegalArgumentException ( ) ; } }



def css_selector ( self , element ) : NEW_LINE INDENT if isinstance ( element , basestring ) : NEW_LINE INDENT return self . css_selector ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . css_selector ( element ) NEW_LINE DEDENT DEDENT

unescape ( self , string ) : NEW_LINE INDENT if self . _escape : NEW_LINE INDENT return self . _escape ( string ) NEW_LINE DEDENT return self . _escape ( string ) NEW_LINE DEDENT

void copy ( ) throws CloneNotSupportedException { super . copy ( ) ; if ( ! cloned ) { throw new CloneNotSupportedException ( CloneNotSupportedException . class . getName ( ) ) ; } }
remove_node ( self , node ) : NEW_LINE INDENT if node . nodeType == Node . ELEMENT_NODE : NEW_LINE INDENT return self . remove_node ( node ) NEW_LINE DEDENT return self . remove_node ( node ) NEW_LINE DEDENT
def public public public static void add ( final Node node ) { if ( node . getChildren ( ) . size ( ) > 0 ) { if ( node . getChildren ( ) . size ( ) > 0 ) { if ( node . getChildren ( ) . size ( ) > 0 ) { node . getChildren ( ) . add ( node ) ; if ( node . getChildren ( ) . size ( ) > 0 ) { node . getChildren ( ) . addAll ( node . getChildren ( ) ) ; } } } } } }
insert_node ( self , index , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT node . insert ( index , node ) NEW_LINE DEDENT
insert_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT node . insert ( ) NEW_LINE node . insert ( ) NEW_LINE node . insert ( ) NEW_LINE DEDENT
insert_child_nodes ( self , node ) : NEW_LINE INDENT if node . is_leaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif node . is_leaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif node . is_leaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif node . is_leaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif node . is_leaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
insert_node_after ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT node = self . _insert_node ( node ) NEW_LINE if node is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _insert_node ( node ) NEW_LINE self . _insert_node ( node ) NEW_LINE DEDENT
insert_child_nodes ( self , referent_node ) : NEW_LINE INDENT if referent_node is None : NEW_LINE INDENT return NEW_LINE DEDENT child_nodes = [ ] NEW_LINE for node in referent_node : NEW_LINE INDENT child_nodes . append ( node ) NEW_LINE DEDENT child_nodes . append ( referent_node ) NEW_LINE return child_nodes NEW_LINE DEDENT
remove_child_nodes ( self , parent ) : NEW_LINE INDENT self . parent . removeChild ( parent ) NEW_LINE self . parent . removeChild ( parent ) NEW_LINE self . parent . removeChild ( parent ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_health ( self ) : NEW_LINE INDENT if self . health is not None : NEW_LINE INDENT return self . health NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def def get_child_elements ( self , child_elements ) : NEW_LINE def get_child_elements ( self ) : NEW_LINE INDENT return self . _child_elements NEW_LINE DEDENT def get_child_elements ( self ) : NEW_LINE INDENT return self . _child_elements NEW_LINE DEDENT def get_children ( self ) : NEW_LINE INDENT return self . _child_elements NEW_LINE DEDENT
def def def init ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def Init__python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def _init__python____python____python____python____python__ def def def def def def _init__python____python____python____python____python__ def def def def def def _init def _init def _get_siblings def _get_siblings def _get_siblings def _get_siblings ( self ) : NEW def _get_siblings ( self ) : NEW_LINE def _get_siblings ( self ) : NEW_LINE INDENT return self . _get_siblings ( ) NEW_LINE def _get_siblings ( self ) : NEW_LINE INDENT return self . _get_siblings ( ) NEW_LINE__python__
def def def def def def init ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def init__python____python____python____python____python____python__ def def def def def init__python____python____python____python____python____python__ def def def def def ___python____python____python____python__ def def def def def _init__python____python____python____python____python__ def def def def def _init__python____python____python____python____python____python__ def def def def def _init__python____python____python____python____python____python____python__ def def def def def _init def _get_node def _get_child ( self ) : NEW def _get_child ( self ) : NEW def _get_child ( self ) : NEW def _get_children ( self ) : NEW__python__ def _get_child_nodes
static Changes owner document for given node and all its children ( ) { final Changes owner = new Changes ( ) ; owner . add ( new Changes ( ) ) ; return owner ; }
previous_sibling ( self , name ) : NEW_LINE INDENT if name in self . previous_siblings : NEW_LINE INDENT return self . previous_siblings [ name ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
textContent ( self ) : NEW_LINE INDENT return self . textContent ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
children ( self ) : NEW_LINE INDENT nodes = self . nodes ( ) NEW_LINE for node in nodes : NEW_LINE INDENT if node . nodeType == Node . ELEMENT_NODE : NEW_LINE INDENT nodes . append ( node ) NEW_LINE DEDENT DEDENT return nodes NEW_LINE DEDENT
def _get_css_path ( self , node ) : NEW_LINE INDENT if node . nodeType == Node . ELEMENT_NODE : NEW_LINE INDENT return self . _get_css_path ( node ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_css_path ( node ) NEW_LINE DEDENT DEDENT
def def _decorate_tags ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _decorate_tags ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def open ( self ) : NEW_LINE INDENT return self . _open ( ) NEW_LINE DEDENT
position ( self , tag ) : NEW_LINE INDENT return self . _decora_tag_position ( tag ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


find_closest_root_package ( self , action_path ) : NEW_LINE INDENT root = self . _find_closest_root_package ( action_path ) NEW_LINE if root : NEW_LINE INDENT return root NEW_LINE DEDENT return None NEW_LINE DEDENT
validate_key ( self , key ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( key , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance (
static BeanReferences copyOf ( Collection < BeanReference > references ) { if ( references . size ( ) == 0 ) { return new BeanReferences ( ) ; } else { return new BeanReferences ( references ) ; } }

def iter_targets ( self , targets ) : NEW_LINE INDENT for target in targets : NEW_LINE INDENT if target in self . targets : NEW_LINE INDENT yield target NEW_LINE DEDENT DEDENT DEDENT
iterate ( self ) : NEW_LINE INDENT for target in self . targets . values ( ) : NEW_LINE INDENT for injectionPoint in target . injectionPoints . values ( ) : NEW_LINE INDENT for injectionPoint in injectionPoint . values ( ) : NEW_LINE INDENT yield injectionPoint NEW_LINE DEDENT DEDENT DEDENT DEDENT
iterate_targets ( self , targets ) : NEW_LINE INDENT for target in targets : NEW_LINE INDENT for target in target . targets : NEW_LINE INDENT yield target NEW_LINE DEDENT DEDENT DEDENT
collect_parameters ( self , target ) : NEW_LINE INDENT params = [ ] NEW_LINE for param in target : NEW_LINE INDENT params . append ( param ) NEW_LINE DEDENT return params NEW_LINE DEDENT

public public static String [ ] arguments ( ) { String [ ] arguments = new String [ ] { } ; for ( int i = 0 ; i < arguments . length ; i ++ ) { arguments [ i ] = arguments [ i ] ; } return arguments [ i ] ; }
def broadcast ( event ) : NEW_LINE INDENT session = event . getSession ( ) NEW_LINE if session . isRegistered ( ) : NEW_LINE INDENT return session . broadcast ( event ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
remove_session ( self , session ) : NEW_LINE INDENT if session . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if session . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT session . remove_session ( session ) NEW_LINE DEDENT

append ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return self . append ( array ) NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return self . append ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . append ( array ) NEW_LINE DEDENT DEDENT
remove_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_target ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_target ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_target ( ) NEW_LINE DEDENT DEDENT
_handle_404 ( self , response ) : NEW_LINE INDENT if response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 404 : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
convert_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , str ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
get_action_filter_instance ( self ) : NEW_LINE INDENT return self . _action_filter_instance NEW_LINE DEDENT
get_function_name ( self ) : NEW_LINE INDENT return self . function_name NEW_LINE DEDENT
Res def Res def Res public public public public static List < Res public static List < String > getAllProperties ( Class < ? > type ) { return this . properties . properties . values ( ) ; public static List < String > getAllProperties ( ) { return this . properties . properties . values ( ) ; } public static List < String > getAllProperties ( ) { return this . properties . values ( ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
count_attributes ( self , attribute ) : NEW_LINE INDENT return len ( self . attributes ) NEW_LINE DEDENT
get_all_action_results ( self ) : NEW_LINE INDENT return self . _get_all_action_results ( ) NEW_LINE DEDENT
match_character ( self , character ) : NEW_LINE INDENT return self . match ( character ) NEW_LINE DEDENT
find_first_character ( self , charsequence ) : NEW_LINE INDENT if len ( charsequence ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( charsequence ) == 1 : NEW_LINE INDENT return charsequence [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_first_character_in_array ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
add_arguments ( self , arguments ) : NEW_LINE INDENT self . arguments . append ( arguments ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
run_command ( self , command ) : NEW_LINE INDENT result = self . _run_command ( command ) NEW_LINE if result is not None : NEW_LINE INDENT return result NEW_LINE DEDENT return result NEW_LINE DEDENT
static void invokeListener ( Class < ? > type , Object listener ) { if ( type == null ) { throw new IllegalArgumentException ( " type is null " ) ; } if ( listener == null ) { throw new IllegalArgumentException ( " listener is null " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type is not a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type is not a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type is not a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type is not a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type is not a primitive " ) ; } }
set_frame ( self , frame ) : NEW_LINE INDENT self . frame = frame NEW_LINE DEDENT
public public public public public public public public public public public public public static public abstract abstract class public abstract class public abstract type for public abstract type for public API frame element type of the given public API frame element type of the given public API frame element type of the given public API frame element type of the given public API frame element type . public API frame element type of the given public API frame element type of the given frame element type .

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_abstract_abstract_type ( self ) : NEW_LINE INDENT abstract_LINE INDENT abstract_type = abstract_type . get_abstract_type ( ) NEW_LINE return abstract_LINE DEDENT
abstract type Replaces abstract type stored at the given local variable index in the output frame .


def P def def P def def P def def P def def def P def def P def def P def def def P def def P def def P def def P def def P def def P def def P def def P def def P



static byte [ ] get_abstract_type_info ( byte [ ] abstract_type_info ) { if ( abstract_type_info != null ) { return abstract_type_info . clone ( ) ; } return null ; }
def count_expired_elements ( self ) : NEW_LINE INDENT return self . cache . count_expired_elements ( ) NEW_LINE DEDENT
prune ( self ) : NEW_LINE INDENT return self . _prune ( ) NEW_LINE DEDENT
visit_class ( cls ) : NEW_LINE INDENT if isinstance ( cls , ModuleType ) : NEW_LINE INDENT return cls NEW_LINE DEDENT elif isinstance ( cls , type ) : NEW_LINE INDENT return cls NEW_LINE DEDENT else : NEW_LINE INDENT return cls NEW_LINE DEDENT DEDENT
void visit ( final Class < ? > visitedClass ) { if ( visitedClass . getName ( ) . equals ( visitedClass . getName ( ) ) ) { return ; } if ( visitedClass . getName ( ) . equals ( visitedClass . getName ( ) ) ) { return ; } if ( visitedClass . getName ( ) . equals ( visitedClass . getName ( ) ) ) { return ; } if ( visitedClass . getName ( ) . equals ( visitedClass . getName ( ) ) ) { return ; } visitedClass . setName ( visitedClass . getName ( ) ) ; visitedClass . setName ( visitedClass . getName ( ) ) ; }
void visit ( Class < ? > class ) { if ( class . getEnclosingClass ( ) != null ) { throw new IllegalArgumentException ( " The enclosing class must not be null " ) ; } if ( class . getEnclosingClass ( ) != null ) { throw new IllegalArgumentException ( " The enclosing class must not be null " ) ; } }

void visit ( final Class < ? > nest ) { if ( nest . getClass ( ) . getName ( ) . equals ( nest . getClass ( ) . getName ( ) ) ) { return ; } if ( nest . getClass ( ) . getName ( ) . equals ( nest . getClass ( ) . getName ( ) ) ) { return ; } if ( nest . getClass ( ) . getName ( ) . equals ( nest . getClass ( ) . getName ( ) ) ) { return ; } if ( nest . getClass ( ) . getName ( ) . equals ( nest . getClass ( ) . getName ( ) ) ) { return ; } if ( nest . getClass ( ) . getName ( ) . equals ( nest . getClass ( ) . getName ( ) ) ) { return ; } }
void visitInnerClass ( Class < ? > innerClass ) { if ( innerClass == null ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } if ( innerClass . isInterface ( ) ) { return ; } }

def create ( self ) : NEW_LINE INDENT session = self . session NEW_LINE if session is None : NEW_LINE INDENT self . session = self . session NEW_LINE DEDENT else : NEW_LINE INDENT self . session = self . session NEW_LINE DEDENT return session NEW_LINE DEDENT
session ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _session NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT

read_request_body ( self ) : NEW_LINE INDENT if self . request_body is None : NEW_LINE INDENT self . request_body = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . request_body = self . request_body . copy ( ) NEW_LINE DEDENT return self . request_body NEW_LINE DEDENT
def def get_first_item_index ( self , page ) : NEW_LINE INDENT return self . _get_first_item_index ( page ) NEW_LINE DEDENT
first_item_index ( self ) : NEW_LINE INDENT return self . _first_item_index ( ) NEW_LINE DEDENT
def def match def match ( self , value ) : NEW_LINE INDENT if ( value != null ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
char array into byte array by replacing each character with two bytes .
find_first_character_in_array ( self , array ) : NEW_LINE INDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
def def name ( self , node ) : NEW_LINE INDENT name = node . name NEW_LINE name = node . name NEW_LINE return name NEW_LINE DEDENT
name ( self ) : NEW_LINE INDENT name = self . name NEW_LINE try : NEW_LINE INDENT return name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
render_enders ( self ) : NEW_LINE INDENT return self . _render_enders ( ) NEW_LINE DEDENT
load_properties ( self , file ) : NEW_LINE INDENT if not file . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if file . exists ( ) : NEW_LINE INDENT return self . _load_properties ( file ) NEW_LINE DEDENT return self . _load_properties ( file ) NEW_LINE DEDENT
load_properties ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT properties = self . _load_properties ( file ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT return properties NEW_LINE DEDENT
load_properties ( self , stream ) : NEW_LINE INDENT if stream . closed ( ) : NEW_LINE INDENT raise ValueError ( " Stream is closed . " ) NEW_LINE DEDENT if stream . closed ( ) : NEW_LINE INDENT raise ValueError ( " Stream is closed . " ) NEW_LINE DEDENT if stream . closed ( ) : NEW_LINE INDENT raise ValueError ( " Stream is closed . " ) NEW_LINE DEDENT DEDENT
load_base_properties ( self , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT return NEW_LINE DEDENT base_properties = { } NEW_LINE for key in properties : NEW_LINE INDENT base_properties [ key ] = properties [ key ] NEW_LINE DEDENT return base_properties NEW_LINE DEDENT
static Map < String , String > load ( String prefix ) { Map < String , String > base = new HashMap < String , String > ( ) ; base . put ( prefix , prefix ) ; return base ; }

get_value ( self , property ) : NEW_LINE INDENT if not property : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return property NEW_LINE DEDENT DEDENT
set_profile_value ( self , profile , value ) : NEW_LINE INDENT self . profile = profile NEW_LINE self . value = value NEW_LINE DEDENT

extract_props ( self , profiles ) : NEW_LINE INDENT props = [ ] NEW_LINE for profile in profiles : NEW_LINE INDENT props . append ( profile ) NEW_LINE DEDENT return props NEW_LINE DEDENT
extract_wildcards ( self , wildcards ) : NEW_LINE INDENT if wildcards : NEW_LINE INDENT return self . _wildcards . extract ( wildcards ) NEW_LINE DEDENT return self . _wildcards . extract ( wildcards ) NEW_LINE DEDENT
static Map < String , String > getInnerMap ( String prefix ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( prefix , prefix ) ; return map ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void setActiveProfiles ( List < Profile > profiles ) { if ( profiles != null ) { for ( Profile profile : profiles ) { if ( profile . isActive ( ) ) { profile . setActive ( true ) ; } } } }
get_all_profiles ( self ) : NEW_LINE INDENT profiles = self . _get_all_profiles ( ) NEW_LINE if not profiles : NEW_LINE INDENT return None NEW_LINE DEDENT return profiles NEW_LINE DEDENT
get_profiles ( self ) : NEW_LINE INDENT return self . profiles NEW_LINE DEDENT

static InjectionPoint injectionPoint ( InjectionPoint injectionPoint ) { InjectionPoint injectionPoint = new InjectionPoint ( injectionPoint ) ; injectionPoint . setInjectionPoint ( injectionPoint ) ; return injectionPoint ; }
injection_point ( self ) : NEW_LINE INDENT if self . injection_point is not None : NEW_LINE INDENT return self . injection_point NEW_LINE DEDENT return self . injection_point NEW_LINE DEDENT
add_init_methods ( self ) : NEW_LINE INDENT init_methods = [ ] NEW_LINE for method in self . init_methods : NEW_LINE INDENT init_methods . append ( method ) NEW_LINE DEDENT return init_methods NEW_LINE DEDENT
destroy ( self , * args , ** kwargs ) : NEW_LINE INDENT self . _destroy ( * args , ** kwargs ) NEW_LINE self . _destroy ( * args , ** kwargs ) NEW_LINE DEDENT
static Class < ? > getTargetClass ( Class < ? > class ) { if ( class == null ) { return null ; } return class . getSuperclass ( ) ; }
def def def def def inject ( self ) :__python__ def def def public public public public public public void inject ( final public void inject ( final String target , final String target , final String target , final String name ) { if ( target != null ) { if ( target != null ) { if ( target != null ) { throw new IllegalArgumentException ( " Inject public void inject ( String name ) { throw new IllegalArgumentException ( target ) ; } } } else if ( target == null ) { throw new IllegalArgumentException ( ) ; } else { return ; } } } }
wrapper_target_type ( target_type ) : NEW_LINE INDENT if isinstance ( target_type , type ) : NEW_LINE INDENT return target_type NEW_LINE DEDENT else : NEW_LINE INDENT return target_type NEW_LINE DEDENT DEDENT
static Field getField ( Class < ? > clazz ) { if ( clazz . getSuperclass ( ) != null ) { return clazz . getSuperclass ( ) . getField ( clazz . getSuperclass ( ) ) ; } return null ; }
def def def get_raw_type ( self ) : NEW_LINE INDENT return self . _get_raw_type ( ) NEW_LINE DEDENT def get_type ( self ) : NEW_LINE INDENT return self . _get_raw_type ( ) NEW_LINE DEDENT
def def get_key_type ( self ) : NEW_LINE INDENT key_type = self . _get_key_type ( ) NEW_LINE key_LINE if key_type is not None : NEW_LINE INDENT return key_type = self . _get_type ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return key_type NEW_LINE DEDENT DEDENT


def def create_response ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT raise exception NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_response ( exception ) NEW_LINE DEDENT DEDENT
public static String method_name ( String method_name ) { if ( method_name == null ) { return null ; } else { return method_name ; } } }
match_recursive_function ( self , recursive_function ) : NEW_LINE INDENT if recursive_function : NEW_LINE INDENT return recursive_function NEW_LINE DEDENT elif recursive_function : NEW_LINE INDENT return recursive_function NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
loadRules ( self ) : NEW_LINE INDENT rules = [ ] NEW_LINE for rule in self . rules : NEW_LINE INDENT rules . append ( rule ) NEW_LINE DEDENT return rules NEW_LINE DEDENT
resources ( self ) : NEW_LINE INDENT res = { } NEW_LINE for resource in self . _resources . values ( ) : NEW_LINE INDENT res . update ( resource ) NEW_LINE DEDENT return res NEW_LINE DEDENT
load_class ( self ) : NEW_LINE INDENT if self . parent : NEW_LINE INDENT return self . parent . load_class ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . parent . load_class ( ) NEW_LINE DEDENT DEDENT
def get_resource ( self ) : NEW_LINE INDENT if self . parent : NEW_LINE INDENT return self . parent . get_resource ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . parent . get_resource ( ) NEW_LINE DEDENT DEDENT
def def end_gobbler ( self ) : NEW_LINE INDENT return self . gobbler . end_gobbler ( ) NEW_LINE DEDENT
def def def Sc def def def def Sc def def def def _ public @ Nonnull def _get_type def _get_annotation_type ( self ) : def _get_annotation_type ( self ) : NEW def _get_type ( self ) : NEW_LINE INDENT return self . _get_annotation_type ( ) NEW_LINE DEDENT def _get_type ( self ) : NEW_LINE INDENT return self . _get_type ( ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_urls ( self ) : NEW_LINE INDENT urls = [ ] NEW_LINE for url in self . urls : NEW_LINE INDENT if url . startswith ( ' / ' ) : NEW_LINE INDENT urls . append ( url ) NEW_LINE DEDENT DEDENT return urls NEW_LINE DEDENT
def def new_bean ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ ( ) . newInstance ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT DEDENT
update_suppliers ( self ) : NEW_LINE INDENT if self . _suppliers : NEW_LINE INDENT self . _suppliers = self . _suppliers . copy ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
def def load_property_descriptor ( self ) : NEW_LINE INDENT def load_property_descriptor ( self ) : NEW_LINE INDENT return self . _get_property_descriptor ( ) NEW_LINE DEDENT return self . _get_property_descriptor ( ) NEW_LINE DEDENT
getter ( self , name ) : NEW_LINE INDENT return self . _getter ( name ) NEW_LINE DEDENT
set_setter ( self , setter ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _setter = setter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static DbOom getInstance ( ) { if ( DbOom == null ) { DbOom = new DbOom ( ) ; DbOom . initialize ( ) ; } return DbOom ; }
add_iterator ( self , iterator ) : NEW_LINE INDENT if isinstance ( iterator , Iterator ) : NEW_LINE INDENT iterator . next ( ) NEW_LINE DEDENT return iterator NEW_LINE DEDENT
static void printLogo ( String logo ) { if ( logo == null ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if ( logo . length ( ) == 0 ) return ; if
public public public static void add ( Joy . Joy joy . Joy joy . Joy . Joy joy . Joy . Joy . class . getName ( ) : NEW_LINE INDENT for ( Joy joy . Joy . Joy . Joy . class . getName ( ) : NEW_LINE INDENT if ( joy . Joy . Joy . class . getName ( ) . equals ( Joy . Joy . class . getName ( ) ) ) : NEW_LINE INDENT joy . Joy . add ( Joy . class . getName ( ) ) NEW_LINE DEDENT DEDENT DEDENT
create_socket ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) NEW_LINE DEDENT except socket . error : NEW_LINE INDENT socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) NEW_LINE DEDENT return socket NEW_LINE DEDENT
static SSLSocketFactory createSSLSocketFactory ( ) { return new SSLSocketFactory ( ) { public static SSLSocketFactory createSSLSocketFactory ( ) { return new SSLSocketFactory ( ) ; } public static SSLSocketFactory createSSLSocketFactory ( ) { return new SSLSocketFactory ( ) ; } } ; }
def def set_default_socket_factory ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _socket_factory = self . _socket_factory ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _socket_factory = self . _socket_factory ( ) NEW_LINE DEDENT return self . _socket_factory NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String randomString ( int length ) { if ( length == 0 ) { return " " ; } if ( length == 1 ) { return " " ; } if ( length == 2 ) { return " " ; } if ( length == 3 ) { return " " ; } return " " ; }
static String randomString ( int length ) { if ( length == 0 ) { return " " ; } if ( length == 1 ) { return " " ; } if ( length == 2 ) { return " " ; } if ( length == 3 ) { return " " ; } if ( length == 4 ) { return " " ; } return " " ; }
static String randomString ( int length ) { if ( length == 0 ) { return " " ; } if ( length == 1 ) { return " " ; } if ( length == 2 ) { return " " ; } return " " ; }
create_type ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT else : NEW_LINE INDENT return collection NEW_LINE DEDENT DEDENT

convert_type ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
visit ( self , service ) : NEW_LINE INDENT if isinstance ( service , Service ) : NEW_LINE INDENT return self . visit ( service ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . visit ( service ) NEW_LINE DEDENT DEDENT
static TypeCache getDefaultImplementation ( ) { if ( typeCache == null ) { typeCache = new TypeCache ( ) ; } return typeCache ; }
add_values ( self , map , values ) : NEW_LINE INDENT self . map = map NEW_LINE self . values = values NEW_LINE return self NEW_LINE DEDENT
static List < Method > getAllMethods ( ) { List < Method > methods = new ArrayList < Method > ( ) ; for ( Method method : getAllMethods ( ) ) { methods . add ( method ) ; } return methods ; }
get_ip_address ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _ip_address NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _ip_address NEW_LINE DEDENT DEDENT
def def def get_ip_address ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( self . _ip_address ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _ip_address NEW_LINE DEDENT DEDENT
ip_address ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static String getHostname ( ) { String host = null ; try { host = InetAddress . getByName ( "127.0.0.1" ) . getHostAddress ( ) ; } catch ( UnknownHostException e ) { } if ( host == null ) { host = " " ; } return host ; }
download_resource ( self , resource ) : NEW_LINE INDENT if isinstance ( resource , bytes ) : NEW_LINE INDENT return resource NEW_LINE DEDENT elif isinstance ( resource , bytes ) : NEW_LINE INDENT return resource NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
download ( self , resource ) : NEW_LINE INDENT if isinstance ( resource , str ) : NEW_LINE INDENT return self . _download ( resource ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _download ( resource ) NEW_LINE DEDENT DEDENT
download ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _download ( filename ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return self . _download ( filename ) NEW_LINE DEDENT DEDENT
injection ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
outjection ( outjection ) : NEW_LINE INDENT outjection . outjection = outjection NEW_LINE outjection . outjection = outjection NEW_LINE return outjection NEW_LINE DEDENT

create_socket ( self , timeout = None ) : NEW_LINE INDENT try : NEW_LINE INDENT socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) NEW_LINE socket . settimeout ( timeout ) NEW_LINE return socket NEW_LINE DEDENT except socket . error : NEW_LINE INDENT return socket NEW_LINE DEDENT DEDENT
static boolean isPrimitive ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . isPrimitive ( ) ) { return true ; } if ( clazz . isPrimitive ( ) ) { return true ; } return false ; }
load_class_by_name ( cls , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE cls . __name__ = name NEW_LINE return cls NEW_LINE DEDENT

destroy ( self ) : NEW_LINE INDENT beans = self . beans . values ( ) NEW_LINE if len ( beans ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return beans [ 0 ] NEW_LINE DEDENT DEDENT
binary_search_wrapper ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return self . binary_search_wrapper ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . binary_search_wrapper ( array ) NEW_LINE DEDENT DEDENT
create_binary_search_wrapper ( self , array , comparator ) : NEW_LINE INDENT return self . create_binary_search_wrapper ( array , comparator ) NEW_LINE DEDENT
_exclude_property_names ( self ) : NEW_LINE INDENT return self . _exclude_property_names ( ) NEW_LINE DEDENT
def def _get_property_names ( self ) : NEW_LINE INDENT def _get_property_names ( self ) : NEW_LINE INDENT return self . _property_names NEW_LINE DEDENT return self . _property_names NEW_LINE DEDENT
static String [ ] getPropertyNames ( Class < ? > template ) { String [ ] propertyNames = new String [ ] { template . getName ( ) , template . getName ( ) } ; return propertyNames ; }
def get_tag_tag_data ( self ) : NEW_LINE INDENT return self . _tag_data . get_tag_data ( ) NEW_LINE DEDENT

_populate_column_descriptor ( self , column_descriptor ) : NEW_LINE INDENT if column_descriptor is not None : NEW_LINE INDENT return column_descriptor NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
process_sql ( self , sql ) : NEW_LINE INDENT if not sql : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , basestring ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( sql , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance


Populates entity with generated column values from executed query .

public static void setNonExistingBeanParameters ( final Object bean ) { if ( bean . getClass ( ) != null ) { throw new IllegalArgumentException ( " Non - existing bean parameters cannot be set . " ) ; } if ( bean . getClass ( ) != null ) { throw new IllegalArgumentException ( " Non - existing bean parameters cannot be set . " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def set_parameters ( self , params ) : NEW_LINE INDENT if params . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
void append ( Chunk chunk ) { if ( chunk == null ) { throw new IllegalArgumentException ( " chunk is null . " ) ; } else { if ( chunk . isClosed ( ) ) { throw new IllegalArgumentException ( " chunk is closed . " ) ; } else if ( chunk . isClosed ( ) ) { throw new IllegalArgumentException ( " chunk is closed . " ) ; } } }

find_table_by_column ( self , column ) : NEW_LINE INDENT table = self . table NEW_LINE if not table : NEW_LINE INDENT return None NEW_LINE DEDENT return table NEW_LINE DEDENT
def get_table_name ( self ) : NEW_LINE INDENT return self . _get_table_name ( ) NEW_LINE DEDENT
static < T > T get ( Class < T > clazz ) { return clazz . newInstance ( ) ; }
def _trim ( self ) : NEW_LINE INDENT return self . _trim ( self . output ) . strip ( ) NEW_LINE DEDENT
get_uploaded_files ( self ) : NEW_LINE INDENT uploaded_files = self . uploaded_files NEW_LINE return uploaded_files NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
url ( self ) : NEW_LINE INDENT url = self . request . get ( ' url ' ) NEW_LINE if url is None : NEW_LINE INDENT url = self . request . get ( ' url ' ) NEW_LINE DEDENT else : NEW_LINE INDENT url = urlparse . urljoin ( self . request . get ( ' url ' ) , url ) NEW_LINE DEDENT return url NEW_LINE DEDENT
get_current_request_uri ( self ) : NEW_LINE INDENT uri = self . request . uri NEW_LINE if uri is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return uri NEW_LINE DEDENT DEDENT
def def get_method_parameter_names ( self ) : NEW_LINE INDENT method_names = [ ] NEW_LINE for name in self . method_names : NEW_LINE INDENT method_names . append ( name ) NEW_LINE DEDENT DEDENT
static PetiteContainer create ( ) { return new PetiteContainer ( ) ; }
def def def def def public public public public public public public static void add
filter_SUBJECT ( self , field ) : NEW_LINE INDENT if isinstance ( field , six . string_types ) : NEW_LINE INDENT return field NEW_LINE DEDENT elif isinstance ( field , six . string_types ) : NEW_LINE INDENT return field NEW_LINE DEDENT else : NEW_LINE INDENT return field NEW_LINE DEDENT DEDENT
get_message_id ( self , message_id ) : NEW_LINE INDENT message = self . _get_message ( message_id ) NEW_LINE if message is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return message . id NEW_LINE DEDENT DEDENT
_filter_from_field ( self , field ) : NEW_LINE INDENT return self . _filter_from_field ( field ) NEW_LINE DEDENT
filter ( self , field ) : NEW_LINE INDENT if isinstance ( field , basestring ) : NEW_LINE INDENT return self . _filter ( field ) NEW_LINE DEDENT elif isinstance ( field , basestring ) : NEW_LINE INDENT return self . _filter ( field ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _filter ( field ) NEW_LINE DEDENT DEDENT
filter ( self , field ) : NEW_LINE INDENT if isinstance ( field , CCField ) : NEW_LINE INDENT return field NEW_LINE DEDENT elif isinstance ( field , CCField ) : NEW_LINE INDENT return field NEW_LINE DEDENT else : NEW_LINE INDENT return field NEW_LINE DEDENT DEDENT
filter ( self , field ) : NEW_LINE INDENT if isinstance ( field , BCCField ) : NEW_LINE INDENT return self . filter ( field ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . filter ( field ) NEW_LINE DEDENT DEDENT
filter ( self , flags ) : NEW_LINE INDENT if len ( flags ) > 1 : NEW_LINE INDENT return self . filter ( flags ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . filter ( flags ) NEW_LINE DEDENT DEDENT
filter ( self , flag ) : NEW_LINE INDENT if isinstance ( flag , str ) : NEW_LINE INDENT return self . filter ( flag ) NEW_LINE DEDENT elif isinstance ( flag , str ) : NEW_LINE INDENT return self . filter ( flag ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . filter ( flag ) NEW_LINE DEDENT DEDENT
get_received_date ( self , date ) : NEW_LINE INDENT if date is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return datetime . strptime ( date , ' % Y - % m - % dT % H : % M : % S ' ) NEW_LINE DEDENT DEDENT
get_sent_date ( self ) : NEW_LINE INDENT if self . sent_date is None : NEW_LINE INDENT self . sent_date = datetime . datetime . utcnow ( ) NEW_LINE DEDENT return self . sent_date NEW_LINE DEDENT
get_message_size ( self ) : NEW_LINE INDENT if self . message_size is None : NEW_LINE INDENT return self . message_size NEW_LINE DEDENT return self . message_size NEW_LINE DEDENT
group ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT elif len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return filters NEW_LINE DEDENT DEDENT
group_of_filters ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT elif len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return filters NEW_LINE DEDENT DEDENT
static boolean filter ( String filter ) { if ( filter == null ) { return false ; } if ( filter . length ( ) == 0 ) { return true ; } if ( filter . length ( ) == 1 ) { return true ; } return false ; }
last search term with new one .
static byte [ ] encode ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return new byte [ 0 ] ; } else { return bytes ; } }
convert_to_array ( self , value ) : NEW_LINE INDENT if isinstance ( value , collections . Iterable ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
if request is eligible for GZipping . If request is not eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZipping . If request is eligible for GZ
validate ( self , annotations , context ) : NEW_LINE INDENT if isinstance ( annotations , dict ) : NEW_LINE INDENT for annotation in annotations : NEW_LINE INDENT if isinstance ( annotation , dict ) : NEW_LINE INDENT self . validate ( annotation , context ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT self . validate ( annotations , context ) NEW_LINE DEDENT DEDENT
validate ( self ) : NEW_LINE INDENT if self . validation_context is not None : NEW_LINE INDENT return self . validation_context NEW_LINE DEDENT if self . validation_context is not None : NEW_LINE INDENT return self . validation_context NEW_LINE DEDENT return self NEW_LINE DEDENT
def def def public public public public public static void enable

get_check_profiles ( self ) : NEW_LINE INDENT return self . _get_check_profiles ( ) NEW_LINE DEDENT
parse_request_body ( self , request_body ) : NEW_LINE INDENT if isinstance ( request_body , dict ) : NEW_LINE INDENT return request_body NEW_LINE DEDENT elif isinstance ( request_body , dict ) : NEW_LINE INDENT return request_body NEW_LINE DEDENT elif isinstance ( request_body , dict ) : NEW_LINE INDENT return request_body NEW_LINE DEDENT elif isinstance ( request_body , dict ) : NEW_LINE INDENT return request_body NEW_LINE DEDENT else : NEW_LINE INDENT return request_body NEW_LINE DEDENT DEDENT
milliseconds ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( time . time ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public static void add ( JD instance ) { if ( instance == null ) { throw new IllegalArgumentException ( ) ; } if ( instance == null ) { throw new IllegalArgumentException ( ) ; } }
static JD subtract ( JD jD ) { if ( jD != null ) { return jD . subtract ( jD ) ; } else { return null ; } }
normalize ( self , double ) : NEW_LINE INDENT if self . normalized : NEW_LINE INDENT self . normalized = True NEW_LINE DEDENT else : NEW_LINE INDENT self . normalized = False NEW_LINE DEDENT return self . normalized NEW_LINE DEDENT
def init ( parser ) : NEW_LINE INDENT parser = parser . parser ( ) NEW_LINE parser . parse ( ) NEW_LINE DEDENT
emits_comment ( self , comment ) : NEW_LINE INDENT if self . is_comment ( comment ) : NEW_LINE INDENT return comment NEW_LINE DEDENT else : NEW_LINE INDENT return comment NEW_LINE DEDENT DEDENT
static void report ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return
salted_pbkdf2_hash ( self , password ) : NEW_LINE INDENT try : NEW_LINE INDENT hash = hashlib . sha256 ( password ) . hexdigest ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT hash = hashlib . sha256 ( password ) . hexdigest ( ) NEW_LINE DEDENT return hash NEW_LINE DEDENT
hash ( self , password ) : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE DEDENT DEDENT
static byte [ ] encodeHexString ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = ( byte ) ( bytes [ i ] & 0xFF ) ; } return bytes ; }
provider ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def file_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . join ( self . path , name ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_content_id ( self , content_id ) : NEW_LINE INDENT content_id = self . _get_content_id ( content_id ) NEW_LINE if content_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT return content_id NEW_LINE DEDENT
get_content_type ( self ) : NEW_LINE INDENT content_type = self . content_type NEW_LINE if content_type is None : NEW_LINE INDENT content_type = self . content_type NEW_LINE DEDENT return content_type NEW_LINE DEDENT

def size ( self ) : NEW_LINE INDENT return self . size ( ) NEW_LINE DEDENT
def
decode_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _decode_url ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _decode_url ( url ) NEW_LINE DEDENT DEDENT
def def _decodes_query_name_or_value ( self , name , value ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE return name , value NEW_LINE DEDENT
static DbEntityManager getInstance ( ) { if ( DbEntityManager . class . getClassLoader ( ) == null ) { DbEntityManager . class . getClassLoader ( ) ; } return DbEntityManager . getInstance ( ) ; }
connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _connection NEW_LINE DEDENT DEDENT
static String getMethodSignature ( Method method ) { if ( method == null ) { return null ; } String signature = method . getSignature ( ) ; if ( signature == null ) { signature = " " ; } else { signature = " " ; } return signature ; }
void add ( final Method method ) { super . add ( method ) ; if ( method . getDeclaringClass ( ) != null && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( ) . isInterface ( ) && method . getDeclaringClass ( )
create_method_signature ( self , method_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_method_signature ( method_name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_method_signature ( ) NEW_LINE DEDENT DEDENT
parse_fields ( self , fields ) : NEW_LINE INDENT if isinstance ( fields , str ) : NEW_LINE INDENT return fields NEW_LINE DEDENT elif isinstance ( fields , dict ) : NEW_LINE INDENT return fields NEW_LINE DEDENT elif isinstance ( fields , list ) : NEW_LINE INDENT return fields NEW_LINE DEDENT else : NEW_LINE INDENT return fields NEW_LINE DEDENT DEDENT
convert_csv_line ( self , line ) : NEW_LINE INDENT if isinstance ( line , str ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE DEDENT if isinstance ( line , str ) : NEW_LINE INDENT return line NEW_LINE DEDENT return line NEW_LINE DEDENT
static InjectionPoint createInjectionPoint ( Class < ? > type ) { InjectionPoint injectionPoint = new InjectionPoint ( type ) ; if ( injectionPoint . getConstructor ( ) != null ) { injectionPoint . getConstructor ( ) . setAccessible ( true ) ; } return injectionPoint ; }
reader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reader NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
reader ( cls ) : NEW_LINE INDENT reader = cls . reader ( ) NEW_LINE if reader is None : NEW_LINE INDENT reader = cls . reader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
encrypt ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _encrypt ( string ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
decrypt_string ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . decrypt ( string ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
logger ( name ) : NEW_LINE INDENT logger = logging . getLogger ( name ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE return logger NEW_LINE DEDENT
check_cookie_name ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return False NEW_LINE DEDENT if name . startswith ( ' cookie _ ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
create_action_request ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_request ( request ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_request ( request ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void destroy ( Object bean ) { if ( bean == null ) { return ; } if ( bean instanceof Destroyable ) { Destroyable destroyable = ( Destroyable ) bean ; if ( destroyable . isDestroyed ( ) ) { return ; } } if ( bean instanceof Destroyable ) { Destroyable destroyable = ( Destroyable ) bean ; if ( destroyable . isDestroyed ( ) ) { return ; } } }
shutdown ( scope = None ) : NEW_LINE INDENT if scope is None : NEW_LINE INDENT scope = { } NEW_LINE DEDENT else : NEW_LINE INDENT scope = scope . copy ( ) NEW_LINE scope . clear ( ) NEW_LINE DEDENT DEDENT
receive_emails ( self , emails ) : NEW_LINE INDENT if len ( emails ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( emails ) == 1 : NEW_LINE INDENT return [ emails [ 0 ] ] NEW_LINE DEDENT return [ emails [ 0 ] ] NEW_LINE DEDENT
shutdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . wait ( ) NEW_LINE DEDENT finally : NEW_LINE INDENT self . wait ( ) NEW_LINE DEDENT DEDENT
run ( self ) : NEW_LINE INDENT while True : NEW_LINE INDENT try : NEW_LINE INDENT self . _run ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _run ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT DEDENT
def def print_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logger . error ( message ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT self . logger . error ( message ) NEW_LINE self . logger . error ( message ) NEW_LINE DEDENT DEDENT
print_rates ( self , rates ) : NEW_LINE INDENT self . _print_rates ( rates ) NEW_LINE self . _print_rates ( ) NEW_LINE DEDENT
read_only_buffer ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( file , ' r ' ) . read ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT DEDENT
stop ( self ) : NEW_LINE INDENT if self . replay_destination is not None : NEW_LINE INDENT self . replay_destination . stop ( ) NEW_LINE DEDENT DEDENT
merge ( self , subscription ) : NEW_LINE INDENT if not self . subscription : NEW_LINE INDENT self . subscription = subscription NEW_LINE DEDENT else : NEW_LINE INDENT self . subscription = self . subscription . merge ( subscription ) NEW_LINE DEDENT return self . subscription NEW_LINE DEDENT


__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def close ( self ) : NEW_LINE INDENT if self . _client is not None : NEW_LINE INDENT self . _client . close ( ) NEW_LINE self . _client = None NEW_LINE DEDENT DEDENT
def def def poll__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def poll__python____python____python____python____python____python____python____python__ def def def def Poll__python____python____python____python____python____python__ def def def def poll__python____python____python____python____python____python__ def def def def Poll__python____python____python____python____python____python__ def def def def Poll__python____python____python____python____python____python__ def def def def def Poll__python____python____python____python____python____python__ def def def def def Poll__python____python____python____python____python____python____python__ def def def def def _ def poll__python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def _ def _
stop_session ( self ) : NEW_LINE INDENT if self . replay_session is not None : NEW_LINE INDENT self . replay_session . stop ( ) NEW_LINE DEDENT DEDENT
static void printImage ( Image image ) throws IOException { if ( image == null ) { throw new IOException ( " image is null " ) ; } if ( image . size ( ) == 0 ) { throw new IOException ( " image is null " ) ; } if ( image . size ( ) == 0 ) { throw new IOException ( " image is empty " ) ; } if ( image . size ( ) == 0 ) { throw new IOException ( " image is empty " ) ; } if ( image . size ( ) == 0 ) { throw new IOException ( " image is empty " ) ; } }
_handle_image_unavailable ( self , image ) : NEW_LINE INDENT if image is None : NEW_LINE INDENT return NEW_LINE DEDENT handler = self . _get_handler ( image ) NEW_LINE if handler is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return handler . handle_image_unavailable ( image ) NEW_LINE DEDENT DEDENT
read_only_status_indicator ( self ) : NEW_LINE INDENT return self . _read_only_status_indicator NEW_LINE DEDENT
get_read_only_status_indicator ( self ) : NEW_LINE INDENT if self . _read_only : NEW_LINE INDENT return self . _read_only NEW_LINE DEDENT else : NEW_LINE INDENT return self . _read_only NEW_LINE DEDENT DEDENT
append ( self , buffer ) : NEW_LINE INDENT if len ( buffer ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( buffer ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( buffer ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( buffer ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( buffer ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( buffer ) == 4 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
append ( self , buffer ) : NEW_LINE INDENT if not self . _buffer . is_empty ( ) : NEW_LINE INDENT self . _buffer . append ( buffer ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _buffer . append ( buffer ) NEW_LINE DEDENT DEDENT
poll ( self ) : NEW_LINE INDENT self . _poll ( ) NEW_LINE self . _poll ( ) NEW_LINE DEDENT
def create_loss_report ( self ) : NEW_LINE INDENT if self . loss_report is not None : NEW_LINE INDENT return self . loss_report NEW_LINE DEDENT else : NEW_LINE INDENT return self . loss_report NEW_LINE DEDENT DEDENT
def def def def public public public public public public public static synchronized public static synchronized public static synchronized void group ( final int group ( final String name , final String name , final int count , final int count , final int count , final int count ) { for ( final int i = 0 , final int i = 0 ; i < count ; i ++ ) { for ( final int i = 0 ; i < count ; i ++ ) { if ( count > 0 ) { for ( final int i = 0 ; i < count ; i ++ ) { if ( i < count > 0 ) { break ; } } } } } } } }
default_data_frame_header ( self ) : NEW_LINE INDENT return self . _default_data_frame_header NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


close_control_session ( self ) : NEW_LINE INDENT if self . control_session : NEW_LINE INDENT self . control_session . close ( ) NEW_LINE self . control_session = None NEW_LINE DEDENT DEDENT

stopRecording ( self ) : NEW_LINE INDENT if self . recording is not None : NEW_LINE INDENT self . recording . stop ( ) NEW_LINE DEDENT DEDENT
replay ( self , position ) : NEW_LINE INDENT if self . recording is None : NEW_LINE INDENT self . recording = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . recording . append ( position ) NEW_LINE DEDENT DEDENT
stop ( self ) : NEW_LINE INDENT if self . replay_session is not None : NEW_LINE INDENT self . replay_session . stop ( ) NEW_LINE self . replay_session = None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

get_recording_descriptor ( self , recording_id ) : NEW_LINE INDENT if recording_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT if recording_id . isdigit ( ) : NEW_LINE INDENT return recording_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

get_record_position ( self ) : NEW_LINE INDENT return self . _get_record_position ( ) NEW_LINE DEDENT
get_stop_position ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _stop_position NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
List < Subscription > getRegisteredSubscriptions ( ) { List < Subscription > subscriptions = new ArrayList < Subscription > ( ) ; subscriptions . add ( new Subscription ( ) ) ; subscriptions . add ( new Subscription ( ) ) ; return subscriptions ; }
public public public boolean match ( Channel channel , String tag ) { if ( channel . getTag ( ) == null ) { return false ; } if ( channel . getTag ( ) == null ) { return false ; } else { return channel . getTag ( ) == null ; } }
get_endpoint_address ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _endpoint_address NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _endpoint_address NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


get_control_toggle_counter ( self ) : NEW_LINE INDENT if self . control_toggle_counter : NEW_LINE INDENT return self . control_toggle_counter NEW_LINE DEDENT else : NEW_LINE INDENT return self . control_toggle_counter NEW_LINE DEDENT DEDENT
put_params ( self , params ) : NEW_LINE INDENT if params . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if params . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_channel_tag ( self , channel_tag ) : NEW_LINE INDENT if channel_tag is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return channel_tag NEW_LINE DEDENT DEDENT
def get_entity_tag ( self , entity ) : NEW_LINE INDENT return self . _get_entity_tag ( entity ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_tag_value ( self , parameter , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT value = value . strip ( ) NEW_LINE if not value : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT
pad ( self ) : NEW_LINE INDENT if self . padding : NEW_LINE INDENT self . padding = True NEW_LINE DEDENT else : NEW_LINE INDENT self . padding = False NEW_LINE DEDENT return self NEW_LINE DEDENT
update_publishers_limit ( self ) : NEW_LINE INDENT self . publishers_limit = self . publishers_limit NEW_LINE DEDENT

get_label_name ( self ) : NEW_LINE INDENT if self . label_name is None : NEW_LINE INDENT return self . label_name NEW_LINE DEDENT return self . label_name NEW_LINE DEDENT

clear ( self ) : NEW_LINE INDENT if self . initial_state is not None : NEW_LINE INDENT self . initial_state = self . initial_state . copy ( ) NEW_LINE self . initial_state . clear ( ) NEW_LINE DEDENT DEDENT
validate_set_parameters ( self , parameters ) : NEW_LINE INDENT if len ( parameters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( parameters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( parameters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( parameters ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
spy ( self ) : NEW_LINE INDENT if self . prefix : NEW_LINE INDENT return self . prefix NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def def length ( self ) : NEW_LINE INDENT if len ( self . _buffer ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return self . _length NEW_LINE DEDENT DEDENT

set_tail_loss ( self ) : NEW_LINE INDENT self . tail_loss = True NEW_LINE self . tail_loss = False NEW_LINE DEDENT
def create_channel ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . channel = self . channel NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . channel = self . channel NEW_LINE DEDENT return self . channel NEW_LINE DEDENT
cancel_pending_read_operations ( self ) : NEW_LINE INDENT if self . pending_read_operations : NEW_LINE INDENT self . pending_read_operations . cancel ( ) NEW_LINE self . pending_read_operations = [ ] NEW_LINE DEDENT DEDENT
validate_frame ( self , frame ) : NEW_LINE INDENT if not frame . isValid ( ) : NEW_LINE INDENT return NEW_LINE DEDENT frame . validate ( ) NEW_LINE return NEW_LINE DEDENT

start_reception ( self ) : NEW_LINE INDENT self . _reception = True NEW_LINE if self . _reception : NEW_LINE INDENT self . _reception ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
channel_status ( self , channel_id ) : NEW_LINE INDENT if channel_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT if channel_id . isdigit ( ) : NEW_LINE INDENT return channel_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
reset_values ( self ) : NEW_LINE INDENT self . _values = [ ] NEW_LINE for i in range ( len ( self . _values ) ) : NEW_LINE INDENT self . _values [ i ] = self . _values [ i ] NEW_LINE DEDENT DEDENT
_ensure_vector_valid ( buffer , vector ) : NEW_LINE INDENT if ( buffer . size ( ) == 0 ) { return NEW_LINE DEDENT if ( buffer . size ( ) == 0 ) { return NEW_LINE DEDENT
compute_length ( self , message ) : NEW_LINE INDENT if self . length == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return self . length NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
validate_page_size ( self , page_size , alignment ) : NEW_LINE INDENT if page_size is not None and alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def def _validate_range ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
validate_timeouts ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _validate_timeouts ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _validate_timeouts ( ) NEW_LINE DEDENT DEDENT
set_error_code ( self , error_code ) : NEW_LINE INDENT self . error_code = error_code NEW_LINE DEDENT
reset_cluster_state ( self ) : NEW_LINE INDENT if self . cluster is not None : NEW_LINE INDENT self . cluster . reset_state ( ) NEW_LINE DEDENT DEDENT
static String toString ( final ClusterMember [ ] members ) { final String result = " " ; for ( final ClusterMember member : members ) { result += member . toString ( ) ; } return result ; }
send_status_messages ( cluster , status_message ) : NEW_LINE INDENT if status_message is None : NEW_LINE INDENT return NEW_LINE DEDENT status_message . set_status_message ( status_message ) NEW_LINE return status_message NEW_LINE DEDENT
void close ( ) { if ( cluster != null ) { cluster . close ( ) ; } if ( cluster != null ) { cluster . close ( ) ; } }
check_cluster_leader ( self ) : NEW_LINE INDENT if self . cluster_leader is not None : NEW_LINE INDENT return self . cluster_leader NEW_LINE DEDENT DEDENT
def def def get_position ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_position ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_position ( ) NEW_LINE DEDENT DEDENT
reset ( ) : NEW_LINE INDENT log . reset ( ) NEW_LINE log . reset ( ) NEW_LINE DEDENT
public void voted ( int position ) { if ( position < 0 ) { throw new IllegalArgumentException ( ) ; } else if ( position < 0 ) { throw new IllegalArgumentException ( ) ; } }
def get_candidate ( ) : NEW_LINE INDENT try : NEW_LINE INDENT candidate = cluster . get_candidate ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return candidate NEW_LINE DEDENT DEDENT
public static long getVoteCount ( ) { long count = 0 ; for ( int i = 0 ; i < count ; i ++ ) { count += 1 ; } return count ; }
which member of a cluster this is and check endpoints .
void checkMemberEndpoints ( ) { if ( memberEndpoints != null ) { for ( int i = 0 ; i < memberEndpoints . size ( ) ; i ++ ) { if ( memberEndpoints . get ( i ) != null ) { for ( int j = 0 ; j < memberEndpoints . size ( ) ; j ++ ) { if ( memberEndpoints . get ( j ) != null ) { for ( int j = 0 ; j < memberEndpoints . size ( ) ; j ++ ) { if ( memberEndpoints . get ( j ) != null ) { for ( int j = 0 ; j < memberEndpoints . size ( ) ; j ++ ) { if ( memberEndpoints . get ( j ) != null ) { for ( int j = 0 ; j < memberEndpoints . size ( ) ; j ++ ) { if ( j < memberEndpoints . size ( ) ) { for ( int j = 0 ; j < memberEndpoints . size ( ) ; j ++ )
public static boolean isClusterMember ( String endpoint ) { return clusterMembers . containsKey ( endpoint ) && clusterMembers . containsKey ( endpoint ) ; }
def unanimous_view ( self ) : NEW_LINE INDENT return self . election . election . unanimous_view ( self . election . election_id , self . election . election_id ) NEW_LINE DEDENT
public public static boolean is_candidate ( ) { return this . election . election . get_quorum_view ( ) != null ; }
def def _get_member_endpoints ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_endpoints NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_member_from_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return self . _remove_member_from_array ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _remove_member_from_array ( array ) NEW_LINE DEDENT DEDENT
highest_member_id ( self , members ) : NEW_LINE INDENT if len ( members ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return members [ 0 ] . id NEW_LINE DEDENT DEDENT
def _get_file ( self , filename ) : NEW_LINE INDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT return None NEW_LINE DEDENT return os . path . abspath ( filename ) NEW_LINE DEDENT
def def get_media_driver ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _media_driver NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_media_driver ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _media_driver NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

def def run ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . driver . run ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT raise Exception ( " Failed to run driver . " ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT raise e NEW_LINE DEDENT DEDENT
def get_length ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_length ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_length ( ) NEW_LINE DEDENT DEDENT
def write_length_header ( self ) : NEW_LINE INDENT return self . _write_length_header ( ) NEW_LINE DEDENT

def def write_flags ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _write_flags ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _write_flags ( ) NEW_LINE DEDENT DEDENT



__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_recording_id ( self ) : NEW_LINE INDENT counter_id = self . _get_counter_id ( ) NEW_LINE if counter_id : NEW_LINE INDENT return counter_id NEW_LINE DEDENT return None NEW_LINE DEDENT
stop_recording ( self ) : NEW_LINE INDENT if self . recording_counter : NEW_LINE INDENT self . recording_counter . stop ( ) NEW_LINE self . recording_counter = None NEW_LINE DEDENT DEDENT
static void set_application_specific_feedback ( String application_specific_feedback ) { if ( application_specific_feedback == null || application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length ( ) == 0 ) { return ; } if ( application_specific_feedback . length (
reload_log ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE self . logger . info ( " Reloading log from disk . . . " ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public static RecoveryPlan createRecoveryPlan ( ) { return new RecoveryPlan ( ) { @ Override public RecoveryPlan createRecoveryPlan ( ) { return new RecoveryPlan ( ) ; } } }
public static final RecoveryPlan createRecoveryPlan ( ) { return new RecoveryPlan ( ) { @ Override public RecoveryPlan createRecoveryPlan ( ) { return new RecoveryPlan ( ) ; } } }
def def append_leadership_term ( self ) : NEW_LINE INDENT log . info ( " Append a log entry for a leadership term . " ) NEW_LINE log . info ( " " ) NEW_LINE DEDENT
append_log_entry ( self , snapshot ) : NEW_LINE INDENT log_entry = self . _log_entry ( snapshot ) NEW_LINE log_entry . append ( log_entry ) NEW_LINE log_entry . append ( log_entry ) NEW_LINE DEDENT
def def _get_position ( self ) : NEW_LINE INDENT return self . _get_position ( ) NEW_LINE DEDENT
def def _validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT if not self . is_valid ( ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
release_resources ( self , resources ) : NEW_LINE INDENT for resource in resources : NEW_LINE INDENT self . release_resource ( resource ) NEW_LINE DEDENT for resource in self . resources : NEW_LINE INDENT self . release_resource ( resource ) NEW_LINE DEDENT DEDENT

unblock ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logbuffer . unblock ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . logbuffer . unblock ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_channel_field ( self , channel_field ) : NEW_LINE INDENT self . channel_field = channel_field NEW_LINE DEDENT
validate_term_length ( self , term_length , alignment ) : NEW_LINE INDENT if term_length is None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT if alignment is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
validate_page_size ( self , page_size , alignment ) : NEW_LINE INDENT if page_size is None : NEW_LINE INDENT return False NEW_LINE DEDENT if alignment is None : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
set_active_term_count ( self ) : NEW_LINE INDENT if self . active_term_count is None : NEW_LINE INDENT self . active_term_count = 0 NEW_LINE DEDENT DEDENT
def def get_current_position ( self ) : NEW_LINE INDENT position = self . current_position NEW_LINE if position is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return position NEW_LINE DEDENT DEDENT
def def get_total_length ( self ) : NEW_LINE INDENT return self . _total_length ( ) NEW_LINE def get_length ( self ) : NEW_LINE INDENT return self . _total_length NEW_LINE DEDENT DEDENT
def def _get_default_frame_header ( self ) : NEW_LINE INDENT return self . _get_default_frame_header ( ) NEW_LINE DEDENT
def default_header ( self ) : NEW_LINE INDENT if self . _default_header is not None : NEW_LINE INDENT return self . _default_header NEW_LINE DEDENT return None NEW_LINE DEDENT
rotate_tail_counter ( self ) : NEW_LINE INDENT if self . tail_counter is not None : NEW_LINE INDENT self . tail_counter = self . tail_counter NEW_LINE DEDENT DEDENT
def def set_initial_value ( self , termId , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT

get_raw_value ( self ) : NEW_LINE INDENT return self . _get_raw_value ( ) NEW_LINE DEDENT
set_tail ( self , partition , tail ) : NEW_LINE INDENT self . _tail = tail NEW_LINE self . _tail = tail NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _get_snapshot_services ( self ) : NEW_LINE INDENT return self . _get_snapshot_services . get ( ) NEW_LINE DEDENT
get_active_counter_id ( self ) : NEW_LINE INDENT counter_id = self . _get_counter_id ( ) NEW_LINE if counter_id is not None : NEW_LINE INDENT return counter_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
void replay ( ) throws IOException { if ( recoveryState == RecoveryState . RECOVERING ) { recoveryState = RecoveryState . RECOVERING ; } if ( recoveryState == RecoveryState . RECOVERING ) { recoveryState = RecoveryState . RECOVERING ; } if ( recoveryState == RecoveryState . RECOVERING ) { recoveryState = RecoveryState . RECOVERING ; } }
get_snapshot_id ( self ) : NEW_LINE INDENT snapshot_id = self . _get_snapshot_id ( ) NEW_LINE if not snapshot_id : NEW_LINE INDENT return None NEW_LINE DEDENT return snapshot_id NEW_LINE DEDENT
def def convert_header_flags ( self , header_flags ) : NEW_LINE INDENT if header_flags is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif header_flags . length == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif header_flags . length == 1 : NEW_LINE INDENT return header_flags [ 0 ] NEW_LINE DEDENT elif header_flags . length == 1 : NEW_LINE INDENT return header_flags [ 0 ] NEW_LINE DEDENT elif header_flags . length == 2 : NEW_LINE INDENT return header_flags [ 1 ] NEW_LINE DEDENT elif header_flags . length == 3 : NEW_LINE INDENT return header_flags [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return header_flags [ 3 ] NEW_LINE DEDENT DEDENT
set_channel_field ( self , channel_field ) : NEW_LINE INDENT self . channel_field = channel_field NEW_LINE DEDENT
void publish ( String message ) { if ( message == null ) { throw new NullPointerException ( " message is null " ) ; } if ( message . length ( ) == 0 ) { throw new IllegalArgumentException ( " message is empty " ) ; } if ( message . length ( ) == 0 ) { throw new IllegalArgumentException ( " message is empty " ) ; } if ( message . length ( ) == 0 ) { throw new IllegalArgumentException ( " message is empty " ) ; } if ( message . length ( ) == 0 ) { throw new IllegalArgumentException ( " message is empty " ) ; } if ( message . length ( ) == 0 ) { throw new IllegalArgumentException ( " message is empty " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

abort ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . log . abort ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . log . abort ( ) NEW_LINE DEDENT DEDENT
start_media_driver ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _media_driver = self . _media_driver NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _media_driver = self . _media_driver NEW_LINE DEDENT DEDENT
shutdown ( self ) : NEW_LINE INDENT if self . media_driver is not None : NEW_LINE INDENT self . media_driver . shutdown ( ) NEW_LINE DEDENT DEDENT
get_position ( self ) : NEW_LINE INDENT if self . image is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . image . get_position ( ) NEW_LINE DEDENT DEDENT
def heartbeat ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _heartbeat ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _heartbeat ( ) NEW_LINE DEDENT DEDENT
get_active_counter_id ( self , service_id ) : NEW_LINE INDENT return self . _get_active_counter_id ( service_id ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_last_heartbeat ( self ) : NEW_LINE INDENT if self . _last_heartbeat is not None : NEW_LINE INDENT return self . _last_heartbeat NEW_LINE DEDENT return self . _last_heartbeat NEW_LINE DEDENT
cleanup ( self ) : NEW_LINE INDENT if self . client is not None : NEW_LINE INDENT self . client . close ( ) NEW_LINE self . client = None NEW_LINE DEDENT DEDENT

public public static final void add ( final int minimumSize , final int minimumSize , final int minimumSize ) { if ( minimumSize < minimumSize ) { throw new IllegalArgumentException ( ) ; } else if ( minimumSize < minimumSize ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
byte [ ] get ( int position ) { byte [ ] value = new byte [ position ] ; System . arraycopy ( value , 0 , value , 0 , position ) ; return value ; }

calculate_row_ranges ( self , rows , filter ) : NEW_LINE INDENT row_ranges = [ ] NEW_LINE for row in rows : NEW_LINE INDENT row_ranges . append ( row ) NEW_LINE DEDENT row_ranges = [ ] NEW_LINE for row in rows : NEW_LINE INDENT row_ranges . append ( row ) NEW_LINE DEDENT return row_ranges NEW_LINE DEDENT
array_element ( array_element ) : NEW_LINE INDENT if isinstance ( array_element , list ) : NEW_LINE INDENT return array_element NEW_LINE DEDENT else : NEW_LINE INDENT return array_element NEW_LINE DEDENT DEDENT

print_error ( self , error ) : NEW_LINE INDENT if error : NEW_LINE INDENT print ( " % s % s % s " % ( self . name , self . error , error ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " % s % s % s " % ( self . name , self . error , error ) ) NEW_LINE DEDENT DEDENT
update_bit_packed_header ( self ) : NEW_LINE INDENT if self . bit_packed_header is not None : NEW_LINE INDENT self . bit_packed_header = self . bit_packed_header NEW_LINE self . bit_packed_header = self . bit_packed_header NEW_LINE DEDENT DEDENT
write ( self , in , out ) : NEW_LINE INDENT self . _write ( in ) NEW_LINE self . _write ( out ) NEW_LINE DEDENT
row_groups ( self ) : NEW_LINE INDENT if self . row_groups is None : NEW_LINE INDENT self . row_groups = [ ] NEW_LINE DEDENT return self . row_groups NEW_LINE DEDENT
read_summary_file ( self , summary_file ) : NEW_LINE INDENT summary = self . _read_summary_file ( summary_file ) NEW_LINE if not summary : NEW_LINE INDENT return None NEW_LINE DEDENT return summary NEW_LINE DEDENT
read_meta_data_block ( self ) : NEW_LINE INDENT if self . _meta_data_block is not None : NEW_LINE INDENT return self . _meta_data_block NEW_LINE DEDENT else : NEW_LINE INDENT return self . _meta_data_block NEW_LINE DEDENT DEDENT
read_columns_from_row_group ( self , row_group ) : NEW_LINE INDENT if row_group is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
read_columns_from_row_group ( self , row_group ) : NEW_LINE INDENT return self . _read_columns_from_row_group ( row_group ) NEW_LINE DEDENT
decompress ( self , column_chunk ) : NEW_LINE INDENT if self . column_chunk : NEW_LINE INDENT return self . decompress ( column_chunk ) NEW_LINE DEDENT return self . decompress ( column_chunk ) NEW_LINE DEDENT
add_memory_manager ( self , memory_manager ) : NEW_LINE INDENT self . memory_manager . add_memory_manager ( memory_manager ) NEW_LINE DEDENT
remove_writer ( self , writer ) : NEW_LINE INDENT if writer is None : NEW_LINE INDENT return NEW_LINE DEDENT writer . close ( ) NEW_LINE DEDENT
allocate_size ( self ) : NEW_LINE INDENT if self . allocations and self . pool_size : NEW_LINE INDENT return self . allocations [ self . pool_size ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . pool_size NEW_LINE DEDENT DEDENT
deduplicate_callback ( callback ) : NEW_LINE INDENT if isinstance ( callback , functools . partial ) : NEW_LINE INDENT return callback NEW_LINE DEDENT else : NEW_LINE INDENT return callback NEW_LINE DEDENT DEDENT
start_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( file , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
start_block ( self , block ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _block = block NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _block = None NEW_LINE DEDENT DEDENT
start_column ( self , column ) : NEW_LINE INDENT if isinstance ( column , basestring ) : NEW_LINE INDENT column = column . strip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT column = column . strip ( ) NEW_LINE DEDENT return column NEW_LINE DEDENT
write_dictionary_page_page_page_page ( self , page_page_page ) : NEW_LINE INDENT if page_page_page is None : NEW_LINE INDENT return NEW_LINE DEDENT if page_page_page is not None : NEW_LINE INDENT return NEW_LINE DEDENT if page_page_page is not None : NEW_LINE INDENT return NEW_LINE DEDENT if page_page is not None : NEW_LINE INDENT return NEW_LINE DEDENT if page_page is not None : NEW_LINE INDENT return NEW_LINE DEDENT if page_page is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
write_single_page ( self , page ) : NEW_LINE INDENT self . write_single_page ( page ) NEW_LINE DEDENT
write_chunk ( self , chunk ) : NEW_LINE INDENT if len ( chunk ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( chunk ) == 1 : NEW_LINE INDENT return chunk [ 0 ] NEW_LINE DEDENT return chunk [ 0 ] NEW_LINE DEDENT
write_block ( self , block ) : NEW_LINE INDENT if len ( block ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( block [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

close ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return NEW_LINE DEDENT self . closed = True NEW_LINE DEDENT
mergeMetadata ( self , metadata , extraMetadata ) : NEW_LINE INDENT if isinstance ( metadata , ParquetMetadata ) : NEW_LINE INDENT return self . mergeMetadata ( metadata , extraMetadata ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . mergeMetadata ( metadata , extraMetadata ) NEW_LINE DEDENT DEDENT
mergeMetadata ( self , metadata , extraMetaData ) : NEW_LINE INDENT if len ( metadata ) != len ( extraMetaData ) : NEW_LINE INDENT raise ValueError ( " Merge metadata files into a single metadata file . " ) NEW_LINE DEDENT if len ( metadata ) != len ( extraMetaData ) : NEW_LINE INDENT raise ValueError ( " Merge metadata files into a single metadata file . " ) NEW_LINE DEDENT if len ( metadata ) != len ( extraMetaData ) : NEW_LINE INDENT raise ValueError ( " Merge metadata files into a single metadata file . " ) NEW_LINE DEDENT if len ( metadata ) != len ( extraMetaData ) : NEW_LINE INDENT raise ValueError ( " Merge metadata files into a single metadata file . " ) NEW_LINE DEDENT DEDENT
write_metadata ( self , metadata ) : NEW_LINE INDENT self . _metadata = metadata NEW_LINE self . _common_metadata = common_metadata NEW_LINE DEDENT
merge ( self , toMerge , mergedMetadata ) : NEW_LINE INDENT mergedMetadata = self . _merge ( toMerge , mergedMetadata ) NEW_LINE mergedMetadata = self . _merge ( mergedMetadata ) NEW_LINE return mergedMetadata NEW_LINE DEDENT
def def def def def def def def def
static boolean isAllowed ( String schema ) { if ( schema == null ) { return false ; } if ( schema . length ( ) == 0 ) { return true ; } if ( schema . length ( ) == 1 ) { return true ; } if ( schema . length ( ) == 2 ) { return true ; } return false ; }
static Object firstNonNull ( Object object ) { if ( object == null ) { return null ; } if ( object . getClass ( ) . isArray ( ) ) { return object ; } if ( object . getClass ( ) . isArray ( ) ) { return object ; } return null ; }
def get_value ( String value ) { if ( value == null ) { return null ; } else if ( value == null ) { return null ; } else { return value ; } }
read ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_metadata ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static ThriftMetaData createThriftMetaData ( Class < ? extends ThriftMetaData > clazz ) { ThriftMetaData thriftMetaData = new ThriftMetaData ( clazz ) ; return thriftMetaData ; }
store ( self , key , value ) : NEW_LINE INDENT key = key . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE return key , value NEW_LINE DEDENT
current_value ( self ) : NEW_LINE INDENT return self . _current_value NEW_LINE DEDENT
write_page ( self , page ) : NEW_LINE INDENT self . page = page NEW_LINE if self . page is not None : NEW_LINE INDENT self . page = self . page NEW_LINE DEDENT DEDENT
eagerly loads_data ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
def def write ( self , value buffer ) : NEW_LINE INDENT if len ( buffer ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( buffer ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return buffer [ 0 ] NEW_LINE DEDENT DEDENT
static int [ ] enumValues ( int [ ] enumValues ) { if ( enumValues == null ) { return new int [ 0 ] ; } return enumValues ; }
calculate_bit_widths ( self ) : NEW_LINE INDENT if len ( self . mini_block ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT
public static < E extends Throwable > E getCause ( Throwable throwable ) { if ( throwable instanceof E ) { return ( ( E ) throwable ; } else if ( throwable instanceof E ) { return ( E ) throwable ; } else { return ( E ) throwable ; } }
def get_typed_statistics ( self ) : NEW_LINE INDENT typed_statistics = self . _typed_statistics NEW_LINE typed_statistics = self . _typed_statistics NEW_LINE return typed_statistics NEW_LINE DEDENT
create_statistics ( self ) : NEW_LINE INDENT statistics = self . _get_statistics ( ) NEW_LINE if statistics is None : NEW_LINE INDENT return None NEW_LINE DEDENT return statistics NEW_LINE DEDENT
merge_statistics ( self , statistics ) : NEW_LINE INDENT self . statistics = statistics NEW_LINE return self . statistics NEW_LINE DEDENT
static Schema getSchema ( Schema schema ) { if ( schema == null ) { return null ; } if ( schema . isUnion ( ) ) { return schema ; } if ( schema . isUnion ( ) ) { return schema ; } if ( schema . isUnion ( ) ) { return schema ; } if ( schema . isUnion ( ) ) { return schema ; } return null ; }
static TaskAttemptContext create ( JobConf jobConf , String jobId ) throws IOException { TaskAttemptContext context = new TaskAttemptContext ( jobConf , jobId ) ; context . setJobId ( jobId ) ; return context ; }
_invoke ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _invoke ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
def display_group ( self , group_name ) : NEW_LINE INDENT group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE group_name = group_name . strip ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
initialize ( self ) : NEW_LINE INDENT if self . mapred_job is not None : NEW_LINE INDENT self . mapred_job . initialize ( ) NEW_LINE DEDENT DEDENT
filter ( self , filter ) : NEW_LINE INDENT if isinstance ( filter , FilterPredicate ) : NEW_LINE INDENT return filter NEW_LINE DEDENT else : NEW_LINE INDENT return self . _filter ( filter ) NEW_LINE DEDENT DEDENT
def get_footers ( self ) : NEW_LINE INDENT if self . _footers is None : NEW_LINE INDENT self . _footers = [ ] NEW_LINE DEDENT return self . _footers NEW_LINE DEDENT
def def group_data_blocks ( self ) : NEW_LINE INDENT data_blocks = [ ] NEW_LINE for data_block in self . data_blocks : NEW_LINE INDENT data_blocks . append ( data_block ) NEW_LINE DEDENT return data_blocks NEW_LINE DEDENT
write ( self , file ) : NEW_LINE INDENT if isinstance ( file , str ) : NEW_LINE INDENT return self . _write ( file ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _write ( file ) NEW_LINE DEDENT DEDENT
validate_mapping ( self , protobuffer_fields , parquet_fields ) : NEW_LINE INDENT if protobuffer_fields is not None : NEW_LINE INDENT return NEW_LINE DEDENT if parquet_fields is not None : NEW_LINE INDENT return NEW_LINE DEDENT if parquet_fields is not None : NEW_LINE INDENT return NEW_LINE DEDENT if parquet_fields is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String message_descriptor ( String descriptor ) { if ( descriptor == null ) { return null ; } if ( descriptor . length ( ) == 0 ) { return null ; } if ( descriptor . length ( ) == 0 ) { return null ; } if ( descriptor . length ( ) == 1 ) { return null ; } if ( descriptor . length ( ) == 2 ) { return null ; } if ( descriptor . length ( ) == 1 ) { return null ; } if ( descriptor . length ( ) == 2 ) { return null ; } if ( descriptor . length ( ) == 1 ) { return null ; } return descriptor ; }
createCodec ( self ) : NEW_LINE INDENT codecFactory = self . codecFactory NEW_LINE codecFactory . setCodec ( self ) NEW_LINE return codecFactory NEW_LINE DEDENT
create_default_value ( self ) : NEW_LINE INDENT if self . required_fields : NEW_LINE INDENT return self . default_value NEW_LINE DEDENT else : NEW_LINE INDENT return self . default_value NEW_LINE DEDENT DEDENT
check_required_fields ( self , element ) : NEW_LINE INDENT if len ( element ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( element ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
read_meta_data ( self , stream ) : NEW_LINE INDENT try : NEW_LINE INDENT meta_data = self . _read_meta_data ( stream ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT if meta_data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return meta_data NEW_LINE DEDENT
close_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT os . remove ( file ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_schema ( self , schema ) : NEW_LINE INDENT self . schema = schema NEW_LINE DEDENT
set_mapping ( self , mapping ) : NEW_LINE INDENT if isinstance ( mapping , Mapping ) : NEW_LINE INDENT return mapping NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def def def foundColumn ( String foundColumn ) { def foundColumn ( self ) { if ( foundColumn != null ) { if ( foundColumn != null ) { foundColumn = foundColumn . getType ( ) ; if ( foundColumn . getType ( ) != null ) { foundColumn = foundColumn . getType ( ) ; if ( foundColumn . getType ( ) != null ) { foundColumn = foundColumn . getType ( ) ; if ( foundColumn . getType ( ) != null ) { foundColumn = foundColumn . getType ( ) ; if ( foundColumn . getType ( ) != null ) { foundColumn . setType ( foundColumn . getType ( ) ) ; foundColumn . setType ( foundColumn . getType
static int cast ( int value ) { if ( value == 0 ) { return 0 ; } if ( value == 1 ) { return 1 ; } if ( value == 2 ) { return 2 ; } if ( value == 3 ) { return 3 ; } if ( value == 4 ) { return 4 ; } return value ; }
create_schema ( self , schema ) : NEW_LINE INDENT if isinstance ( schema , ArrowSchema ) : NEW_LINE INDENT return schema NEW_LINE DEDENT elif isinstance ( schema , ArrowSchema ) : NEW_LINE INDENT return schema NEW_LINE DEDENT DEDENT
create_arrow_schema ( self ) : NEW_LINE INDENT return self . _create_arrow_schema ( ) NEW_LINE DEDENT
static void validate ( Schema schema ) { Preconditions . checkNotNull ( schema , " Schema is null " ) ; Preconditions . checkNotNull ( schema , " Schema is null " ) ; Preconditions . checkNotNull ( schema , " Schema is null " ) ; }
public public void save ( ) { if ( pageHeaders . size ( ) == 0 ) { return ; } if ( pageHeaders . size ( ) == 0 ) { return ; } if ( pageHeaders . size ( ) > 0 ) { for ( int i = 0 ; i < pageHeaders . size ( ) ; i ++ ) { pageHeaders . remove ( i ) ; } } }
filter ( self , filter ) : NEW_LINE INDENT if not filter : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
write ( self , object ) : NEW_LINE INDENT if isinstance ( object , Configuration ) : NEW_LINE INDENT return object . write ( self ) NEW_LINE DEDENT else : NEW_LINE INDENT return object . write ( self ) NEW_LINE DEDENT DEDENT
remove ( self , key ) : NEW_LINE INDENT if self . cache . get ( key ) : NEW_LINE INDENT self . cache . remove ( key ) NEW_LINE self . cache . remove ( key ) NEW_LINE DEDENT DEDENT
void put ( String key , Object value ) { if ( key == null ) { throw new IllegalArgumentException ( " key is null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value is null " ) ; } if ( value . equals ( key ) ) { throw new IllegalArgumentException ( " value is null " ) ; } if ( value . equals ( key ) ) { throw new IllegalArgumentException ( " value is null " ) ; } }
get ( self , key ) : NEW_LINE INDENT if key not in self . cache : NEW_LINE INDENT return self . cache [ key ] NEW_LINE DEDENT return self . cache [ key ] NEW_LINE DEDENT
write ( self , value ) : NEW_LINE INDENT if value == null : NEW_LINE INDENT raise ValueError ( " Value must not be null . " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " Value must not be null . " ) NEW_LINE DEDENT DEDENT
write ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT raise ValueError ( " Value must not be null and the schema must not be nullable . " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " Value must not be null and the schema must not be nullable . " ) NEW_LINE DEDENT DEDENT
compile_glob_pattern ( glob_pattern ) : NEW_LINE INDENT if glob_pattern is None : NEW_LINE INDENT glob_pattern = glob . glob ( glob_pattern ) NEW_LINE DEDENT return glob_pattern NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def open ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( self . filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
filter ( self , predicate ) : NEW_LINE INDENT if predicate is None : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
public public void validate ( StructOrUnionType structOrUnionType structOrUnionType structOrUnionType ) { if ( structOrUnionType == null ) { return ; } if ( structOrUnionType == null ) { return ; } if ( structOrUnionType == null ) { return ; } if ( structOrUnionType == null ) { return ; } if ( structOrUnionType . structOrUnionType == null ) { return ; } if ( structOrUnionType . structOrUnionType == null ) { return ; } if ( structOrUnionType . structOrUnionType . structOrUnionType == null ) { return ; } if ( structOrUnionType . structOrUnionType . structOrUnionType == null ) { return ; } if ( structOrUnionType . structOrUnionType . structOrUnionType == null ) {
def def preserve_empty_list ( self ) : NEW_LINE INDENT if self . empty_list is not None : NEW_LINE INDENT return self . empty_list NEW_LINE DEDENT return self . empty_list NEW_LINE DEDENT
static List < List < String > > getList ( String elementType ) { List < List < String > > list = new ArrayList < List < String > > ( ) ; if ( elementType != null && elementType . length ( ) > 0 ) { list . add ( elementType ) ; } return list ; }
def def def def def read ( self ) : def read ( self ) throws IOException { if ( !
getParquetInputSplit ( self ) : NEW_LINE INDENT return self . _getParquetInputSplit ( ) NEW_LINE DEDENT
def def public public public static ReflectData get ( String name ) { return ReflectData . get ( ReflectData . class ) . get ( name ) ; public static ReflectData get ( String name ) { return ReflectData . get ( ReflectData . class ) . get ( ReflectData . class ) . get ( ReflectData . class ) . get ( ReflectData . class ) . get ( ReflectData . class ) ; } }
get_column_names ( self ) : NEW_LINE INDENT column_names = [ ] NEW_LINE for column in self . columns : NEW_LINE INDENT column_names . append ( column . name ) NEW_LINE DEDENT return column_names NEW_LINE DEDENT
get_input_files ( self ) : NEW_LINE INDENT input_files = [ ] NEW_LINE for f in self . input_files : NEW_LINE INDENT input_files . append ( f ) NEW_LINE DEDENT return input_files NEW_LINE DEDENT
static ParquetFileReader createParquetFileReader ( File file ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . getAbsolutePath ( ) ) ; } return new ParquetFileReader ( file ) ; }
get_all_parquet_files ( self , partition_dir ) : NEW_LINE INDENT if partition_dir : NEW_LINE INDENT return self . _get_all_parquet_files ( partition_dir ) NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
consume ( self , elements ) : NEW_LINE INDENT if isinstance ( elements , list ) : NEW_LINE INDENT for item in elements : NEW_LINE INDENT yield item NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for item in elements : NEW_LINE INDENT yield item NEW_LINE DEDENT DEDENT DEDENT
update_mrwork ( self , mrwork ) : NEW_LINE INDENT self . mrwork = mrwork NEW_LINE if self . mrwork is not None : NEW_LINE INDENT self . mrwork = self . mrwork NEW_LINE DEDENT DEDENT
def def def def def def TupleSummaryDataTupleSummaryData ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def TupleSummaryDataTupleSummaryDataTupleSummaryData ( TupleSummaryData tupleSummaryData tupleSummaryData tupleSummaryData tupleSummaryData ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def TupleSummaryDataTupleSummaryData ( TupleSummaryData tupleSummaryData tupleSummaryData tupleSummaryData ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def
sum ( self , input_tuple ) : NEW_LINE INDENT if isinstance ( input_tuple , tuple ) : NEW_LINE INDENT return self . _sum ( input_tuple ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _sum ( input_tuple ) NEW_LINE DEDENT DEDENT
FieldConsumer getFieldConsumer ( ) { return new FieldConsumer ( this ) ; }
read_key_value_pair ( self ) : NEW_LINE INDENT key_value_pair = self . read_key_value_pair ( ) NEW_LINE if key_value_pair is None : NEW_LINE INDENT return None NEW_LINE DEDENT return key_value_pair NEW_LINE DEDENT
write_int ( self , bits ) : NEW_LINE INDENT if len ( bits ) == 0 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values less than 2^bitWidth . " ) NEW_LINE DEDENT if len ( bits ) == 1 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values greater than 1 . " ) NEW_LINE DEDENT if len ( bits ) == 2 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values greater than 2 . " ) NEW_LINE DEDENT if len ( bits ) == 3 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values greater than 3 . " ) NEW_LINE DEDENT if len ( bits ) == 4 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values less than 4 . " ) NEW_LINE DEDENT if len ( bits ) == 2 : NEW_LINE INDENT raise ValueError ( " write _ int accepts only values
read_int ( self , position ) : NEW_LINE INDENT try : NEW_LINE INDENT return self [ position ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self [ position ] NEW_LINE DEDENT DEDENT
write ( self , schema ) : NEW_LINE INDENT self . write_schema ( schema ) NEW_LINE DEDENT
static void createTopic ( final String topic ) throws IOException { if ( topic == null ) { throw new IllegalArgumentException ( " topic must not be null " ) ; } final Map < String , String > topicMap = new HashMap < > ( ) ; topicMap . put ( topic , topic ) ; topicMap . put ( topic , topic ) ; }
PipelineStageBeans createPipelineStageBeans ( ) { PipelineStageBeans pipelineStageBeans = new PipelineStageBeans ( ) ; pipelineStageBeans . add ( new PipelineStage ( ) ) ; return pipelineStageBeans ; }
StageBean createStageBean ( ) { StageBean stageBean = new StageBean ( ) ; stageBean . setName ( " StageBean " ) ; stageBean . setDescription ( " StageBean " ) ; return stageBean ; }

InterceptorDefinition createInterceptor ( InterceptorDefinition interceptorDefinition ) { if ( interceptorDefinition == null ) { throw new IllegalArgumentException ( " InterceptorDefinition must not be null " ) ; } InterceptorDefinition interceptor = interceptorDefinition . createInterceptor ( ) ; if ( interceptor == null ) { throw new IllegalArgumentException ( " InterceptorDefinition must not be null " ) ; } return interceptor ; }
JSON representation of Avro schema to Avro s Schema JAVA object ( ) { return new AvroSchema ( ) ; }
get_days_since_unix_epoch ( self , unix_epoch ) : NEW_LINE INDENT if unix_epoch : NEW_LINE INDENT return self . _days_since_unix_epoch ( unix_epoch ) NEW_LINE DEDENT return self . _days_since_unix_epoch ( unix_epoch ) NEW_LINE DEDENT
get_schema_from_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return None NEW_LINE DEDENT schema = self . get_schema_from_header ( header ) NEW_LINE if schema is None : NEW_LINE INDENT return None NEW_LINE DEDENT return schema NEW_LINE DEDENT
migrate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT data_format = self . _get_data_format ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT data_format = self . _get_data_format ( ) NEW_LINE DEDENT if data_format is not None : NEW_LINE INDENT data_format = self . _get_data_format ( ) NEW_LINE DEDENT if data_format is None : NEW_LINE INDENT data_format = self . _get_data_format ( ) NEW_LINE DEDENT return data_format NEW_LINE DEDENT
def def size ( self ) : NEW_LINE INDENT return self . buffer . size ( ) NEW_LINE DEDENT
copy_blobstore_resources ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources ( ) NEW_LINE self . _copy_blobstore_resources (
clear ( self ) : NEW_LINE INDENT if self . column_info is not None : NEW_LINE INDENT self . column_info . clear ( ) NEW_LINE self . column_info . clear ( ) NEW_LINE DEDENT DEDENT
void register ( String threadName ) { if ( threadName == null ) { throw new IllegalArgumentException ( " threadName must not be null . " ) ; } if ( threadName . length ( ) == 0 ) { throw new IllegalArgumentException ( " threadName must not be null . " ) ; } if ( threadName . length ( ) == 0 ) { throw new IllegalArgumentException ( " threadName must not be null . " ) ; } if ( threadName . length ( ) == 0 ) { throw new IllegalArgumentException ( " threadName must not be null . " ) ; } }
register ( self , name ) : NEW_LINE INDENT self . _logger . info ( " Registering % s " , name ) NEW_LINE self . _logger . info ( " Registering % s " , name ) NEW_LINE DEDENT
static void storeConfiguration ( ) throws IOException { if ( sdc . properties != null ) { sdc . properties . putAll ( sdc . properties ) ; } else { sdc . properties . putAll ( sdc . properties ) ; } }
authenticate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _authenticate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _authenticate ( ) NEW_LINE DEDENT DEDENT
upgrade ( self ) : NEW_LINE INDENT variant = self . get_variant ( ) NEW_LINE if variant is not None : NEW_LINE INDENT return variant . upgrade ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return variant . upgrade ( ) NEW_LINE DEDENT DEDENT
public static void upgrade ( final String name , final String name ) { final String name = name . toLowerCase ( ) ; if ( name . startsWith ( " stage " ) ) { name = name . replace ( " stage " , " " ) ; } else { name = name . replace ( " stage " , " " ) ; } }
upgrade ( self ) : NEW_LINE INDENT self . _upgrade ( ) NEW_LINE self . _upgrade ( ) NEW_LINE DEDENT
upgrade_service_configuration ( self ) : NEW_LINE INDENT self . _upgrade_service_configuration ( ) NEW_LINE return self . _upgrade_service_configuration ( ) NEW_LINE DEDENT
void upgradeStageConfiguration ( StageConfiguration stageConfiguration ) { if ( stageConfiguration == null ) { throw new IllegalArgumentException ( " Stage configuration cannot be null " ) ; } if ( stageConfiguration . getStageConfiguration ( ) == null ) { throw new IllegalArgumentException ( " Stage configuration cannot be null " ) ; } if ( stageConfiguration . getStageConfiguration ( ) == null ) { throw new IllegalArgumentException ( " Stage configuration cannot be null " ) ; } }
replace ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _replace ( value ) NEW_LINE DEDENT DEDENT
check_class ( cls ) : NEW_LINE INDENT if isinstance ( cls , Class ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
add ( queue , element ) : NEW_LINE INDENT if queue . size ( ) == 0 : NEW_LINE INDENT queue . add ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT queue . add ( element ) NEW_LINE DEDENT DEDENT
add ( self , queue , element ) : NEW_LINE INDENT if not queue . isEmpty ( ) : NEW_LINE INDENT queue . add ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT queue . add ( element ) NEW_LINE DEDENT DEDENT
static < T > T default ( T value ) { if ( value == null ) { throw new NullPointerException ( " value is null " ) ; } if ( value instanceof T ) { return ( T ) value ; } return value ; }
def def def get_batch_data ( self ) : NEW_LINE INDENT return self . _get_batch_data ( ) NEW_LINE DEDENT


static Map < String , String > getDefaultValues ( ) { Map < String , String > defaultValues = new HashMap < String , String > ( ) ; defaultValues . put ( " " , " " ) ; defaultValues . put ( " " , " " ) ; return defaultValues ; }

convert ( self , message ) : NEW_LINE INDENT if isinstance ( message , SDCRecordField ) : NEW_LINE INDENT return message NEW_LINE DEDENT else : NEW_LINE INDENT return message NEW_LINE DEDENT DEDENT
public static void serialize ( byte [ ] message , FileDescriptor descriptor ) throws IOException { if ( descriptor == null ) { throw new IllegalArgumentException ( " The specified descriptor is null . " ) ; } else { throw new IllegalArgumentException ( " The specified descriptor cannot be null . " ) ; } }
public static void serialize ( final FieldPath path , final FieldPath fieldPath ) throws IOException { if ( fieldPath == null ) { throw new IllegalArgumentException ( " No field path specified . " ) ; } final FieldPath fieldPath = new FieldPath ( ) ; fieldPath . setFieldName ( fieldPath . getFieldName ( ) ) ; fieldPath . setFieldName ( fieldPath . getFieldName ( ) ) ; }
static void upgrade ( final JerseyConfigBean jerseyConfigBean ) { final JerseyConfigBean jerseyConfigBean = new JerseyConfigBean ( jerseyConfigBean ) ; if ( jerseyConfigBean . isUpgrade ( ) ) { jerseyConfigBean . upgrade ( ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert from Kudu type to SDC Field type Convert
def create_field ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return RowResult . RowResult . create ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return RowResult . create ( ) NEW_LINE DEDENT DEDENT

static String getText ( String line ) { if ( line == null ) { return " " ; } if ( line . length ( ) == 0 ) { return " " ; } if ( line . length ( ) == 0 ) { return " " ; } if ( line . length ( ) == 1 ) { return " " ; } return line . substring ( 0 , line . length ( ) - 1 ) ; }
add_missing_configs ( self ) : NEW_LINE INDENT self . add_missing_configs ( ) NEW_LINE DEDENT

static void populateHeaders ( Map < String , String > headers ) { if ( headers != null ) { for ( String header : headers . keySet ( ) ) { headers . put ( header , headers . get ( header ) ) ; } } }
write_headers ( self ) : NEW_LINE INDENT headers = [ ] NEW_LINE for field in self . fields : NEW_LINE INDENT headers . append ( " % s : % s " % ( field . name , field . value ) ) NEW_LINE DEDENT return headers NEW_LINE DEDENT
write_headers ( self , headers ) : NEW_LINE INDENT if len ( headers ) == 0 : NEW_LINE INDENT return headers NEW_LINE DEDENT if len ( headers ) == 1 : NEW_LINE INDENT return headers [ 0 ] NEW_LINE DEDENT if len ( headers ) == 2 : NEW_LINE INDENT return headers [ 1 ] NEW_LINE DEDENT return headers NEW_LINE DEDENT
def def commit ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _commit ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
apply_client_configuration ( cls , client_config ) : NEW_LINE INDENT cls . client_config = client_config NEW_LINE cls . client_config = cls . client_config NEW_LINE return cls . client_config NEW_LINE DEDENT
def def get_headers ( self ) : NEW_LINE INDENT return self . _headers . get ( " HEAD " ) NEW_LINE DEDENT
public static int getOffset ( int offset , int offset ) { return offset + offset ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_header_value_entries ( self ) : NEW_LINE INDENT return self . request . headers . getHeaders ( ) . values ( ) . values ( ) NEW_LINE DEDENT
parse_response ( self , response ) : NEW_LINE INDENT if isinstance ( response , dict ) : NEW_LINE INDENT return response NEW_LINE DEDENT elif isinstance ( response , dict ) : NEW_LINE INDENT return response NEW_LINE DEDENT elif isinstance ( response , list ) : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
is_default_property ( self , property ) : NEW_LINE INDENT if property is None : NEW_LINE INDENT return False NEW_LINE DEDENT return self . _is_default_property ( property ) NEW_LINE DEDENT


def get_credentials ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT credentials = json . loads ( self . credentials ) NEW_LINE return credentials NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
preview ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _preview ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
trim_output ( self , output ) : NEW_LINE INDENT if isinstance ( output , str ) : NEW_LINE INDENT output = output . strip ( ) NEW_LINE DEDENT if isinstance ( output , str ) : NEW_LINE INDENT output = output . strip ( ) NEW_LINE DEDENT return output NEW_LINE DEDENT
__python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
main ( self , chunk ) : NEW_LINE INDENT if len ( chunk ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( chunk ) == 1 : NEW_LINE INDENT return chunk [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return chunk [ 0 ] NEW_LINE DEDENT DEDENT

close_connection ( self ) : NEW_LINE INDENT if self . connection : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT
escape ( self , input ) : NEW_LINE INDENT if isinstance ( input , basestring ) : NEW_LINE INDENT return self . _escape ( input ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _escape ( input ) NEW_LINE DEDENT DEDENT
flowControlSetting ( self ) : NEW_LINE INDENT return self . flowControlSetting NEW_LINE DEDENT
static ChannelProvider createChannelProvider ( ChannelProvider channelProvider ) { if ( channelProvider == null ) { channelProvider = new ChannelProvider ( ) ; channelProvider . setChannelProvider ( channelProvider ) ; } return channelProvider ; }
void commit ( ) throws IOException { if ( consumer . commit ( ) ) { consumer . commit ( ) ; } else { consumer . commit ( ) ; } }
compile ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , str ) : NEW_LINE INDENT return expression NEW_LINE DEDENT else : NEW_LINE INDENT return expression NEW_LINE DEDENT DEDENT
def def __call__ ( self , expression ) : NEW_LINE INDENT regex = re . compile ( expression ) NEW_LINE regex = re . compile ( regex ) NEW_LINE return regex . match ( expression ) NEW_LINE DEDENT
load_dictionary ( self , input_stream ) : NEW_LINE INDENT if isinstance ( input_stream , dict ) : NEW_LINE INDENT return self . load_dictionary ( input_stream ) NEW_LINE DEDENT elif isinstance ( input_stream , dict ) : NEW_LINE INDENT return self . load_dictionary ( input_stream ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . load_dictionary ( input_stream ) NEW_LINE DEDENT DEDENT
add_dictionary_entry ( self , dictionary_entry ) : NEW_LINE INDENT if isinstance ( dictionary_entry , dict ) : NEW_LINE INDENT return dictionary_entry NEW_LINE DEDENT elif isinstance ( dictionary_entry , dict ) : NEW_LINE INDENT return dictionary_entry NEW_LINE DEDENT elif isinstance ( dictionary_entry , dict ) : NEW_LINE INDENT return dictionary_entry NEW_LINE DEDENT DEDENT


static String toJson ( JavaObject object ) { String json = null ; try { json = new Gson ( ) . toJson ( object ) ; } catch ( Exception e ) { json = new Gson ( ) . toJson ( object ) ; } return json ; }
the given JSON string to Java object . public static Object deserialize ( String jsonString ) throws JSONException { if ( jsonString == null ) { throw new JSONException ( " JSON string cannot be null . " ) ; } if ( jsonString . length ( ) == 0 ) { throw new JSONException ( " JSON string cannot be null . " ) ; } if ( jsonString . length ( ) == 0 ) { throw new JSONException ( " JSON string cannot be null . " ) ; } if ( jsonString . length ( ) == 0 ) { throw new JSONException ( " JSON string cannot be null . " ) ; } if ( jsonString . length ( ) == 0 ) { throw new JSONException ( " JSON string cannot be null . " ) ; } return deserialize ( jsonString ) ; }
( File file ) throws IOException { if ( file == null ) { throw new FileNotFoundException ( ) ; } if ( file . isDirectory ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isDirectory ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile ( ) ) { throw new FileNotFoundException ( ) ; } if ( file . isFile (
write ( self , record ) : NEW_LINE INDENT if isinstance ( record , Record ) : NEW_LINE INDENT self . write ( record ) NEW_LINE DEDENT else : NEW_LINE INDENT self . write ( record ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
extractInnerMapFromTheList ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return self . extractInnerMapFromTheList ( list ) NEW_LINE DEDENT return self . extractInnerMapFromTheList ( list ) NEW_LINE DEDENT
get_table_name ( self ) : NEW_LINE INDENT table_name = self . metadata . get_table_name ( ) NEW_LINE if table_name : NEW_LINE INDENT return table_name NEW_LINE DEDENT return None NEW_LINE DEDENT
get_database_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _metadata . get_database_name ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_internal_field ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _internal_field NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _internal_field NEW_LINE DEDENT DEDENT
get_location_from_metadata_record ( self , metadata_record ) : NEW_LINE INDENT location = None NEW_LINE if metadata_record : NEW_LINE INDENT location = metadata_record . get_location ( ) NEW_LINE DEDENT return location NEW_LINE DEDENT
customLocation ( self ) : NEW_LINE INDENT return self . metadata . get ( ' customLocation ' ) NEW_LINE DEDENT
get_schema ( self ) : NEW_LINE INDENT schema = self . _get_schema ( ) NEW_LINE if schema is None : NEW_LINE INDENT schema = self . _get_schema ( ) NEW_LINE DEDENT return schema NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def create ( self ,__python____python____python__ def def def def def def create ( self ) : NEW__python____python____python____python____python____python____python____python__ def def def def def create ( self ) : NEW__python____python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python__ def def def create___python____python____python____python____python__ def def def def ___python____python____python____python__ def def def def _
def _check_partition def _check_partition_columns ( self ) : NEW_LINE INDENT if len ( self . partition_columns ) > 0 : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static String partitionPath ( String partitionPath ) { if ( partitionPath == null ) { partitionPath = " " ; } return partitionPath ; }
static List < Path > hdfsPaths ( ) { List < Path > hdfsPaths = new ArrayList < Path > ( ) ; for ( Path path : hdfsPaths ) { hdfsPaths . add ( path ) ; } return hdfsPaths ; }
def def set_parameters ( self , query ) : NEW_LINE INDENT self . parameters . clear ( ) NEW_LINE self . parameters . add ( query ) NEW_LINE self . parameters . add ( query ) NEW_LINE DEDENT
static List < SDCConfiguration > getAllSDCConfigurations ( ) { List < SDCConfiguration > allSDCConfigurations = new ArrayList < SDCConfiguration > ( ) ; for ( int i = 0 ; i < allSDCConfigurations . size ( ) ; i ++ ) { allSDCConfigurations . add ( allSDCConfigurations . get ( i ) ) ; } return allSDCConfigurations ; }
parse_date ( self , format ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_date ( format ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_date ( format ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_date ( format ) NEW_LINE DEDENT DEDENT
static void printArrayContent ( String content ) { if ( content == null ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ; if ( content . length ( ) == 0 ) return ;
update_state_file ( self ) : NEW_LINE INDENT if self . state_file is not None : NEW_LINE INDENT self . state_file = self . state_file NEW_LINE DEDENT else : NEW_LINE INDENT self . state_file = self . state_file NEW_LINE DEDENT DEDENT
static boolean containsSolrFields ( Map < String , String > solrFieldsMap ) { if ( solrFieldsMap == null || solrFieldsMap . size ( ) == 0 ) { return false ; } if ( solrFieldsMap . size ( ) == 0 ) { return false ; } return true ; }
filter_generated_fields ( self , list ) : NEW_LINE INDENT if not isinstance ( list , list ) : NEW_LINE INDENT list = [ ] NEW_LINE DEDENT for field in list : NEW_LINE INDENT if field . startswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT if field . endswith ( ' _ _ ' ) : NEW_LINE INDENT continue
def def handle ( self , exception ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . handler . handle ( exception ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . error ( e ) NEW_LINE DEDENT DEDENT
generate_dependency_from_jar ( jar_file_name ) : NEW_LINE INDENT try : NEW_LINE INDENT jar_file = open ( jar_file_name , ' r ' ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT return jar_file . read ( ) NEW_LINE DEDENT
def def generate_dependency_from_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _generate_dependency_from_url ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _generate_dependency ( url ) NEW_LINE DEDENT DEDENT
static CouchbaseConnector create ( CouchbaseConnector connector ) { if ( connector instanceof CouchbaseConnector ) { return ( CouchbaseConnector ) connector ; } else { return null ; } }
disconnect ( self ) : NEW_LINE INDENT self . _disconnect ( ) NEW_LINE self . _disconnect ( ) NEW_LINE DEDENT
validate_connection_configurations ( self , connection_configurations ) : NEW_LINE INDENT if not connection_configurations : NEW_LINE INDENT return NEW_LINE DEDENT if connection_configurations : NEW_LINE INDENT return NEW_LINE DEDENT if not connection_configurations [ 0 ] : NEW_LINE INDENT return NEW_LINE DEDENT if not connection_configurations [ 1 ] : NEW_LINE INDENT return NEW_LINE DEDENT if connection_configurations [ 2 ] : NEW_LINE INDENT return NEW_LINE DEDENT if connection_configurations [ 3 ] : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def def def def def def Convert Convert Convert Convert from code in String type to String type ( String type ) : public static final public static String convert ( String code , String type , String type ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { if ( type != null ) { type
validate_config_definition ( self , config_definition ) : NEW_LINE INDENT if isinstance ( config_definition , dict ) : NEW_LINE INDENT return config_definition NEW_LINE DEDENT if isinstance ( config_definition , dict ) : NEW_LINE INDENT return config_definition NEW_LINE DEDENT return config_definition NEW_LINE DEDENT
get_secret ( self , key ) : NEW_LINE INDENT if self . is_expired ( key ) : NEW_LINE INDENT return self . _get_secret ( key ) NEW_LINE DEDENT return self . _get_secret ( key ) NEW_LINE DEDENT
write_operation_type ( self ) : NEW_LINE INDENT return self . _write_operation_type ( ) NEW_LINE DEDENT
write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
apply ( self , options ) : NEW_LINE INDENT self . options = options NEW_LINE if self . options . get ( ' sub - document - mutations ' ) : NEW_LINE INDENT self . options [ ' sub - document - mutations ' ] = self . options [ ' sub - document - mutations ' ] NEW_LINE DEDENT DEDENT
ALTER_TABLE ( self , table_name = None , column_name = None ) : NEW_LINE INDENT if table_name is None : NEW_LINE INDENT table_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is None : NEW_LINE INDENT column_name = table_name NEW_LINE DEDENT if column_name is not None : NEW_LINE INDENT column_name = column_name NEW_
static void relogin ( final KerberosTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicketGrantingTicket )
consume ( self , queue ) : NEW_LINE INDENT if self . producer . isComplete ( ) : NEW_LINE INDENT self . producer . complete ( queue ) NEW_LINE DEDENT else : NEW_LINE INDENT self . producer . complete ( queue ) NEW_LINE DEDENT DEDENT


inject_config_values ( self , config ) : NEW_LINE INDENT self . config = config NEW_LINE return self . config NEW_LINE DEDENT
hideStage ( self ) : NEW_LINE INDENT if self . hideStage : NEW_LINE INDENT return self . hideStage ( ) NEW_LINE DEDENT return self . hideStage ( ) NEW_LINE DEDENT
parse_configuration ( self , lineage_plugin ) : NEW_LINE INDENT if lineage_plugin : NEW_LINE INDENT return self . parse_configuration ( lineage_plugin ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
format_column_names ( column_names ) : NEW_LINE INDENT column_names = [ ] NEW_LINE for column_name in column_names : NEW_LINE INDENT column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE column_name = column_name . lower ( ) NEW_LINE DEDENT return column_names NEW_LINE DEDENT
unescape_strings ( self , strings ) : NEW_LINE INDENT if isinstance ( strings , str ) : NEW_LINE INDENT return strings NEW_LINE DEDENT elif isinstance ( strings , unicode ) : NEW_LINE INDENT return strings NEW_LINE DEDENT elif isinstance ( strings , list ) : NEW_LINE INDENT return strings NEW_LINE DEDENT elif isinstance ( strings , tuple ) : NEW_LINE INDENT return strings NEW_LINE DEDENT return strings NEW_LINE DEDENT
static PipelineConfiguration findPipelineConfiguration ( String name , String revision ) { if ( name == null ) { return null ; } if ( revision == null ) { return null ; } return new PipelineConfiguration ( name , revision ) ; }

static List < PipelineConfigurationInfo > getAllPipelineConfigurations ( ) { List < PipelineConfigurationInfo > result = new ArrayList < PipelineConfigurationInfo > ( ) ; result . add ( new PipelineConfigurationInfo ( ) ) ; result . add ( new PipelineConfigurationInfo ( ) ) ; result . add ( new PipelineConfigurationInfo ( ) ) ; return result ; }
Import Pipeline Fragment Configuration & Rules .
write_to_temp_file ( self , file_path ) : NEW_LINE INDENT if not os . path . exists ( file_path ) : NEW_LINE INDENT os . makedirs ( file_path ) NEW_LINE DEDENT if not os . path . exists ( file_path ) : NEW_LINE INDENT os . makedirs ( file_path ) NEW_LINE DEDENT DEDENT
get_numeric_operation_code ( self ) : NEW_LINE INDENT return self . _get_numeric_operation_code ( ) NEW_LINE DEDENT
get_field_path ( self , column_name ) : NEW_LINE INDENT return self . _get_field_path ( column_name ) NEW_LINE DEDENT
read_next_event ( self , buffer ) : NEW_LINE INDENT try : NEW_LINE INDENT event = self . recv_event ( buffer ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT if event is None : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT else : NEW_LINE INDENT return event NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_get_runner ( self ) : NEW_LINE INDENT runner = self . _get_runner ( ) NEW_LINE if runner is None : NEW_LINE INDENT return None NEW_LINE DEDENT return runner NEW_LINE DEDENT
get_runner ( self , runner ) : NEW_LINE INDENT runner = self . get_runner ( runner ) NEW_LINE if runner : NEW_LINE INDENT return runner NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
destroy ( self ) : NEW_LINE INDENT pool = self . pool NEW_LINE if not pool : NEW_LINE INDENT return NEW_LINE DEDENT pool . destroy ( ) NEW_LINE DEDENT

static List < String > getConfiguration ( ) { List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) != null ) { list . add ( list . get ( i ) ) ; } } return list ; }
get_last_shard_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_last_shard_id ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
process ( self ) : NEW_LINE INDENT maxStatement = self . maxStatement NEW_LINE if maxStatement > 0 : NEW_LINE INDENT self . maxStatement = maxStatement NEW_LINE DEDENT else : NEW_LINE INDENT self . maxStatement = 0 NEW_LINE DEDENT DEDENT
def _handle def _handle def _check_exception ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , SQLException ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
hash ( self , record ) : NEW_LINE INDENT hash = hashlib . sha256 ( ) NEW_LINE hash . update ( record ) NEW_LINE return hash . hexdigest ( ) NEW_LINE DEDENT
is_greater_than ( self , f1 , f2 ) : NEW_LINE INDENT return self . is_greater_than ( f1 , f2 ) NEW_LINE return self . is_greater_than ( f1 , f2 ) NEW_LINE DEDENT
static String getPid ( ) { if ( this . getClass ( ) == null ) { return null ; } return this . getClass ( ) . getName ( ) + " : " + this . getClass ( ) . getName ( ) ; }
map_list ( self , map_list ) : NEW_LINE INDENT if map_list is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return map_list NEW_LINE DEDENT DEDENT
get_remote_operation ( self ) : NEW_LINE INDENT if self . remote_operation : NEW_LINE INDENT return self . remote_operation NEW_LINE DEDENT DEDENT
synchronized void reset ( ) { if ( this . bean != null ) { this . bean . reset ( ) ; this . bean = null ; } }
get_snapshot ( self , persistency ) : NEW_LINE INDENT if persistency is None : NEW_LINE INDENT return None NEW_LINE DEDENT if persistency is not None : NEW_LINE INDENT return persistency . getSnapshot ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
ensure_dir_exists ( directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT return os . path . isdir ( directory ) NEW_LINE DEDENT

def def write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _writer . write ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write ( self ) : NEW_LINE INDENT recordWriter = self . recordWriter NEW_LINE try : NEW_LINE INDENT recordWriter . write ( self ) NEW_LINE DEDENT finally : NEW_LINE INDENT self . recordWriter = None NEW_LINE DEDENT DEDENT
def def def def def def def def def generate ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_partition_name_and_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . partition_name_and_value NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . partition_name_and_value NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
process ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
static boolean isStage ( Class < ? extends Stage > stageClass ) { if ( stageClass == null ) { return false ; } return stageClass . isAssignableFrom ( stageClass ) ; }
start_spark_job ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _spark_job = self . _spark_job NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE return self . _spark_job
apply_authentication_properties ( client , authentication_properties ) : NEW_LINE INDENT if authentication_properties is None : NEW_LINE INDENT authentication_properties = { } NEW_LINE DEDENT return client . apply_authentication_properties ( authentication_properties ) NEW_LINE DEDENT
def def def def def def def def Eval def def def def def get_headers ( self ) : def def def def def get_headers ( self ) : def get_headers ( self ) :__python__ def def def def def def def def get_headers ( self ) : NEW def def def def def get_headers__python__ def def def def get_headers__python__ def def def def get_headers ( self ) :
def def _get_method ( self ) : NEW_LINE INDENT method = self . request . getMethod ( ) NEW_LINE if method == ' GET ' GET ' : NEW_LINE INDENT method = self . request . getMethod ( ) NEW_LINE DEDENT else : NEW_LINE INDENT method = self . request . getMethod ( ) NEW_LINE DEDENT return method NEW_LINE DEDENT

get_field_value ( self , field , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
AvroSchema getSchema ( String schemaId ) throws IOException { if ( schemaId == null ) { throw new IOException ( " Schema ID is null " ) ; } if ( schemaId . length ( ) == 0 ) { throw new IOException ( " Schema ID is empty " ) ; } if ( schemaId . length ( ) == 0 ) { throw new IOException ( " Schema ID is empty " ) ; } if ( schemaId . length ( ) == 0 ) { throw new IOException ( " Schema ID is empty " ) ; } if ( schemaId . length ( ) == 0 ) { throw new IOException ( " Schema ID is empty " ) ; } return new AvroSchema ( schemaId ) ; }
def def def parse ( self , subject ) : NEW_LINE INDENT schema = self . schema_registry . get ( subject ) NEW_LINE if schema is not None : NEW_LINE INDENT schema = self . schema_registry . get ( subject ) NEW_LINE if schema is None : NEW_LINE INDENT schema = self . schema_registry . get ( subject ) NEW_LINE DEDENT else : NEW_LINE INDENT schema = self . schema_registry . get ( subject ) NEW_LINE DEDENT return schema NEW_LINE DEDENT DEDENT
parse_schema ( self , subject ) : NEW_LINE INDENT schema = self . get_schema ( subject ) NEW_LINE if schema is not None : NEW_LINE INDENT return schema NEW_LINE DEDENT schema = self . get_schema ( subject ) NEW_LINE if schema is not None : NEW_LINE INDENT return schema NEW_LINE DEDENT DEDENT
get_schema_id ( self ) : NEW_LINE INDENT schema_id = None NEW_LINE if self . schema_id is not None : NEW_LINE INDENT schema_id = self . schema_id NEW_LINE DEDENT return schema_id NEW_LINE DEDENT
parse_schema ( self ) : NEW_LINE INDENT schema = self . schema NEW_LINE if schema is None : NEW_LINE INDENT return None NEW_LINE DEDENT schema = self . schema NEW_LINE if schema is not None : NEW_LINE INDENT return schema NEW_LINE DEDENT schema = self . schema NEW_LINE if schema is not None : NEW_LINE INDENT return schema NEW_LINE DEDENT schema = self . schema NEW_LINE if schema is None : NEW_LINE INDENT return None NEW_LINE DEDENT return schema NEW_LINE DEDENT
void write ( byte [ ] magic , byte [ ] schema ) throws IOException { if ( magic == null ) { throw new IOException ( " Invalid magic byte " ) ; } if ( schema == null ) { throw new IOException ( " Invalid schema " ) ; } if ( schema == null ) { throw new IOException ( " Invalid schema " ) ; } if ( schema == null ) { throw new IOException ( " Invalid schema " ) ; } if ( schema == null ) { throw new IOException ( " Invalid schema " ) ; } }
static boolean isMagic ( byte [ ] data ) { if ( data == null ) { return false ; } if ( data . length == 0 ) { return true ; } return false ; }
extract_default_values ( self ) : NEW_LINE INDENT if self . _default_values : NEW_LINE INDENT return self . _default_values NEW_LINE DEDENT else : NEW_LINE INDENT return self . _default_values NEW_LINE DEDENT DEDENT
parse ( self , payload ) : NEW_LINE INDENT if isinstance ( payload , list ) : NEW_LINE INDENT return self . _parse ( payload ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _parse ( payload ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def get___python____python____python____python____python__ def def def def def get___python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python__ def def def def def get___python____python____python__ def def def _
def def initialize_schema_generator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _schema_generator NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _schema_generator = None NEW_LINE DEDENT DEDENT
outward_flowing_edge_vertices ( self ) : NEW_LINE INDENT outward_flowing_edge_vertices = [ ] NEW_LINE for edge in self . edges : NEW_LINE INDENT outward_flowing_edge_vertices . append ( edge ) NEW_LINE DEDENT return outward_flowing_edge_vertices NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

Map < String , String > offset ( String offset ) { Map < String , String > offsetMap = new HashMap < String , String > ( ) ; offsetMap . put ( offset , offset ) ; return offsetMap ; }
def get_report_id ( self ) : NEW_LINE INDENT report_id = self . _get_report_id ( ) NEW_LINE if report_id is not None : NEW_LINE INDENT return report_id NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_report_id ( ) NEW_LINE DEDENT DEDENT
def post_report_report ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT report = Report . Get ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT report = Report . Get ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT return report NEW_LINE DEDENT return report NEW_LINE DEDENT
check_SDC ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _check_SDC ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _check_SDC ( ) NEW_LINE DEDENT DEDENT
update_offsets ( self , file , offsets ) : NEW_LINE INDENT if len ( offsets ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( offsets ) == 2 : NEW_LINE INDENT return
delete ( self ) : NEW_LINE INDENT for gcs in self . gcs : NEW_LINE INDENT self . delete_blob ( gcs ) NEW_LINE DEDENT DEDENT
def handle_error ( self , error ) : NEW_LINE INDENT if error : NEW_LINE INDENT return self . _handle_error ( error ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _handle_error ( error ) NEW_LINE DEDENT DEDENT
archive_blob ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE self . _archive_blob ( ) NEW_LINE DEDENT finally : NEW_LINE INDENT self . _archive_blob ( ) NEW_LINE DEDENT DEDENT
get_reader ( self ) : NEW_LINE INDENT if self . reader is None : NEW_LINE INDENT return None NEW_LINE DEDENT reader = self . reader NEW_LINE if self . reader is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . reader NEW_LINE DEDENT
update_reader_offsets ( self ) : NEW_LINE INDENT reader = self . _reader NEW_LINE offsets = self . _offsets NEW_LINE if reader is None : NEW_LINE INDENT return offsets NEW_LINE DEDENT else : NEW_LINE INDENT return offsets NEW_LINE DEDENT DEDENT
set_dpm_base_url ( self , dpmBaseURL ) : NEW_LINE INDENT self . dpmBaseURL = dpmBaseURL NEW_LINE DEDENT
def def add_default_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return NEW_LINE DEDENT if not header . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not header . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not header . startswith ( ' _ ' ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
parse_date ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT date = datetime . strptime ( string , ' % Y - % m - % dT % H : % M : % S ' ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT date = datetime . strptime ( string , ' % Y - % m - % dT % H : % M : % S ' ) NEW_LINE DEDENT return date NEW_LINE DEDENT
def def def escape ( self , value ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

get_table_metadata ( self , table_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _table_metadata [ table_name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _table_metadata [ table_name ] NEW_LINE DEDENT DEDENT
bulkInserter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _bulkInserter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_event_record ( self , event_context ) : NEW_LINE INDENT event_context = event_context . copy ( ) NEW_LINE event_context . update ( event_context . copy ( ) ) NEW_LINE event_context . update ( event_context . copy ( ) ) NEW_LINE return event_context NEW_LINE DEDENT

public static void convert ( String operationCode , String operationCode ) throws SQLException { if ( operationCode == null ) { throw new SQLException ( ) ; } else if ( operationCode == null ) { throw new SQLException ( ) ; } else { throw new SQLException ( ) ; } }

addJars ( self , jars ) : NEW_LINE INDENT if not jars : NEW_LINE INDENT return NEW_LINE DEDENT for jar in jars : NEW_LINE INDENT self . addJars ( jars ) NEW_LINE DEDENT DEDENT
def def def _ public public boolean first_order def def def def public public public public public public public public public boolean first ( String fieldName public public public public public public boolean public boolean first_order public boolean first_order public boolean first_order public boolean first_order public boolean first_order public boolean first_order public boolean first_order public boolean first_order public boolean first_field ( String fieldName , String fieldName , String fieldName ) { return first_field == null ? false : true ; }
boolean contains ( String fieldName ) { if ( fieldName == null || fieldName . length ( ) == 0 ) { return false ; } if ( fieldName . length ( ) == 0 ) { return false ; } return true ; }
def fileOffset ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . fileOffsetString ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return self . fileOffsetString ( ) NEW_LINE DEDENT
static final boolean isVisible ( ) { if ( ! isVisible ( ) ) { return false ; } return true ; }
public public public public public public public void setKafka public public public public public void setKafka public public public public void setKafka public void setKafka public void setKafka public void setKafka public void setKafka public void setKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaSource ( ) { this . setKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaKafkaSource ( ) { this . kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka_kafka


get_table_description ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _table_description NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _table_description NEW_LINE DEDENT DEDENT
def def _is__python____python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python__ def def def def ___python____python____python__ def def def def def get___python____python____python__ def def def def def get___python____python____python____python__ def def def def def def get___python____python____python__ def def def def def get___python____python____python____python__ def def def def def get___python__ def def _ def _get___python____python__ def _get def _is def _get ( self ) : def _get ( self ) : NEW def _get ( self ) : NEW_LINE def _get ( self ) : NEW_LINE def _get ( self ) : NEW_LINE INDENT return self . _get ( ) NEW def _get ( self ) : NEW_LINE def _get ( self . _
get_column_class ( self , column_type ) : NEW_LINE INDENT if column_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return column_type NEW_LINE DEDENT DEDENT

get_schema ( self , table_name ) : NEW_LINE INDENT schema = self . get_schema ( table_name ) NEW_LINE if schema is not None : NEW_LINE INDENT return schema NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_extended_column_properties ( self ) : NEW_LINE INDENT column_properties = [ ] NEW_LINE for column in self . column_properties : NEW_LINE INDENT column_properties . append ( column ) NEW_LINE DEDENT return column_properties NEW_LINE DEDENT
get_java_type ( self , type_name ) : NEW_LINE INDENT type_name = type_name . lower ( ) NEW_LINE type_name = type_name . upper ( ) NEW_LINE return type_name NEW_LINE DEDENT
validate_configuration_options ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . validate_configuration_options ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT self . validate_configuration_options ( ) NEW_LINE DEDENT
static Topic getTopic ( String record ) { Topic topic = null ; if ( record != null ) { topic = new Topic ( record ) ; } else { topic = new Topic ( ) ; } return topic ; }

def def get_input_stream ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( file , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_output_stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _output_stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _output_stream NEW_LINE DEDENT DEDENT
boolean contains ( DataStore store ) { if ( store == null ) { return false ; } return store . contains ( store . getName ( ) ) ; }
parse_permissions ( self , permissions ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_permissions ( permissions ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate_service_dependencies ( self , service_dependencies ) : NEW_LINE INDENT if isinstance ( service_dependencies , list ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , list ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_dependencies , dict ) : NEW_LINE INDENT return service_dependencies NEW_LINE DEDENT elif isinstance ( service_







static LoginManager getInstance ( ) { try { return ( LoginManager ) super . getInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
decrement_reference_count ( self ) : NEW_LINE INDENT if self . reference_count is not None : NEW_LINE INDENT return self . reference_count NEW_LINE DEDENT return self . reference_count NEW_LINE DEDENT
def parse ( self , glob ) : NEW_LINE INDENT if not glob . glob ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return glob . glob ( ) NEW_LINE DEDENT
def def list ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . list ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
execute_pipeline ( self , pipeline ) : NEW_LINE INDENT if self . batch_size is not None : NEW_LINE INDENT self . batch_size = self . batch_size NEW_LINE DEDENT if self . batch_size is not None : NEW_LINE INDENT self . batch_size = self . batch_size NEW_LINE self . batch_size = self . batch_size NEW_LINE DEDENT DEDENT
schedule ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _schedule ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _schedule ( ) NEW_LINE DEDENT DEDENT
salvaging_memory_structures ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT yield self NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
convert ( self , record ) : NEW_LINE INDENT if isinstance ( record , Record ) : NEW_LINE INDENT return record NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
set_configs ( self , configs ) : NEW_LINE INDENT if len ( configs ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( configs ) == 1 : NEW_LINE INDENT return configs [ 0 ] NEW_LINE DEDENT if len ( configs ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( configs ) == 1 : NEW_LINE INDENT return configs [ 0 ] NEW_LINE DEDENT DEDENT
lookup ( self , keyColumn , value ) : NEW_LINE INDENT keyColumn = keyColumn . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE keyColumn = keyColumn . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE return keyColumn , value NEW_LINE DEDENT
check_partition_map ( self ) : NEW_LINE INDENT if self . partition_map is not None : NEW_LINE INDENT self . partition_map = self . partition_map . copy ( ) NEW_LINE DEDENT DEDENT
readerLineLength ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return len ( readerLine ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return len ( readerLine ) NEW_LINE DEDENT DEDENT
reset_usage_timer ( self ) : NEW_LINE INDENT if self . _usage_timer is None : NEW_LINE INDENT self . _usage_timer = UsageTimer ( ) NEW_LINE DEDENT self . _usage_timer . reset ( ) NEW_LINE DEDENT

disable_control_hub ( self ) : NEW_LINE INDENT self . disable_control_hub ( ) NEW_LINE self . disable_control_hub ( ) NEW_LINE DEDENT
normalize_hub_url ( self ) : NEW_LINE INDENT return self . _normalize_hub_url ( self . _normalize_hub_url ( ) ) NEW_LINE DEDENT
def def get_authentication_token ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_authentication_token ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_token ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT token = self . get_token ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT if token : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
update_properties ( self ) : NEW_LINE INDENT self . properties = { } NEW_LINE self . properties . update ( ) NEW_LINE return self NEW_LINE DEDENT
static Schema getSchema ( String field ) { if ( field == null ) { return null ; } if ( field . length ( ) == 0 ) { return null ; } if ( field . length ( ) == 1 ) { return getSchema ( field ) ; } if ( field . length ( ) == 2 ) { return getSchema ( field ) ; } return getSchema ( field ) ; }

resolve_decimal_type ( self , decimal_type ) : NEW_LINE INDENT if decimal_type is not None : NEW_LINE INDENT return self . resolve_decimal_type ( decimal_type ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . resolve_decimal_type ( decimal_type ) NEW_LINE DEDENT DEDENT
get_default_value ( self , field ) : NEW_LINE INDENT if not self . _default_value : NEW_LINE INDENT self . _default_value = None NEW_LINE DEDENT return self . _default_value NEW_LINE DEDENT
createGauge ( gauge ) : NEW_LINE INDENT if gauge is not None : NEW_LINE INDENT return gauge NEW_LINE DEDENT else : NEW_LINE INDENT return gauge NEW_LINE DEDENT DEDENT
public public static NoSuchFileException getNoSuchFileException ( Throwable cause ) { return new NoSuchFileException ( " NoSuchFileException " ) ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
escape ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
is_escaped ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static boolean isRegex ( String s ) { if ( s == null ) { return false ; } if ( s . length ( ) == 0 ) { return false ; } return true ; }
count_open_ parentheses ( self ) : NEW_LINE INDENT return len ( self . open_ parentheses ) NEW_LINE DEDENT

static String replace ( String pattern , String replacement ) { if ( pattern == null || pattern . length ( ) == 0 ) { return replacement ; } if ( pattern . endsWith ( " / " ) ) { return replacement ; } if ( pattern . endsWith ( " / " ) ) { return replacement ; } return replacement ; }
get ( self , resource ) : NEW_LINE INDENT request = self . _get ( resource ) NEW_LINE if request is not None : NEW_LINE INDENT return request NEW_LINE DEDENT return None NEW_LINE DEDENT
is_last_update ( self , table ) : NEW_LINE INDENT if not self . is_last_update ( table ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def def def def is_expired ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def expired__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def expire__python____python____python____python____python____python__ def def def def def expire__python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def get_
truncate ( self , offset ) : NEW_LINE INDENT if offset < 0 : NEW_LINE INDENT raise ValueError ( " offset cannot be negative . " ) NEW_LINE DEDENT if offset > 0 : NEW_LINE INDENT raise ValueError ( " offset cannot be negative . " ) NEW_LINE DEDENT return self . _truncate ( offset ) NEW_LINE DEDENT
truncate_mode ( self , truncate_mode ) : NEW_LINE INDENT if truncate_mode : NEW_LINE INDENT return True NEW_LINE DEDENT elif truncate_mode : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def detach_stage ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _api . detach_stage ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def handle def handle ( self ) : NEW_LINE INDENT if ( ! Strings . isNullOrEmpty ( self . header ) : NEW_LINE INDENT raise ValueError ( " This is not a valid header value . " " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " This is not supported . " ) ; } }


static List <PrimaryKeyColumn > getPrimaryKeyColumns ( ) { List <PrimaryKeyColumn > primaryKeyColumns = new ArrayList <PrimaryKeyColumn > ( ) ; primaryKeyColumns . add ( newPrimaryKeyColumn ( ) ) ; primaryKeyColumns . add ( newPrimaryKeyColumn ( ) ) ; return primaryKeyColumns ; }
updateColumnsToParameters ( self , columnsToFields , columnsToParameters ) : NEW_LINE INDENT self . columnsToFields = columnsToFields NEW_LINE self . columnsToParameters = columnsToParameters NEW_LINE DEDENT
def _get_string_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' _ ' , ' _ ' ) NEW_LINE if name . startswith ( ' _ ' _ ' ) : NEW_LINE INDENT return name NEW_LINE DEDENT else : NEW_LINE INDENT return name NEW_LINE DEDENT DEDENT
write ( self , writer ) : NEW_LINE INDENT self . writer . write ( writer ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . close ( ) NEW_LINE DEDENT
set_primary_key_value ( self , key , value ) : NEW_LINE INDENT self . _primary_key_value = key NEW_LINE self . _primary_key_value = value NEW_LINE DEDENT
format_error ( self , error ) : NEW_LINE INDENT if isinstance ( error , ValidationError ) : NEW_LINE INDENT return self . format_error ( error ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . format_error ( error ) NEW_LINE DEDENT DEDENT
void processPushSource ( PushSource source ) { if ( source == null ) { throw new IllegalArgumentException ( " Source is null . " ) ; } if ( source instanceof PushSource ) { PushSource pushSource = ( PushSource ) source ; } else { throw new IllegalArgumentException ( " Source is not a PushSource . " ) ; } }
push_origin ( self , origin ) : NEW_LINE INDENT return self . _push_origin ( origin ) NEW_LINE DEDENT
finish ( self ) : NEW_LINE INDENT if self . origin : NEW_LINE INDENT self . origin . finish ( ) NEW_LINE DEDENT DEDENT
flatten ( self , record ) : NEW_LINE INDENT if len ( record ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( record ) == 1 : NEW_LINE INDENT return record [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return record NEW_LINE DEDENT DEDENT
def def def def def def def def create ( self ) : NEW def create ( self ) : NEW def create ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
execute_action ( self , record ) : NEW_LINE INDENT action = self . _get_action ( record ) NEW_LINE if action : NEW_LINE INDENT return action NEW_LINE DEDENT else : NEW_LINE INDENT return self . _execute_action ( record ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
validate_offset_names ( self , offset_names ) : NEW_LINE INDENT if offset_names is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def get_definitions ( ) : NEW_LINE INDENT def get_definitions ( ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT def get_definitions ( ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT def get_definitions ( ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_empty_string ( self , arg ) : NEW_LINE INDENT if isinstance ( arg , basestring ) : NEW_LINE INDENT return arg NEW_LINE DEDENT elif isinstance ( arg , basestring ) : NEW_LINE INDENT return str ( arg ) NEW_LINE DEDENT elif isinstance ( arg , RecordEL ) : NEW_LINE INDENT return str ( arg ) NEW_LINE DEDENT elif isinstance ( arg , basestring ) : NEW_LINE INDENT return str ( arg ) NEW_LINE DEDENT else : NEW_LINE INDENT return str ( arg ) NEW_LINE DEDENT DEDENT
get_operation_code ( self , operation_code ) : NEW_LINE INDENT if operation_code . isdigit ( ) : NEW_LINE INDENT return int ( operation_code ) NEW_LINE DEDENT elif operation_code . isdigit ( ) : NEW_LINE INDENT return int ( operation_code ) NEW_LINE DEDENT elif operation_code . isdigit ( ) : NEW_LINE INDENT return int ( operation_code ) NEW_LINE DEDENT DEDENT
static byte [ ] convert ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return new byte [ 0 ] ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } return bytes [ 2 ] ; }
def def get_dir ( self ) : NEW_LINE INDENT for i in range ( 0 , len ( self . files ) ) : NEW_LINE INDENT for f in self . files : NEW_LINE INDENT if os . path . exists ( f ) : NEW_LINE INDENT if os . path . isdir ( f ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT return f NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def def scans ( self , directory ) : NEW_LINE INDENT if not os . path . exists ( directory ) : NEW_LINE INDENT return NEW_LINE DEDENT if not os . path . exists ( directory ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( directory ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( directory ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
is_whitelisted ( self , dependency ) : NEW_LINE INDENT if not self . is_whitelisted ( dependency ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
compare_expected_versions ( self , expected_versions ) : NEW_LINE INDENT assert isinstance ( expected_versions , list ) NEW_LINE assert isinstance ( expected_versions , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE assert isinstance ( expected_versions [ 0 ] , list ) NEW_LINE DEDENT
start_spark_job ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _spark_job = self . _spark_job NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE self . _spark_job . start ( ) NEW_LINE return self . _spark_job
static ConfigDef getRUNTIME ( ) { ConfigDef config = new ConfigDef ( ) ; return new ConfigDef ( config ) ; }
validate_description ( self , description ) : NEW_LINE INDENT if not description : NEW_LINE INDENT return NEW_LINE DEDENT description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE description = description . strip ( ) NEW_LINE return NEW_LINE DEDENT
JdbcTarget JdbcTarget ( JdbcTarget jdbcTarget ) { if ( jdbcTarget == null ) { throw new IllegalArgumentException ( " JdbcTarget cannot be null " ) ; } return jdbcTarget ; }
JdbcTeeProcessor createTeeProcessor ( JdbcTeeProcessor teeProcessor ) { JdbcTeeProcessor teeProcessor = new JdbcTeeProcessor ( teeProcessor ) ; return teeProcessor ; }
remove_implicit_field_mapping ( self , field_mapping ) : NEW_LINE INDENT if field_mapping is None : NEW_LINE INDENT return NEW_LINE DEDENT field_mapping = field_mapping . copy ( ) NEW_LINE field_mapping . clear ( ) NEW_LINE field_mapping . add ( field_mapping ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Optional < String > getOptional ( String payload ) { if ( payload == null ) { return Optional . empty ( ) ; } return Optional . ofNullable ( payload ) ; }
static SDC add ( SDC sdc ) { if ( sdc == null ) { throw new IllegalArgumentException ( " SDC is null " ) ; } if ( sdc instanceof SDC ) { return ( SDC ) sdc ; } return null ; }
def def set_lookup_reuslt ( self , lookup_reuslt ) : NEW_LINE INDENT if lookup_reuslt is not None : NEW_LINE INDENT reuslt = lookup_reuslt NEW_LINE DEDENT else : NEW_LINE INDENT reuslt = { } NEW_LINE DEDENT return reuslt NEW_LINE DEDENT
def get_remote_pipeline_info ( self ) : NEW_LINE INDENT return self . _get_remote_pipeline_info ( ) NEW_LINE DEDENT
def def def def def def def def def def def create___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def create___python____python____python____python____python____python____python____python____python____python__ def def def def def def create___python____python____python____python____python____python____python____python____python____python__ def def def def def def def create___python____python____python____python____python____python____python____python__ def def def def def create___python____python____python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python____python____python____python____python__ def def def def create___python____python____python____python____python____python____python____python____python____python____python____python____python__
backwardCompatibility ( self ) : NEW_LINE INDENT if self . runtime_stats is not None : NEW_LINE INDENT self . runtime_stats = self . runtime_stats NEW_LINE DEDENT return self NEW_LINE DEDENT
def def def def def def _extract__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
generate_header_attributes ( self ) : NEW_LINE INDENT if self . header_attributes is None : NEW_LINE INDENT self . header_attributes = [ ] NEW_LINE DEDENT return self . header_attributes NEW_LINE DEDENT
validate_record ( self , record ) : NEW_LINE INDENT if isinstance ( record , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( record , tuple ) : NEW_LINE INDENT return NEW_
delete_temp_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . parquet_file . delete ( ) NEW_LINE self . parquet_file . delete ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def get_input_stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . input_stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . input_stream NEW_LINE DEDENT DEDENT
get_file_reader ( self ) : NEW_LINE INDENT if self . _file_reader is None : NEW_LINE INDENT return self . _file_reader NEW_LINE DEDENT return self . _file_reader NEW_LINE DEDENT
convert_record_to_parquet ( self , record ) : NEW_LINE INDENT if isinstance ( record , AvroRecord ) : NEW_LINE INDENT return record NEW_LINE DEDENT else : NEW_LINE INDENT return record NEW_LINE DEDENT DEDENT
static void validate ( String encryption_input ) { if ( encryption_input == null ) { return ; } if ( encryption_input . length ( ) == 0 ) { return ; } if ( encryption_input . length ( ) == 0 ) { return ; } if ( encryption_input . length ( ) == 0 ) { return ; } if ( encryption_input . length ( ) == 1 ) { return ; } if ( encryption_input . length ( ) == 1 ) { return ; } if ( encryption_input . length ( ) == 2 ) { return ; } if ( encryption_input . length ( ) == 1 ) { return ; } if ( encryption_input . length ( ) == 2 ) { return ; } if ( encryption_input . length ( ) == 1 ) { return ; } if ( encryption_input . length ( ) == 2 ) { return ; } if ( encryption_input . length ( ) == 3 ) { return
static StageException create ( String encryption_input ) throws StageException { if ( encryption_input == null ) { throw new StageException ( " Encryption input is null . " ) ; } if ( encryption_input . length ( ) == 0 ) { throw new StageException ( " Encryption input is empty . " ) ; } return new StageException ( encryption_input ) ; }
decrypt ( self , decryption_input ) : NEW_LINE INDENT if decryption_input is None : NEW_LINE INDENT return None NEW_LINE DEDENT if decryption_input is not None : NEW_LINE INDENT return decryption_input NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
decrypt ( self , decryption_input ) : NEW_LINE INDENT if decryption_input is not None : NEW_LINE INDENT return self . decrypt ( decryption_input ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . decrypt ( decryption_input ) NEW_LINE DEDENT DEDENT
static void setEncryptionData ( String encryptionData ) { if ( encryptionData == null ) { throw new IllegalArgumentException ( " encryptionData is null " ) ; } if ( encryptionData . length ( ) == 0 ) { throw new IllegalArgumentException ( " encryptionData is empty " ) ; } if ( encryptionData . length ( ) == 0 ) { throw new IllegalArgumentException ( " encryptionData is empty " ) ; } }
Matcher getMatcher ( String pattern ) { Matcher matcher = new Matcher ( pattern ) ; if ( matcher . matches ( ) ) { return matcher ; } return null ; }
append ( self , step ) : NEW_LINE INDENT self . append_step ( step ) NEW_LINE self . append_step ( step ) NEW_LINE DEDENT
public public public static Matcher < ? extends Matcher < String > matcher . Matcher < String > matcher ( String input ) { Matcher < String > matcher = Pattern . compile ( input ) ; matcher . reset ( ) ; matcher . reset ( ) ; return matcher ; }
replace ( self , pattern , replacement ) : NEW_LINE INDENT if isinstance ( pattern , str ) : NEW_LINE INDENT return self . replace ( pattern , replacement ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . replace ( pattern , replacement ) NEW_LINE DEDENT DEDENT
upgrade ( self ) : NEW_LINE INDENT if self . data parser library is not None : NEW_LINE INDENT return self . data parser library . upgrade ( self ) NEW_LINE DEDENT return self NEW_LINE DEDENT
get_global_variable_value ( self ) : NEW_LINE INDENT if self . _global_variable_value is not None : NEW_LINE INDENT return self . _global_variable_value NEW_LINE DEDENT return self . _global_variable_value NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def stop ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . event . stop ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . event . stop ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void setNumericType ( String type , String value ) { if ( type == null ) { throw new IllegalArgumentException ( ) ; } if ( value == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
add_partition_to_table ( self , table ) : NEW_LINE INDENT partition = self . _partition_to_table ( table ) NEW_LINE if partition is not None : NEW_LINE INDENT self . _partition_to_table ( partition ) NEW_LINE DEDENT DEDENT
alter_table_properties ( self , table_properties ) : NEW_LINE INDENT if table_properties is None : NEW_LINE INDENT return NEW_LINE DEDENT set_table_properties ( table_properties ) NEW_LINE set_table_properties ( table_properties ) NEW_LINE DEDENT
get_location ( self , database ) : NEW_LINE INDENT location = self . _get_location ( database ) NEW_LINE if location is None : NEW_LINE INDENT location = self . _get_location ( database ) NEW_LINE DEDENT return location NEW_LINE DEDENT
execute_query ( self , query ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute_query ( query ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute ( self , query ) : NEW_LINE INDENT result = self . _execute ( query ) NEW_LINE return result NEW_LINE DEDENT
batch with given consumer for each pipe .
rethrow ( self , pipe ) : NEW_LINE INDENT try : NEW_LINE INDENT return pipe . rethrow ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
is_stopped ( self ) : NEW_LINE INDENT return self . _is_stopped ( ) NEW_LINE DEDENT
void accept ( Consumer < ? , ? > consumer ) { if ( consumer != null ) { consumer . accept ( consumer ) ; } else { consumer . accept ( consumer ) ; } }

convert_sdc_field_to_object ( self , sdc_field ) : NEW_LINE INDENT if sdc_field : NEW_LINE INDENT return sdc_field NEW_LINE DEDENT else : NEW_LINE INDENT return sdc_field NEW_LINE DEDENT DEDENT
def def write_sub_document_lookup_values ( self , record ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _sub_document_lookup_values ( record ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
write ( self , record ) : NEW_LINE INDENT if isinstance ( record , dict ) : NEW_LINE INDENT return self . write ( record ) NEW_LINE DEDENT elif isinstance ( record , dict ) : NEW_LINE INDENT return self . write ( record ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . write ( record ) NEW_LINE DEDENT DEDENT
write_result_rows ( self ) : NEW_LINE INDENT result_rows = [ ] NEW_LINE for row in self . result_rows : NEW_LINE INDENT result_rows . append ( row ) NEW_LINE DEDENT return result_rows NEW_LINE DEDENT
def def get_metadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _metadata NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _metadata NEW_LINE DEDENT DEDENT
check_gtid_seqNo_pair ( self , gtid , seqNo ) : NEW_LINE INDENT if not self . _gtid_seqNo_pair ( gtid , seqNo ) : NEW_LINE INDENT return False NEW_LINE DEDENT elif self . _gtid_seqNo_pair ( gtid , seqNo ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
wrap ( self , wrapped ) : NEW_LINE INDENT if not wrapped : NEW_LINE INDENT return self NEW_LINE DEDENT return wrapped NEW_LINE DEDENT
setter_methods ( self ) : NEW_LINE INDENT if self . setter_methods : NEW_LINE INDENT return self . setter_methods NEW_LINE DEDENT else : NEW_LINE INDENT return self . setter_methods NEW_LINE DEDENT DEDENT

load ( self ) : NEW_LINE INDENT if self . stages is None : NEW_LINE INDENT self . stages = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . stages = self . stages . copy ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
static void replace_internal_SDC_directories ( final SDC_DIR ) { if ( SDC_DIR == null ) { return ; } final SDC_DIR = new SDC_DIR ( SDC_DIR ) ; final SDC_DIR = new SDC_DIR ( SDC_DIR ) ; final SDC_DIR . mkdirs ( SDC_DIR ) ; final SDC_DIR . mkdirs ( SDC_DIR ) ; final SDC_DIR . mkdirs ( SDC_DIR ) ; }
void run ( ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . getAbsolutePath ( ) ) ; } if ( ! file . isDirectory ( ) ) { throw new IOException ( file . getAbsolutePath ( ) ) ; } }
def start ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . driver . start ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT self . driver . stop ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
get_directory_path ( self , record , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_directory_path ( record , date ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_into_file ( self ) : NEW_LINE INDENT self . write_into_file ( ) NEW_LINE DEDENT
write ( self , record ) : NEW_LINE INDENT if isinstance ( record , Record ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( record , Record ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
boolean matches ( String pattern ) { if ( pattern == null ) { return false ; } if ( pattern . length ( ) == 0 ) { return true ; } if ( pattern . length ( ) == 1 ) { return true ; } return false ; }
get_offsets ( self ) : NEW_LINE INDENT offsets = self . _get_offsets ( ) NEW_LINE if offsets is not None : NEW_LINE INDENT return offsets NEW_LINE DEDENT return offsets NEW_LINE DEDENT
timeout ( self , timeout ) : NEW_LINE INDENT if timeout is None : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 0 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 1 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 1 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 1 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 1 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout > 1 : NEW_LINE INDENT return timeout NEW_LINE DEDENT if timeout < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if timeout > 1 : NEW_
_get_offset_lag ( self ) : NEW_LINE INDENT return self . _offset_lag . get ( ) NEW_LINE DEDENT
initialize ( self , delegate ) : NEW_LINE INDENT self . _delegate = delegate NEW_LINE self . _delegate . initialize ( ) NEW_LINE DEDENT

def def createDelegator ( self , delegator ) : NEW_LINE INDENT delegator = self . delegator NEW_LINE if delegator is None : NEW_LINE INDENT return delegator NEW_LINE DEDENT else : NEW_LINE INDENT return delegator NEW_LINE DEDENT DEDENT
get_metric_value ( self , rule ) : NEW_LINE INDENT metric_value = self . _metric_value NEW_LINE if metric_value is None : NEW_LINE INDENT metric_value = self . _metric_value NEW_LINE DEDENT return metric_value NEW_LINE DEDENT
byte [ ] getHeader ( ) { if ( header == null ) { header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ; header [ 0 ] = new byte [ 0 ] ;
body_length ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . body . length NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _save ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _save ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
static SSLSocketFactory createSSLSocketFactory ( SSLContext sslContext ) { if ( sslContext == null ) { sslContext = sslContext . getSocketFactory ( ) ; } if ( sslContext . getSocketFactory ( ) == null ) { sslContext = sslContext . getSocketFactory ( ) ; } return sslContext ; }
get_mime_type ( filename ) : NEW_LINE INDENT mime_type = mimetypes . guess_type ( filename ) NEW_LINE if mime_type is None : NEW_LINE INDENT mime_type = mimetypes . guess_type ( filename ) NEW_LINE DEDENT return mime_type NEW_LINE DEDENT
static void handleRequest ( Handler handler ) { if ( handler != null ) { handler . handleRequest ( ) ; } else { handler . handleRequest ( ) ; } }
stop_server ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . stop ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def default_routings ( self ) : NEW_LINE INDENT return self . _default_routings . copy ( ) NEW_LINE DEDENT
send_response ( self , response ) : NEW_LINE INDENT try : NEW_LINE INDENT self . socket . sendall ( response ) NEW_LINE DEDENT except socket . error : NEW_LINE INDENT self . socket . sendall ( response ) NEW_LINE DEDENT DEDENT
send ( self , body ) : NEW_LINE INDENT if len ( body ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( body ) == 6 : NEW_LINE INDENT return NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
gzip ( self ) : NEW_LINE INDENT if self . _gzip : NEW_LINE INDENT return self . _gzip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _gzip ( ) NEW_LINE DEDENT DEDENT
def set_cookie ( self , cookie ) : NEW_LINE INDENT self . _cookie = cookie NEW_LINE self . _cookie . set_cookie ( cookie ) NEW_LINE DEDENT
add_cookies ( self , cookies ) : NEW_LINE INDENT self . cookies . add ( cookies ) NEW_LINE DEDENT
decode ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , unicode ) : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
static byte [ ] encode ( byte [ ] value ) { if ( value == null ) { return null ; } if ( value . length == 0 ) { return null ; } if ( value . length == 1 ) { return value [ 0 ] ; } return value ; }
def def get_database_table_name ( self ) : NEW_LINE INDENT return self . _get_table_name ( ) NEW_LINE DEDENT
String name ( Principal principal ) { String name = null ; if ( principal != null ) { name = principal . getName ( ) ; } if ( name != null ) { name = name . trim ( ) ; } return name ; }
public void register ( final SpringSessionRepositoryFilter springSessionRepositoryFilter , final SpringSessionRepositoryFilter springSessionRepositoryFilter ) { this . springSessionRepositoryFilter = springSessionRepositoryFilter ; }

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static String [ ] getClassNames ( Method method ) { if ( method . getParameterTypes ( ) . length == 0 ) { return new String [ 0 ] ; } else { return method . getParameterTypes ( ) ; } }
public public void addTransaction ( final Transaction transaction ) { if ( transaction != null ) { throw new IllegalArgumentException ( ) ; } if ( transaction == null ) { throw new IllegalArgumentException ( ) ; } }

get_transaction ( self , request ) : NEW_LINE INDENT transaction = self . _get_transaction ( request ) NEW_LINE if transaction is None : NEW_LINE INDENT return None NEW_LINE DEDENT return transaction NEW_LINE DEDENT

display_second_level_cache_entries ( self ) : NEW_LINE INDENT if self . cache_entries is None : NEW_LINE INDENT self . cache_entries = [ ] NEW_LINE DEDENT if self . cache_entries is not None : NEW_LINE INDENT self . cache_entries = self . cache_entries NEW_LINE DEDENT DEDENT
def def get_service_name ( self ) : NEW_LINE INDENT return self . _service_name NEW_LINE DEDENT
static int getReadLockCount ( ) { if ( readLockCount == 0 ) { readLockCount = 1 ; } return readLockCount ; }
static int readLockCount ( ) { if ( readLockCount == 0 ) { readLockCount = 1 ; } return readLockCount ; }
def add_service ( module ) : NEW_LINE INDENT def add_service ( module ) : NEW_LINE INDENT module . add_bean_deployment_archive ( ) NEW_LINE DEDENT def add_service ( module ) : NEW_LINE INDENT module . add_deployment_archive ( ) NEW_LINE DEDENT DEDENT
restore_timer ( self , timer ) : NEW_LINE INDENT if self . _timer is not None : NEW_LINE INDENT self . _timer . cancel ( ) NEW_LINE self . _timer = None NEW_LINE DEDENT if self . _timer is not None : NEW_LINE INDENT self . _timer . start ( ) NEW_LINE DEDENT DEDENT
def def auto def set_auto ( self , value ) : NEW_LINE INDENT if ( value is not None ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
public
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def config ( self ) : NEW_LINE INDENT config = self . config NEW_LINE config = self . config NEW_LINE self . config = { } NEW_LINE return config NEW_LINE DEDENT
def def def security_meta_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . security_meta_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . security_meta_data NEW_LINE DEDENT DEDENT
url_pattern_mappings ( self ) : NEW_LINE INDENT url_pattern_mappings = { } NEW_LINE url_pattern_mappings . update ( self . url_pattern_mappings ) NEW_LINE return url_pattern_mappings NEW_LINE DEDENT
static String getServletName ( String name ) { if ( name == null ) { return null ; } if ( name . equals ( " " ) ) { return null ; } return name ; }
void inject ( final EJB injection ) { if ( injection == null ) { throw new IllegalArgumentException ( " EJB injection is null " ) ; } if ( injection . isResolved ( ) ) { throw new IllegalArgumentException ( " EJB injection is not resolved " ) ; } if ( injection . isResolved ( ) ) { throw new IllegalArgumentException ( " EJB injection is resolved " ) ; } }
def set_capabilities ( self , capabilities , requirements ) : NEW_LINE INDENT self . _capabilities = capabilities NEW_LINE self . _requirements = requirements NEW_LINE DEDENT
def def def _handle__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def _handle__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
process_id_child ( self ) : NEW_LINE INDENT if self . process_id : NEW_LINE INDENT return self . process_id NEW_LINE DEDENT return None NEW_LINE DEDENT
get_address ( self , operation ) : NEW_LINE INDENT if isinstance ( operation , str ) : NEW_LINE INDENT return operation NEW_LINE DEDENT if isinstance ( operation , str ) : NEW_LINE INDENT return operation NEW_LINE DEDENT else : NEW_LINE INDENT return operation NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_attribute_value ( self , operation ) : NEW_LINE INDENT return self . _get_attribute_value ( operation ) NEW_LINE DEDENT
def def def _get_default ( self ) : NEW def def def def def def def default_ def def def def default_ def def def def def def _ def default ( self ) : def default ( self ) : def default ( self ) : def default ( self ) : NEW def default ( self ) : NEW_LINE INDENT return self . _get_default ( ) NEW_LINE DEDENT def default ( self ) : NEW_LINE INDENT return self . _get_default ( ) NEW_LINE DEDENT
createCompositeOperation ( self , operation ) : NEW_LINE INDENT self . operation = operation NEW_LINE if self . operation . isComposite ( ) : NEW_LINE INDENT return self . operation NEW_LINE DEDENT DEDENT
add ( self , address , parameters ) : NEW_LINE INDENT if not self . address : NEW_LINE INDENT self . address = address NEW_LINE DEDENT else : NEW_LINE INDENT self . address = self . address NEW_LINE DEDENT self . parameters = parameters NEW_LINE return self NEW_LINE DEDENT
add ( self , address , index ) : NEW_LINE INDENT self . _add ( address , index ) NEW_LINE self . _add ( address , index ) NEW_LINE DEDENT
read_attribute_operation ( self , address , name ) : NEW_LINE INDENT if self . address is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . name is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . address is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . name is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . name is not None : NEW_LINE INDENT return self . name NEW_LINE DEDENT if self . address is not None : NEW_LINE INDENT return self . address NEW_LINE DEDENT if self . name is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . name NEW_LINE DEDENT
write_attribute_operation ( self , address , value ) : NEW_LINE INDENT self . _write_attribute ( address , value ) NEW_LINE self . _write_attribute ( address , value ) NEW_LINE DEDENT
undefine_attribute ( self , address , name ) : NEW_LINE INDENT self . undefine_attribute ( address , name ) NEW_LINE self . undefine_attribute ( address , name ) NEW_LINE DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void removeFactory ( ObjectFactory factory ) { if ( factory == null ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) != ObjectFactory . class ) { return ; } if ( factory . getClass ( ) . getSuperclass ( ) != ObjectFactory . class ) { return ; }



def def def context_root def context_root ( self ) : NEW_LINE INDENT return self . context_root NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_run_as_identity ( self , run_as_identity ) : NEW_LINE INDENT self . run_as_identity = run_as_identity NEW_LINE DEDENT
remove_run ( self , run ) : NEW_LINE INDENT if isinstance ( run , str ) : NEW_LINE INDENT return run NEW_LINE DEDENT elif isinstance ( run , str ) : NEW_LINE INDENT return run NEW_LINE DEDENT else : NEW_LINE INDENT return run NEW_LINE DEDENT DEDENT
static UndertowDeploymentService getUndertowDeploymentService ( ) { return UndertowDeploymentService . getUndertowDeploymentService ( ) ; }

type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
find_method ( self , method_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_method ( method_name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
find_field ( self , field_name ) : NEW_LINE INDENT field_name = field_name . strip ( ) NEW_LINE if not field_name : NEW_LINE INDENT return None NEW_LINE DEDENT return field_name NEW_LINE DEDENT

get_debug_info ( self ) : NEW_LINE INDENT if self . debug_info is None : NEW_LINE INDENT self . debug_info = { } NEW_LINE DEDENT return self . debug_info NEW_LINE DEDENT
static JDR report ( Application server ) { if ( server == null ) { throw new IllegalArgumentException ( " Application server is null " ) ; } JDR report = new JDR ( ) ; report . setServer ( server ) ; report . setServer ( server ) ; return report ; }

register_resource_adapter_deployment ( self ) : NEW_LINE INDENT self . resource_adapter_deployment = { } NEW_LINE self . resource_adapter_deployment . put ( self . resource_adapter_deployment , self ) NEW_LINE DEDENT
unregister_resource_adapter ( self , resource_adapter ) : NEW_LINE INDENT if resource_adapter is not None : NEW_LINE INDENT resource_adapter . unregister ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def m def def def M def def def _ public static void marshall ( final public static void marshall ( ) throws IOException e public static void marshall ( ) throws IOException { if ( ! methodParameters . isEmpty def def def def _ def def def def _ def def def _ def def def def _ public static public static void marshall ( final public static final public static void marshall ( final public static
def def unm def def def Un def def def Un def def def Un def def def Un def def def Un def def def Un def def def Un def _ public static public static void handle def _handle def _handle def _handle def _handle def _handle def _handle def _handle def _get_un def _get_un def _get_un def _get_unarsharsharsharsharsharsharsharshals ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT try : NEW_LINE INDENT return Unmarsharsharsharsharshals . Unmarshals .
_get_lock_owner ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . lock_owner NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . lock_owner NEW_LINE DEDENT DEDENT
void release ( ) { synchronized ( this ) { if ( this . lock != null ) { this . lock . release ( ) ; } this . lock = null ; } }
def def add ( self , logName ) : NEW_LINE INDENT logName = os . path . basename ( logName ) NEW_LINE if os . path . isfile ( logName ) : NEW_LINE INDENT logName = os . path . basename ( logName ) NEW_LINE logName = os . path . splitext ( logName ) [ 0 ] NEW_LINE logName = os . path . basename ( logName ) NEW_LINE logName = os . path . splitext ( logName ) [ 0 ] NEW_LINE logName = os . path . basename ( logName ) NEW_LINE logName = os . path . splitext ( logName ) [ 0 ] NEW_LINE logName = os . path . basename ( logName ) NEW_LINE logName = os . path . splitext ( logName ) [ 0 ] NEW_LINE DEDENT return logName NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def public public public public public public public public public
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def invoke_ws_endpoint ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _client . invoke_ws_endpoint ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _client . invoke_ws_endpoint ( ) NEW_LINE DEDENT DEDENT

compare ( self , other ) : NEW_LINE INDENT if not self . equals ( other ) : NEW_LINE INDENT return False NEW_LINE DEDENT return self . equals ( other ) NEW_LINE DEDENT
create_management_statistics_resource ( self ) : NEW_LINE INDENT if self . management_statistics_resource is None : NEW_LINE INDENT self . management_statistics_resource = self . management_statistics_resource NEW_LINE DEDENT return self . management_statistics_resource NEW_LINE DEDENT
get_ejb_security_meta_data ( self ) : NEW_LINE INDENT if self . _ejb_security_meta_data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _ejb_security_meta_data NEW_LINE DEDENT
security_domain ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . security_domain NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def validate_domains ( self , domains ) : NEW_LINE INDENT if len ( domains ) == 1 : NEW_LINE INDENT return domains [ 0 ] NEW_LINE DEDENT elif len ( domains ) == 1 : NEW_LINE INDENT return domains [ 0 ] NEW_LINE DEDENT return domains [ 0 ] NEW_LINE DEDENT
def def set_unqualified_name ( self , name ) : NEW_LINE INDENT self . _unqualified_name = name NEW_LINE self . _unqualified_name = name NEW_LINE DEDENT
def def def def def _get_ JNDI def _get_absolute_absolute_name ( self ) : NEW_LINE def _get_absolute_name ( self ) : NEW_LINE INDENT return self . _get_absolute_absolute_name ( ) NEW_LINE def _get_absolute_name ( self ) : NEW_LINE INDENT return self . _get_absolute_name ( ) NEW_LINE DEDENT def _get_absolute_name ( self ) : NEW_LINE INDENT return self . _get_absolute_name ( ) NEW_LINE DEDENT return self . _get_absolute_name ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
deploy ( self ) : NEW_LINE INDENT return self . _deploy ( ) NEW_LINE DEDENT
decrement_counter ( self ) : NEW_LINE INDENT if self . counter is not None : NEW_LINE INDENT return self . counter . decrement ( ) NEW_LINE DEDENT return self . counter . decrement ( ) NEW_LINE DEDENT
check_active_transaction ( self ) : NEW_LINE INDENT if self . active_transaction is None : NEW_LINE INDENT self . active_transaction = True NEW_LINE DEDENT return self . active_transaction NEW_LINE DEDENT
def def _getTransactionSynchronizationRegistry ( ) { if ( transactionSynchronizationRegistry . get ( ) != null ) { return transactionSynchronizationRegistry . getTransactionSynchronizationRegistry ( ) . getTransactionSynchronizationRegistry ( ) . getTransactionSynchronizationRegistry ( ) . get ( ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static boolean isEmpty ( String name ) { if ( name == null || name . length ( ) == 0 ) { return false ; } if ( name . length ( ) == 0 ) { return false ; } return true ; }
def def create_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_name ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_name ( name ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _create_name ( ) NEW_LINE DEDENT DEDENT
def def naming_exception ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . naming_exception ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT return self . naming_exception ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _throw ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _throw ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def naming_enumeration ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return self . naming_enumeration ( collection ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . naming_enumeration ( collection ) NEW_LINE DEDENT DEDENT
name ( self , ctx ) : NEW_LINE INDENT try : NEW_LINE INDENT return ctx . name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_runtime_control_object ( self ) : NEW_LINE INDENT return self . _get_runtime_control ( ) NEW_LINE DEDENT


def def _get_integration_resource_loader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_integration_resource_loader ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _get_integration_resource_loader ( ) NEW_LINE DEDENT DEDENT
get_runtime_name ( self ) : NEW_LINE INDENT runtime_name = self . runtime . name NEW_LINE return runtime_name NEW_LINE DEDENT

singleton ( cls ) : NEW_LINE INDENT return cls ( ) NEW_LINE DEDENT
shutdown ( self ) : NEW_LINE INDENT if self . _shutdown : NEW_LINE INDENT return self . _shutdown ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _shutdown ( ) NEW_LINE DEDENT DEDENT

get_meta_data ( self ) : NEW_LINE INDENT if self . _meta_data is not None : NEW_LINE INDENT return self . _meta_data NEW_LINE DEDENT return self . _meta_data NEW_LINE DEDENT
get_servlet_mappings_meta_data ( self ) : NEW_LINE INDENT if self . _servlet_mappings_meta_data is not None : NEW_LINE INDENT return self . _servlet_mappings_meta_data NEW_LINE DEDENT else : NEW_LINE INDENT return self . _servlet_mappings_meta_data NEW_LINE DEDENT DEDENT


public static void addContextParameters ( ContextParameters metaData ) { if ( metaData == null ) { throw new IllegalArgumentException ( " No context parameters meta data found . " ) ; } else { throw new IllegalArgumentException ( " Missing context parameters meta data . " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
init_parameters_meta_data ( ) : NEW_LINE INDENT init_parameters_meta_data = { } NEW_LINE init_parameters_meta_data . update ( ) NEW_LINE init_parameters_meta_data . update ( ) NEW_LINE init_parameters_meta_data . update ( ) NEW_LINE return init_parameters_meta_data NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def create ( self ) : NEW def create ( self ) : NEW def create ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def
public public public static final void addServletMappings ( final Map < String , String > metaData ) { final Map < String , String > metaData = new HashMap < String , String > ( ) ; final Map < String , String > metaData = new HashMap < String , String > ( ) ; final Map < String , String > mappings = new HashMap < String , String > ( ) ; final Map < String , String > mappings = new HashMap < String , String > ( ) ; mappings . put ( metaData , metaData ) ; final Map < String , String > mappings = new HashMap < String , String > ( ) ; mappings . put ( metaData , metaData ) ; final Map < String , String > mappings = new HashMap < String , String > ( ) ; mappings . put ( metaData , mappings ) ; mappings . put ( metaData , mappings ) ;
def def def def def def create ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def def create_meta_data ( self ) : NEW_LINE INDENT meta_data = self . meta_data . copy ( ) NEW_LINE meta_data = self . meta_data . copy ( ) NEW_LINE meta_data . put ( ' parameters ' , meta_data ) NEW_LINE meta_data . put ( ' meta _ data ' , meta_data ) NEW_LINE return meta_data NEW_LINE DEDENT
createParameter ( self , key , value ) : NEW_LINE INDENT params = { } NEW_LINE params [ ' key ' ] = key NEW_LINE params [ ' value ' ] = value NEW_LINE return params NEW_LINE DEDENT

processInjectionTargets ( self ) : NEW_LINE INDENT if self . injectionTargets is None : NEW_LINE INDENT self . injectionTargets = [ ] NEW_LINE DEDENT if self . injectionTargets is not None : NEW_LINE INDENT self . injectionTargets . append ( self . injectionTargets ) NEW_LINE DEDENT DEDENT
shutdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . container . shutdown ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . container . shutdown ( ) NEW_LINE DEDENT DEDENT
public static String getJndiName ( String name ) throws NamingException { String rawName = JNDINAME_NAME . get ( name ) ; if ( rawName == null ) { return null ; } else { return rawName . trim ( ) ; } }
getResolvedAttribute ( self ) : NEW_LINE INDENT if self . resolved is None : NEW_LINE INDENT return None NEW_LINE DEDENT if self . resolved is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . resolved NEW_LINE DEDENT
url_pattern_type ( url_pattern_type ) : NEW_LINE INDENT if url_pattern_type is not None : NEW_LINE INDENT return url_pattern_type NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static ConnectionFactory getConnectionFactory ( ) { if ( connectionFactory == null ) { connectionFactory = new ConnectionFactory ( ) ; } return connectionFactory ; }
def targets ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return True NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
void setJMSConnectionFactory ( JMSConnectionFactory connectionFactory , String server ) { if ( server == null ) { throw new IllegalArgumentException ( " The JMS connection factory must specify a server name . " ) ; } if ( server == null ) { throw new IllegalArgumentException ( " The JMS connection factory must specify a server name . " ) ; } else { throw new IllegalArgumentException ( " The JMS connection factory must specify a server name . " ) ; } }
String getName ( ) { if ( persistenceUnitName == null ) { return " " ; } if ( persistenceUnitName . length ( ) == 0 ) { return " " ; } if ( persistenceUnitName . length ( ) == 0 ) { return " " ; } return persistenceUnitName ; }
void start ( BundleContext bundleContext ) throws Exception { super . start ( bundleContext ) ; if ( transactionListener != null ) { transactionListener . start ( ) ; } }
unregister ( self ) : NEW_LINE INDENT self . _unregisters ( ) NEW_LINE self . _unregisters ( ) NEW_LINE DEDENT
suspend ( self , server ) : NEW_LINE INDENT if not self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_active ( server ) : NEW_LINE INDENT return
void restart ( DeploymentController deploymentController ) { if ( deploymentController != null ) { deploymentController . restart ( ) ; } }
_notify_handler ( self , handler , invocation ) : NEW_LINE INDENT if not handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if handler . is_active ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
void addTransaction ( Transaction transaction ) { if ( transaction == null ) { throw new NullPointerException ( " transaction " ) ; } if ( transaction . getTransactionId ( ) == null ) { throw new NullPointerException ( " transaction " ) ; } if ( transaction . getTransactionId ( ) == null ) { throw new NullPointerException ( " transaction " ) ; } if ( transaction . getTransactionId ( ) == null ) { throw new NullPointerException ( " transaction " ) ; } if ( transaction . getTransactionId ( ) == null ) { throw new NullPointerException ( " transaction " ) ; } }
inject ( self , context ) : NEW_LINE INDENT if isinstance ( context , Context ) : NEW_LINE INDENT return context NEW_LINE DEDENT else : NEW_LINE INDENT return context NEW_LINE DEDENT DEDENT
unbind ( self , context ) : NEW_LINE INDENT if self . _context is not None : NEW_LINE INDENT self . _context . unbind ( context ) NEW_LINE DEDENT DEDENT
def def get_service_service_name ( ) : NEW_LINE INDENT return self . _get_service_name ( ) NEW_LINE DEDENT
create_resource_roots ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_top_deployment_classloaders ( self ) : NEW_LINE INDENT return self . _top_deployment_classloaders NEW_LINE DEDENT
_get_class_file_transformer ( self ) : NEW_LINE INDENT return self . _get_class_file_transformer ( ) NEW_LINE DEDENT
if two phase persistence unit start is allowed .
determine_default_data_source ( self ) : NEW_LINE INDENT if self . default_data_source : NEW_LINE INDENT return self . default_data_source NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
public public public public static boolean isCompatible ( ) { return true ; } public static boolean isCompatible ( ) { return true ; }

ORB create ( ) { ORB orb = null ; try { orb = ORB . create ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } if ( orb == null ) { throw new RuntimeException ( e ) ; } return orb ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
process_parameters ( self , parameters ) : NEW_LINE INDENT if len ( parameters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parameters ) == 2 : NEW_LINE INDENT return NEW_
def def def def get_parameter_data_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT data_type = self . _get_parameter_data_type ( ) NEW_LINE if data_type is not None : NEW_LINE INDENT return data_type NEW_LINE DEDENT def get_parameter_data_type ( self ) : NEW_LINE INDENT return self . _get_parameter_data_type ( ) NEW_LINE DEDENT return self . _get_parameter_data_type ( ) NEW_LINE DEDENT
extract_default_value_annotation ( self ) : NEW_LINE INDENT annotation = self . annotation NEW_LINE if annotation is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return annotation NEW_LINE DEDENT DEDENT
handle_default_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _handle_default_value ( value ) NEW_LINE DEDENT DEDENT
postconstructInterceptor ( interceptor ) : NEW_LINE INDENT if interceptor is None : NEW_LINE INDENT return NEW_LINE DEDENT interceptor = interceptor . clone ( ) NEW_LINE if interceptor is not None : NEW_LINE INDENT return interceptor NEW_LINE DEDENT return interceptor NEW_LINE DEDENT
static String convertTxStatus ( String txStatus ) { if ( txStatus == null ) { return null ; } if ( txStatus . length ( ) == 0 ) { return null ; } if ( txStatus . length ( ) == 1 ) { return txStatus ; } return txStatus ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_sql_dialects ( self ) : NEW_LINE INDENT sql_dialects = [ ] NEW_LINE for dialect in self . dialects : NEW_LINE INDENT sql_dialects . append ( dialect ) NEW_LINE DEDENT return sql_dialects NEW_LINE DEDENT
_get_dialect_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _dialect_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _dialect_name NEW_LINE DEDENT DEDENT
def check ( String name , String name ) : NEW_LINE INDENT if name == null : NEW_LINE INDENT return True NEW_LINE DEDENT if name == null : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
create_timer_table ( self ) : NEW_LINE INDENT if self . timer_table is not None : NEW_LINE INDENT self . timer_table = self . timer_table NEW_LINE DEDENT return self . timer_table NEW_LINE DEDENT
convert_date_string ( self , date_string ) : NEW_LINE INDENT if isinstance ( date_string , str ) : NEW_LINE INDENT return date_string NEW_LINE DEDENT elif isinstance ( date_string , str ) : NEW_LINE INDENT return date_string NEW_LINE DEDENT else : NEW_LINE INDENT return date_string NEW_LINE DEDENT DEDENT
def def _get_node_name ( self ) : NEW_LINE INDENT return self . _get_node_name ( ) NEW_LINE return self . _node_name ( ) NEW_LINE DEDENT
deploy ( self ) : NEW_LINE INDENT deployment = self . get_deployment ( ) NEW_LINE if deployment is not None : NEW_LINE INDENT return deployment NEW_LINE DEDENT deployment = self . get_deployment ( ) NEW_LINE if deployment is None : NEW_LINE INDENT deployment = self . get_deployment ( ) NEW_LINE DEDENT return deployment NEW_LINE DEDENT
def def _parse_method_parameters ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_method_parameters ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def output ( ) : NEW_LINE INDENT def output ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . output ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT

lazy_lookup ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _lazy_lookup NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
preCreateInterceptor ( self ) : NEW_LINE INDENT if not self . bean : NEW_LINE INDENT return NEW_LINE DEDENT self . bean = self . bean NEW_LINE DEDENT
createInterceptor ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
get_current_entity_manager ( self ) : NEW_LINE INDENT return self . _current_entity_manager NEW_LINE DEDENT
push_context_handle ( self , context_handle ) : NEW_LINE INDENT if isinstance ( context_handle , SFSBContextHandle ) : NEW_LINE INDENT return context_handle NEW_LINE DEDENT else : NEW_LINE INDENT return context_handle NEW_LINE DEDENT DEDENT
invoke ( self ) : NEW_LINE INDENT if self . invocation is not None : NEW_LINE INDENT return self . invocation . invoke ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_current_SFSB_Invocation ( self ) : NEW_LINE INDENT return self . _current_SFSB_Invocation NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_faces_config ( faces_config ) : NEW_LINE INDENT faces_config = faces_config . copy ( ) NEW_LINE faces_config = faces_config . copy ( ) NEW_LINE faces_config = faces_config . copy ( ) NEW_LINE faces_config = faces_config . copy ( ) NEW_LINE faces_config = faces_config . copy ( ) NEW_LINE faces_config = faces_config . copy ( ) NEW_LINE DEDENT
public static void inject ( final String beanName , final String beanName , final String beanName ) { if ( beanName == null ) { throw new IllegalArgumentException ( " beanName is null " ) ; } if ( beanName == null ) { throw new IllegalArgumentException ( " beanName is null " ) ; } else { throw new IllegalArgumentException ( " beanName is null " ) ; } }
def _get_type_name ( self ) : NEW_LINE INDENT return self . _get_type_name ( ) NEW_LINE DEDENT
public public static java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > > java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > > java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > > > > >

static boolean isReserved ( String argument ) { if ( argument == null ) { return false ; } if ( argument . length ( ) == 0 ) { return true ; } return false ; }
static String getSignature ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isPrimitive ( ) ) { return clazz . getName ( ) ; } if ( clazz . isArray ( ) ) { return clazz . getName ( ) ; } return clazz . getSimpleName ( ) ; }
static String getMethodSignature ( String methodName ) { if ( methodName == null ) return null ; if ( methodName . length ( ) == 0 ) return null ; if ( methodName . length ( ) == 0 ) return null ; if ( methodName . length ( ) == 1 ) return null ; if ( methodName . length ( ) == 2 ) return null ; if ( methodName . length ( ) == 3 ) return null ; if ( methodName . length ( ) == 4 ) return null ; if ( methodName . length ( ) == 2 ) return null ; if ( methodName . length ( ) == 3 ) return null ; if ( methodName . length ( ) == 1 ) return null ; if ( methodName . length ( ) == 2 ) return null ; if ( methodName . length ( ) == 3 ) return null ; if ( methodName . length ( ) == 1 ) return null ; if ( methodName . length ( ) == 2 ) return null ; if ( methodName . length ( ) == 3 ) return
def
get_permission ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _permissions [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _permissions [ name ] NEW_LINE DEDENT DEDENT
create ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transaction . begin ( ) NEW_LINE self . transaction . commit ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
public static Map < String , String > get ( String key , String value ) { if ( key == null || value == null || value . isEmpty ( ) ) { return null ; } if ( key == null || value . isEmpty ( ) ) { return null ; } Map < String , String > map = new HashMap < > ( ) ; map . put ( key , value ) ; return map ; }
convert_camel_case_to_camel_case ( camel_case ) : NEW_LINE INDENT if camel_case : NEW_LINE INDENT return camel_case NEW_LINE DEDENT return camel_case NEW_LINE DEDENT
get_last_version ( self ) : NEW_LINE INDENT return self . _get_last_version ( ) NEW_LINE DEDENT
get_timer_map ( self ) : NEW_LINE INDENT timer_map = self . _timer_map NEW_LINE if timer_map is not None : NEW_LINE INDENT return timer_map NEW_LINE DEDENT return timer_map NEW_LINE DEDENT
get_directory ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . join ( self . directory , self . name ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
addEventListener ( self , target , event ) : NEW_LINE INDENT self . _listeners . add ( target ) NEW_LINE self . _listeners . add ( event ) NEW_LINE DEDENT
void remove ( ) { if ( this . listener != null ) { this . listener . remove ( ) ; this . listener = null ; } }
def def createNamingEvent ( self , target , scope ) : NEW_LINE INDENT logger . debug ( " Creating naming event . . . . . . " ) NEW_LINE logger . debug ( " Creating naming event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW_LINE logger . debug ( " Creating event . . . . . " ) NEW
close_consumer ( consumer ) : NEW_LINE INDENT consumer . close ( ) NEW_LINE return consumer NEW_LINE DEDENT

def create_object_instance ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT DEDENT
def def setTransactionManagementInterceptor ( self ) : NEW_LINE INDENT self . transactionManagementInterceptor = self . transactionManagementInterceptor NEW_LINE self . transactionManagementInterceptor = self . transactionManagementInterceptor NEW_LINE DEDENT
substitute ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
def importXmlDataImporter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT connector = self . getConnector ( ) NEW_LINE connector . connect ( ) NEW_LINE DEDENT except : NEW_LINE INDENT connector . connect ( ) NEW_LINE DEDENT else : NEW_LINE INDENT connector . connect ( ) NEW_LINE DEDENT DEDENT
add_prefix ( self , adapter_name ) : NEW_LINE INDENT if adapter_name is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( adapter_name , six . string_types ) : NEW_LINE INDENT return adapter_name NEW_LINE DEDENT if isinstance ( adapter_name , six . string_types ) : NEW_LINE INDENT return adapter_name NEW_LINE DEDENT return adapter_name NEW_LINE DEDENT
DeploymentUnit getParentDeploymentUnit ( DeploymentUnit deploymentUnit ) { if ( deploymentUnit == null ) { return null ; } DeploymentUnit parent = deploymentUnit . getParentDeploymentUnit ( ) ; return parent ; }
String getServiceName ( ) { String serviceName = null ; try { serviceName = this . service . getName ( ) ; } catch ( Exception e ) { } if ( serviceName == null ) { serviceName = this . service . getName ( ) ; } return serviceName ; }

def create_inject_source ( self ) : NEW_LINE INDENT if self . injection_source is None : NEW_LINE INDENT self . injection_source = self . injection_source NEW_LINE DEDENT return self . injection_source NEW_LINE DEDENT
getInterceptors ( self ) : NEW_LINE INDENT return self . interceptors . values ( ) NEW_LINE DEDENT
def createInterceptorFactory ( self ) : NEW_LINE INDENT return self . interceptorFactory . createInterceptor ( ) NEW_LINE DEDENT

public static < T > List < Interceptor > interceptors ( ) { return interceptors . getInterceptors ( ) ; }
def createClientInterceptors ( self ) : NEW_LINE INDENT clientInterceptors = [ ] NEW_LINE clientInterceptors = [ ] NEW_LINE clientInterceptors = [ ] NEW_LINE clientInterceptors = [ ] NEW_LINE clientInterceptors . append ( clientInterceptors ( clientInterceptors ) NEW_LINE return clientInterceptors ; }

public void attach ( final View instance , final View instance ) { if ( instance == null ) { throw new IllegalArgumentException ( " view instance is null " ) ; } else { throw new IllegalArgumentException ( ) ; } }
def def def def def parse def def def def def def def parse def def def def parse def def def parse__python__ def def def parse def def def def parse def parse def parse_parse ( self ) throws XMLStream def parse def parse def parse_parse ( self ) : NEW def parse ( self ) : NEW__python__ def parse ( self ) : NEW_LINE INDENT return self . parse_element = self . parse ( ) NEW_LINE DEDENT def parse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . parse ( ) ; }
static List < JAXWSEJBMetadata > getJAXWSEJBMetadata ( ) { List < JAXWSEJBMetadata > meta = new ArrayList < JAXWSEJBMetadata > ( ) ; meta . add ( new JAXWSEJBMetadata ( ) ) ; meta . add ( new JAXWSEJBMetadata ( ) ) ; meta . add ( new JAXWSEJBMetadata ( ) ) ; meta . add ( new JAXWSEJBMetadata ( ) ) ; return meta ; }
static List < JAXWSPojo > list ( ) { List < JAXWSPojo > list = new ArrayList < JAXWSPojo > ( ) ; List < JAXWSPojo > list = new ArrayList < JAXWSPojo > ( ) ; for ( JAXWSPojo jaxwsPojo : list ) { list . add ( jaxwsPojo ) ; } return list ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_servlet_meta_data ( self ) : NEW_LINE INDENT return self . _servlet_meta_data NEW_LINE DEDENT
get_required_attachment_value ( deployment_unit ) : NEW_LINE INDENT return deployment_unit . get_required_attachment_value ( ) NEW_LINE DEDENT
getAttachment ( self , deploymentUnit ) : NEW_LINE INDENT if deploymentUnit is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _getAttachment ( deploymentUnit ) NEW_LINE DEDENT DEDENT
JBossWebMetaData getJBossWebMetaData ( DeploymentUnit deploymentUnit ) { JBossWebMetaData jbossWebMetaData = new JBossWebMetaData ( deploymentUnit ) ; if ( jbossWebMetaData == null ) { jbossWebMetaData = new JBossWebMetaData ( deploymentUnit ) ; } return jbossWebMetaData ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static EJBEndpoint get ( String classname ) { if ( StringUtils . isEmpty ( classname ) ) { return null ; } final EJBEndpoint ejbEndpoint = new EJBEndpoint ( ) ; ejbEndpoint . setName ( classname ) ; ejbEndpoint . setClassName ( classname ) ; ejbEndpoint . setClassName ( classname ) ; ejbEndpoint . setClassName ( classname ) ; return ejbEndpoint ; }
get_context_root ( self ) : NEW_LINE INDENT context_root = self . _context_root NEW_LINE if context_root is not None : NEW_LINE INDENT return context_root NEW_LINE DEDENT return context_root NEW_LINE DEDENT
def def get_class_name ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return cls . __name__ NEW_LINE DEDENT return cls . __name__ NEW_LINE DEDENT
load_resource ( self , module_name ) : NEW_LINE INDENT try : NEW_LINE INDENT resource = importlib . import_module ( module_name ) NEW_LINE return resource NEW_LINE DEDENT except ImportError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
load_resources_from_module ( self , module ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_resources_from_module ( module ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
listChildren ( self ) : NEW_LINE INDENT for path in self . path : NEW_LINE INDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT path = path [ 1 : ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ] NEW_LINE DEDENT if path . endswith ( ' / ' ) : NEW_LINE INDENT path = path [ : - 1 ]
close ( self ) : NEW_LINE INDENT if self . transactional : NEW_LINE INDENT self . transactional . close ( ) NEW_LINE self . transactional = False NEW_LINE DEDENT DEDENT
get_transaction_manager ( self , scoped_persistence_unit_name ) : NEW_LINE INDENT scoped_persistence_unit_name = scoped_persistence_unit_name NEW_LINE if scoped_persistence_unit_name : NEW_LINE INDENT scoped_persistence_unit_name = scoped_persistence_unit_name NEW_LINE DEDENT else : NEW_LINE INDENT scoped_persistence_unit_name = scoped_persistence_unit_name NEW_LINE DEDENT return scoped_persistence_unit_name NEW_LINE DEDENT
close ( self ) : NEW_LINE INDENT if self . context is not None : NEW_LINE INDENT self . context . close ( ) NEW_LINE DEDENT DEDENT
process_web_annotations ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _process_web_annotations ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
update ( self ) : NEW_LINE INDENT if self . runtime is not None : NEW_LINE INDENT return self . runtime . update ( self ) NEW_LINE DEDENT return self . runtime . update ( self ) NEW_LINE DEDENT
static boolean isPublic ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . getSuperclass ( ) == null ) { return false ; } return clazz . getSuperclass ( ) != null ; }
static HttpWebServiceEndpoint createHttpWebServiceEndpoint ( ) { HttpWebServiceEndpoint endpoint = new HttpWebServiceEndpoint ( ) ; if ( endpoint . getPort ( ) == - 1 ) { return endpoint ; } return endpoint ; }
static Web ServiceDeployment createDeployment ( ) { Web ServiceDeployment deployment = new Web ServiceDeployment ( ) ; deployment . setName ( " Web Service Deployment " ) ; deployment . setDescription ( " Web Service deployment description " ) ; deployment . setDescription ( " Web Service deployment description " ) ; deployment . setDescription ( " Web Service deployment description " ) ; deployment . setDescription ( " Web Service deployment description " ) ; deployment . setDescription ( " Web Service deployment description " ) ; return deployment ; }
static Annotation [ ] getAnnotations ( ) { return new Annotation [ ] { new Annotation [ ] { } } ; }
next_timeout ( self , timeout ) : NEW_LINE INDENT if timeout is not None : NEW_LINE INDENT return timeout NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def setTimerTask ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT state = self . state NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT state = self . state NEW_LINE DEDENT else : NEW_LINE INDENT state = self . state NEW_LINE DEDENT return state NEW_LINE DEDENT


public static ComponentConfiguration createComponentConfiguration ( ) { return new ComponentConfiguration ( ) { @ Override public ComponentConfiguration createComponentConfiguration ( ) { return new ComponentConfiguration ( ) ; } } }
get_class_level_container_interceptors ( self ) : NEW_LINE INDENT return self . get_class_level_container_interceptors ( ) NEW_LINE DEDENT
boolean isApplicable ( TransactionSpecification transactionSpecification ) { if ( transactionSpecification == null ) { return false ; } if ( ! transactionSpecification . isApplicable ( ) ) { return false ; } if ( ! transactionSpecification . isApplicable ( ) ) { return false ; } return true ; }
check ( self ) : NEW_LINE INDENT if len ( self . elements ) == 1 : NEW_LINE INDENT return self . elements [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . elements [ 0 ] NEW_LINE DEDENT DEDENT
load_class ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
export_key_store ( self , key_store ) : NEW_LINE INDENT if key_store is not None : NEW_LINE INDENT return self . _export_key_store ( key_store ) NEW_LINE DEDENT return self . _export_keystore ( key_store ) NEW_LINE DEDENT
_export_key_managers ( self ) : NEW_LINE INDENT return self . _export_key_managers ( ) NEW_LINE DEDENT
_export_trusted_trust_managers ( self , trust_managers ) : NEW_LINE INDENT return self . _export_trusted_trust_managers ( trust_managers ) NEW_LINE DEDENT
CompoundName getCompoundName ( String name ) { CompoundName compoundName = new CompoundName ( ) ; compoundName . setName ( name ) ; return compoundName ; }
convert ( String name ) : NEW_LINE INDENT if isinstance ( name , String ) : NEW_LINE INDENT name = name . trim ( ) NEW_LINE DEDENT else : NEW_LINE INDENT name = name . trim ( ) NEW_LINE DEDENT return name NEW_LINE DEDENT
NameComponent fromString ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } return new NameComponent ( name ) ; }
_unexport_object ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
convert_servant ( servant ) : NEW_LINE INDENT if isinstance ( servant , servant ) : NEW_LINE INDENT return servant NEW_LINE DEDENT else : NEW_LINE INDENT return servant NEW_LINE DEDENT DEDENT
authorize_username ( self , username , password ) : NEW_LINE INDENT if not username : NEW_LINE INDENT return False NEW_LINE DEDENT if not password : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
static boolean isType ( String type ) { if ( type == null ) { return false ; } if ( type . equals ( " JCA Injection " ) ) { return true ; } if ( type . equals ( " Injection " ) ) { return true ; } return false ; }
contract ( self , method ) : NEW_LINE INDENT if not self . method : NEW_LINE INDENT self . method = method NEW_LINE DEDENT else : NEW_LINE INDENT self . method = method NEW_LINE DEDENT return self NEW_LINE DEDENT
unbind_resource ( self , resource ) : NEW_LINE INDENT if self . binding_service is not None : NEW_LINE INDENT self . binding_service . unbind_resource ( resource ) NEW_LINE DEDENT DEDENT
static Object instantiate ( Object bean ) { if ( bean == null ) { return null ; } if ( bean . getClass ( ) . isArray ( ) ) { return bean ; } if ( bean . getClass ( ) . isArray ( ) ) { return bean . getClass ( ) . getComponent ( ) ; } return bean ; }


get_current_context_selector ( self ) : NEW_LINE INDENT selector = self . context . get ( ) NEW_LINE if selector is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return selector NEW_LINE DEDENT DEDENT
get_bean_name ( self ) : NEW_LINE INDENT bean_name = self . get_bean_name ( ) NEW_LINE if bean_name : NEW_LINE INDENT return bean_name NEW_LINE DEDENT return None NEW_LINE DEDENT
def def instances_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . instances_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . instances_name NEW_LINE DEDENT DEDENT
get_class_description ( self ) : NEW_LINE INDENT class_description = self . __class__ . __name__ NEW_LINE if class_description is not None : NEW_LINE INDENT return class_description NEW_LINE DEDENT return class_description NEW_LINE DEDENT
merge ( self , annotations ) : NEW_LINE INDENT if len ( annotations ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( annotations ) == 1 : NEW_LINE INDENT return annotations [ 0 ] NEW_LINE DEDENT if len ( annotations ) == 1 : NEW_LINE INDENT return annotations [ 0 ] NEW_LINE DEDENT if len ( annotations ) == 1 : NEW_LINE INDENT return annotations [ 0 ] NEW_LINE DEDENT return annotations [ 0 ] NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def install___python____python____python__ def def def def def def install ( self )__python____python____python____python__ def def def def def install ( self ) : NEW def install ( self ) : NEW def install ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def install (__python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def _
validate ( self , descriptor ) : NEW_LINE INDENT if isinstance ( descriptor , Descriptor ) : NEW_LINE INDENT return self . _validate ( descriptor ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _validate ( descriptor ) NEW_LINE DEDENT DEDENT
public
get_meta_data ( self ) : NEW_LINE INDENT meta_data = { } NEW_LINE meta_data = { } NEW_LINE meta_data . update ( self . meta_data ) NEW_LINE return meta_data NEW_LINE DEDENT
get_deployment_authentication_method ( self ) : NEW_LINE INDENT if self . deployment_authentication_method is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . deployment_authentication_method NEW_LINE DEDENT
process ( self ) : NEW_LINE INDENT if self . is_deployed ( ) : NEW_LINE INDENT return self . _process_deployment ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _process_deployment ( ) NEW_LINE DEDENT DEDENT
ejbCreateAndEJBRemove ( self ) : NEW_LINE INDENT return self . ejbCreateAndEJBRemove ( ) NEW_LINE DEDENT
_make_stub_class ( cls ) : NEW_LINE INDENT if cls . _stub_class is not None : NEW_LINE INDENT return cls . _stub_class NEW_LINE DEDENT return cls . _stub_class NEW_LINE DEDENT
def get_anonymous_object_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _anonymous_object_id NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
new_persistence_provider ( self ) : NEW_LINE INDENT if self . persistence_provider is None : NEW_LINE INDENT self . persistence_provider = self . persistence_provider NEW_LINE DEDENT return self . persistence_provider NEW_LINE DEDENT
void removePersistenceProviders ( ) { if ( persistenceProviders != null && persistenceProviders . size ( ) > 0 ) { persistenceProviders . clear ( ) ; } }
def
get_module_cl ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . module_cl NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT


def def setup_annotation_index_index_map ( ) : NEW_LINE INDENT def setup_annotation_index_map ( self ) : NEW_LINE INDENT return self . annotation_index_map NEW_LINE DEDENT def setup_LINE DEDENT
def get_adapter ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return _adapters . get_adapter ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return _adapters . get_adapter ( ) NEW_LINE DEDENT DEDENT
static PersistenceProviderAdaptor createPersistenceProviderAdaptor ( ) { return new PersistenceProviderAdaptor ( ) ; }
static PersistenceProvider getPersistenceProvider ( ) { if ( persistenceProvider == null ) { persistenceProvider = new PersistenceProvider ( ) ; } return persistenceProvider ; }
static < T > Set < T > set ( Set < T > set ) { if ( set == null ) { set = new HashSet < T > ( ) ; set . add ( set ) ; } return set ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

refresh_status_attributes ( self , participant ) : NEW_LINE INDENT status = participant . getStatus ( ) NEW_LINE if status is not None : NEW_LINE INDENT return status NEW_LINE DEDENT if status is not None : NEW_LINE INDENT return status NEW_LINE DEDENT return None NEW_LINE DEDENT
analysis ( self ) : NEW_LINE INDENT if not self . _analysis : NEW_LINE INDENT self . _analysis = True NEW_LINE DEDENT return self . _analysis NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python__ def def def def def def def def _ Lookup ( self ,__python____python__ def def def def def def def def _
create_work_in_progress ( self ) : NEW_LINE INDENT if not self . _work_in_progress : NEW_LINE INDENT self . _work_in_progress = True NEW_LINE DEDENT return self . _work_in_progress NEW_LINE DEDENT
def _get_module_name ( self ) : NEW_LINE INDENT if self . _module_name is not None : NEW_LINE INDENT return self . _module_name NEW_LINE DEDENT else : NEW_LINE INDENT return self . _module_name NEW_LINE DEDENT DEDENT
an integer to a 16 - digit hex string .
a long to a 16 - digit hex string .
is_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , method ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
is_mutator ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return method . is_mutator ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
void check ( ) throws RemoteException { if ( ! ( this instanceof java . rmi . RemoteException ) ) throw new RemoteException ( ) ; if ( ! ( this instanceof java . rmi . RemoteException ) ) throw new RemoteException ( ) ; }
read_method_name ( self , method_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , method_name ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return getattr ( self , method_name ) NEW_LINE DEDENT DEDENT
write_method_name ( self , method_name ) : NEW_LINE INDENT method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE method_name = method_name . replace ( ' _ ' , ' - ' ) NEW_LINE return method_name NEW_LINE DEDENT
def def overloaded_operation_names ( self ) : NEW_LINE INDENT return self . _operation_names . split ( ' , ' ) NEW_LINE DEDENT
def _fixup_names ( self , names ) : NEW_LINE INDENT for name in names : NEW_LINE INDENT if name . startswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . startswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif name . endswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT return names NEW_LINE DEDENT
escape ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return unicodedata . normalize ( ' NFKD ' , name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
iterate_attributes ( self , reader ) : NEW_LINE INDENT attributes = [ ] NEW_LINE for attr in reader : NEW_LINE INDENT attributes . append ( attr ) NEW_LINE DEDENT for attr in attributes : NEW_LINE INDENT attributes . append ( attr ) NEW_LINE DEDENT return attributes NEW_LINE DEDENT
load_persistence_provider ( self , persistence_provider ) : NEW_LINE INDENT if persistence_provider is None : NEW_LINE INDENT persistence_provider = self . persistence_provider NEW_LINE DEDENT return persistence_provider NEW_LINE DEDENT
add ( self , resource ) : NEW_LINE INDENT if not self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_leaf ( resource ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

marshallAsAttribute ( self , attribute ) : NEW_LINE INDENT if not isinstance ( attribute , Attribute ) : NEW_LINE INDENT return False NEW_LINE DEDENT return attribute . marshallAsAttribute ( ) NEW_LINE DEDENT
def hack ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . hack ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_session ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . _create_session ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . _create_session ( request ) NEW_LINE DEDENT elif request . method == ' DELETE ' : NEW_LINE INDENT return self . _create_session ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_session ( request ) NEW_LINE DEDENT DEDENT
String getDestinationName ( ) { if ( destinationName == null ) { destinationName = " " ; } return destinationName ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def getJobs ( self , job_name ) : NEW_LINE INDENT job_name = job_name . strip ( ) NEW_LINE job_name = job_name . strip ( ) NEW_LINE job_name = job_name . strip ( ) NEW_LINE return job_name NEW_LINE DEDENT
the state of an instance .
canonical_request_uri ( self ) : NEW_LINE INDENT request = self . request NEW_LINE requestPath = self . requestPath NEW_LINE if requestPath : NEW_LINE INDENT requestPath = requestPath . replace ( ' / ' , ' / ' ) NEW_LINE requestPath = requestPath . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT return requestPath NEW_LINE DEDENT
def def public public public public static final public static final void register ( final String iiopname , final String iiopname , final String iiopname , final String iiopname , final String iiopname ) { if ( iiopname != null ) { final String iiopname = iiopname . toLowerCase ( ) ; if ( iiopname != null ) { final String iiopname = iiopname . toLowerCase ( ) ; if ( iiopname != null ) { iiopname = iiopname . toLowerCase ( ) ; if ( iiopname != null ) { iiopname = iiopname . toLowerCase ( ) ; if ( iiopname != null ) { iiopname = iiopname . toLowerCase ( ) ; } } } } } } }
static String resolve ( String name ) throws NamingException { if ( name == null || name . isEmpty ( ) ) { throw new NamingException ( " Name cannot be null or empty . " ) ; } return name ; }
bind ( String name ) : NEW_LINE INDENT if name == null : NEW_LINE INDENT return NEW_LINE DEDENT if name . isEmpty ( ) : NEW_LINE INDENT return NEW_LINE DEDENT name = name . trim ( ) NEW_LINE if name . length ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if name . length ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
unbind ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT super ( self , self ) . unbind ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
BindingEnumeration getBindingEnumeration ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name is null " ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( " name is empty " ) ; } BindingEnumeration bindingEnumeration = new BindingEnumeration ( ) ; bindingEnumeration . setName ( name ) ; return bindingEnumeration ; }
destroy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _client . destroy ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _client . destroy ( ) NEW_LINE DEDENT DEDENT
callDestroy ( context , name ) : NEW_LINE INDENT if name is None : NEW_LINE INDENT return NEW_LINE DEDENT if name == " " : NEW_LINE INDENT return NEW_LINE DEDENT if name == " " : NEW_LINE INDENT return NEW_LINE DEDENT if name . startswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . startswith ( " _ _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . startswith ( " _ _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith
bind_new_context ( self , context ) : NEW_LINE INDENT self . context = context NEW_LINE DEDENT
callBindNewContext ( self , context , name ) : NEW_LINE INDENT if name is None : NEW_LINE INDENT return NEW_LINE DEDENT if name . startswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW_LINE DEDENT if name . endswith ( " _ " ) : NEW_LINE INDENT return NEW
resolve ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def init ( ) : def def def def public public public public public void reinitialize def def def def def public public public public public public void reinitialize def def def public public public public public public void reinitialize def def def def public public public public public public public static public static void reinitialize
reinitialize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . orb . reinitialize ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . orb . reinitialize ( ) NEW_LINE DEDENT DEDENT

parse_credential_tag ( self , credential_tag ) : NEW_LINE INDENT if credential_tag is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return credential_tag NEW_LINE DEDENT DEDENT
remove_security_domain ( self , security_domain ) : NEW_LINE INDENT if security_domain is None : NEW_LINE INDENT return NEW_LINE DEDENT security_domain = security_domain [ 0 ] NEW_LINE security_domain [ 1 ] = security_domain [ 1 ] NEW_LINE security_domain [ 2 ] = security_domain [ 2 ] NEW_LINE security_domain [ 3 ] = security_domain [ 3 ] NEW_LINE security_domain [ 4 ] = security_domain [ 4 ] NEW_LINE security_domain [ 5 ] = security_domain [ 5 ] NEW_LINE security_domain [ 6 ] = security_domain [ 6 ] NEW_LINE security_domain [ 7 ] = security_domain [ 7 ] NEW_LINE security_domain [ 8 ] = security_domain [ 8 ] NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_module_reference ( self , name , factory ) : NEW_LINE INDENT self . _module_name = name NEW_LINE self . _module_factory = factory NEW_LINE return self . _module_name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
LocalIDLType getLocalIDLType ( TypeCode typeCode ) { if ( typeCode == null ) { throw new IllegalArgumentException ( " TypeCode must not be null " ) ; } LocalIDLType localIDLType = new LocalIDLType ( ) ; localIDLType . setTypeCode ( typeCode ) ; return localIDLType ; }

compute_masked_password ( self , masked_password ) : NEW_LINE INDENT if masked_password is not None : NEW_LINE INDENT return masked_password NEW_LINE DEDENT else : NEW_LINE INDENT return self . _compute_masked_password ( masked_password ) NEW_LINE DEDENT DEDENT
initialize ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . vault . initialize ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
startVault ( self , alias ) : NEW_LINE INDENT vault = self . vaults . get ( alias ) NEW_LINE if vault : NEW_LINE INDENT return vault NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_info ( self ) : NEW_LINE INDENT if self . secured : NEW_LINE INDENT return self . _info NEW_LINE DEDENT else : NEW_LINE INDENT return self . _info NEW_LINE DEDENT DEDENT
vault_info ( vault ) : NEW_LINE INDENT vault_info = vault . vault_info ( ) NEW_LINE if vault_info is not None : NEW_LINE INDENT return vault_info NEW_LINE DEDENT return vault_info NEW_LINE DEDENT
def _get_vault_configuration_string ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_vault_configuration ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
checkNotNull ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( value , bool ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
resource_adapter_dMR ( self ) : NEW_LINE INDENT resource = self . resource_adapter_dMR ( ) NEW_LINE if resource is not None : NEW_LINE INDENT return resource NEW_LINE DEDENT return None NEW_LINE DEDENT
insert_constant_value ( self , constant_value ) : NEW_LINE INDENT if constant_value is not None : NEW_LINE INDENT return constant_value NEW_LINE DEDENT DEDENT
boolean implies ( Permission permission ) { if ( permission == null ) { return false ; } if ( permission . equals ( this . permission ) ) { return true ; } if ( permission . equals ( this . permission ) ) { return true ; } return false ; }
canonical_actions ( self , actions ) : NEW_LINE INDENT if isinstance ( actions , str ) : NEW_LINE INDENT return actions NEW_LINE DEDENT else : NEW_LINE INDENT return actions NEW_LINE DEDENT DEDENT
public public static final String getShortClassName ( String name ) { if ( name == null ) { return null ; } else { return name ; } } }
send_out_state_change_notifications ( self , out_state_change_notifications ) : NEW_LINE INDENT out_state_change_notifications = [ ] NEW_LINE out_state_change_notifications . append ( out_state_change_notifications ) NEW_LINE out_state_change_notifications . append ( out_state_change_notifications ) NEW_LINE DEDENT
public public RemoteObject getRemoteObject ( Object input ) throws ConfigurationException { if ( input == null ) { throw new ConfigurationException ( ) ; } if ( input == null ) { throw new ConfigurationException ( ) ; } if ( input . getClass ( ) != Remote . class ) { throw new ConfigurationException ( ) ; } else if ( input . getClass ( ) != Remote . class ) { throw new ConfigurationException ( ) ; } else if ( input . getClass ( ) != Remote . class ) { throw new ConfigurationException ( ) ; } else if ( input . getClass ( ) != Remote . class ) { throw new ConfigurationException ( ) ; } else { throw new ConfigurationException ( ) ; } } }
get_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
get_context_service_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . context_service_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
getCombinedMap ( Class < ? > class , Method level interceptors ) : NEW_LINE INDENT return map ( class , interceptors ) NEW_LINE DEDENT


getInterceptors ( self ) : NEW_LINE INDENT interceptors = self . getInterceptors ( ) NEW_LINE if interceptors : NEW_LINE INDENT for interceptor in interceptors : NEW_LINE INDENT yield interceptor NEW_LINE DEDENT DEDENT DEDENT
get_around_timeout_interceptor_list ( self ) : NEW_LINE INDENT return self . _around_timeout_interceptor_list NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def preDestroyInterceptor ( self , interceptor ) : NEW_LINE INDENT if isinstance ( interceptor , PreDestroyInterceptor ) : NEW_LINE INDENT return interceptor NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def add_pre_passivate ( self ) : NEW_LINE INDENT if self . pre_passivate is not None : NEW_LINE INDENT return self . pre_passivate ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

createServiceFactory ( self , component ) : NEW_LINE INDENT factory = self . _createServiceFactory ( component ) NEW_LINE if factory is not None : NEW_LINE INDENT return factory NEW_LINE DEDENT factory = self . _createServiceFactory ( component ) NEW_LINE return factory NEW_LINE DEDENT
binder_services ( self ) : NEW_LINE INDENT binder_services = [ ] NEW_LINE binder_services . extend ( self . binder_services ) NEW_LINE binder_services . extend ( self . binder_services ) NEW_LINE binder_services . extend ( self . binder_services ) NEW_LINE binder_services . extend ( self . binder_services ) NEW_LINE return binder_services NEW_LINE DEDENT
def def configure ( ) : NEW
String getBaseServiceName ( ) { String baseServiceName = null ; try { baseServiceName = this . baseServiceName ; } catch ( NamingException e ) { baseServiceName = this . baseServiceName ; } return baseServiceName ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_service_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . service_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
default_cache_implementation ( self ) : NEW_LINE INDENT return self . _default_cache_implementation NEW_LINE DEDENT
valueMembers ( self ) : NEW_LINE INDENT valueMembers = self . valueMembers . copy ( ) NEW_LINE return valueMembers NEW_LINE DEDENT
valueMembers ( self ) : NEW_LINE INDENT valueMembers = self . valueMembers . copy ( ) NEW_LINE return valueMembers NEW_LINE DEDENT
root_address ( self ) : NEW_LINE INDENT root_address = self . root_address ( ) NEW_LINE return root_address NEW_LINE DEDENT
read ( self , stream ) : NEW_LINE INDENT try : NEW_LINE INDENT stream . seek ( 0 ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT raise StopIteration NEW_LINE DEDENT return stream . read ( ) NEW_LINE DEDENT
static NamingServer createNamingServer ( String name ) throws NamingException { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } NamingServer namingServer = new NamingServer ( name ) ; namingServer . setName ( name ) ; return namingServer ; }
public static void install ( ) { if ( beanManager == null ) { throw new IllegalArgumentException ( " No bean manager is installed . " ) ; } else { throw new IllegalArgumentException ( " No bean manager is installed . " ) ; } }
String getServiceName ( ) { if ( serviceName == null ) { serviceName = " " ; } return serviceName ; }

add_message_destination ( self , message_destination ) : NEW_LINE INDENT self . message_destination = message_destination NEW_LINE if self . message_destination is None : NEW_LINE INDENT self . message_destination = message_destination NEW_LINE DEDENT return self . message_destination NEW_LINE DEDENT
get_views ( self , type ) : NEW_LINE INDENT views = [ ] NEW_LINE for view in self . _views . values ( ) : NEW_LINE INDENT views . append ( view ) NEW_LINE DEDENT return views NEW_LINE DEDENT
get_components ( self , name ) : NEW_LINE INDENT components = [ ] NEW_LINE for component in self . components : NEW_LINE INDENT components . append ( component ) NEW_LINE DEDENT return components NEW_LINE DEDENT
get_views ( self , name , view_type ) : NEW_LINE INDENT view_type = view_type . lower ( ) NEW_LINE view_type = view_type . lower ( ) NEW_LINE view_type = view_type . lower ( ) NEW_LINE return view_type NEW_LINE DEDENT
def _get_message_destination_name ( self ) : NEW_LINE INDENT return self . _get_message_destination_name ( ) NEW_LINE DEDENT
public public static final void add ( final Wild public static final String name , final String name ) { if ( name == null ) { throw new IllegalArgumentException ( ) ; } else if ( name == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
set_default_value ( self , value ) : NEW_LINE INDENT self . _default_value = value NEW_LINE return self . _default_value NEW_LINE DEDENT
rename_attribute ( self , name , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _attributes [ name ] = value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . _attributes [ name ] = value NEW_LINE DEDENT DEDENT
restore_internal_state ( self ) : NEW_LINE INDENT if self . identity is not None : NEW_LINE INDENT return self . identity . restore_internal_state ( ) NEW_LINE DEDENT self . identity = None NEW_LINE DEDENT
provide_default_ implementations ( self ) : NEW_LINE INDENT if self . default_ implementations : NEW_LINE INDENT return self . default_ implementations NEW_LINE DEDENT else : NEW_LINE INDENT return self . default_ implementations NEW_LINE DEDENT DEDENT
check_api_impl ( self , api_impl ) : NEW_LINE INDENT self . check_api_impl ( api_impl ) NEW_LINE self . check_api_impl ( api_impl ) NEW_LINE DEDENT
convertOldFacesVersionMarkerValues ( oldFacesVersionMarker , newFacesVersionMarker ) : NEW_LINE INDENT if oldFacesVersionMarker is not None : NEW_LINE INDENT return oldFacesVersionMarker NEW_LINE DEDENT if newFacesVersionMarker is not None : NEW_LINE INDENT return newFacesVersionMarker NEW_LINE DEDENT DEDENT
def def def _get_type_code ( self ) : NEW__python__ def _get_type_code ( self ) : NEW_LINE INDENT return self . _get_type_code ( ) NEW_LINE def _get_type_code ( self ) : NEW_LINE INDENT return self . _get_type_code ( ) NEW_LINE DEDENT def _get_type_code ( self ) : NEW_LINE INDENT return self . _get_type_code ( ) NEW_LINE DEDENT
def add_type_code ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _type_codes . add ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _type_codes . add ( self ) NEW_LINE DEDENT DEDENT
create_module ( self , module ) : NEW_LINE INDENT self . module = module NEW_LINE return self . module NEW_LINE DEDENT
add_interfaces ( self , interfaces ) : NEW_LINE INDENT if not interfaces : NEW_LINE INDENT return NEW_LINE DEDENT for interface in interfaces : NEW_LINE INDENT self . add_interface ( interface ) NEW_LINE DEDENT DEDENT
add_abstract_ valuetypes ( self , abstract_ valuetypes ) : NEW_LINE INDENT if abstract_ valuetypes is None : NEW_LINE INDENT abstract_ valuetypes = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT abstract_ valuetypes . append ( abstract_ valuetypes ) NEW_LINE DEDENT return abstract_ valuetypes NEW_LINE DEDENT



__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public static final Class < ? extends AnnotationType > getAnnotationType ( Class < ? extends Annotation > annotationType ) { if ( annotationType == null ) { return null ; } else { return null ; } } }
def def def def def def def def def__python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def__python____python____python____python____python____python__ def def def def def def def def def__python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def def def def__python____python____python____python__ def def def def def def__python____python____python____python____python__ def def def def def def__python____python____python____python____python____python__ def def def def def__python____python____python____python____python____python__ def def def def def__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def _
static NamingStore createNamingStore ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } return new NamingStore ( name ) ; }
def destroys ( self ) : NEW_LINE INDENT if self . naming_store : NEW_LINE INDENT self . naming_store . destroys ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . naming_store . destroys ( ) NEW_LINE DEDENT DEDENT
check_current_method ( self ) : NEW_LINE INDENT if self . current_method is not None : NEW_LINE INDENT return self . current_method NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
void afterCompletion ( ) throws Exception { if ( this . ejbMethod != null ) { this . ejbMethod . afterCompletion ( ) ; this . ejbMethod = null ; } }
static List < Class < ? > > getAllClasses ( ) { List < Class < ? > > classes = new ArrayList < Class < ? > > ( ) ; for ( Class < ? > clazz : classes ) { if ( clazz . isInterface ( ) ) { classes . add ( clazz ) ; } } return classes ; }
static final View < Timer > view ( final Transaction transaction ) { if ( transaction == null ) { throw new IllegalArgumentException ( " Transaction is null " ) ; } if ( transaction == this ) { throw new IllegalArgumentException ( " Transaction is null " ) ; } if ( transaction == this ) { throw new IllegalArgumentException ( " Transaction is null " ) ; } return new View < Timer > ( transaction ) ; }
extract_extra_parameters ( self ) : NEW_LINE INDENT parameters = self . _get_parameters ( ) NEW_LINE if len ( parameters ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_parameters ( self ) : NEW_LINE INDENT parameters = { } NEW_LINE for param in self . parameters : NEW_LINE INDENT parameters [ param . name ] = param . value NEW_LINE DEDENT return parameters NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public public static void checkLength ( String length ) { if ( length == null ) { return ; } if ( length == null ) { return ; } if ( length == null ) { return ; } if ( length == null ) { return ; } if ( length == 0 ) { return ; } if ( length == null ) { return ; } if ( length == 0 ) { return ; } if ( length == null ) { return ; } if ( length == 0 ) { return ; } if ( length == 1 ) { return ; } if ( length == 1 ) { return ; } if ( length == 0 ) { return ; } if ( length == 1 ) { return ; } if ( length == 0 ) { return ; } if ( length == 1 ) { return ; } if ( length == 1 ) { return ; } if ( length == 0
def next_binding ( self ) : NEW_LINE INDENT if self . next_binding is not None : NEW_LINE INDENT return self . next_binding NEW_LINE DEDENT return self . next_binding NEW_LINE DEDENT
next ( self ) : NEW_LINE INDENT if self . _bindingIter . hasNext ( ) : NEW_LINE INDENT return self . _bindingIter . next ( ) NEW_LINE DEDENT return self . _bindingIter . next ( ) NEW_LINE DEDENT
static JNDIBinding createBinding ( ) throws NamingException { JNDIBinding jndiBinding = new JNDIBinding ( ) ; jndiBinding . bind ( ) ; return jndiBinding ; }
static void discover ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > healthCheckProcedureClass : healthCheckProcedureClass . getInterfaces ( ) ) { for ( Class < ? extends HealthCheckProcedure > clazz : healthCheckProcedureClass . getInterfaces ( ) ) {
undeploy ( self ) : NEW_LINE INDENT if self . deployment is not None : NEW_LINE INDENT self . deployment . undeploy ( ) NEW_LINE DEDENT DEDENT
get_corba_reference ( self , locator ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_corba_reference ( locator ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def _get_value ( self , node ) : public static Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum < ? extends Enum
skip ( self , number_of_bytes ) : NEW_LINE INDENT if number_of_bytes > 0 : NEW_LINE INDENT return self . skip ( number_of_bytes ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . skip ( number_of_bytes ) NEW_LINE DEDENT DEDENT
check_elements ( self , elements ) : NEW_LINE INDENT if len ( elements ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( elements ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( elements ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static < T extends Class < T > > TopLevelClassLoader < T > getTopLevelClassLoader ( Class < T > topLevelClass ) { if ( topLevelClass != null ) { return topLevelClass ; } return new TopLevelClassLoader < T > ( topLevelClass ) ; }
unbind ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . tree . remove ( self ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . tree . remove ( self ) NEW_LINE DEDENT DEDENT
def def get_object_value ( self , node ) : NEW_LINE INDENT return self . _get_object_value ( node ) NEW_LINE DEDENT
def get_all_names ( self ) : NEW_LINE INDENT return [ ] NEW_LINE def get_names ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT
get_all_binding_instances ( self ) : NEW_LINE INDENT return self . _get_all_binding_instances ( ) NEW_LINE DEDENT

public static void saveInvocationContext ( InvocationContext context ) { if ( context == null ) { throw new NullPointerException ( " context " ) ; } if ( context instanceof InvocationContext ) { context = ( InvocationContext ) context ; } }
create_io_subsystem ( self ) : NEW_LINE INDENT if self . _io_subsystem is not None : NEW_LINE INDENT return self . _io_subsystem NEW_LINE DEDENT if self . _io_subsystem is None : NEW_LINE INDENT return self . _io_subsystem NEW_LINE DEDENT return self . _io_subsystem NEW_LINE DEDENT
serve_welcome_content ( self ) : NEW_LINE INDENT if not self . welcome_content : NEW_LINE INDENT return NEW_LINE DEDENT if self . welcome_content : NEW_LINE INDENT return self . welcome_content NEW_LINE DEDENT if self . welcome_content : NEW_LINE INDENT return self . welcome_content NEW_LINE DEDENT return self . welcome_content NEW_LINE DEDENT
create_instance ( self , ** kwargs ) : NEW_LINE INDENT return self . _create_instance ( ** kwargs ) NEW_LINE DEDENT
static Map < String , Operation > map ( Map < String , Operation > operations ) { Map < String , Operation > map = new HashMap < String , Operation > ( ) ; for ( Operation operation : operations ) { map . put ( operation . getName ( ) , operation ) ; } return map ; }
collect_metrics ( self , resources ) : NEW_LINE INDENT metrics = [ ] NEW_LINE for resource in resources : NEW_LINE INDENT metrics . append ( self . _collect_metrics ( resource ) ) NEW_LINE DEDENT return metrics NEW_LINE DEDENT
get_deployment_unit ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _deployment_unit NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public static void install ( ) throws Exception { if ( ! endpointService . isEnabled ( ) ) { return ; } if ( endpointService . isEnabled ( ) ) { return ; } if ( endpointService . isEnabled ( ) ) { return ; } else { return ; } }
publish_webapp ( self ) : NEW_LINE INDENT deployment_unit = self . get_deployment_unit ( ) NEW_LINE if deployment_unit is not None : NEW_LINE INDENT deployment_unit . publish_webapp ( deployment_unit ) NEW_LINE DEDENT DEDENT
serve_webapp ( self ) : NEW_LINE INDENT webapp = self . get_webapp ( ) NEW_LINE if webapp is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return webapp . serve ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

void timeout ( long timeout , TimeUnit timeUnit ) throws InterruptedException { if ( timeUnit . toMillis ( timeout ) < 0 ) { throw new InterruptedException ( ) ; } if ( timeUnit . toMillis ( timeout ) < 0 ) { throw new InterruptedException ( ) ; } }
static void expire ( final Timer timer ) { if ( timer != null ) { if ( ! timer . isExpired ( ) ) { timer . expire ( ) ; } else { timer . expire ( ) ; } } }
get_declared_methods ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . declared_methods NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_field_names ( self ) : NEW_LINE INDENT fields = self . _fields NEW_LINE for field in fields : NEW_LINE INDENT fields [ field . name ] = field NEW_LINE DEDENT return fields NEW_LINE DEDENT
def def def get_constructor def get_constructor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . get_constructor_constructor_constructor ( ) NEW_LINE DEDENT def get_constructor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . constructor NEW_LINE DEDENT NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_method ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _method NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
addExtension ( self , extension ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _extensions . add ( extension ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _extensions . add ( extension ) NEW_LINE DEDENT DEDENT
static boolean isAllowed ( String resourceType , String parameterName ) { if ( resourceType == null ) { return false ; } if ( parameterName == null ) { return false ; } if ( parameterName . equals ( " " ) ) { return true ; } return false ; }
migrate_factory_class ( self ) : NEW_LINE INDENT if self . factory_class is not None : NEW_LINE INDENT self . factory_class = self . factory_class NEW_LINE DEDENT return self NEW_LINE DEDENT
cancel ( self , invocation ) : NEW_LINE INDENT if not self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isCanceled ( ) : NEW_LINE INDENT return NEW_LINE
boolean isCanceled ( ) { if ( cancelled ) { return false ; } else { return true ; } }
public public static boolean isCompatible ( String type , String type ) { return type . equals ( type ) || type . equals ( type ) ; }
is_indexed_funciton ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , funciton ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
estimates ( self ) : NEW_LINE INDENT if self . filter is not None : NEW_LINE INDENT return self . filter . estimates ( self ) NEW_LINE DEDENT DEDENT
find_all_classes_in_directory ( self , directory ) : NEW_LINE INDENT return self . find_all_classes_in_directory ( directory ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public public void execute ( ) throws IOException { if ( ! isIndexed ( ) ) { throw new UnsupportedOperationException ( " This method is not supported on non - indexed fields " ) ; } }
public public public static Type getType ( String field ) { return this . field . getType ( ) ; }
void push ( Record record ) { if ( record == null ) { throw new NullPointerException ( " record is null " ) ; } if ( record . getIdentifier ( ) == null ) { throw new NullPointerException ( " record . getIdentifier ( ) is null " ) ; } if ( record . getIdentifier ( ) == null ) { throw new NullPointerException ( " record . getIdentifier ( ) is null " ) ; } if ( record . getIdentifier ( ) == null ) { throw new NullPointerException ( " record . getIdentifier ( ) is null " ) ; } }
update_primary ( self , record ) : NEW_LINE INDENT if not self . is_primary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_secondary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_primary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_secondary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_primary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_secondary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_primary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_secondary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_primary ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_secondary ( record ) : NEW_LINE
def minimum_cluster_number_number_of def minimum_clusters ( self ) : NEW_LINE INDENT return self . cluster_map . get_cluster_cluster_number ( ) NEW_LINE DEDENT
_write_flat_conditions ( self , flat_conditions ) : NEW_LINE INDENT if flat_conditions is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flat_conditions , list ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , tuple ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , list ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , tuple ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , list ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , tuple ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , list ) : NEW_LINE INDENT return flat_conditions NEW_LINE DEDENT elif isinstance ( flat_conditions , list ) :
def def project ( self ) : NEW_LINE INDENT projections = [ ] NEW_LINE projections . extend ( self . projections ) NEW_LINE projections . extend ( self . projections ) NEW_LINE projections . extend ( self . projections ) NEW_LINE return projections NEW_LINE DEDENT
translate_subqueries ( self , subqueries ) : NEW_LINE INDENT if isinstance ( subqueries , list ) : NEW_LINE INDENT return subqueries NEW_LINE DEDENT elif isinstance ( subqueries , tuple ) : NEW_LINE INDENT return subqueries NEW_LINE DEDENT elif isinstance ( subqueries , list ) : NEW_LINE INDENT return subqueries NEW_LINE DEDENT else : NEW_LINE INDENT return subqueries NEW_LINE DEDENT DEDENT
boolean isRID ( String RID ) { if ( RID == null ) { throw new IllegalArgumentException ( " RID is null " ) ; } if ( RID . equals ( " " ) ) { return true ; } return false ; }
sort ( self , index ) : NEW_LINE INDENT self . index = index NEW_LINE return self . index NEW_LINE DEDENT
is_top ( cls ) : NEW_LINE INDENT return cls . is_top ( ) NEW_LINE DEDENT
static boolean isAsc ( List < OrderClause > clauses ) { if ( clauses == null ) { return false ; } if ( clauses . size ( ) == 0 ) { return true ; } if ( clauses . size ( ) == 1 ) { return true ; } if ( clauses . size ( ) == 2 ) { return true ; } return false ; }
boolean contains ( Expression condition ) { if ( condition == null ) { return false ; } if ( condition . isExpression ( ) ) { return true ; } return false ; }
def get_best_index ( self , block ) : NEW_LINE INDENT return self . _get_index ( block ) NEW_LINE return self . _get_index ( block ) NEW_LINE DEDENT
index ( self ) : NEW_LINE INDENT index = self . _get_index ( ) NEW_LINE if index is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return index NEW_LINE DEDENT DEDENT
index_conditions ( self ) : NEW_LINE INDENT index_conditions = [ ] NEW_LINE index_conditions . extend ( self . index_conditions ( ) ) NEW_LINE return index_conditions NEW_LINE DEDENT
create ( self , strategy ) : NEW_LINE INDENT if isinstance ( strategy , strategies . Strategy ) : NEW_LINE INDENT return strategy NEW_LINE DEDENT if isinstance ( strategy , strategies . Strategy ) : NEW_LINE INDENT return strategy NEW_LINE DEDENT if isinstance ( strategy , strategies . Strategy ) : NEW_LINE INDENT return strategy NEW_LINE DEDENT if isinstance ( strategy , strategies . Strategy ) : NEW_LINE INDENT return strategy NEW_LINE DEDENT DEDENT
check_permission ( self , operation ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _check_permission ( operation ) NEW_LINE DEDENT except PermissionDenied : NEW_LINE INDENT return self . _check_permission ( operation ) NEW_LINE DEDENT return self . _check_permission ( operation ) NEW_LINE DEDENT
check_rule ( self , rule ) : NEW_LINE INDENT if not isinstance ( rule , Rule ) : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( rule , Rule ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( rule , Rule ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
compact_string ( self ) : NEW_LINE INDENT compact_string = ' ' . join ( self . compact_strings ) NEW_LINE if self . compact_strings : NEW_LINE INDENT return compact_string NEW_LINE DEDENT return compact_string NEW_LINE DEDENT
protect_system_database ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _system_database NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _system_database NEW_LINE DEDENT DEDENT

remove_node_map_entry ( node_map_entry ) : NEW_LINE INDENT node_map_entry = node_map_entry . copy ( ) NEW_LINE node_map_entry . clear ( ) NEW_LINE node_map_entry . add ( node_map_entry ) NEW_LINE return node_map_entry NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

rollback ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE DEDENT DEDENT
update_record_identity ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . commit ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . commit ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
void update ( ) throws IOException { if ( ! isSuccessful ( ) ) { throw new IOException ( " Failed to update the record cache . " ) ; } if ( ! isSuccessful ( ) ) { throw new IOException ( " Failed to update the record cache . " ) ; } }
def create ( path ) : NEW_LINE INDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . exists ( path ) : NEW_LINE INDENT return NEW_
move ( source , target ) : NEW_LINE INDENT try : NEW_LINE INDENT move_file ( source , target ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT return move_file NEW_LINE DEDENT
split_pattern ( self , pattern ) : NEW_LINE INDENT if len ( pattern ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( pattern ) == 1 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( pattern ) == 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( pattern ) == 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
void execute ( Node node ) { if ( node == null ) { throw new IllegalArgumentException ( " node cannot be null . " ) ; } if ( node . getId ( ) != null ) { throw new IllegalArgumentException ( " node cannot be null . " ) ; } if ( node . getId ( ) != null ) { throw new IllegalArgumentException ( " node cannot be null . " ) ; } }
split ( self , s ) : NEW_LINE INDENT if len ( s ) == 1 : NEW_LINE INDENT return s NEW_LINE DEDENT elif len ( s ) == 2 : NEW_LINE INDENT return s NEW_LINE DEDENT elif len ( s ) == 3 : NEW_LINE INDENT return s NEW_LINE DEDENT else : NEW_LINE INDENT return s NEW_LINE DEDENT DEDENT
def _get_channel ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . channel NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
merge_shorts ( self , byte [ ] buffer ) : NEW_LINE INDENT if len ( buffer ) == 1 : NEW_LINE INDENT return buffer [ 0 ] NEW_LINE DEDENT if len ( buffer ) == 2 : NEW_LINE INDENT return buffer [ 1 ] NEW_LINE DEDENT return buffer [ 0 ] NEW_LINE DEDENT
split ( self , value ) : NEW_LINE INDENT if len ( value ) == 1 : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
create_property ( self , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT return NEW_LINE DEDENT properties = { } NEW_LINE properties . update ( properties ) NEW_LINE properties . update ( properties ) NEW_LINE return properties NEW_LINE DEDENT
index ( self , value ) : NEW_LINE INDENT if isinstance ( value , list ) : NEW_LINE INDENT return self . _index ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _index ( value ) NEW_LINE DEDENT DEDENT
remove ( self , key , value ) : NEW_LINE INDENT if key in self . keys : NEW_LINE INDENT self . keys . remove ( key ) NEW_LINE DEDENT self . values . remove ( value ) NEW_LINE DEDENT
def def def def def def execute ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_first_record ( self , record ) : NEW_LINE INDENT if not record : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return record NEW_LINE DEDENT DEDENT
create_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' w ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT file = None NEW_LINE DEDENT else : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT return file NEW_LINE DEDENT
add_header_size ( self , header_size ) : NEW_LINE INDENT if self . header_size is None : NEW_LINE INDENT self . header_size = header_size NEW_LINE DEDENT else : NEW_LINE INDENT self . header_size = header_size NEW_LINE DEDENT DEDENT
replace_file_content ( self , file_content ) : NEW_LINE INDENT if file_content is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( file_content , str ) : NEW_LINE INDENT return file_content NEW_LINE DEDENT else : NEW_LINE INDENT return file_content NEW_LINE DEDENT DEDENT
get_results ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_results ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
unlock_write_lock ( self ) : NEW_LINE INDENT if self . write_lock is not None : NEW_LINE INDENT self . write_lock . unlock ( ) NEW_LINE DEDENT DEDENT

acquire_network_channel ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . network_channel NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static ODatabasePojoAbstract wrap ( ODatabasePojoAbstract oDatabasePojoAbstract ) { if ( oDatabasePojoAbstract != null ) { return oDatabasePojoAbstract . wrap ( oDatabasePojoAbstract ) ; } return oDatabasePojoAbstract ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
kill_network_manager ( self ) : NEW_LINE INDENT if self . network_manager : NEW_LINE INDENT self . network_manager . kill ( ) NEW_LINE self . network_manager = None NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
disconnect ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

void internalUse ( ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( i == 0 ) { return ; } } for ( int i = 0 ; i < 2 ; i ++ ) { if ( i == 0 ) { return ; } } }
release ( self , transaction ) : NEW_LINE INDENT self . commit ( transaction ) NEW_LINE self . commit ( transaction ) NEW_LINE DEDENT
check_schema_generation ( self ) : NEW_LINE INDENT if self . schema_generation : NEW_LINE INDENT return self . schema_generation NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
update_metric_metadata ( self , metric_metadata ) : NEW_LINE INDENT self . _metric_metadata = metric_metadata NEW_LINE DEDENT
move_to_end ( self , range ) : NEW_LINE INDENT if range is None : NEW_LINE INDENT return NEW_LINE DEDENT iterator = self . iterator ( range ) NEW_LINE if iterator is None : NEW_LINE INDENT return NEW_LINE DEDENT end = iterator . next ( ) NEW_LINE if end is None : NEW_LINE INDENT return NEW_LINE DEDENT if end is not None : NEW_LINE INDENT return NEW_LINE DEDENT if end is not None : NEW_LINE INDENT return NEW_LINE DEDENT if end is not None : NEW_LINE INDENT return NEW_LINE DEDENT if end is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def def next ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
FIND_REFERENCES ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _FIND_REFERENCES NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
callback ( self ) : NEW_LINE INDENT if self . callback is not None : NEW_LINE INDENT self . callback ( ) NEW_LINE DEDENT DEDENT
public static synchronized void register ( ) { synchronized ( this ) { if ( this . storages . size ( ) > 0 ) { for ( int i = 0 ; i < this . storages . size ( ) ; i ++ ) { this . storages . add ( storages . get ( i ) ) ; } } } }
limit ( self , limit ) : NEW_LINE INDENT if limit is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return limit NEW_LINE DEDENT DEDENT
is_indexed_function ( self , expression ) : NEW_LINE INDENT if expression is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
move_offset ( self , offset ) : NEW_LINE INDENT if offset is None : NEW_LINE INDENT offset = self . offset NEW_LINE DEDENT else : NEW_LINE INDENT offset = self . offset NEW_LINE DEDENT return offset NEW_LINE DEDENT
def def fill ( int iLength , int iFiller ) throws IOException { if ( iLength > 0 ) { int iLength = iLength - iFiller ; if ( iLength > 0 ) { iLength = iLength - iFiller ; } else if ( iLength > 0 ) { iLength = iLength - iFiller ; } else if ( iLength > 0 ) { iLength = iLength - iFiller ; } else if ( iLength > 0 ) { iLength = iLength - iFiller ; } else if ( iLength > 0 ) { iLength = iLength - iFiller ; } else if ( iLength > 0 ) { iLength = iLength - iFiller ; } if ( iLength > 0 ) { iLength = iLength - iLength
get_last_statement_execution_step ( self ) : NEW_LINE INDENT if self . _last_statement_execution_step is not None : NEW_LINE INDENT return self . _last_statement_execution_step NEW_LINE DEDENT DEDENT
get_last_statement ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _last_statement NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
boolean evaluate ( ) { return true ; }
execute ( self , command ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute ( command ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
load_record_info ( self ) : NEW_LINE INDENT self . load_record_info ( ) NEW_LINE self . load_record_info ( ) NEW_LINE DEDENT
parse_statement ( self , statement ) : NEW_LINE INDENT if statement is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( statement , basestring ) : NEW_LINE INDENT return parse_statement ( statement ) NEW_LINE DEDENT else : NEW_LINE INDENT return parse_statement ( statement ) NEW_LINE DEDENT DEDENT
def get_context_variables ( self ) : NEW_LINE INDENT context = { } NEW_LINE context . update ( self . context ) NEW_LINE context . update ( self . request ) NEW_LINE context . update ( self . context ) NEW_LINE return context NEW_LINE DEDENT
def start ( self ) : NEW_LINE INDENT if self . depth == 0 : NEW_LINE INDENT self . depth = self . depth - 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . depth = self . depth - 1 NEW_LINE DEDENT return self NEW_LINE DEDENT
addIndexDefinition ( self , indexDefinition ) : NEW_LINE INDENT self . indexDefinitions . add ( indexDefinition ) NEW_LINE DEDENT
_invoke_aggregate_item ( self , item ) : NEW_LINE INDENT if item is None : NEW_LINE INDENT return NEW_LINE DEDENT if item is not None : NEW_LINE INDENT return NEW_LINE DEDENT if item is not None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( item , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance
def def get_type ( self ) : NEW_LINE INDENT return self . _get_type ( ) NEW_LINE DEDENT
collate ( self , object ) : NEW_LINE INDENT if isinstance ( object , Field ) : NEW_LINE INDENT return self . collate ( object ) NEW_LINE DEDENT return self . collate ( object ) NEW_LINE DEDENT
quote_identifier ( self , identifier ) : NEW_LINE INDENT if identifier is not None : NEW_LINE INDENT return identifier NEW_LINE DEDENT else : NEW_LINE INDENT return ' " % s " ' % identifier NEW_LINE DEDENT DEDENT
def def def def def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python__ def def def def def def get_p__python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def _get_p__python____python____python____python____python____python____python____python____python____python____python__ def def def def def _get_p__python____python____python____python____python____python____python____python____python__ def def def def def _
drop_cluster ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cluster . drop ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_json ( self , json_file ) : NEW_LINE INDENT try : NEW_LINE INDENT return json . loads ( json_file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
boolean matches ( String password ) { if ( password == null ) { return false ; } if ( password . length ( ) == 0 ) { return false ; } if ( password . length ( ) == 0 ) { return false ; } return true ; }
hash ( self , input_string ) : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( input_string ) . hexdigest ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
boolean isSupported ( String algorithm ) { if ( algorithm == null ) { return false ; } if ( algorithm . length ( ) == 0 ) { return true ; } if ( algorithm . length ( ) == 1 ) { return true ; } if ( algorithm . length ( ) == 2 ) { return true ; } return false ; }

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_iterable_edges ( self , query ) : NEW_LINE INDENT edges = self . _get_edges ( query ) NEW_LINE result = [ ] NEW_LINE for edge in edges : NEW_LINE INDENT result . append ( edges ) NEW_LINE DEDENT return result NEW_LINE DEDENT
get_partition_keys ( self ) : NEW_LINE INDENT partition_keys = [ ] NEW_LINE for key in self . partition_keys : NEW_LINE INDENT partition_keys . append ( key ) NEW_LINE DEDENT return partition_keys NEW_LINE DEDENT

current_graph_settings ( self ) : NEW_LINE INDENT return self . _current_graph_settings NEW_LINE DEDENT
is_trimmed ( self , file ) : NEW_LINE INDENT if not self . is_trimmed ( file ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
lock_keyword ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT lock_keyword = self . lock_keyword NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT lock_keyword = ' ' NEW_LINE DEDENT return lock_keyword NEW_LINE DEDENT
add_cluster_to_class ( cls , cluster_name ) : NEW_LINE INDENT if cluster_name is None : NEW_LINE INDENT cluster_name = cls . __name__ NEW_LINE DEDENT if cluster_name not in cls . __clusters : NEW_LINE INDENT cls . __clusters . add ( cluster_name ) NEW_LINE DEDENT return cls . __clusters [ cluster_name ] NEW_LINE DEDENT
remove_all_records ( self ) : NEW_LINE INDENT if self . cluster is not None : NEW_LINE INDENT return self . cluster . remove_all_records ( ) NEW_LINE DEDENT DEDENT
initialize ( self , cache ) : NEW_LINE INDENT self . cache = cache NEW_LINE self . cache . initialize ( ) NEW_LINE self . cache . initialize ( ) NEW_LINE DEDENT
static List < Operation > getOperations ( ) { List < Operation > operations = new ArrayList < Operation > ( ) ; operations . add ( new Operation ( ) ) ; operations . add ( new Operation ( ) ) ; operations . add ( new Operation ( ) ) ; return operations ; }
static Result set ( Result result ) { if ( result == null ) { result = new Result ( ) ; } else { result . set ( result ) ; } return result ; }
grant_permission ( self , resource , permission ) : NEW_LINE INDENT try : NEW_LINE INDENT self . resource . grant_permission ( resource , permission ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . resource . grant_permission ( resource , permission ) NEW_LINE DEDENT DEDENT
revoke_permission ( self , resource ) : NEW_LINE INDENT try : NEW_LINE INDENT self . resource . revoke_permission ( resource ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . resource . revoke_permission ( resource ) NEW_LINE DEDENT DEDENT
delete ( self , record ) : NEW_LINE INDENT if not self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( record ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def def def def def bind__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
reduce ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
table_index ( self , depth ) : NEW_LINE INDENT table_index = self . table_index ( depth ) NEW_LINE if table_index is None : NEW_LINE INDENT table_index = self . table_index ( ) NEW_LINE DEDENT return table_index NEW_LINE DEDENT
supplemental_hash_function ( self , hash_function ) : NEW_LINE INDENT return self . _supplemental_hash_function ( hash_function ) NEW_LINE DEDENT
create_index ( self , index_name ) : NEW_LINE INDENT self . index_name = index_name NEW_LINE self . index_name = index_name NEW_LINE return self . index_name NEW_LINE DEDENT
remove_index ( self , index ) : NEW_LINE INDENT if self . index is not None : NEW_LINE INDENT self . index = self . index NEW_LINE DEDENT DEDENT
first_index ( self , property ) : NEW_LINE INDENT if isinstance ( property , str ) : NEW_LINE INDENT return property . index NEW_LINE DEDENT else : NEW_LINE INDENT return property . index NEW_LINE DEDENT DEDENT


remove_event_listener ( event_listener ) : NEW_LINE INDENT if event_listener is None : NEW_LINE INDENT return NEW_LINE DEDENT event_listener . remove_event_listener ( event_listener ) NEW_LINE DEDENT
create_distributed_database ( self ) : NEW_LINE INDENT if self . distributed_database : NEW_LINE INDENT return self . distributed_database NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_distributed_database ( ) NEW_LINE DEDENT DEDENT
def def remove_response_manager ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . manager . remove ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
copy ( self ) : NEW_LINE INDENT if self . _instance is not None : NEW_LINE INDENT return self . _instance . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _instance . copy ( ) NEW_LINE DEDENT DEDENT
Only for internal usage .
replace_delegate ( self , delegate ) : NEW_LINE INDENT self . delegate = delegate NEW_LINE return self . delegate NEW_LINE DEDENT

create_cluster ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_cluster ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
close_databases ( self , databases ) : NEW_LINE INDENT if not databases : NEW_LINE INDENT return NEW_LINE DEDENT for database in databases : NEW_LINE INDENT try : NEW_LINE INDENT database . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
remove_from_closed_storage ( self ) : NEW_LINE INDENT if self . closed_storage : NEW_LINE INDENT self . close_storage ( ) NEW_LINE DEDENT DEDENT
append_function_names ( factories , function_names ) : NEW_LINE INDENT for factories in factories . values ( ) : NEW_LINE INDENT for function_name in function_names : NEW_LINE INDENT factories . append ( function_name ) NEW_LINE DEDENT DEDENT DEDENT
append_collate_names ( self , collate_names ) : NEW_LINE INDENT self . collate_names . append ( collate_names ) NEW_LINE DEDENT
append_command_names ( self , command_names ) : NEW_LINE INDENT command_names = [ ] NEW_LINE for name in command_names : NEW_LINE INDENT command_names . append ( name ) NEW_LINE DEDENT DEDENT
public public static final Field [ ] getFields ( ) { return new Field [ ] { @ Override public Field [ ] getFields ( ) { return new Field [ ] { } } ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
serialize_records ( self , records ) : NEW_LINE INDENT if isinstance ( records , list ) : NEW_LINE INDENT return records NEW_LINE DEDENT else : NEW_LINE INDENT return records NEW_LINE DEDENT DEDENT
write_record ( self , record ) : NEW_LINE INDENT if isinstance ( record , dict ) : NEW_LINE INDENT record = json . dumps ( record ) NEW_LINE DEDENT else : NEW_LINE INDENT record = json . dumps ( record ) NEW_LINE DEDENT return record NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

open_database ( name , password = None ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT if password is None : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW_LINE DEDENT if not password : NEW_LINE INDENT password = getpass . getpass ( ) NEW
close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . pool . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public static UUID serialize ( UUID uuid ) { if ( uuid == null ) { throw new IllegalArgumentException ( " UUID cannot be null . " ) ; } return uuid ; }


writeCache ( self ) : NEW_LINE INDENT cache = self . getCache ( ) NEW_LINE cache . put ( self . key , self . value ) NEW_LINE cache . put ( self . key , self . value ) NEW_LINE DEDENT
public public public static synchronized void aggregate ( ) throws IOException { if ( this . method . getClass ( ) . getSimpleName ( ) != null ) { throw new UnsupportedOperationException ( ) ; } }



get_timer ( self ) : NEW_LINE INDENT timer = self . _timer . get_timer ( ) NEW_LINE return self . _timer NEW_LINE DEDENT
def get_timer ( self ) : NEW_LINE INDENT return self . get_timer ( ) . get_timer ( ) NEW_LINE DEDENT


void flush ( ) throws IOException { log . info ( " Flushing data . . . " ) ; log . info ( " Flushing data . . . " ) ; log . info ( " Flushing data . . . " ) ; log . info ( " Flushing data . . . " ) ; }
parse_sql_statement ( self , sql_statement ) : NEW_LINE INDENT if isinstance ( sql_statement , str ) : NEW_LINE INDENT return sql_statement NEW_LINE DEDENT elif isinstance ( sql_statement , str ) : NEW_LINE INDENT return sql_statement NEW_LINE DEDENT elif isinstance ( sql_statement , str ) : NEW_LINE INDENT return sql_statement NEW_LINE DEDENT else : NEW_LINE INDENT return sql_statement NEW_LINE DEDENT DEDENT
void init ( ) throws Exception { super . init ( ) ; if ( this . pings != null ) { this . pings = this . pings . clone ( ) ; } }
init ( self ) : NEW_LINE INDENT if self . server is not None : NEW_LINE INDENT self . server = self . server NEW_LINE DEDENT else : NEW_LINE INDENT self . server = None NEW_LINE DEDENT DEDENT
remove ( self , element ) : NEW_LINE INDENT if isinstance ( element , Vertex ) : NEW_LINE INDENT self . remove ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT self . remove ( element ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_property ( self , propertyName ) : NEW_LINE INDENT if propertyName in self . properties : NEW_LINE INDENT self . properties . remove ( propertyName ) NEW_LINE DEDENT DEDENT
create_class ( cls ) : NEW_LINE INDENT if not cls : NEW_LINE INDENT return NEW_LINE DEDENT if not cls : NEW_LINE INDENT return NEW_LINE DEDENT cls = cls . __new__ ( cls ) NEW_LINE if not cls : NEW_LINE INDENT return NEW_LINE DEDENT cls . __new__ ( cls ) NEW_LINE DEDENT
wrap_ courser ( courser ) : NEW_LINE INDENT if courser is not None : NEW_LINE INDENT return courser NEW_LINE DEDENT else : NEW_LINE INDENT return courser NEW_LINE DEDENT DEDENT
create_custom_strategy ( self ) : NEW_LINE INDENT if self . strategy is not None : NEW_LINE INDENT self . strategy = self . strategy NEW_LINE DEDENT return self NEW_LINE DEDENT
create_edge_strategy ( self ) : NEW_LINE INDENT if self . edge_strategy : NEW_LINE INDENT return self . edge_strategy NEW_LINE DEDENT else : NEW_LINE INDENT return self . edge_strategy NEW_LINE DEDENT DEDENT
iterator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def def def def def def def def _get___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def _get___python____python____python____python____python____python____python__ def def def def def def def def def _get___python____python____python____python____python____python__ def def def def def def def def def def _get___python____python____python____python__ def def def def def def def _get_iterator ( self ) : NEW def _get_cluster def _get_iterator ( self ) : NEW__python__ def _get_iterator ( self ) : NEW__python__ def _get_iterator ( self ) : NEW__python__ def _get_iterator ( self ) : NEW__python__ def _get_iterator ( self ) : NEW__python__ def _get_iterator ( self ) : NEW__python____python____python____python____python__
flush ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . index . flush ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . index . flush ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
merge ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
update_current_record ( self ) : NEW_LINE INDENT current_record = self . current_record NEW_LINE if current_record is not None : NEW_LINE INDENT return current_record NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
is_indexed_function ( self , function ) : NEW_LINE INDENT if isinstance ( function , indexed_function ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
write_page ( self , page ) : NEW_LINE INDENT self . cache . put ( page , page ) NEW_LINE self . cache . put ( page , page ) NEW_LINE DEDENT
read_page_content ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT page = self . cache . get ( self . index ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT page = self . cache . get ( self . index ) NEW_LINE DEDENT if page is None : NEW_LINE INDENT return None NEW_LINE DEDENT return page NEW_LINE DEDENT
flush ( self ) : NEW_LINE INDENT if not self . buffered : NEW_LINE INDENT self . buffered = True NEW_LINE DEDENT else : NEW_LINE INDENT self . buffered = False NEW_LINE DEDENT DEDENT
def def init ( self ) : NEW_LINE INDENT self . cache = { } NEW_LINE self . cache = { } NEW_LINE DEDENT
is_active ( self ) : NEW_LINE INDENT return self . _is_active ( ) NEW_LINE DEDENT
def def new_node_strategy ( self ) : NEW_LINE INDENT return self . _node_strategy . new_node_strategy ( ) NEW_LINE DEDENT
def get_execution_mode ( self ) : NEW_LINE INDENT if self . _execution_mode is None : NEW_LINE INDENT return self . _execution_mode NEW_LINE DEDENT return self . _execution_mode NEW_LINE DEDENT
def def read ( self ) : def read ( self ) : NEW
public public static List < String > listClusters ( ) { List < String > clusters = new ArrayList < String > ( ) ; for ( int i = 0 ; i < clusters . size ( ) ; i ++ ) { clusters . add ( clusters . get ( i ) ) ; } return clusters ; }
get_server_names ( self ) : NEW_LINE INDENT cluster = self . cluster . getCluster ( ) NEW_LINE server_names = [ ] NEW_LINE for name in cluster . servers : NEW_LINE INDENT server_names . append ( name ) NEW_LINE DEDENT return server_names NEW_LINE DEDENT
is_cluster ( self , cluster ) : NEW_LINE INDENT return self . _is_cluster ( cluster ) NEW_LINE DEDENT
boolean isLocalCluster ( ) { if ( isLocalCluster ( ) ) { return true ; } else { return false ; } }
def get_master public static List < String > list ( ) { List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { list . add ( list . get ( i ) ) ; } return list ; } return list ; }
get_servers ( self ) : NEW_LINE INDENT servers = [ ] NEW_LINE for server in self . servers . values ( ) : NEW_LINE INDENT servers . append ( server ) NEW_LINE DEDENT return servers NEW_LINE DEDENT
clusters ( self ) : NEW_LINE INDENT clusters = [ ] NEW_LINE for cluster in self . clusters . values ( ) : NEW_LINE INDENT clusters . append ( cluster ) NEW_LINE DEDENT return clusters NEW_LINE DEDENT
get_clusters ( self ) : NEW_LINE INDENT clusters = [ ] NEW_LINE for cluster in self . clusters . values ( ) : NEW_LINE INDENT clusters . append ( cluster ) NEW_LINE DEDENT return clusters NEW_LINE DEDENT
static OwnerServer findOwnerServer ( Cluster cluster ) { if ( cluster == null ) { return null ; } else { return new OwnerServer ( cluster . getName ( ) ) ; } }
static String getOwnerServer ( Cluster cluster ) { if ( cluster == null ) { return null ; } String ownerServer = cluster . getOwnerServer ( ) ; if ( ownerServer == null ) { return null ; } return ownerServer ; }
get_configured_server_list ( self ) : NEW_LINE INDENT server_list = [ ] NEW_LINE for cluster in self . cluster_list : NEW_LINE INDENT server_list . append ( cluster . name ) NEW_LINE DEDENT return server_list NEW_LINE DEDENT
static List < String > getRegisteredServers ( ) { List < String > servers = new ArrayList < String > ( ) ; for ( String server : servers ) { servers . add ( server ) ; } return servers ; }
get_configured_data_centers ( self ) : NEW_LINE INDENT return self . _get_configured_data_centers ( ) NEW_LINE DEDENT
write_quorum ( self , quorum ) : NEW_LINE INDENT return self . _write_quorum ( quorum ) NEW_LINE DEDENT
is_sharded ( self ) : NEW_LINE INDENT if self . _sharded : NEW_LINE INDENT return self . _sharded NEW_LINE DEDENT return True NEW_LINE DEDENT
static List < String > listServers ( ) { List < String > servers = new ArrayList < String > ( ) ; for ( int i = 0 ; i < servers . size ( ) ; i ++ ) { servers . add ( servers . get ( i ) ) ; } return servers ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_global_read_quorum ( self ) : NEW_LINE INDENT return self . _get_global_read_quorum ( ) NEW_LINE DEDENT
write_quorum ( self , quorum ) : NEW_LINE INDENT self . write_quorum ( quorum ) NEW_LINE return self . write_quorum ( quorum ) NEW_LINE DEDENT
get_cluster_configuration ( self ) : NEW_LINE INDENT cluster_configuration = self . get_cluster_configuration ( ) NEW_LINE if cluster_configuration is None : NEW_LINE INDENT return None NEW_LINE DEDENT return cluster_configuration NEW_LINE DEDENT
get_dc_configuration ( self ) : NEW_LINE INDENT dc_configuration = self . _get_dc_configuration ( ) NEW_LINE if dc_configuration : NEW_LINE INDENT return dc_configuration NEW_LINE DEDENT return None NEW_LINE DEDENT
public static final void setInternal ( final String name , final String value ) { if ( value == null ) { throw new IllegalArgumentException ( ) ; } if ( value == null ) { throw new IllegalArgumentException ( ) ; } if ( value == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
index_by_name ( self , name , class_name ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE class
def index ( name ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE return name NEW_LINE DEDENT
public public void addVertex ( final Vertex vertex ) { if ( vertex == null ) { throw new IllegalArgumentException ( " vertex is null " ) ; } else if ( vertex == null ) { throw new IllegalArgumentException ( " vertex is null " ) ; } }
createEdge ( self ) : NEW_LINE INDENT if self . label is None : NEW_LINE INDENT self . label = self . label NEW_LINE DEDENT else : NEW_LINE INDENT self . label = self . label NEW_LINE DEDENT return self NEW_LINE DEDENT
Vertex getVertex ( int id ) { if ( id == 0 ) { return null ; } if ( id == 1 ) { return new Vertex ( ) ; } if ( id == 2 ) { return new Vertex ( ) ; } return null ; }
List < Vertices > getAllVertices ( ) { List < Vertices > vertices = new ArrayList < Vertices > ( ) ; for ( int i = 0 ; i < vertices . size ( ) ; i ++ ) { vertices . add ( vertices . get ( i ) ) ; } return vertices ; }
getEdges ( self , edges , iPolymorphic = False ) : NEW_LINE INDENT if isinstance ( edges , list ) : NEW_LINE INDENT edges = [ edges ] NEW_LINE DEDENT else : NEW_LINE INDENT edges = [ edges ] NEW_LINE DEDENT return edges NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_database ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . database . open ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . database . close ( ) NEW_LINE DEDENT return self . database NEW_LINE DEDENT
close_graph ( self ) : NEW_LINE INDENT if self . _graph is not None : NEW_LINE INDENT self . _graph . close ( ) NEW_LINE self . _graph = None NEW_LINE DEDENT DEDENT
static OrientVertexType getInstance ( Class < ? extends OrientVertexType > clazz ) { OrientVertexType instance = null ; try { instance = clazz . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return instance ; }
static OrientVertexType getInstance ( String iTypeName ) { OrientVertexType instance = null ; try { instance = new OrientVertexType ( iTypeName ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( e ) ; } return instance ; }
static Vertex persistentClass ( Class < ? extends Vertex > vertexClass ) { if ( vertexClass == null ) { throw new IllegalArgumentException ( ) ; } return vertexClass ; }
drop_vertex_class ( self , vertex_class ) : NEW_LINE INDENT self . vertex_class = vertex_class NEW_LINE return self . vertex_class NEW_LINE DEDENT
static OrientEdgeType getInstance ( String iTypeName ) { OrientEdgeType instance = null ; try { instance = new OrientEdgeType ( iTypeName ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( e ) ; } return instance ; }
static Edge createEdge ( Edge edge ) { if ( edge == null ) { throw new IllegalArgumentException ( " Edge cannot be null . " ) ; } if ( edge . isClosed ( ) ) { throw new IllegalArgumentException ( " Edge cannot be null . " ) ; } if ( edge . isClosed ( ) ) { throw new IllegalArgumentException ( " Edge cannot be null . " ) ; } return edge ; }
def def get_graph_element_vertex_edge ( self , vertex , edge ) : NEW_LINE INDENT return self . _get_graph_element_vertex_edge ( vertex , edge ) NEW_LINE DEDENT
index ( self , field_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _index . get ( field_name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _index . get ( field_name ) NEW_LINE DEDENT DEDENT
def def def get_indexes ( self ) : NEW_LINE INDENT return self . _get_indexes ( ) NEW_LINE DEDENT
public void remove ( int index ) { if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index == - 1 ) { return ; } if ( index

public static void monitor ( ) { for ( int i = 0 ; i < 1000 ; i ++ ) { if ( i < 1000 ) { return ; } if ( i > 0 ) { return ; } } }

def def def D def def def def _ public public public void registerMBean public void register ( final public void register ( final String name , String name , String name ) { if ( name == def def def def _ def def def def _ def def def def _ public void registerMBean public void register ( final public void register ( String name , String name , String name ) { if ( name != null ) { if ( name != null ) { if ( name != null ) { if ( name != null ) { if ( name != null ) { if ( name != null ) { return ;
static void collect ( ) throws IOException { if ( ! isAlive ( ) ) { throw new IOException ( ) ; } if ( ! isAlive ( ) ) { throw new IOException ( ) ; } }
static void accumulates ( ) { if ( ! isAlive ( ) ) { return ; } if ( ! isAlive ( ) ) { return ; } System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; }
public public public static void collect ( ) throws Exception { if ( ! isDestroyed ( ) ) { return ; } else if ( isDestroyed ( ) { return ; } } }
static String content ( String content ) { if ( content == null ) { return " " ; } if ( content . length ( ) == 0 ) { return " " ; } if ( content . length ( ) == 0 ) { return " " ; } return content . substring ( 0 , content . length ( ) - 1 ) ; }
get_property_value ( self , property_name ) : NEW_LINE INDENT if not property_name : NEW_LINE INDENT return None NEW_LINE DEDENT return property_name NEW_LINE DEDENT
detaches ( self , object ) : NEW_LINE INDENT if isinstance ( object , Document ) : NEW_LINE INDENT return self . detaches ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . detaches ( object ) NEW_LINE DEDENT DEDENT
getVersion ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . version NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
OCommandRequest unwrap ( OCommandRequest request ) { if ( request instanceof OCommandRequest ) { OCommandRequest oCommandRequest = ( OCommandRequest ) request ; return oCommandRequest ; } else { return request ; } }
static void markDirty ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( " Object is null " ) ; } if ( object . getClass ( ) . getSuperclass ( ) != null && object . getClass ( ) . getSuperclass ( ) != null && object . getClass ( ) . getSuperclass ( ) != null && object . getClass ( ) . getSuperclass ( ) != null && object . getClass ( ) . getSuperclass ( ) != null ) { throw new IllegalArgumentException ( " Object is null " ) ; } }
static boolean isDirty ( Object object ) { if ( object == null ) { return false ; } if ( object . getClass ( ) . isArray ( ) ) { return true ; } if ( object . getClass ( ) . isArray ( ) ) { return true ; } return false ; }
def def append ( self , factories , factories ) : NEW_LINE INDENT factories . append ( factories ) NEW_LINE factories . append ( factories ) NEW_LINE return factories NEW_LINE DEDENT
append ( self , factories ) : NEW_LINE INDENT self . factories . append ( factories ) NEW_LINE return self NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_all_responses_in_conflict ( self ) : NEW_LINE INDENT responses = [ ] NEW_LINE for response in self . responses : NEW_LINE INDENT responses . append ( response ) NEW_LINE DEDENT return responses NEW_LINE DEDENT
biggest_response_group ( self , response_group ) : NEW_LINE INDENT if response_group : NEW_LINE INDENT return response_group NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

def def get_received_response_objects ( self ) : NEW_LINE INDENT return self . response_objects . values ( ) NEW_LINE DEDENT
prepared_sql_execution_plan ( self ) : NEW_LINE INDENT if self . prepared_sql_execution_plan is None : NEW_LINE INDENT self . prepared_sql_execution_plan = self . prepared_sql_execution_plan NEW_LINE DEDENT else : NEW_LINE INDENT self . prepared_sql_execution_plan = self . prepared_sql_execution_plan NEW_LINE DEDENT DEDENT
test ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , expression ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( expression , expression_type ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( expression , expression_type ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def get_language_functions ( self ) : NEW_LINE INDENT return self . _get_language_functions ( ) NEW_LINE DEDENT
acquire ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . pool . acquire ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
next_position ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _next_position ( ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static int size ( ) { int size = 0 ; for ( int i = 0 ; i < size ; i ++ ) { size += i ; } return size ; }
get_value ( self , bucket , index ) : NEW_LINE INDENT value = self . bucket . get ( bucket , index ) NEW_LINE if value : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def _check_conditions ( self , conditions ) : NEW_LINE INDENT if len ( conditions ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( conditions ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
public public public public static void move ( int iFrom , int iTo , int iFrom , int iTo , int iFrom , int iTo ) { if ( iFrom > iTo ) { if ( iFrom < iTo ) { if ( iFrom < iTo ) { if ( iFrom < iTo ) { if ( iFrom > iFrom < iTo ) { if ( iFrom < iTo ) { if ( iFrom < iTo ) { iFrom = iFrom ; } else if ( iFrom > iTo ) { iFrom = iTo ; } else { iTo = iFrom ; } } } } } else { if ( iFrom < iTo ) { iFrom = iTo ; } else { iTo = iFrom ; } } } } } } }
def JumpWhiteSpaces ( self ) : NEW_LINE INDENT if self . white_spaces : NEW_LINE INDENT return self . white_spaces NEW_LINE DEDENT return self . white_spaces NEW_LINE DEDENT
public public static String read ( String s ) { return new String ( s . toCharArray ( ) ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
repair ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _repair ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _repair ( ) NEW_LINE self . _repair ( ) NEW_LINE DEDENT DEDENT
repair ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT record = self . get_record ( ) NEW_LINE if record is None : NEW_LINE INDENT return NEW_LINE DEDENT repair_record = self . get_record ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record . repair ( ) NEW_LINE repair_record
repair ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _repair ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT self . _repair ( ) NEW_LINE DEDENT self . _repair ( ) NEW_LINE DEDENT

static POJO createPojo ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isPrimitive ( ) ) { return new POJO ( clazz ) ; } else { return new POJO ( clazz ) ; } }

static < T > List < T > allClasses ( Class < T > class ) { List < T > classes = new ArrayList < T > ( ) ; for ( Class < ? extends T > clazz : class . getInterfaces ( ) ) { classes . add ( clazz ) ; } return classes ; }
def merge ( cls , handler ) : NEW_LINE INDENT if isinstance ( handler . getClass ( ) != null : NEW_LINE INDENT return handler . getClass ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return handler NEW_LINE DEDENT DEDENT
acquire ( self , pool = None ) : NEW_LINE INDENT if pool is None : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT else : NEW_LINE INDENT pool . acquire ( ) NEW_LINE DEDENT return pool NEW_LINE DEDENT

acquire ( self , pool = None ) : NEW_LINE INDENT if pool is None : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT else : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT if pool is None : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT return pool . acquire ( ) NEW_LINE DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _execute ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT

static void checkCacheMemoryConfiguration ( ) { if ( cacheMemoryConfiguration == null ) { throw new IllegalArgumentException ( " Cache memory configuration is null . " ) ; } if ( cacheMemoryConfiguration . size ( ) == 0 ) { throw new IllegalArgumentException ( " Cache memory configuration is empty . " ) ; } if ( cacheMemoryConfiguration . size ( ) == 0 ) { throw new IllegalArgumentException ( " Cache memory configuration is empty . " ) ; } }
read_vertex ( self , vertex ) : NEW_LINE INDENT if isinstance ( vertex , Vertex ) : NEW_LINE INDENT return vertex NEW_LINE DEDENT elif isinstance ( vertex , Vertex ) : NEW_LINE INDENT return vertex NEW_LINE DEDENT elif isinstance ( vertex , Vertex ) : NEW_LINE INDENT return vertex NEW_LINE DEDENT else : NEW_LINE INDENT return vertex NEW_LINE DEDENT DEDENT
def def def read ( self , edge ) : NEW_LINE INDENT if not isinstance ( edge , GraphSON . Edge ) : NEW_LINE INDENT raise ValueError ( " The given edge must be a GraphSON object . " ) NEW_LINE DEDENT def read ( self ) : NEW_LINE INDENT if isinstance ( edge , GraphSON . Edge ) : NEW_LINE INDENT return self . parse ( edge ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . parse ( edge ) NEW_LINE DEDENT DEDENT DEDENT
static JSONObject create ( JSONObject graph ) throws JSONException { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( " graph " , graph ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " type " , graph . getType ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " type " , graph . getType ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " type " , graph . getType ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put ( " name " , graph . getName ( ) ) ; jsonObject . put (
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
import ( self , configuration ) : NEW_LINE INDENT self . configuration = configuration NEW_LINE return self NEW_LINE DEDENT
get_running_job_status ( self ) : NEW_LINE INDENT return self . _running_job_status NEW_LINE DEDENT
get_data_center_map ( self ) : NEW_LINE INDENT data_center_map = { } NEW_LINE data_center_map . update ( self . data_center ) NEW_LINE return data_center_map NEW_LINE DEDENT
get_secret_key_algorithm ( self ) : NEW_LINE INDENT return self . secret_key_algorithm NEW_LINE DEDENT
static OSymmetricKey getOSymmetricKey ( OSymmetricKeyConfig keyConfig ) { if ( keyConfig == null ) { return null ; } return keyConfig . getOSymmetricKey ( ) ; }
static OSymmetricKey fromFile ( File file ) throws IOException { if ( file . exists ( ) ) { return new OSymmetricKey ( file ) ; } else { return new OSymmetricKey ( ) ; } }
static OSymmetricKey fromInputStream ( InputStream inputStream ) throws IOException { if ( inputStream == null ) { throw new IOException ( " InputStream is null " ) ; } return new OSymmetricKey ( inputStream ) ; }
byte [ ] encrypt ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } return bytes ; }
static byte [ ] toByteArray ( OutputStream out ) throws IOException { if ( out instanceof Base64 ) { return ( ( Base64 ) out ) . encode ( ) ; } else { return out . toByteArray ( ) ; } }
public static SecretKey getSavedKey ( SecretKey secretKey ) { return new SecretKeySpec ( secretKey . getEncoded ( ) , secretKey . getEncoded ( ) ) ; }
copy ( self , context ) : NEW_LINE INDENT self . _context = context NEW_LINE self . _context . copy ( ) NEW_LINE DEDENT
add_item_to_unique_result_set ( self , result_set ) : NEW_LINE INDENT result_set = result_set . copy ( ) NEW_LINE result_set . add ( result_set ) NEW_LINE return result_set NEW_LINE DEDENT
check_type_attribute ( self , type_attribute ) : NEW_LINE INDENT if isinstance ( type_attribute , str ) : NEW_LINE INDENT return type_attribute NEW_LINE DEDENT if isinstance ( type_attribute , str ) : NEW_LINE INDENT return type_attribute NEW_LINE DEDENT return type_attribute NEW_LINE DEDENT
def def public public public public public boolean isAuthenticated public public public public boolean authenticate ( ) { if ( null == public public public public boolean authenticate ( ) { return false public public public boolean public public public boolean public public public public public public public boolean public public public public public boolean public public public public public boolean public public public boolean public boolean public boolean public boolean public boolean public boolean public boolean authenticate ( ) { return null ; public boolean isAuthenticated public boolean isAuthenticated
cross ( self , map , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_record ( self , operation ) : NEW_LINE INDENT record = self . get_record ( operation ) NEW_LINE if record : NEW_LINE INDENT return record NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
read_current_record ( self ) : NEW_LINE INDENT current_record = self . get_record ( ) NEW_LINE if current_record : NEW_LINE INDENT return current_record NEW_LINE DEDENT return None NEW_LINE DEDENT
static Graph createGraph ( ) { Graph graph = new Graph ( ) ; try { graph . initialize ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return graph ; }
static Graph createGraph ( ) { Graph graph = null ; try { graph = new Graph ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return graph ; }
create ( self , factory ) : NEW_LINE INDENT self . factory = factory NEW_LINE self . pool = self . factory . pool NEW_LINE return self NEW_LINE DEDENT
def def get_property_value ( self , property_name ) : NEW_LINE INDENT return self . _properties . get ( property_name ) NEW_LINE DEDENT
close_transaction ( self , transaction ) : NEW_LINE INDENT transaction . close ( ) NEW_LINE transaction . close ( ) NEW_LINE DEDENT
def get_production_productions ( self ) : NEW_LINE INDENT return self . _productions . get_productions ( ) NEW_LINE DEDENT
next_token ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return tokens . next ( ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_specific_tokens ( self ) : NEW_LINE INDENT tokens = self . _get_tokens ( ) NEW_LINE if not tokens : NEW_LINE INDENT return None NEW_LINE DEDENT return tokens NEW_LINE DEDENT
generateParseException ( ParseException e ) : NEW_LINE INDENT try : NEW_LINE INDENT return new ParseException ( e ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
_lazy_iterable ( self , vertices ) : NEW_LINE INDENT if isinstance ( vertices , list ) : NEW_LINE INDENT return vertices NEW_LINE DEDENT elif isinstance ( vertices , tuple ) : NEW_LINE INDENT return vertices NEW_LINE DEDENT else : NEW_LINE INDENT return vertices NEW_LINE DEDENT DEDENT
void removeVertex ( Vertex vertex ) { if ( vertex != null ) { if ( vertex . getVertex ( ) != null ) { vertex . getVertex ( ) . removeVertex ( vertex . getVertex ( ) ) ; } } }
createEdge ( self ) : NEW_LINE INDENT if self . label is not None : NEW_LINE INDENT return self . label NEW_LINE DEDENT else : NEW_LINE INDENT return self . label NEW_LINE DEDENT DEDENT
Edge createEdge ( Vertex vertex , Vertex targetVertex ) { Edge edge = new Edge ( vertex , targetVertex ) ; edge . setLabel ( label ) ; edge . setLabel ( label ) ; return edge ; }
extract_class_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT DEDENT
static boolean isConnection ( String field ) { if ( field == null ) { return false ; } if ( field . length ( ) == 0 ) { return true ; } if ( field . length ( ) == 1 ) { return true ; } return false ; }
import_process ( self ) : NEW_LINE INDENT import process = self . import_process ( ) NEW_LINE if process is None : NEW_LINE INDENT return NEW_LINE DEDENT import process NEW_LINE process = process . import_process ( ) NEW_LINE if process is None : NEW_LINE INDENT return NEW_LINE DEDENT import process NEW_LINE process = process . import_process ( ) NEW_LINE DEDENT
static Map < String , Object > console ( ) { if ( console == null ) { console = new HashMap < > ( ) ; } else { console . putAll ( console ) ; } return console ; }
def def error ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . request . error ( ) NEW_LINE DEDENT except Exception e : NEW_LINE INDENT return self . error ( ) NEW_LINE DEDENT DEDENT
def def get_nodes ( self ) : NEW_LINE INDENT nodes = [ ] NEW_LINE for node in self . nodes . values ( ) : NEW_LINE INDENT nodes . append ( node ) NEW_LINE DEDENT return nodes NEW_LINE DEDENT
backup_database ( self , database ) : NEW_LINE INDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isReadOnly ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
retry ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _retry = True NEW_LINE DEDENT except : NEW_LINE INDENT self . _retry = False NEW_LINE raise NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_parameters ( self ) : NEW_LINE INDENT if self . parameters . size ( ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if self . parameters . size ( ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT

List < DatabaseMeta > databases ( ) throws SQLException { List < DatabaseMeta > databases = new ArrayList < DatabaseMeta > ( ) ; databases . add ( new DatabaseMeta ( ) ) ; databases . add ( new DatabaseMeta ( ) ) ; databases . add ( new DatabaseMeta ( ) ) ; return databases ; }
static String getServerInfo ( Document document ) { if ( document == null ) { return null ; } String serverName = document . getName ( ) ; if ( serverName == null ) { serverName = " " ; } if ( serverName . length ( ) == 0 ) { serverName = " " ; } return serverName ; }
check_database_exists ( self , database_name ) : NEW_LINE INDENT if not database_name : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static void dropDatabase ( String databaseName ) { if ( databaseName == null ) { throw new IllegalArgumentException ( " databaseName is null " ) ; } if ( databaseName . length ( ) == 0 ) { throw new IllegalArgumentException ( " databaseName is empty " ) ; } if ( databaseName . length ( ) == 0 ) { throw new IllegalArgumentException ( " databaseName is empty " ) ; } if ( databaseName . length ( ) == 0 ) { throw new IllegalArgumentException ( " databaseName is empty " ) ; } if ( databaseName . length ( ) == 0 ) { throw new IllegalArgumentException ( " databaseName is empty " ) ; } if ( databaseName . length ( ) == 0 ) { throw new IllegalArgumentException ( " databaseName is empty " ) ; } }
freeze_database ( self ) : NEW_LINE INDENT if self . database is not None : NEW_LINE INDENT self . database . close ( ) NEW_LINE self . database = None NEW_LINE DEDENT DEDENT
freeze ( self ) : NEW_LINE INDENT if self . frozen : NEW_LINE INDENT return self . frozen NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_cluster_status ( self ) : NEW_LINE INDENT cluster_status = self . cluster . get_cluster_status ( ) NEW_LINE if cluster_status is None : NEW_LINE INDENT return None NEW_LINE DEDENT return cluster_status NEW_LINE DEDENT
create_index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_index ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
TransactionalGraph getTransactionalGraph ( OrientGraph graph ) { if ( graph == null ) { throw new IllegalArgumentException ( " graph is null " ) ; } return graph . getTransactionalGraph ( ) ; }
def getRetRY ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . RETRY_LINE DEDENT except : NEW_LINE INDENT return self . RETRY NEW_LINE DEDENT return self . RETRY_LINE DEDENT
update_record ( self , record ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _record = record NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _record = None NEW_LINE DEDENT DEDENT
delete_record ( self , record ) : NEW_LINE INDENT self . _delete_record ( record ) NEW_LINE self . _delete_record ( record ) NEW_LINE self . _delete_record ( record ) NEW_LINE DEDENT

authenticate_username ( self , username , password ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _authenticate ( username , password ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_if_exists ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
shutdown ( ) : NEW_LINE INDENT try : NEW_LINE INDENT os . kill ( os . getpid ( ) , signal . SIGTERM ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGTERM ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGTERM ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL ) NEW_LINE os . kill ( os . getpid ( ) , signal . SIGKILL )
adjust_line_and_column_numbers ( self , line , column ) : NEW_LINE INDENT line = self . _adjust_line_and_column_numbers ( line , column ) NEW_LINE column = self . _adjust_column_numbers ( column ) NEW_LINE return line , column NEW_LINE DEDENT
def def def def public public public public public public public public public public public void write ( final public void write ( final public void write ( final public void write ( ) throws IOException e public void write ( ) throws IOException e ) throws IOException { if ( this . bucket != null ) { if ( bucket != null ) { if ( bucket != null ) { if ( bucket != null ) { if ( bucket != null ) { if ( bucket != null ) { if ( bucket != null ) { bucket . write ( bucket ) ; } else { bucket . write ( bucket ) ; } } } } else { bucket . write ( bucket ) ; } } } } } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
end_atomic_operation ( self ) : NEW_LINE INDENT if self . atomic_operation is not None : NEW_LINE INDENT return self . atomic_operation . end_atomic_operation ( ) NEW_LINE DEDENT DEDENT
acquire_exclusive_lock ( self , lock_name ) : NEW_LINE INDENT lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_LINE lock_name = lock_name . lower ( ) NEW_
void consumeMemory ( int memory ) { if ( memory < 0 ) { throw new IllegalArgumentException ( ) ; } else if ( memory < 0 ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }

initialize ( self ) : NEW_LINE INDENT if self . config . get ( ' connection _ parameters ' , None ) : NEW_LINE INDENT self . config . set ( ' connection _ parameters ' , self . config . get ( ' connection _ parameters ' , { } ) ) NEW_LINE DEDENT DEDENT
shutdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logmanager . shutdown ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_item ( self , container , item ) : NEW_LINE INDENT if not item : NEW_LINE INDENT return NEW_LINE DEDENT self . container . add_item ( item ) NEW_LINE DEDENT
remove_item ( self , key ) : NEW_LINE INDENT item = self . get_item ( key ) NEW_LINE if item is None : NEW_LINE INDENT return NEW_LINE DEDENT item . delete ( ) NEW_LINE item . delete ( ) NEW_LINE DEDENT
acquire_item ( self , key ) : NEW_LINE INDENT item = self . get_item ( key ) NEW_LINE if item is None : NEW_LINE INDENT return NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT if item . is_closed ( ) : NEW_LINE INDENT return item NEW_LINE DEDENT DEDENT
def def def def def def item__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def item__python____python____python____python____python____python____python__ def def def def def def item__python____python____python____python____python____python____python__ def def def def def def def item__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def item__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def item__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def item__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python____python__
clear ( self ) : NEW_LINE INDENT self . content . clear ( ) NEW_LINE DEDENT
close_item ( self , key ) : NEW_LINE INDENT if self . item is not None : NEW_LINE INDENT self . item . close ( ) NEW_LINE self . item = None NEW_LINE DEDENT DEDENT
update_internal_statistics ( self ) : NEW_LINE INDENT self . _update_internal_statistics ( ) NEW_LINE self . _update_internal_statistics ( ) NEW_LINE self . _update_internal_statistics ( ) NEW_LINE self . _update_internal_statistics ( ) NEW_LINE self . _update_internal_statistics ( ) NEW_LINE DEDENT
log ( self ) : NEW_LINE INDENT self . logger . info ( self . __class__ . __name__ ) NEW_LINE self . logger . info ( self . __class__ . __name__ ) NEW_LINE DEDENT
log ( self ) : NEW_LINE INDENT logger . debug ( " log : { } " . format ( self ) ) NEW_LINE logger . debug ( " log : { } " . format ( self ) ) NEW_LINE logger . debug ( " log : { } " . format ( self ) ) NEW_LINE DEDENT
def
find_closest_power_of_two ( self , value ) : NEW_LINE INDENT result = self . _find_closest_power_of_two ( value ) NEW_LINE if result is None : NEW_LINE INDENT return None NEW_LINE DEDENT return result NEW_LINE DEDENT
unregister ( self , push_request ) : NEW_LINE INDENT if isinstance ( push_request , PushRequest ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( push_request , PushRequest ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( push_request , PushRequest ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
convert_key ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_key ( key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
convert_items ( self , items ) : NEW_LINE INDENT if isinstance ( items , list ) : NEW_LINE INDENT return items NEW_LINE DEDENT elif isinstance ( items , dict ) : NEW_LINE INDENT return items NEW_LINE DEDENT elif isinstance ( items , list ) : NEW_LINE INDENT return items NEW_LINE DEDENT else : NEW_LINE INDENT return items NEW_LINE DEDENT DEDENT
static OBinarySerializer realization ( OType oType ) { if ( oType != null ) { return new OBinarySerializer ( oType ) ; } return new OBinarySerializer ( ) ; }
shutdown ( self ) : NEW_LINE INDENT if self . shutdown_handlers : NEW_LINE INDENT self . shutdown_handlers . sort ( ) NEW_LINE self . shutdown_handlers . reverse ( ) NEW_LINE DEDENT DEDENT
get_engine_by_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _engine_by_name [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute ( self ) : NEW_LINE INDENT if self . execution_logic is None : NEW_LINE INDENT self . execution_logic = self . execution_logic NEW_LINE DEDENT return self . execution_logic NEW_LINE DEDENT
def execution_logic ( self ) : NEW_LINE INDENT execution_logic = self . execution_logic NEW_LINE execution_logic = self . execution_logic NEW_LINE if execution_logic : NEW_LINE INDENT return execution_logic NEW_LINE DEDENT return execution_logic NEW_LINE DEDENT
static ReadersEntry create ( final Thread thread ) { final ReadersEntry readersEntry = new ReadersEntry ( thread ) ; readersEntry . setDaemon ( true ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority ( Thread . MIN_PRIORITY ) ; readersEntry . setPriority ( Thread . MAX_PRIORITY ) ; readersEntry . setPriority (
validate_token ( self , token ) : NEW_LINE INDENT if isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT if isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT if isinstance ( token , unicode ) : NEW_LINE INDENT return token NEW_LINE DEDENT if isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT if isinstance ( token , unicode ) : NEW_LINE INDENT return token NEW_LINE DEDENT if isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT return token NEW_LINE DEDENT
repair_security_structure ( self ) : NEW_LINE INDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_admin ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
acquire_lock ( self , time_interval ) : NEW_LINE INDENT if time_interval is None : NEW_LINE INDENT return None NEW_LINE DEDENT lock = self . lock ( time_interval ) NEW_LINE if lock is None : NEW_LINE INDENT return None NEW_LINE DEDENT return lock NEW_LINE DEDENT
def def def get_connected def get_connected ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_connected_vertices ( ) NEW_LINE DEDENT def get_vertices ( self ) : NEW_LINE INDENT return self . _get_vertices ( ) NEW_LINE DEDENT def get_vertices ( self ) : NEW_LINE INDENT return self . _vertices NEW_LINE DEDENT
save_edge_id ( self , edge_id ) : NEW_LINE INDENT if edge_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( edge_id , EdgeId ) : NEW_LINE INDENT return edge_id NEW_LINE DEDENT if isinstance ( edge_id , EdgeId ) : NEW_LINE INDENT return edge_id NEW_LINE DEDENT if isinstance ( edge_id , EdgeId ) : NEW_LINE INDENT return edge_id NEW_LINE DEDENT if isinstance ( edge_id , EdgeId ) : NEW_LINE INDENT return edge_id NEW_LINE DEDENT return edge_id NEW_LINE DEDENT

remove_property ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT delattr ( self , name ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT delattr ( self , name ) NEW_LINE DEDENT DEDENT
free ( self ) : NEW_LINE INDENT if self . root is not None : NEW_LINE INDENT return self . root . free ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . root . free ( ) NEW_LINE DEDENT DEDENT
_deletes ( self , tree ) : NEW_LINE INDENT if tree . isLeaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if tree . isLeaf ( ) : NEW_LINE INDENT return NEW_LINE DEDENT tree . delete ( ) NEW_LINE DEDENT
flush ( self ) : NEW_LINE INDENT self . db . flush ( ) NEW_LINE self . db . close ( ) NEW_LINE DEDENT
create ( self , vertex ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create ( vertex ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _create ( vertex ) NEW_LINE DEDENT DEDENT
parse_strategy_keyword ( self , keyword ) : NEW_LINE INDENT return self . _parse_strategy_keyword ( keyword ) NEW_LINE DEDENT
get_begin_position_length ( self ) : NEW_LINE INDENT return self . _get_begin_position_length ( ) NEW_LINE DEDENT
insert ( self , data ) : NEW_LINE INDENT if not isinstance ( data , ODocument ) : NEW_LINE INDENT return data NEW_LINE DEDENT if not isinstance ( data , ODocument ) : NEW_LINE INDENT return data NEW_LINE DEDENT if not isinstance ( data , ODocument ) : NEW_LINE INDENT return data NEW_LINE DEDENT return data NEW_LINE DEDENT
check_link ( self , link ) : NEW_LINE INDENT if isinstance ( link , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( link , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( link , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
void setFills ( List < Fills > fills ) { if ( fills != null ) { for ( Fills f : fills ) { fills . add ( f ) ; } } }
set_version ( self , version ) : NEW_LINE INDENT self . version = version NEW_LINE DEDENT
_get_record_type ( self , record_type ) : NEW_LINE INDENT if record_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return record_type NEW_LINE DEDENT DEDENT
def public public public public public static void setDatabase ( String name , String database ) { if ( database != null ) { if ( database != null ) { if ( database != null ) { if ( database != null ) { if ( database != null ) { if ( database != null ) { if ( database != null ) { database . close ( ) NEW_LINE INDENT database . close ( ) NEW_LINE database . close ( ) NEW_LINE database . close ( ) NEW_LINE DEDENT database . close ( ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT database . close ( ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def def get_exception_stack def get_exception_stack_stack_trace ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _exception_stack_stack_stack_trace_stack . get_stack_trace ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _exception_stack_stack_trace NEW_LINE DEDENT DEDENT
index_cursor ( self , operator ) : NEW_LINE INDENT index_cursor = self . index_cursor ( operator ) NEW_LINE return index_cursor NEW_LINE DEDENT
convert_item_to_record ( self , item ) : NEW_LINE INDENT if isinstance ( item , dict ) : NEW_LINE INDENT return item NEW_LINE DEDENT elif isinstance ( item , dict ) : NEW_LINE INDENT return item NEW_LINE DEDENT DEDENT

public static void addServerUserImplementation ( Server userImplementation ) { if ( userImplementation != null && ! userImplementation . isEmpty ( ) ) { userImplementation . add ( userImplementation ) ; userImplementation . add ( userImplementation ) ; } }

add_filter_field ( self ) : NEW_LINE INDENT if self . filter_field is not None : NEW_LINE INDENT return self . filter_field NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
attach ( self , object ) : NEW_LINE INDENT if isinstance ( object , Document ) : NEW_LINE INDENT return self . _attach ( object ) NEW_LINE DEDENT return self . _attach ( object ) NEW_LINE DEDENT
def indexed_class ( self , class_name ) : NEW_LINE INDENT if isinstance ( class_name , basestring ) : NEW_LINE INDENT class_name = class_name . lower ( ) NEW_LINE DEDENT class_name = class_name . lower ( ) NEW_LINE class_name = class_name . lower ( ) NEW_LINE return class_name NEW_LINE DEDENT
set_current_value ( self , current_value ) : NEW_LINE INDENT if current_value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . current_value = current_value NEW_LINE DEDENT
truncate_clusters ( cls ) : NEW_LINE INDENT clusters = cls . getClusters ( ) NEW_LINE clusters . clear ( ) NEW_LINE for cluster in clusters : NEW_LINE INDENT clusters . add ( cluster ) NEW_LINE DEDENT return clusters NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void SerializeLink ( Link link ) { if ( link == null ) { throw new IllegalArgumentException ( " link is null " ) ; } if ( link . isLink ( ) ) { throw new IllegalArgumentException ( " link is not a link " ) ; } if ( link . isLink ( ) ) { throw new IllegalArgumentException ( " link is not a link " ) ; } }
put_buffer ( self , buffer ) : NEW_LINE INDENT if not self . pool : NEW_LINE INDENT self . pool . put ( buffer ) NEW_LINE DEDENT else : NEW_LINE INDENT self . pool . put ( buffer ) NEW_LINE self . pool . put ( buffer ) NEW_LINE DEDENT DEDENT
def def def def def def check___python____python____python____python____python____python____python____python____python____python____python__ def def def def def def check___python____python____python____python____python____python____python____python____python__ def def def def def def def def check___python____python____python____python____python____python____python____python__ def def def def def def def def check___python____python____python____python____python__ def def def def def def check___python____python____python____python____python____python____python__ def def def def def def def def check___python____python____python____python____python____python__ def def def def def def check___python____python____python____python____python____python____python____python__ def def def def def check___python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def check___python____python____python____python____python____python____python__ def def def def check___python____python____python__
clear ( self ) : NEW_LINE INDENT self . pool . clear ( ) NEW_LINE self . pool . clear ( ) NEW_LINE DEDENT
static int convert ( byte [ ] array , int offset , int length ) { if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( length < 0 ) { throw new IllegalArgumentException ( " length < 0 : " + length ) ; } if ( length < 0 ) { throw new IllegalArgumentException ( " length < 0 : " + length ) ; } return length ; }
register_hook ( self , hook ) : NEW_LINE INDENT self . hooks . add ( hook ) NEW_LINE DEDENT
def def def def _ private static void check_master def def def public public public public public static public static void check ( final public static final public static void check ( Class < public static void check ( Class < public static void check ( Class < ? extends Class < ? extends Class < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends Class < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends MasterCluster < ? extends Master
dump_configuration ( self ) : NEW_LINE INDENT if self . configuration is not None : NEW_LINE INDENT return self . configuration . dump ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . configuration NEW_LINE DEDENT DEDENT
find_item ( self , item ) : NEW_LINE INDENT if isinstance ( item , basestring ) : NEW_LINE INDENT return item NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_number_in_array ( self , array ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_number_in_array ( array ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
clusters that are used in select operation ( ) : NEW_LINE INDENT clusters = [ ] NEW_LINE for cluster in clusters : NEW_LINE INDENT clusters . append ( cluster ) NEW_LINE DEDENT return clusters NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_temporary_RID_counter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . temporary_RID_counter NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . temporary_RID_counter NEW_LINE DEDENT DEDENT

parse_fetchplan_keyword ( self , keyword ) : NEW_LINE INDENT if not keyword : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return keyword NEW_LINE DEDENT DEDENT
def def parse_nocache_keyword ( self ) : NEW_LINE INDENT return self . _parse_keyword ( ) NEW_LINE DEDENT
index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . index ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . index ( ) NEW_LINE DEDENT return self . index ( ) NEW_LINE DEDENT
getJobStatus ( self ) : NEW_LINE INDENT return self . _jobStatus NEW_LINE DEDENT
execute ( self , command ) : NEW_LINE INDENT executor = self . get_executor ( ) NEW_LINE executor . execute ( command ) NEW_LINE return executor NEW_LINE DEDENT
public public void run ( ) throws IOException { synchronized ( this ) { synchronized ( this ) { synchronized ( this ) { if ( this ) { throw new IllegalStateException ( ) ; } else { throw new IllegalStateException ( ) ; } } } } }
put ( self , key , value ) : NEW_LINE INDENT if not self . validate ( key , value ) : NEW_LINE INDENT return NEW_LINE DEDENT self . storage . put ( key , value ) NEW_LINE DEDENT
rollback ( self , micro_transaction ) : NEW_LINE INDENT if micro_transaction is None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction is not None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if micro_transaction . is not None : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
execute ( self , command ) : NEW_LINE INDENT result = self . _execute ( command ) NEW_LINE if result : NEW_LINE INDENT return result NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
register_cluster ( self ) : NEW_LINE INDENT if self . cluster is not None : NEW_LINE INDENT self . cluster = self . cluster NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_class ( cls ) : NEW_LINE INDENT return cls NEW_LINE DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _execute ( ) NEW_LINE self . _execute ( ) NEW_LINE DEDENT DEDENT
delete_version ( self , version ) : NEW_LINE INDENT try : NEW_LINE INDENT self . record . delete_version ( version ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
register_hooks ( self , hooks ) : NEW_LINE INDENT if not hooks : NEW_LINE INDENT return NEW_LINE DEDENT hooks = [ ] NEW_LINE for hook in hooks : NEW_LINE INDENT hooks . append ( hook ) NEW_LINE DEDENT for hook in hooks : NEW_LINE INDENT hooks . append ( hook ) NEW_LINE DEDENT DEDENT
delete_record ( self , record ) : NEW_LINE INDENT if self . version is None : NEW_LINE INDENT self . version = record . version NEW_LINE DEDENT else : NEW_LINE INDENT self . version = record . version NEW_LINE DEDENT DEDENT
static int getNumberOfRecords ( Class < ? > iClassName ) { if ( iClassName == null ) { return 0 ; } if ( iClassName . isInterface ( ) ) { return 0 ; } if ( iClassName . getSuperclass ( ) != null ) { return iClassName . getSuperclass ( ) . getNumberOfRecords ( ) ; } if ( iClassName . getSuperclass ( ) != null ) { return iClassName . getSuperclass ( ) . getNumberOfRecords ( ) ; } return 0 ; }
static int count ( Class iClassName ) { if ( iClassName != null ) { return iClassName . count ( ) ; } else { return 0 ; } }
activate ( self ) : NEW_LINE INDENT if self . database is None : NEW_LINE INDENT return NEW_LINE DEDENT self . database = self . database NEW_LINE self . database . save ( ) NEW_LINE DEDENT
static void register ( ) { if ( this . stateful ) { return ; } this . stateful = true ; this . stateful = false ; }
calculate_index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . index NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . index NEW_LINE DEDENT DEDENT
parse_word ( self , word ) : NEW_LINE INDENT if word is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT if isinstance ( word , six . string_types ) : NEW_LINE INDENT return word NEW_LINE DEDENT return word NEW_LINE DEDENT
parse_word ( self , word ) : NEW_LINE INDENT if word is None : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( word ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( word ) == 1 : NEW_LINE INDENT return word [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return word [ 0 ] NEW_LINE DEDENT DEDENT
next ( self , chars ) : NEW_LINE INDENT if len ( chars ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( chars ) == 1 : NEW_LINE INDENT return chars [ 0 ] NEW_LINE DEDENT elif len ( chars ) == 2 : NEW_LINE INDENT return chars [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return chars [ 0 ] NEW_LINE DEDENT DEDENT
parse_keywords ( self , iWords ) : NEW_LINE INDENT if not isinstance ( iWords , list ) : NEW_LINE INDENT raise TypeError ( " ' iWords ' must be a list . " ) NEW_LINE DEDENT if not isinstance ( iWords , list ) : NEW_LINE INDENT raise TypeError ( " ' iWords ' must be a list . " ) NEW_LINE DEDENT for iWords in iWords : NEW_LINE INDENT if not isinstance ( iWords , list ) : NEW_LINE INDENT raise TypeError ( " ' iWords ' must be a list . " ) NEW_LINE DEDENT DEDENT DEDENT
static boolean isSeparator ( String separator ) { if ( separator == null ) { return false ; } if ( separator . equals ( " " ) ) { return true ; } if ( separator . equals ( " , " ) ) { return true ; } return false ; }
drop_class ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
delete ( self ) : NEW_LINE INDENT if self . backup : NEW_LINE INDENT self . backup . delete ( ) NEW_LINE DEDENT if self . primary : NEW_LINE INDENT self . primary . delete ( ) NEW_LINE DEDENT DEDENT
byte [ ] read ( InputStream stream ) throws IOException { if ( stream == null ) { throw new IOException ( " stream is null " ) ; } byte [ ] bytes = stream . read ( ) ; if ( bytes == null ) { throw new IOException ( " stream is null " ) ; } if ( bytes . length == 0 ) { throw new IOException ( " stream is null " ) ; } return bytes ; }
extract_token ( self , access_token ) : NEW_LINE INDENT if access_token is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _extract_token ( access_token ) NEW_LINE DEDENT DEDENT
acquire_access_token ( self , access_token ) : NEW_LINE INDENT try : NEW_LINE INDENT token = self . _get_access_token ( access_token ) NEW_LINE return token NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
copy_access_token ( self , security_context , access_token ) : NEW_LINE INDENT if access_token is None : NEW_LINE INDENT return None NEW_LINE DEDENT access_token = access_token . copy ( ) NEW_LINE return access_token NEW_LINE DEDENT
def def def _get_bytes ( self ) : NEW_LINE INDENT return self . _get_bytes ( ) NEW_LINE DEDENT def _get_bytes ( self ) : NEW_LINE INDENT return self . _get_bytes ( ) NEW_LINE DEDENT
read_line ( self , line ) : NEW_LINE INDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
read_line ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
Skips ( self ) : NEW_LINE INDENT return self . _skips ( ) NEW_LINE DEDENT
skip ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( bytes ) == 2 : NEW_LINE INDENT return NEW_
def _ensure_length ( self , offset , length ) : NEW_LINE INDENT if length == 0 : NEW_LINE INDENT return self . length NEW_LINE DEDENT else : NEW_LINE INDENT return self . length NEW_LINE DEDENT DEDENT
void sort ( Comparator < ? super T > comparator ) { if ( comparator == null ) { throw new NullPointerException ( " comparator is null " ) ; } if ( comparator . equals ( this . comparator ) ) { throw new NullPointerException ( " comparator is null " ) ; } }
swap ( self , swapper ) : NEW_LINE INDENT self . swap ( swapper ) NEW_LINE return self NEW_LINE DEDENT
static void sort ( Comparator < ? super T > comparator ) { if ( comparator == null ) { throw new NullPointerException ( " comparator is null " ) ; } if ( comparator . equals ( this . comparator ) ) { throw new NullPointerException ( " comparator is null " ) ; } }
public public static final int hash ( int bits ) { if ( bits == 0 ) { return 0 ; } else if ( bits == 0 ) { return 0 ; } else { return bits ; } } }
public public public static long long hash ( long long long integer ) { return Long . parseLong ( integer . toString ( ) ) ; }

truncate ( self , file , size = None ) : NEW_LINE INDENT if size is None : NEW_LINE INDENT size = self . size NEW_LINE DEDENT if size is None : NEW_LINE INDENT size = self . size NEW_LINE DEDENT else : NEW_LINE INDENT size = int ( size ) NEW_LINE DEDENT return self . _truncate ( file , size ) NEW_LINE DEDENT
def def def def Rep__python____python____python____python____python____python____python____python____python__ def def def Rep__python____python____python____python____python____python__ def def def def Rep__python____python____python____python____python____python__ def def def def def Rep__python____python____python____python__ def def def def Rep__python____python____python____python__ def def def def def Rep__python____python____python____python__ def def def def def def Rep__python____python____python____python__ def def def def def def Rep__python____python____python____python__ def def def def def def Rep__python____python____python____python____python__ def def def def def Rep__python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def Rep__python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
find_matches ( self , query ) : NEW_LINE INDENT return self . _find_matches ( query ) NEW_LINE DEDENT

def keep_snapshot ( self ) : NEW_LINE INDENT if len ( self . snapshots . snapshots . size ( ) > 0 : NEW_LINE INDENT return self . snapshots . size ( ) NEW_LINE DEDENT DEDENT
hash_field ( self , field ) : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( field ) . hexdigest ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static boolean equal ( Object record ) { if ( record == null ) { return false ; } if ( record . getClass ( ) . isArray ( ) ) { return true ; } return false ; }
remove_all_records ( self , selection ) : NEW_LINE INDENT if len ( selection ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( selection ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( selection ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( selection ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( selection ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
announcement_related_metrics ( self ) : NEW_LINE INDENT self . announcement_related_metrics = [ ] NEW_LINE self . announcement_related_metrics . extend ( self . announcement_related_metrics ) NEW_LINE self . announcement_related_metrics . extend ( self . announcement_related_metrics ) NEW_LINE DEDENT
cycle_completion ( self , method ) : NEW_LINE INDENT if self . cycle_completion : NEW_LINE INDENT self . cycle_completion ( method ) NEW_LINE DEDENT else : NEW_LINE INDENT self . cycle_completion ( ) NEW_LINE DEDENT DEDENT
def read_string_header_tags ( self ) : NEW_LINE INDENT return self . _parse_header_tags ( ) NEW_LINE DEDENT
extract_primary_key ( self ) : NEW_LINE INDENT if self . _primary_key is None : NEW_LINE INDENT return self . _primary_key NEW_LINE DEDENT return self . _primary_key NEW_LINE DEDENT
clearBits ( self , bits ) : NEW_LINE INDENT self . bits = bits NEW_LINE DEDENT
void read ( ) throws IOException { for ( int i = 0 ; i < ordinals . size ( ) ; i ++ ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if ( ordinals . get ( i ) != null ) { if (
Estimate the total number of bits used to represent the integer set .
String toString ( ) { if ( useFrom != null ) { return String . valueOf ( useFrom ) ; } if ( useTo != null ) { return String . valueOf ( useTo ) ; } return null ; }
byte [ ] toBytes ( byte [ ] array ) { byte [ ] bytes = new byte [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { bytes [ i ] = array [ i ] ; } return bytes ; }
byte [ ] copy ( byte [ ] data ) { if ( data == null ) { throw new NullPointerException ( " data " ) ; } if ( data . length == 0 ) { throw new IllegalArgumentException ( " data " ) ; } if ( data . length == 1 ) { throw new IllegalArgumentException ( " data " ) ; } return data ; }
check_range_of_bytes ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( bytes ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( bytes ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
void update ( int [ ] source , int [ ] dest ) { if ( source == null ) { return ; } if ( dest == null ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 0 ) { return ; } if ( dest . length == 1 ) { return ; } if ( dest . length == 1 ) { return ; } if ( dest . length == 2 ) { return ; } if ( dest . length == 1 )
void update ( byte [ ] data ) { if ( data == null ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } if ( data . length == 0 ) { throw new NullPointerException ( " data is null " ) ; } }
copy ( InputStream inputStream ) throws IOException { byte [ ] bytes = new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
write ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write ( data ) NEW_LINE DEDENT DEDENT
ensure_segment_exists ( self , segmentIndex ) : NEW_LINE INDENT if self . segment_exists ( segmentIndex ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def get_position ( self ) : NEW_LINE INDENT return self . map . get_field_position ( ) NEW_LINE if self . map . get_field_position ( ) != null : NEW_LINE INDENT return self . map . get_field_position ( ) NEW_LINE DEDENT DEDENT
sum_buckets ( self ) : NEW_LINE INDENT return self . _sum_buckets ( ) NEW_LINE DEDENT
whether DataSet contains any collections schema .
generate_files ( self , directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT else : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT DEDENT
files based on dataset schemas under the specified directory .
_get_primary_key ( self ) : NEW_LINE INDENT return self . _primary_key NEW_LINE DEDENT
get_primary_key ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . primary_key NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_field_path ( self , data_set , field_path ) : NEW_LINE INDENT if isinstance ( data_set , dict ) : NEW_LINE INDENT data_set = data_set . copy ( ) NEW_LINE DEDENT if isinstance ( data_set , dict ) : NEW_LINE INDENT data_set = data_set . copy ( ) NEW_LINE DEDENT if isinstance ( data_set , dict ) : NEW_LINE INDENT data_set = data_set . copy ( ) NEW_LINE DEDENT if isinstance ( data_set , dict ) : NEW_LINE INDENT data_set = data_set . copy ( ) NEW_LINE DEDENT if isinstance ( data_set , dict ) : NEW_LINE INDENT data_set = data_set . copy ( ) NEW_LINE DEDENT return data_set NEW_LINE DEDENT
static FieldPath createFieldPath ( String fieldPath ) { FieldPath fieldPath = new FieldPath ( fieldPath ) ; fieldPath . setPath ( fieldPath ) ; return fieldPath ; }
static FieldPath createFieldPath ( final String fieldPath , final String prefix ) { final FieldPath path = new FieldPath ( fieldPath ) ; path . setPrefix ( prefix ) ; return path ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void initializeFieldPositions ( ) { if ( fieldPositions == null ) { fieldPositions = new FieldPositions ( ) ; } if ( fieldPositions . size ( ) == 0 ) { fieldPositions = new FieldPositions ( ) ; } if ( fieldPositions . size ( ) == 0 ) { fieldPositions = new FieldPositions ( ) ; } if ( fieldPositions . size ( ) == 0 ) { fieldPositions = new FieldPositions ( ) ; } }
exists ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . index . exists ( key ) NEW_LINE DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
protected void addTests ( ) { for ( int i = 0 ; i < tests . size ( ) ; i ++ ) { for ( int i = 0 ; i < tests . size ( ) ; i ++ ) { for ( int i = 0 ; i < tests . size ( ) ; i ++ ) { for ( int j = 0 ; i < tests . size ( ) ; i ++ ) { for ( int j = 0 ; j < tests . size ( ) ; j ++ ) { for ( int j = 0 ; j < tests . size ( ) ; j ++ ) { for ( int i = 0 ; j < tests . size ( ) ; j ++ ) { for ( int j = 0 ; j < tests . size ( ) ; j ++ ) { for ( int j = 0 ; j < tests . size ( ) ; j ++ ) { if ( j < tests .
def add_field ( self , field ) : NEW_LINE INDENT if self . is_excluded : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return self . fields . add ( field ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def _get_defaults ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def def def get_ def _get_defaults def _get_default_defaults ( self ) : NEW def _get_defaults ( self ) : NEW_LINE def _get_defaults ( self ) : NEW_LINE INDENT return self . _get_default_defaults ( ) NEW_LINE def _get_defaults ( self ) : NEW_LINE
get_value ( self , index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . value [ index ] NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
match ( self , fieldName , value ) : NEW_LINE INDENT if not self . match ( fieldName , value ) : NEW_LINE INDENT return None NEW_LINE DEDENT return self . match ( fieldName , value ) NEW_LINE DEDENT
match ( self , field , value ) : NEW_LINE INDENT if isinstance ( field , basestring ) : NEW_LINE INDENT return self . _match ( field , value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _match ( field , value ) NEW_LINE DEDENT DEDENT
def def def def get_paths ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def set___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def get_paths def get_paths ( self ) : NEW def get_paths ( self ) : NEW def get_paths ( self ) : NEW def get_paths ( self ) : NEW_LINE def get_paths ( self ) : NEW_LINE INDENT return self . _get_paths ( ) NEW_LINE DEDENT def get_paths ( self ) : NEW_LINE INDENT return self . _get_paths ( ) NEW_LINE DEDENT def get_paths ( self ) : NEW_LINE INDENT return
def def def def match_paths ( self , path ) : NEW_LINE INDENT paths = { } NEW_LINE def get_paths ( self ) : NEW_LINE INDENT paths = self . _get_paths ( ) NEW_LINE return self . _get_paths ( path ) NEW_LINE DEDENT def _get_paths ( self ) : NEW_LINE INDENT return self . _get_paths ( ) NEW_LINE DEDENT return paths NEW_LINE DEDENT
calculate_diffs ( self ) : NEW_LINE INDENT if self . _diffs is not None : NEW_LINE INDENT return self . _diffs NEW_LINE DEDENT else : NEW_LINE INDENT return self . _diffs NEW_LINE DEDENT DEDENT
restore ( self , data_model ) : NEW_LINE INDENT if data_model is None : NEW_LINE INDENT return NEW_LINE DEDENT data_model = data_model . copy ( ) NEW_LINE data_model . save ( ) NEW_LINE DEDENT
def run ( self , mutations ) : NEW_LINE INDENT if not self . mutations . mutations . isEmpty ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . mutations . mutations . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
exclude_key ( self , key ) : NEW_LINE INDENT if not key . startswith ( self . key ) : NEW_LINE INDENT return False NEW_LINE DEDENT if key . startswith ( self . key ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
exclude_objects ( self , excluded_objects ) : NEW_LINE INDENT excluded_objects = self . _exclude_objects ( excluded_objects ) NEW_LINE return excluded_objects NEW_LINE DEDENT
write_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return NEW_LINE DEDENT data_output_stream = StringIO ( header ) NEW_LINE data_output_stream . write ( data_output_stream ) NEW_LINE data_output_stream . close ( ) NEW_LINE DEDENT
def def calculate_memory_heap_footprint ( self ) : NEW_LINE INDENT return self . _get_memory_heap_footprint ( ) NEW_LINE DEDENT
byte [ ] toByteArray ( ) throws IOException { byte [ ] result = new byte [ 0 ] ; result [ 0 ] = 0 ; result [ 1 ] = 0 ; result [ 2 ] = 0 ; result [ 3 ] = 0 ; return result ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
write_bytes ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 8 : NEW_LINE INDENT return bytes NEW_LINE DEDENT if len ( bytes ) == 8 : NEW_LINE INDENT return bytes NEW_LINE DEDENT if len ( bytes ) == 8 : NEW_LINE INDENT return bytes NEW_LINE DEDENT return bytes NEW_LINE DEDENT
def def get_ordinal ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pool . get_ordinal ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . pool . get_ordinal ( ) NEW_LINE DEDENT DEDENT
def def get_future_all_future_ordinals ( self ) : NEW_LINE INDENT return self . _get_all_future_ordinals ( ) NEW_LINE DEDENT
def def def hash ( self , key ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
hash_single_key_field ( self , key_field ) : NEW_LINE INDENT try : NEW_LINE INDENT return hashlib . md5 ( key_field ) . hexdigest ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return hashlib . md5 ( key_field ) NEW_LINE DEDENT DEDENT
resize ( self , size ) : NEW_LINE INDENT if self . _storage is not None : NEW_LINE INDENT return self . _storage . resize ( size ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _storage . resize ( size ) NEW_LINE DEDENT DEDENT
mark ( self , preferredOrdinal ) : NEW_LINE INDENT if self . preferredOrdinal is None : NEW_LINE INDENT self . preferredOrdinal = preferredOrdinal NEW_LINE DEDENT else : NEW_LINE INDENT self . preferredOrdinal = self . preferredOrdinal NEW_LINE DEDENT DEDENT
def write_to_array ( self , ordinals ) : NEW_LINE INDENT pointers = [ ] NEW_LINE for i in range ( 0 , len ( ordinals ) : NEW_LINE INDENT pointers = [ ] NEW_LINE for i in ordinals : NEW_LINE INDENT pointers . append ( pointers [ i ] ) NEW_LINE DEDENT DEDENT return pointers NEW_LINE DEDENT
byte [ ] get ( byte [ ] key , byte [ ] value ) { if ( key == null || value == null ) { throw new NullPointerException ( ) ; } if ( key == null ) { throw new NullPointerException ( ) ; } if ( value == null ) { throw new NullPointerException ( ) ; } if ( value == null ) { throw new NullPointerException ( ) ; } return value ; }
add ( self , key , value ) : NEW_LINE INDENT if len ( key ) != len ( value ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if len ( key ) != len ( value ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if len ( key ) != len ( value ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT DEDENT
get_hash_code ( key ) : NEW_LINE INDENT hash_code = hashlib . sha256 ( ) . hexdigest ( ) NEW_LINE return hash_code NEW_LINE DEDENT
static AtomicLongArray create ( int size ) { AtomicLongArray array = new AtomicLongArray ( size ) ; if ( size == 0 ) { array = new AtomicLongArray ( 0 ) ; } else { array = new AtomicLongArray ( size ) ; } return array ; }
match ( self ) : NEW_LINE INDENT if len ( self . traversers ) == 1 : NEW_LINE INDENT return self . traversers [ 0 ] NEW_LINE DEDENT elif len ( self . traversers ) == 2 : NEW_LINE INDENT return self . traversers [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . traversers [ 0 ] NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
swap ( self , current , pending ) : NEW_LINE INDENT if current == pending : NEW_LINE INDENT return NEW_LINE DEDENT if current == pending : NEW_LINE INDENT return NEW_LINE DEDENT if current == pending : NEW_LINE INDENT return NEW_LINE DEDENT if current == pending : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
size ( self ) : NEW_LINE INDENT return self . hash . size ( ) NEW_LINE DEDENT

_write_snapshot_blob ( self , state ) : NEW_LINE INDENT try : NEW_LINE INDENT snapshot_blob = self . _write_snapshot_blob ( state ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT if snapshot_blob : NEW_LINE INDENT self . _write_snapshot_blob ( state ) NEW_LINE DEDENT DEDENT
transition ( self ) : NEW_LINE INDENT state = self . state NEW_LINE if state is not None : NEW_LINE INDENT return self . _transition ( state ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _transition ( state ) NEW_LINE DEDENT DEDENT
def addSchemaName ( String schemaName ) : NEW_LINE INDENT if ( schemaName == null ) { return null ; } else if ( schemaName == null || schemaName == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
recreate_hash_index ( self ) : NEW_LINE INDENT if self . hash_index : NEW_LINE INDENT self . hash_index = self . hash_index NEW_LINE DEDENT return self . hash_index NEW_LINE DEDENT
index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _index ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
async_refresh ( self ) : NEW_LINE INDENT now = datetime . datetime . utcnow ( ) NEW_LINE return self . _async_refresh ( now ) NEW_LINE DEDENT
async_refresh ( self , * args , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _refresh ( * args , ** kwargs ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _refresh ( * args , ** kwargs ) NEW_LINE raise NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def diff ( self ) : NEW_LINE INDENT if self . _diff is None : NEW_LINE INDENT self . _diff = { } NEW_LINE DEDENT return self . _diff NEW_LINE DEDENT
encode_long ( long value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , long ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
encode ( self , int value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
write ( int position , int value ) : NEW_LINE INDENT try : NEW_LINE INDENT value = int ( value ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if value == 0 : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
read_variable_length_integer ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_variable_length_integer ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read ( InputStream inputStream ) : NEW_LINE INDENT try : NEW_LINE INDENT length = int ( inputStream . read ( ) ) NEW_LINE if length == - 1 : NEW_LINE INDENT length = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT length = int ( length ) NEW_LINE DEDENT return length NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
addView ( self , view ) : NEW_LINE INDENT self . addView ( view ) NEW_LINE return self NEW_LINE DEDENT
measure_loading_views_height ( self ) : NEW_LINE INDENT if self . _loading_views_height is None : NEW_LINE INDENT self . _loading_views_height = self . _loading_views_height NEW_LINE DEDENT return self . _loading_views_height NEW_LINE DEDENT
update_mode ( self , mode ) : NEW_LINE INDENT if self . mode == mode : NEW_LINE INDENT self . mode = mode NEW_LINE DEDENT else : NEW_LINE INDENT self . mode = mode NEW_LINE DEDENT DEDENT
pull_event ( self ) : NEW_LINE INDENT if self . _pull_event : NEW_LINE INDENT return self . _pull_event NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static Overscrolling create ( ) { return new Overscrolling ( ) ; }
add_fact ( self , fact ) : NEW_LINE INDENT self . facts . add ( fact ) NEW_LINE DEDENT
add_facts ( self , facts ) : NEW_LINE INDENT if not facts : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( facts , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance
static RuleBuilder newRuleBuilder ( Class < ? extends Rule > ruleClass ) { RuleBuilder builder = new RuleBuilder ( ) ; if ( ruleClass != null ) { builder . ruleClass = ruleClass ; } return builder ; }
static RuleBuilder newRuleBuilder ( RuleType ruleType ) { if ( ruleType == null ) { return new RuleBuilder ( ) ; } if ( ruleType . isDefault ( ) ) { return new RuleBuilder ( ) ; } return new RuleBuilder ( ) ; }
_get_fact_type ( self ) : NEW_LINE INDENT fact_type = self . fact_type NEW_LINE if fact_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT return fact_type NEW_LINE DEDENT
def def get_result_type ( self ) : NEW_LINE INDENT return self . result_type NEW_LINE DEDENT
add_fact ( self , fact ) : NEW_LINE INDENT self . facts . add ( fact ) NEW_LINE DEDENT
add_facts ( self , facts ) : NEW_LINE INDENT if not facts : NEW_LINE INDENT return NEW_LINE DEDENT self . facts . add ( facts ) NEW_LINE DEDENT
add_action ( self , action ) : NEW_LINE INDENT self . actions . add ( action ) NEW_LINE DEDENT
rule_instance ( self ) : NEW_LINE INDENT return self . _rule_instance NEW_LINE DEDENT
getAnnotatedField ( cls ) : NEW_LINE INDENT return cls . getAnnotatedField ( ) NEW_LINE DEDENT
static Method getAnnotatedMethod ( Class < ? extends Annotation > annotationType ) { if ( annotationType == null ) { return null ; } return annotationType . getMethod ( " getAnnotatedMethod " ) ; }
Annotation getAnnotation ( Class < ? extends Annotation > annotationType ) { if ( annotationType == null ) { return null ; } return annotationType . getAnnotation ( annotationType ) ; }
audit ( self , rule ) : NEW_LINE INDENT self . rule = rule NEW_LINE if self . rule is not None : NEW_LINE INDENT return self . rule NEW_LINE DEDENT return None NEW_LINE DEDENT
update_status ( self , rule , status ) : NEW_LINE INDENT if status == None : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == ' ' : NEW_LINE INDENT return NEW_LINE DEDENT if status == '
get_rule_status ( self , rule_name ) : NEW_LINE INDENT if not rule_name : NEW_LINE INDENT return None NEW_LINE DEDENT return rule_name NEW_LINE DEDENT
def def get_result_type ( self ) : NEW_LINE INDENT return self . _result_type NEW_LINE DEDENT
def add_rule ( self ) : NEW_LINE INDENT return self . _add_rule ( ) NEW_LINE DEDENT
add ( self , rule ) : NEW_LINE INDENT if isinstance ( rule , Rule ) : NEW_LINE INDENT return rule NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def set_value ( self , value ) : NEW_LINE INDENT if ( value == null ) { return NEW_LINE DEDENT else : NEW_LINE INDENT if ( value == null ) { return NEW_LINE DEDENT else { return NEW_LINE DEDENT DEDENT
def def fact_type ( self , fact_type ) : NEW_LINE INDENT fact_type = fact_type ( fact_type ) NEW_LINE return fact_type NEW_LINE DEDENT
static List < Rule > rules ( ) { List < Rule > rules = new ArrayList < Rule > ( ) ; rules . add ( new Rule ( ) ) ; rules . add ( new Rule ( ) ) ; return rules ; }
read_empty_line ( self , line ) : NEW_LINE INDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not line . strip ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
convert_list_to_array ( list ) : NEW_LINE INDENT if list is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
extract_images ( self ) : NEW_LINE INDENT images = [ ] NEW_LINE for image in self . images : NEW_LINE INDENT images . append ( image ) NEW_LINE DEDENT for image in self . images : NEW_LINE INDENT images . append ( image ) NEW_LINE DEDENT return images NEW_LINE DEDENT
override_ports ( self , ports ) : NEW_LINE INDENT for port in ports : NEW_LINE INDENT if port in self . ports : NEW_LINE INDENT return port NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT
parse_ports ( self , ports ) : NEW_LINE INDENT for port in ports : NEW_LINE INDENT if port not in self . ports : NEW_LINE INDENT self . ports . add ( port ) NEW_LINE DEDENT DEDENT return self NEW_LINE DEDENT
public
removeFirst ( self , list ) : NEW_LINE INDENT if list is None : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( list ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( list ) == 1 : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT elif len ( list ) == 2 : NEW_LINE INDENT return list [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT DEDENT
merge_services ( self , services ) : NEW_LINE INDENT if len ( services ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( services ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
save_image_stream ( self , image_stream ) : NEW_LINE INDENT if isinstance ( image_stream , six . string_types ) : NEW_LINE INDENT image_stream = BytesIO ( image_stream ) NEW_LINE DEDENT else : NEW_LINE INDENT image_stream = image_stream NEW_LINE DEDENT return image_stream NEW_LINE DEDENT
boolean servicePortMatches ( intOrString value ) { if ( value == null ) { return false ; } String servicePort = value . trim ( ) ; if ( servicePort . length ( ) == 0 ) { return false ; } if ( servicePort . length ( ) == 0 ) { return false ; } return true ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

add ( self , key , value ) : NEW_LINE INDENT if key not in self . map : NEW_LINE INDENT self . map . put ( key , value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . map . put ( key , value ) NEW_LINE DEDENT DEDENT
add ( self , map ) : NEW_LINE INDENT self . map = map NEW_LINE return self NEW_LINE DEDENT
static Map < K , V > map ( Map < K , V > map1 , Map < K , V > map2 ) { Map < K , V > map = new HashMap < K , V > ( ) ; map . putAll ( map1 ) ; map . putAll ( map2 ) ; map . putAll ( map1 ) ; map . putAll ( map2 ) ; return map ; }
void add ( Map < String , Object > toPut , Map < String , Object > ret ) { if ( toPut == null ) { return ; } if ( ret == null ) { ret = new HashMap < String , Object > ( ) ; } else { ret . put ( toPut . getKey ( ) , toPut . getValue ( ) ) ; } }
watch_pod ( self , pod ) : NEW_LINE INDENT self . _watch_pod ( pod ) NEW_LINE return self . _watch_pod ( pod ) NEW_LINE DEDENT
boolean isValid ( String value ) { if ( value == null ) { return false ; } if ( value . length ( ) == 0 ) { return true ; } if ( value . length ( ) == 1 ) { return true ; } if ( value . length ( ) == 2 ) { return true ; } return false ; }
load_json ( self , json ) : NEW_LINE INDENT if isinstance ( json , list ) : NEW_LINE INDENT return json NEW_LINE DEDENT elif isinstance ( json , dict ) : NEW_LINE INDENT return json NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
resourceVersion ( self , entity ) : NEW_LINE INDENT if not entity : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return entity NEW_LINE DEDENT DEDENT
is_pod_ready ( self ) : NEW_LINE INDENT return self . pod . is_ready ( ) NEW_LINE DEDENT
get_current_context ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context is None : NEW_LINE INDENT return None NEW_LINE DEDENT return context NEW_LINE DEDENT
def def exists ( self , name ) : NEW_LINE INDENT name = self . name NEW_LINE if self . name == name : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static boolean isResource ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } if ( clazz . getClassLoader ( ) == null ) { return false ; } return true ; }
add_default_values ( self ) : NEW_LINE INDENT self . _add_default_values ( ) NEW_LINE self . _add_default_values ( ) NEW_LINE DEDENT
convert_env_vars ( self , env_vars ) : NEW_LINE INDENT if isinstance ( env_vars , list ) : NEW_LINE INDENT return env_vars NEW_LINE DEDENT elif isinstance ( env_vars , dict ) : NEW_LINE INDENT return env_vars NEW_LINE DEDENT else : NEW_LINE INDENT return env_vars NEW_LINE DEDENT DEDENT
merge ( self , resources ) : NEW_LINE INDENT if len ( resources ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if len ( resources ) == 1 : NEW_LINE INDENT return resources [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
merge ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT return self NEW_LINE DEDENT return self . _merge ( * args , ** kwargs ) NEW_LINE DEDENT
def public public public public void setAnnotation ( final String name , final String value ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { throw new IllegalArgumentException ( ) ; } } } } else { throw new IllegalArgumentException ( ) ; } } } } else { throw new IllegalArgumentException ( ) ; } } } }
read_configuration_from_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT config = ConfigParser . SafeConfigParser ( ) NEW_LINE config . read ( file ) NEW_LINE return config NEW_LINE DEDENT except ConfigParser . NoOptionError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
add_port ( self , port ) : NEW_LINE INDENT try : NEW_LINE INDENT self . port . append ( port ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . port . append ( port ) NEW_LINE DEDENT DEDENT
def def _get_method ( self ) : NEW_LINE INDENT return self . __class__ . getMethod ( self . __class__ . __name__ ) NEW_LINE DEDENT
Map < String , Object > get ( String key ) { Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( key , key ) ; return map ; }
Map < String , Object > getConfiguration ( String key ) { Map < String , Object > configuration = new HashMap < String , Object > ( ) ; configuration . put ( key , Object . valueOf ( key ) ) ; return configuration ; }
download_progress ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _download_progress ( url ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
compare_version ( self , version ) : NEW_LINE INDENT version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE version = version . lower ( ) NEW_LINE return version NEW_LINE DEDENT
def def def def def def def def def def def def def def def get_config ( self ) : def get_config ( self ) : def get_config ( self ) : NEW__python__

merge_profiles ( self , profiles ) : NEW_LINE INDENT if len ( profiles ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( profiles ) == 1 : NEW_LINE INDENT return profiles [ 0 ] NEW_LINE DEDENT elif len ( profiles ) == 2 : NEW_LINE INDENT return profiles [ 1 ] NEW_LINE DEDENT return profiles NEW_LINE DEDENT
static List < Profile > getAllProfiles ( ) { List < Profile > profiles = new ArrayList < Profile > ( ) ; for ( Profile profile : profiles ) { profiles . add ( profile ) ; } return profiles ; }
check_profile_file ( self , profile_file ) : NEW_LINE INDENT if profile_file is None : NEW_LINE INDENT return False NEW_LINE DEDENT if profile_file is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
prepend_location ( self , location ) : NEW_LINE INDENT if location is None : NEW_LINE INDENT return NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return NEW_LINE DEDENT return location NEW_LINE DEDENT
load_profile ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT profile = self . _load_profile ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT return profile NEW_LINE DEDENT
override_image_pull_policy ( self , image_pull_policy ) : NEW_LINE INDENT self . image_pull_policy = image_pull_policy NEW_LINE return self . image_pull_policy NEW_LINE DEDENT
is_binary_building_mode ( self ) : NEW_LINE INDENT return self . is_binary_building_mode ( ) NEW_LINE DEDENT
public static void setReplicaCount ( int replicaCount ) { this . replicaCount = replicaCount ; if ( this . replicaCount == 0 ) { this . replicaCount = 1 ; } }
first_child_element ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT return name NEW_LINE DEDENT
def def install_template ( self , template , namespace ) : NEW_LINE INDENT if not self . namespace : NEW_LINE INDENT self . namespace = namespace NEW_LINE DEDENT else : NEW_LINE INDENT self . namespace = namespace NEW_LINE DEDENT DEDENT
removeTags ( self , name ) : NEW_LINE INDENT tags = [ ] NEW_LINE for tag in self . tags : NEW_LINE INDENT if tag . name == name : NEW_LINE INDENT tags . append ( tag ) NEW_LINE DEDENT DEDENT return tags NEW_LINE DEDENT
static boolean isNamespaceCreated ( String namespace ) { if ( namespace == null ) { return false ; } if ( namespace . length ( ) == 0 ) { return false ; } if ( namespace . length ( ) == 0 ) { return false ; } return true ; }
create_project ( self , project_name ) : NEW_LINE INDENT if project_name is not None : NEW_LINE INDENT return project_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
boolean isProjectRequest ( ProjectRequest projectRequest ) { if ( projectRequest == null ) { return false ; } if ( projectRequest . getProjectRequest ( ) == null ) { return false ; } return projectRequest . getProjectRequest ( ) == null ; }
static String getNamespace ( String namespace ) { if ( namespace == null ) { namespace = " " ; } if ( namespace . equals ( " " ) ) { namespace = " " ; } return namespace ; }
def def apply_json ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _apply_json ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT if isinstance ( e , Exception ) : NEW_LINE INDENT raise e NEW_LINE DEDENT DEDENT DEDENT
create_default_namespace ( self ) : NEW_LINE INDENT if self . namespace is None : NEW_LINE INDENT self . namespace = ' ' NEW_LINE DEDENT return self . namespace NEW_LINE DEDENT

add_environment_vars ( self , environment_vars ) : NEW_LINE INDENT self . environment_vars = environment_vars NEW_LINE DEDENT
_parse_duration ( self , duration_string ) : NEW_LINE INDENT return self . _parse_duration ( duration_string ) NEW_LINE DEDENT
_parse_duration_string ( self ) : NEW_LINE INDENT return self . _parse_duration_string ( ) NEW_LINE DEDENT
scan_output_dir ( self ) : NEW_LINE INDENT if self . output_dir is None : NEW_LINE INDENT self . output_dir = os . getcwd ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . output_dir = self . output_dir NEW_LINE DEDENT return self . output_dir NEW_LINE DEDENT
disable_openshift_features ( self ) : NEW_LINE INDENT if self . is_openshift_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_openshift_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_openshift_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_custom_mapping_from_properties_file ( self , properties_file ) : NEW_LINE INDENT kinds = [ ] NEW_LINE filenames = [ ] NEW_LINE for name in properties_file : NEW_LINE INDENT kinds . append ( name ) NEW_LINE DEDENT for name in kinds : NEW_LINE INDENT filenames . append ( name ) NEW_LINE DEDENT return { ' kinds ' : kinds , ' filenames ' : filenames } NEW_LINE DEDENT
get_generator_context ( self ) : NEW_LINE INDENT if self . generator_context : NEW_LINE INDENT return self . generator_context NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_config ( self ) : NEW_LINE INDENT config = self . _get_config ( ) NEW_LINE if config : NEW_LINE INDENT return config NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_enricher_context ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return context NEW_LINE DEDENT DEDENT
get_enricher_config ( self ) : NEW_LINE INDENT config = self . get_config ( ) NEW_LINE if config : NEW_LINE INDENT return config NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_default_icon ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_default_icon ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _get_default_icon ( ) NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) throws IOException { if ( args . length == 0 ) { return ; } if ( args . length == 0 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 4 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length == 3 ) { return ; } if ( args . length == 1 ) { return ; } if ( args . length == 2 ) { return ; } if ( args . length ==
static Properties getProperties ( ) { if ( properties == null ) { properties = new Properties ( ) ; } if ( properties == null ) { properties = new Properties ( ) ; } return properties ; }
determine_spring_boot_major_version ( self ) : NEW_LINE INDENT if self . spring_boot_major_version is None : NEW_LINE INDENT self . spring_boot_major_version = self . spring_boot_major_version NEW_LINE DEDENT return self . spring_boot_major_version NEW_LINE DEDENT
public public public public List < List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) ; return new ArrayList < ServiceDescriptor > ( ) ; } public List < ServiceDescriptor > list = new ArrayList < ServiceDescriptor > ( ) { public List < ServiceDescriptor > list
addMetadata ( self , resources ) : NEW_LINE INDENT self . metadata = { } NEW_LINE for resource in resources : NEW_LINE INDENT self . metadata . add ( resource ) NEW_LINE DEDENT return self . metadata NEW_LINE DEDENT
get_raw_config ( self ) : NEW_LINE INDENT if self . raw_config is None : NEW_LINE INDENT self . raw_config = { } NEW_LINE DEDENT return self . raw_config NEW_LINE DEDENT
convert_yaml_tree ( self , tree ) : NEW_LINE INDENT if isinstance ( tree , dict ) : NEW_LINE INDENT return tree NEW_LINE DEDENT elif isinstance ( tree , list ) : NEW_LINE INDENT return tree NEW_LINE DEDENT DEDENT
get_config ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _config NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static Template getTemplate ( List < Template > list ) { if ( list == null ) { return null ; } if ( list . size ( ) == 0 ) { return null ; } if ( list . size ( ) == 1 ) { return list . get ( 0 ) ; } return null ; }
get_reference_date ( self , reference_date ) : NEW_LINE INDENT if reference_date is not None : NEW_LINE INDENT return reference_date NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_config_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . config NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
_parse_raw_string ( self , raw_string ) : NEW_LINE INDENT if isinstance ( raw_string , str ) : NEW_LINE INDENT return raw_string NEW_LINE DEDENT elif isinstance ( raw_string , str ) : NEW_LINE INDENT return raw_string NEW_LINE DEDENT else : NEW_LINE INDENT return raw_string NEW_LINE DEDENT DEDENT
def def sort ( self ) : NEW_LINE INDENT if len ( self . includes ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( self . includes ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_ istag ( self , plugin ) : NEW_LINE INDENT if self . istag : NEW_LINE INDENT self . istag = plugin NEW_LINE DEDENT else : NEW_LINE INDENT self . istag = None NEW_LINE DEDENT DEDENT
get_image_name ( self ) : NEW_LINE INDENT image_name = self . get_image_name ( ) NEW_LINE if image_name : NEW_LINE INDENT return image_name NEW_LINE DEDENT return None NEW_LINE DEDENT
get_docker_registry ( self ) : NEW_LINE INDENT registry = self . _get_docker_registry ( ) NEW_LINE if registry is None : NEW_LINE INDENT return None NEW_LINE DEDENT return registry NEW_LINE DEDENT
is_offline ( self ) : NEW_LINE INDENT return self . _is_offline ( ) NEW_LINE DEDENT
def def def get_external_external_external_access ( self , service_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_external_access ( service_name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
check_global_prop ( self , prop ) : NEW_LINE INDENT if prop is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
create_client ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . client NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public public static void createInternal ( ) throws IOException { if ( ! node . exists ( ) ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) ) { return ; } if ( node . exists ( ) { return ; } if ( node . exists ( ) ) { return ; } return ; } }
List < String > getSupportedPlugins ( ) { List < String > plugins = new ArrayList < String > ( ) ; for ( String plugin : plugins ) { plugins . add ( plugin ) ; } return plugins ; }
parse_rewards_balance_response ( self , response ) : NEW_LINE INDENT if isinstance ( response , dict ) : NEW_LINE INDENT return response NEW_LINE DEDENT if isinstance ( response , dict ) : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
get_rewards_balance ( self , nonce ) : NEW_LINE INDENT if not nonce : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return nonce NEW_LINE DEDENT DEDENT
createPayPalPaymentResource ( self ) : NEW_LINE INDENT return self . _createPayPalPaymentResource ( ) NEW_LINE DEDENT
def def get_request ( self , path ) : NEW_LINE INDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT return self . _request ( ' GET ' ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _request ( ' GET ' ) NEW_LINE DEDENT DEDENT
def request ( String path ) : NEW_LINE INDENT if ( path . startsWith ( " / " ) : NEW_LINE INDENT path = path . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT else : NEW_LINE INDENT path = path . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT path = path . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT path = path . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT else : NEW_LINE INDENT path = path . replace ( ' / ' , ' / ' ) NEW_LINE DEDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT path =
parse_venmo_configuration ( self , json ) : NEW_LINE INDENT if isinstance ( json , dict ) : NEW_LINE INDENT return json NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_signature ( self , signature ) : NEW_LINE INDENT return self . check_signature ( signature ) NEW_LINE DEDENT
_get_value ( self , name ) : NEW_LINE INDENT value = self . _get_value ( name ) NEW_LINE if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT

_get_browser_recipe ( self , recipe ) : NEW_LINE INDENT if recipe is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return recipe NEW_LINE DEDENT DEDENT
def def def get_billing_agreement ( self ) : NEW_LINE INDENT return self . _get_billing_agreement ( ) NEW_LINE if self . _billing_agreement is None : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def get_request ( self , path ) : NEW_LINE INDENT if not self . base_url : NEW_LINE INDENT return None NEW_LINE DEDENT def get_url ( self ) : NEW_LINE INDENT return self . base_url + ' / ' + self . base_url + ' / ' + self . path NEW_LINE DEDENT DEDENT
def def post ( self , url , path ) : NEW_LINE INDENT try : NEW_LINE INDENT url = urlparse ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT url = urlparse ( url ) NEW_LINE DEDENT return urllib . urlencode ( { ' url ' : url , ' path ' : url } ) NEW_LINE DEDENT
post ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . _post ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . _post ( request ) NEW_LINE DEDENT elif request . method == ' DELETE ' : NEW_LINE INDENT return self . _post ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . _post ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _post ( request ) NEW_LINE DEDENT DEDENT
prepare_payment_flow ( self ) : NEW_LINE INDENT payment_flow = [ ] NEW_LINE for payment_flow in self . payment_flow : NEW_LINE INDENT payment_flow . append ( payment_flow ) NEW_LINE DEDENT return payment_flow NEW_LINE DEDENT
def init ( ) : NEW_LINE INDENT try : NEW_LINE INDENT browser . open ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

remove_listener ( self , listener ) : NEW_LINE INDENT if not self . listeners : NEW_LINE INDENT return NEW_LINE DEDENT self . listeners . remove ( listener ) NEW_LINE DEDENT
def def def def get_pay def get_payment_flow ( self ) : NEW_LINE INDENT try : NEW_LINE def get_payment_flow ( self ) : NEW_LINE INDENT return self . _get_payment_flow ( ) NEW_LINE def get_payment_flow ( self ) : NEW_LINE INDENT return self . _get_payment_flow ( ) NEW_LINE DEDENT def get_flow ( self ) : NEW_LINE INDENT return self . _get_payment_flow ( ) NEW_LINE DEDENT return self . _get_flow ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_paypal_response_url ( self , response_url ) : NEW_LINE INDENT try : NEW_LINE INDENT response_url = self . _parse_response_url ( response_url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return response_url NEW_LINE DEDENT return response_url NEW_LINE DEDENT
add_user_defined_words ( self , words ) : NEW_LINE INDENT if len ( words ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( words ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT for word in words : NEW_LINE INDENT self . add_user_defined_words ( word ) NEW_LINE DEDENT DEDENT
remove_user_defined_word_list ( self , KoreanPos ) : NEW_LINE INDENT word_list = [ ] NEW_LINE for koreanPos in self . KoreanPos : NEW_LINE INDENT word_list . append ( koreanPos ) NEW_LINE DEDENT return word_list NEW_LINE DEDENT

extract_phrases ( text ) : NEW_LINE INDENT phrases = [ ] NEW_LINE for phrase in text : NEW_LINE INDENT phrases . append ( phrase . strip ( ) ) NEW_LINE DEDENT return phrases NEW_LINE DEDENT
def Detokenize ( self , input_list ) : NEW_LINE INDENT if isinstance ( input_list , list ) : NEW_LINE INDENT words = [ ] NEW_LINE for word in input_list : NEW_LINE INDENT words . append ( word ) NEW_LINE DEDENT return words NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
read ( self , ch ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . buffer . read ( ch ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT return self . buffer . read ( ) NEW_LINE DEDENT DEDENT


get_profile_instance ( self , index ) : NEW_LINE INDENT if index is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_profile_instance ( index ) NEW_LINE DEDENT DEDENT
convert_floating_point_taps ( self , taps ) : NEW_LINE INDENT if isinstance ( taps , float ) : NEW_LINE INDENT return taps NEW_LINE DEDENT else : NEW_LINE INDENT return taps NEW_LINE DEDENT DEDENT
read ( self , buffer ) : NEW_LINE INDENT if len ( buffer ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( buffer ) == 1 : NEW_LINE INDENT return buffer [ 0 ] NEW_LINE DEDENT if len ( buffer ) == 1 : NEW_LINE INDENT return buffer [ 0 ] NEW_LINE DEDENT return buffer [ 0 ] NEW_LINE DEDENT
public void read ( ) throws IOException { if ( buffer == null ) { throw new EOFException ( ) ; } else { throw new EOFException ( ) ; } }
max_frame ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , Sequence ) : NEW_LINE INDENT return self . _max_frame ( sequence ) NEW_LINE DEDENT return self . _max_frame ( sequence ) NEW_LINE DEDENT
def modify_movie_header ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _modify_movie_header ( file ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _modify_movie_header ( file ) NEW_LINE DEDENT DEDENT
void modifyMovieHeader ( MovieHeader movieHeader ) { if ( movieHeader == null ) { return ; } if ( ! movieHeader . isModified ( ) ) { return ; } if ( movieHeader . isModified ( ) ) { return ; } if ( movieHeader . isModified ( ) ) { return ; } if ( movieHeader . isModified ( ) ) { return ; } if ( movieHeader . isModified ( ) ) { return ; } if ( movieHeader . isModified ( ) ) { return ; } }
def calculate_duration ( self , edits = None ) : NEW_LINE INDENT if edits is None : NEW_LINE INDENT edits = { } NEW_LINE DEDENT else : NEW_LINE INDENT edits = edits . copy ( ) NEW_LINE DEDENT if edits is None : NEW_LINE INDENT edits = { } NEW_LINE DEDENT else : NEW_LINE INDENT edits = edits . copy ( ) NEW_LINE DEDENT return edits NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
calculate_frame_number ( self , frame_number ) : NEW_LINE INDENT if frame_number is None : NEW_LINE INDENT frame_number = frame_number NEW_LINE DEDENT return frame_number NEW_LINE DEDENT
calc_time ( self ) : NEW_LINE INDENT if self . _time is not None : NEW_LINE INDENT self . _time = self . _time NEW_LINE DEDENT return self . _time NEW_LINE DEDENT
convert_timecode_to_frame ( self , timevalue , frame_number ) : NEW_LINE INDENT if frame_number is None : NEW_LINE INDENT frame_number = timevalue NEW_LINE DEDENT return frame_number NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static List < Integer > unpack ( List < Integer > list ) { if ( list == null ) { return new ArrayList < Integer > ( ) ; } if ( list . size ( ) == 0 ) { return new ArrayList < Integer > ( ) ; } if ( list . size ( ) == 0 ) { return new ArrayList < Integer > ( ) ; } return list ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
compare_colors ( self , colors ) : NEW_LINE INDENT if len ( colors ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( colors ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def calc_component_size ( self ) : NEW_LINE INDENT component_size = self . component_size NEW_LINE component_size = self . component_size NEW_LINE return component_size NEW_LINE DEDENT
modify_packet ( self , packets ) : NEW_LINE INDENT if len ( packets ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( packets ) == 1 : NEW_LINE INDENT return packets [ 0 ] NEW_LINE DEDENT elif len ( packets ) == 2 : NEW_LINE INDENT return packets [ 1 ] NEW_LINE DEDENT elif len ( packets ) == 3 : NEW_LINE INDENT return packets [ 2 ] NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_wav_header ( self , audio_format ) : NEW_LINE INDENT if audio_format is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( audio_format , str ) : NEW_LINE INDENT return audio_format NEW_LINE DEDENT elif isinstance ( audio_format , str ) : NEW_LINE INDENT return audio_format NEW_LINE DEDENT elif isinstance ( audio_format , str ) : NEW_LINE INDENT return audio_format NEW_LINE DEDENT elif isinstance ( audio_format , str ) : NEW_LINE INDENT return audio_format NEW_LINE DEDENT return None NEW_LINE DEDENT

DecoderSpecificInfo getDecoderSpecificInfo ( ) { if ( decoderSpecificInfo == null ) { decoderSpecificInfo = new DecoderSpecificInfo ( ) ; decoderSpecificInfo . setDecoderSpecificInfo ( this ) ; } return decoderSpecificInfo ; }
def encodes_one_symbol ( self , symbol ) : NEW_LINE INDENT if symbol is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif symbol is not None : NEW_LINE INDENT return symbol NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static int i ( ) { if ( i == 0 ) { return 0 ; } if ( i == 1 ) { return 1 ; } return i ; }
split ( self , timevalue ) : NEW_LINE INDENT if timevalue is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
decode ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
def def set_endianness ( self , endianness ) : NEW_LINE INDENT self . endianness = endianness NEW_LINE return self . endianness NEW_LINE DEDENT
_macroblock ( self ) : NEW_LINE INDENT if self . macroblock : NEW_LINE INDENT return self . macroblock NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def def def en__python____python____python____python____python____python____python____python____python____python__ def def En__python____python____python____python____python____python____python____python__ def def def def En__python____python____python____python____python____python____python__ def def def def def En__python____python____python____python____python__ def def def def def En__python____python____python____python____python__ def def def def def En__python____python____python____python__ def def def def def def __ def ____python____python____python____python____python____python__ def def def def def def def ____python____python____python____python____python____python__ def def def def def def _ def _get_frame__python____python____python____python____python____python__ def def def def _get_frame def _get_frame def _get_frame def _get_frame_frame ( self ) : NEW__python__ def _get_frame ( self , frame ) : NEW__python__ def _get_frame_frame ( self ) : NEW def _get_frame ( self ) : NEW
static unsigned int unsigned_integer ( int length ) { if ( length == 0 ) { return 0 ; } if ( length == 1 ) { return 0 ; } if ( length == 2 ) { return length ; } if ( length == 3 ) { return length ; } if ( length == 4 ) { return length ; } if ( length == 5 ) { return length ; } if ( length == 6 ) { return length ; } return length ; }
encode ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return encode ( value ) NEW_LINE DEDENT return encode ( value ) NEW_LINE DEDENT
add_packet ( self , packet ) : NEW_LINE INDENT if isinstance ( packet , Packet ) : NEW_LINE INDENT return packet NEW_LINE DEDENT elif isinstance ( packet , Packet ) : NEW_LINE INDENT return packet NEW_LINE DEDENT DEDENT
next_tag ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . next_tag ( ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
one bin from arithmetice code word .
decode_symbols ( self , symbols ) : NEW_LINE INDENT for symbol in symbols : NEW_LINE INDENT if symbol not in self . symbols : NEW_LINE INDENT self . symbols . append ( symbol ) NEW_LINE DEDENT DEDENT return self . symbols NEW_LINE DEDENT

sample_frequency ( self , index ) : NEW_LINE INDENT if index is None : NEW_LINE INDENT return SAMPLE_FREQUENCY_NONE NEW_LINE DEDENT elif index < 0 : NEW_LINE INDENT return SAMPLE_FREQUENCY_NONE NEW_LINE DEDENT else : NEW_LINE INDENT return SAMPLE_FREQUENCY_NONE NEW_LINE DEDENT DEDENT
color_green ( self , color ) : NEW_LINE INDENT if color is not None : NEW_LINE INDENT return color NEW_LINE DEDENT elif color is not None : NEW_LINE INDENT return color NEW_LINE DEDENT elif color is not None : NEW_LINE INDENT return color NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_dct_ reconstruction ( self ) : NEW_LINE INDENT return self . _dct_reconstruction ( ) NEW_LINE DEDENT
image based on new DCT coefficient ( ) : NEW_LINE INDENT image = np . array ( [ ] , dtype = np . uint8 ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE image = np . reshape ( image , ( - 1 , 1 ) ) NEW_LINE
static void finalizeDCT ( DCT dct ) { if ( dct == null ) { throw new IllegalArgumentException ( " DCT is null " ) ; } if ( dct == null ) { throw new IllegalArgumentException ( " DCT is null " ) ; } if ( dct == null ) { throw new IllegalArgumentException ( " DCT is null " ) ; } }
merge_bits ( a , b ) : NEW_LINE INDENT if isinstance ( b , int ) : NEW_LINE INDENT return b NEW_LINE DEDENT if isinstance ( a , int ) : NEW_LINE INDENT return a NEW_LINE DEDENT if isinstance ( b , int ) : NEW_LINE INDENT return b NEW_LINE DEDENT if isinstance ( a , int ) : NEW_LINE INDENT return a NEW_LINE DEDENT if isinstance ( b , int ) : NEW_LINE INDENT return b NEW_LINE DEDENT return a NEW_LINE DEDENT
rewind ( self , reverse = False ) : NEW_LINE INDENT if reverse : NEW_LINE INDENT self . reverse ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . reverse ( ) NEW_LINE DEDENT DEDENT
rewind ( self , reverse = False ) : NEW_LINE INDENT if reverse : NEW_LINE INDENT self . reverse ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . reverse ( ) NEW_LINE DEDENT DEDENT
seek ( self , frame ) : NEW_LINE INDENT if not self . seekable : NEW_LINE INDENT return NEW_LINE DEDENT if not self . seekable : NEW_LINE INDENT return NEW_LINE DEDENT self . seekable = True NEW_LINE self . seek ( frame ) NEW_LINE DEDENT
def get_pixel_buffer ( self ) : NEW_LINE INDENT return self . _get_buffer ( ) . get_buffer ( ) NEW_LINE DEDENT
def transform ( self ) : NEW_LINE INDENT return self . _transform ( ) . transform ( self . gain , self . gain , self . gain , self . gain , self . id ) NEW_LINE DEDENT
convert_byte_array_to_integer_array ( self , byte_array ) : NEW_LINE INDENT return self . convert_byte_array_to_integer_array ( byte_array ) NEW_LINE DEDENT
static byte [ ] convert ( byte [ ] array ) { if ( array == null ) { return null ; } if ( array . length == 0 ) { return new byte [ 0 ] ; } if ( array . length == 1 ) { return array [ 0 ] ; } return array [ 0 ] ; }
convert_pcm_samples ( buf , format ) : NEW_LINE INDENT if format == ' float ' : NEW_LINE INDENT return buf NEW_LINE DEDENT elif format == ' float16' : NEW_LINE INDENT return buf NEW_LINE DEDENT elif format == ' float32' : NEW_LINE INDENT return buf NEW_LINE DEDENT elif format == ' float64' : NEW_LINE INDENT return buf NEW_LINE DEDENT else : NEW_LINE INDENT return buf NEW_LINE DEDENT DEDENT
convert_float_buf ( floatBuf ) : NEW_LINE INDENT buf = floatBuf . copy ( ) NEW_LINE buf . clear ( ) NEW_LINE return buf NEW_LINE DEDENT

def get_audio_samples ( self ) : NEW_LINE INDENT return self . _get_audio_samples ( ) NEW_LINE DEDENT
get_coded_size ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . coded_size NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def public public public public public public public static void set_slice_slice_slice_group_slice_group_slice_group ( int index , int index , int index , int index , int index ) { if ( index < 0 : NEW_LINE INDENT return NEW_LINE DEDENT def slice_LINE INDENT if ( index < 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
slice_frame ( self , frame , column ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return None NEW_LINE DEDENT frame = frame . copy ( ) NEW_LINE frame [ column ] = frame [ column ] NEW_LINE frame [ column ] = frame [ column ] NEW_LINE return frame NEW_LINE DEDENT
read ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reader . read ( ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT return self . _reader . read ( ) NEW_LINE DEDENT DEDENT
read_batch ( self , batch_size ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_batch ( batch_size ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _read_batch ( batch_size ) NEW_LINE DEDENT DEDENT
median_prediction ( self ) : NEW_LINE INDENT median_prediction = np . median ( self . prediction ) NEW_LINE median_prediction = np . median ( self . prediction ) NEW_LINE return median_prediction NEW_LINE DEDENT
encode ( self , picture ) : NEW_LINE INDENT if isinstance ( picture , Frame ) : NEW_LINE INDENT return picture . encode ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return picture . encode ( ) NEW_LINE DEDENT DEDENT
encode ( self , picture ) : NEW_LINE INDENT if isinstance ( picture , bytes ) : NEW_LINE INDENT return picture NEW_LINE DEDENT if isinstance ( picture , bytes ) : NEW_LINE INDENT return picture NEW_LINE DEDENT if isinstance ( picture , bytes ) : NEW_LINE INDENT return picture NEW_LINE DEDENT if isinstance ( picture , bytes ) : NEW_LINE INDENT return picture NEW_LINE DEDENT if isinstance ( picture , bytes ) : NEW_LINE INDENT return picture NEW_LINE DEDENT return picture NEW_LINE DEDENT
encode_frame ( self , frame ) : NEW_LINE INDENT if frame is None : NEW_LINE INDENT return None NEW_LINE DEDENT frame = frame . copy ( ) NEW_LINE frame = frame . copy ( ) NEW_LINE frame = frame . copy ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . copy ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE frame = frame . transpose ( ) NEW_LINE
get_all_ codecs ( self ) : NEW_LINE INDENT return self . _get_all_ codecs ( ) NEW_LINE DEDENT
get_all_codec_tags ( self ) : NEW_LINE INDENT return self . _get_all_codec_tags ( ) NEW_LINE DEDENT
collect_references ( self , references ) : NEW_LINE INDENT if len ( references ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT for reference in references : NEW_LINE INDENT self . add_reference ( reference ) NEW_LINE DEDENT DEDENT
_get_gc ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _gc NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public void setInternalOnly ( String name , String value ) { if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null " ) ; } }
load_library ( self , library ) : NEW_LINE INDENT if not library : NEW_LINE INDENT return None NEW_LINE DEDENT library = load_library ( library ) NEW_LINE if not library : NEW_LINE INDENT return None NEW_LINE DEDENT return library NEW_LINE DEDENT
unpack ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _unpack ( url ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
default_channel_layout ( self , number_of_channels ) : NEW_LINE INDENT if number_of_channels == 0 : NEW_LINE INDENT return self . default_channel_layout NEW_LINE DEDENT elif number_of_channels == 1 : NEW_LINE INDENT return self . default_channel_layout NEW_LINE DEDENT elif number_of_channels == 2 : NEW_LINE INDENT return self . default_channel_layout NEW_LINE DEDENT else : NEW_LINE INDENT return self . default_channel_layout NEW_LINE DEDENT DEDENT
get_channel_layout ( self , index ) : NEW_LINE INDENT channel_layout = self . _channel_layout NEW_LINE channel_layout . index = index NEW_LINE return channel_layout NEW_LINE DEDENT
create_packet ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_packet ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void printVersion ( String version ) { if ( version != null ) { System . out . println ( version ) ; } else { System . out . println ( ) ; } }
def default_timebase ( self ) : NEW_LINE INDENT if self . _timebase is not None : NEW_LINE INDENT return self . _timebase NEW_LINE DEDENT if self . _timebase is None : NEW_LINE INDENT return self . _timebase NEW_LINE DEDENT return self . _timebase NEW_LINE DEDENT
create_demuxer ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return Demuxer ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def open__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python____python____python____python__ def def def def def def open__python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python__ def def def def def def def open__python____python____python____python____python____python__ def def def def def def def open__python____python____python____python____python____python__ def def def def def def open__python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def open__python____python__

get_descriptor ( self , id ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_descriptor ( id ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String getProperty ( String property ) { if ( property == null ) { return " " ; } if ( property . length ( ) == 0 ) { return " " ; } if ( property . length ( ) == 1 ) { return " " ; } if ( property . length ( ) == 2 ) { return " " ; } return " " ; }

def generate_map_name ( String name ) : NEW_LINE INDENT try : NEW_LINE INDENT name = name . lower ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT name = name NEW_LINE DEDENT else : NEW_LINE INDENT return name NEW_LINE DEDENT return name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_supported_frame_rates ( self ) : NEW_LINE INDENT return self . _get_supported_frame_rates ( ) NEW_LINE DEDENT
get_supported_pixel_formats ( self ) : NEW_LINE INDENT return self . _supported_pixel_formats NEW_LINE DEDENT
get_supported_audio_sample_rates ( self ) : NEW_LINE INDENT return self . _get_supported_audio_sample_rates ( ) NEW_LINE DEDENT
get_supported_audio_sample_formats ( self ) : NEW_LINE INDENT return self . _supported_audio_sample_formats NEW_LINE DEDENT
def get_supported_audio_channel_layouts ( self ) : NEW_LINE INDENT return self . _supported_audio_channel_layouts NEW_LINE DEDENT
set_flag ( self , flag ) : NEW_LINE INDENT self . _flag = flag NEW_LINE return self . _flag NEW_LINE DEDENT
set_flag2 ( self , flag2 ) : NEW_LINE INDENT self . flag2 = flag2 NEW_LINE return self . flag2 NEW_LINE DEDENT
decode ( self ) : NEW_LINE INDENT decoder = self . decoder NEW_LINE if decoder is None : NEW_LINE INDENT return None NEW_LINE DEDENT return decoder . decode ( self ) NEW_LINE DEDENT
get_demuxer ( self ) : NEW_LINE INDENT Demuxer stream = self . _get_demuxer ( ) NEW_LINE if stream : NEW_LINE INDENT return stream NEW_LINE DEDENT return None NEW_LINE DEDENT
get_output_formats ( self ) : NEW_LINE INDENT if self . output_formats is None : NEW_LINE INDENT self . output_formats = [ ] NEW_LINE DEDENT return self . output_formats NEW_LINE DEDENT
static FilterGraph createFilterGraph ( FilterGraph filterGraph ) { if ( filterGraph == null ) { return null ; } FilterGraph filterGraph = new FilterGraph ( filterGraph ) ; return filterGraph ; }
get_type ( self ) : NEW_LINE INDENT if self . type is not None : NEW_LINE INDENT return self . type NEW_LINE DEDENT return None NEW_LINE DEDENT
def def get_length ( self ) : NEW_LINE INDENT return len ( self . buffer . buffer ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
sample_picture ( self , picture ) : NEW_LINE INDENT if picture is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( picture , Picture ) : NEW_LINE INDENT return picture NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
validate_image ( self , image ) : NEW_LINE INDENT if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return image . validate ( ) NEW_LINE DEDENT DEDENT
validate_picture ( self , picture ) : NEW_LINE INDENT try : NEW_LINE INDENT self . validate_picture ( picture ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_filter_graph ( self , FilterLink ) : NEW_LINE INDENT filter_graph = self . get_filter_graph ( ) NEW_LINE if filter_graph : NEW_LINE INDENT return filter_graph NEW_LINE DEDENT else : NEW_LINE INDENT return self . get_filter_graph ( ) NEW_LINE DEDENT DEDENT
get_meta_data ( self ) : NEW_LINE INDENT meta_data = [ ] NEW_LINE for item in self . media_items : NEW_LINE INDENT meta_data = item . get_meta_data ( ) NEW_LINE if not meta_data : NEW_LINE INDENT continue NEW_LINE DEDENT meta_data . append ( item . get_meta_data ( ) ) NEW_LINE DEDENT return meta_data NEW_LINE DEDENT

parse_cpu_arch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_cpu_arch ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_os_family ( self , osName ) : NEW_LINE INDENT if osName is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_os_family ( osName ) NEW_LINE DEDENT DEDENT
parse_os_family ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_os_family ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def run ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def open__python____python____python____python____python____python____python____python____python__ def def def def public public public public public public void run ( ) public void run ( ) public void run ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python__ def def def public public public public public static void run ( ) public static void run ( self ) : NEW public static void run ( self ) throws IOException { if ( self . _audio
loadLibrary ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _library . loadLibrary ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _library . loadLibrary ( ) NEW_LINE DEDENT DEDENT
load_version ( self , version ) : NEW_LINE INDENT self . version = version NEW_LINE if self . version is not None : NEW_LINE INDENT self . version = self . version NEW_LINE DEDENT DEDENT
def def _get_aLibCandidates ( self , aLibCandidates ) : NEW_LINE INDENT aLibCandidates = [ ] NEW_LINE for aLibCandidates in aLibCandidates : NEW_LINE INDENT if aLibCandidates . size ( ) > 0 : NEW_LINE INDENT aLibCandidates . append ( aLibCandidates [ 0 ] ) NEW_LINE DEDENT DEDENT return aLibCandidates NEW_LINE DEDENT
def initialize_paths ( self ) : NEW_LINE INDENT paths = [ ] NEW_LINE for path in self . paths : NEW_LINE INDENT paths . append ( path ) NEW_LINE DEDENT return paths NEW_LINE DEDENT
static void checkCache ( ) { if ( cache != null && cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size ( ) > 0 ) { return ; } if ( cache . size
def def def def def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def__python____python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def
delete_native_object ( self , native_object ) : NEW_LINE INDENT if native_object is None : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT native_object . delete ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_muxer ( self ) : NEW_LINE INDENT stream = self . get_stream ( ) NEW_LINE if stream is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return stream NEW_LINE DEDENT DEDENT
static SetScript createSetScript ( SetScript script ) { if ( script == null ) { throw new IllegalArgumentException ( ) ; } SetScript setScript = new SetScript ( ) ; setScript . setScript ( script ) ; return setScript ; }
decode_base58 ( self , base58_string ) : NEW_LINE INDENT base58_string = base58_string . encode ( ' utf - 8' ) NEW_LINE base58_string = base58_string . decode ( ' utf - 8' ) NEW_LINE base58_string = base58_string . decode ( ' utf - 8' ) NEW_LINE base58_string = base58_string . decode ( ' utf - 8' ) NEW_LINE base58_string = base58_string . decode ( ' utf - 8' ) NEW_LINE base58_string = base58_string . decode ( ' utf - 8' ) NEW_LINE return base58_string NEW_LINE DEDENT
generate_random_seed ( seed = None ) : NEW_LINE INDENT if seed is None : NEW_LINE INDENT seed = hashlib . md5 ( ) . hexdigest ( ) NEW_LINE DEDENT else : NEW_LINE INDENT seed = hashlib . md5 ( seed ) . hexdigest ( ) NEW_LINE DEDENT return seed NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_transactions_by_address ( self , address ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _transactions_by_address [ address ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _transactions_by_address [ address ] NEW_LINE DEDENT DEDENT
get_transactions_by_address ( self , address , limit = None ) : NEW_LINE INDENT if limit is None : NEW_LINE INDENT limit = self . limit NEW_LINE DEDENT if limit is not None : NEW_LINE INDENT return self . _transactions_by_address ( address , limit ) NEW_LINE DEDENT return self . _transactions_by_address ( address ) NEW_LINE DEDENT
def get_block_headers ( self ) : NEW_LINE INDENT return self . _get_block_headers ( ) NEW_LINE DEDENT
get_block_by_signature ( self , signature ) : NEW_LINE INDENT return self . _get_block_by_signature ( signature ) NEW_LINE DEDENT

validate_script ( self , account ) : NEW_LINE INDENT if not self . validate_script ( account ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . validate_script ( account ) : NEW_LINE INDENT return NEW_LINE DEDENT self . validate_script ( account ) NEW_LINE DEDENT
_compress_script ( self , script ) : NEW_LINE INDENT if isinstance ( script , str ) : NEW_LINE INDENT return script NEW_LINE DEDENT elif isinstance ( script , str ) : NEW_LINE INDENT return script NEW_LINE DEDENT elif isinstance ( script , unicode ) : NEW_LINE INDENT return script NEW_LINE DEDENT else : NEW_LINE INDENT return script NEW_LINE DEDENT DEDENT
write_prim_array ( self , prim_array ) : NEW_LINE INDENT if len ( prim_array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( prim_array ) == 2 :
write ( self , buffer ) : NEW_LINE INDENT self . flush ( ) NEW_LINE self . flush ( ) NEW_LINE self . flush ( ) NEW_LINE DEDENT
def _validate ( self ) throws FSTBufferTooSmallException { throw new FSTBufferTooSmallException ( FSTBufferTooSmallException . class , " FSTBufferTooSmallException " ) ; }
readClass ( self ) : NEW_LINE INDENT if self . minbin : NEW_LINE INDENT self . minbin = self . minbin NEW_LINE DEDENT return self NEW_LINE DEDENT
def def def def public public public public static void checkBufferTooSmallBufferTooSmall ( int buffer , int bufferSize ) throws FSTBufferTooSmallException { throw new FSTBufferTooSmallException ( ) { throw new FSTBufferTooSmallException ( " Buffer is too small . " ) . initCause ( buffer isTooSmall ( buffer ) ) ; } public static void throw new FSTBufferTooSmallBufferTooSmallException ( ) { throw new FSTBufferTooSmallException ( ) ; }
update_slices ( self , slices ) : NEW_LINE INDENT if isinstance ( slices , list ) : NEW_LINE INDENT for slice in slices : NEW_LINE INDENT self . update_slices ( slice ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT self . update_slices ( slices ) NEW_LINE DEDENT DEDENT
getSpecificity ( cls ) : NEW_LINE INDENT return cls . getSpecificity ( ) NEW_LINE DEDENT
static void main ( String [ ] args ) { if ( args . length > 0 ) { System . out . println ( args [ 0 ] ) ; System . out . println ( args [ 1 ] ) ; System . out . println ( args [ 2 ] ) ; System . out . println ( args [ 3 ] ) ; } }
remove_key ( self , key ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _remove_key ( key ) NEW_LINE DEDENT DEDENT
def length ( self , length ) : NEW_LINE INDENT if length < 127 : NEW_LINE INDENT return length NEW_LINE DEDENT else : NEW_LINE INDENT return length NEW_LINE DEDENT DEDENT
encode ( self , stream ) : NEW_LINE INDENT if stream is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( stream , bytes ) : NEW_LINE INDENT return stream . encode ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return stream . encode ( ) NEW_LINE DEDENT DEDENT
def create_json_conf ( self ) : NEW_LINE INDENT return json . dumps ( self . conf , indent = 4 , sort = True ) NEW_LINE DEDENT
static struct emulation configuration ( ) { struct emulation = new struct emulation ( ) ; emulation . init ( ) ; return emulation ; }
static void main ( String [ ] args ) throws IOException { System . out . println ( ) ; System . out . println ( ) ; System . out . println ( ) ; System . out . println ( ) ; System . out . println ( ) ; }
clear_cached_softref ( self ) : NEW_LINE INDENT s = self . _get_cached_softref ( ) NEW_LINE if s is not None : NEW_LINE INDENT s . clear ( ) NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
copy_array ( self , array ) : NEW_LINE INDENT if not isinstance ( array , list ) : NEW_LINE INDENT raise TypeError ( " array must be a list . " ) NEW_LINE DEDENT if not isinstance ( array , list ) : NEW_LINE INDENT raise TypeError ( " array must be a list . " ) NEW_LINE DEDENT return array NEW_LINE DEDENT
copy_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , tuple ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
close ( OutputStream out ) : NEW_LINE INDENT if out is not None : NEW_LINE INDENT try : NEW_LINE INDENT out . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
init ( self , config ) : NEW_LINE INDENT if config is not None : NEW_LINE INDENT self . config = config NEW_LINE DEDENT else : NEW_LINE INDENT self . config = None NEW_LINE DEDENT DEDENT
get_class_identifier ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _class_identifier NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _class_identifier NEW_LINE DEDENT DEDENT
write_int_type ( self , int_type ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . write_int_type ( int_type ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
encode_int ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
encode_int ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
write_primitive_array ( self , header ) : NEW_LINE INDENT self . write_header ( header ) NEW_LINE self . write_header ( header ) NEW_LINE self . write_header ( header ) NEW_LINE DEDENT
write ( self , data ) : NEW_LINE INDENT if isinstance ( data , bytes ) : NEW_LINE INDENT return self . _write ( data ) NEW_LINE DEDENT elif isinstance ( data , bytes ) : NEW_LINE INDENT return self . _write ( data ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _write ( data ) NEW_LINE DEDENT DEDENT
create_dummy_ref ( self , ref ) : NEW_LINE INDENT self . ref = ref NEW_LINE return self NEW_LINE DEDENT
register ( self ) : NEW_LINE INDENT self . logger . debug ( " Registering FSTSerialisationListener " ) NEW_LINE self . logger . debug ( " Registering FSTSerialisationListener " ) NEW_LINE DEDENT
def def get ( self ) : NEW_LINE INDENT return self . __class__ . __class__ . __name__ . split ( ' . ' ) [ 0 ] NEW_LINE DEDENT
lookup ( cls ) : NEW_LINE INDENT if isinstance ( cls , clzinfo ) : NEW_LINE INDENT return cls NEW_LINE DEDENT if isinstance ( cls , clzinfo ) : NEW_LINE INDENT return cls NEW_LINE DEDENT if isinstance ( cls , clzinfo ) : NEW_LINE INDENT return cls NEW_LINE DEDENT return cls NEW_LINE DEDENT

void modify ( String newString ) { if ( newString . length ( ) == 0 ) { throw new IllegalArgumentException ( " The length of the new String must not exceed the length of internal char array . " ) ; } if ( newString . length ( ) == 0 ) { throw new IllegalArgumentException ( " The length of the new String must not exceed the length of internal char array . " ) ; } if ( newString . length ( ) == 0 ) { throw new IllegalArgumentException ( " The length of the new String must not exceed the length of internal char array . " ) ; } else { throw new IllegalArgumentException ( " The length of the new String must not exceed the length of internal char array . " ) ; } }
write_class_tag ( self , class_tag ) : NEW_LINE INDENT self . write_class_tag ( class_tag ) NEW_LINE DEDENT
set_change_tracking_enabled ( self ) : NEW_LINE INDENT self . _change_tracking_enabled = True NEW_LINE self . _change_tracking_enabled = True NEW_LINE DEDENT

register_handle ( self , handle ) : NEW_LINE INDENT if self . register_handle is not None : NEW_LINE INDENT self . register_handle = handle NEW_LINE DEDENT else : NEW_LINE INDENT self . register_handle = None NEW_LINE DEDENT return self . register_handle NEW_LINE DEDENT
def def copy ( self ) throws FSTBufferTooSmallExcpetionException { throw new FSTBufferTooSmallExcpetionException ( " FSTBufferTooSmallExcpetion " ) ; }
def handle ( self ) throws FSTBufferTooSmallExcpetionException { if ( self . size ( ) == 0 ) { throw new FSTBufferTooSmallExcpetion ( ) ; } else { throw new FSTBufferTooSmallExcpetionException ( ) ; } }
read_len_byte_array ( self ) : NEW_LINE INDENT return self . _read_len_byte_array ( ) NEW_LINE DEDENT
read_int ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_int ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
unread_bytes ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif len ( bytes ) == 1 : NEW_LINE INDENT return bytes [ 0 ] NEW_LINE DEDENT elif len ( bytes ) == 2 : NEW_LINE INDENT return bytes [ 1 ] NEW_LINE DEDENT elif len ( bytes ) == 3 : NEW_LINE INDENT return bytes [ 2 ] NEW_LINE DEDENT elif len ( bytes ) == 4 : NEW_LINE INDENT return bytes [ 3 ] NEW_LINE DEDENT else : NEW_LINE INDENT return bytes [ 4 ] NEW_LINE DEDENT DEDENT
set_thread_pool ( self , thread_pool ) : NEW_LINE INDENT self . thread_pool = thread_pool NEW_LINE DEDENT
spawn ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . stop ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
truncate_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _truncate_data ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _truncate_data ( data ) NEW_LINE DEDENT DEDENT
static void copy ( final JarFile jarFile , final String path ) throws IOException { if ( jarFile == null ) { throw new FileNotFoundException ( ) ; } if ( path == null ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } if ( path . endsWith ( " . jar " ) ) { throw new FileNotFoundException ( ) ; } }
print_stack_trace ( self ) : NEW_LINE INDENT print_stack_trace ( self ) NEW_LINE print_stack_trace ( self ) NEW_LINE DEDENT
check_remote_port ( self ) : NEW_LINE INDENT if self . remote_port is None : NEW_LINE INDENT return False NEW_LINE DEDENT if self . remote_port is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
empty_state ( self ) : NEW_LINE INDENT if self . master_state : NEW_LINE INDENT return self . master_state NEW_LINE DEDENT elif self . server_state : NEW_LINE INDENT return self . server_state NEW_LINE DEDENT else : NEW_LINE INDENT return self . server_state NEW_LINE DEDENT DEDENT
get_op_descriptor ( self , name ) : NEW_LINE INDENT op_descriptor = self . get_op_descriptor ( name ) NEW_LINE if op_descriptor is None : NEW_LINE INDENT return None NEW_LINE DEDENT return op_descriptor NEW_LINE DEDENT
get_output_shape ( self ) : NEW_LINE INDENT if self . output_shape is None : NEW_LINE INDENT self . output_shape = [ ] NEW_LINE DEDENT return self . output_shape NEW_LINE DEDENT
def def __getitem__ ( self , condition ) : NEW_LINE INDENT if isinstance ( condition , bool ) : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT DEDENT
def def __getitem__ ( self , index ) : NEW_LINE INDENT return self . __getitem__ ( index ) NEW_LINE def __getitem__ ( self ) : NEW_LINE INDENT return self . __getitem__ ( index ) NEW_LINE DEDENT
def __getitem__ ( self , condition ) : NEW_LINE INDENT if isinstance ( condition , ndarray ) : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT DEDENT
def def __getitem__ ( self , condition ) : NEW_LINE INDENT if isinstance ( condition , ndarray ) : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT return self . __getitem__ ( condition ) NEW_LINE DEDENT
set_number ( self , number , condition = None ) : NEW_LINE INDENT if condition is None : NEW_LINE INDENT return NEW_LINE DEDENT if condition : NEW_LINE INDENT return NEW_LINE DEDENT elif condition : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
first_index ( self , condition ) : NEW_LINE INDENT if not condition : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _first_index ( condition ) NEW_LINE DEDENT DEDENT
static FlatBuffers convert ( final FunctionProperties instance ) { if ( instance instanceof FlatBuffers ) { return ( FlatBuffers ) instance ; } else { return new FlatBuffers ( instance ) ; } }
static FunctionProperties create ( ) { return new FunctionProperties ( ) ; }
flatten ( self ) : NEW_LINE INDENT return self . _flatten ( ) NEW_LINE DEDENT
update_state ( self , state ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _update_state ( state ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return self . _update_state ( state ) NEW_LINE DEDENT
update_state ( self , state ) : NEW_LINE INDENT if self . state is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . state is not None : NEW_LINE INDENT self . state = state NEW_LINE DEDENT else : NEW_LINE INDENT self . state = self . state . copy ( ) NEW_LINE DEDENT DEDENT
merge_coordinates ( self , coordinates ) : NEW_LINE INDENT if not coordinates : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return coordinates NEW_LINE DEDENT DEDENT
applyTransformToDestination ( self ) : NEW_LINE INDENT return self . _applyTransformToDestination ( ) NEW_LINE DEDENT
convert_onnx_type ( onnx_type ) : NEW_LINE INDENT if isinstance ( onnx_type , int ) : NEW_LINE INDENT return onnx_type NEW_LINE DEDENT elif isinstance ( onnx_type , int ) : NEW_LINE INDENT return onnx_type NEW_LINE DEDENT elif isinstance ( onnx_type , int ) : NEW_LINE INDENT return onnx_type NEW_LINE DEDENT elif isinstance ( onnx_type , int ) : NEW_LINE INDENT return onnx_type NEW_LINE DEDENT else : NEW_LINE INDENT return onnx_type NEW_LINE DEDENT DEDENT
init_shutdown_sequence ( self ) : NEW_LINE INDENT if self . shutdown_sequence : NEW_LINE INDENT return self . shutdown_sequence NEW_LINE DEDENT else : NEW_LINE INDENT return self . shutdown_sequence NEW_LINE DEDENT DEDENT
get_device_architecture ( self ) : NEW_LINE INDENT if self . device_architecture is None : NEW_LINE INDENT return self . device_architecture NEW_LINE DEDENT return self . device_architecture NEW_LINE DEDENT
rearrange_matrix_columns ( self , matrix ) : NEW_LINE INDENT columns = [ ] NEW_LINE for i in range ( len ( matrix ) ) : NEW_LINE INDENT columns . append ( matrix [ i ] ) NEW_LINE DEDENT return columns NEW_LINE DEDENT
Pooling 2d implementation ( ) { Pooling 2d implementation = new Pooling2d ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { implementation . add ( new Pooling2d ( ) ) ; } return implementation ; }
get_compression_descriptor ( self ) : NEW_LINE INDENT if self . _compression_descriptor is None : NEW_LINE INDENT return self . _compression_descriptor NEW_LINE DEDENT return self . _compression_descriptor NEW_LINE DEDENT
create_batch ( self ) : NEW_LINE INDENT if self . batchLimit is not None : NEW_LINE INDENT self . batchLimit = self . batchLimit NEW_LINE DEDENT else : NEW_LINE INDENT self . batchLimit = self . batchLimit NEW_LINE DEDENT DEDENT
_validate_input_arrays ( self , input_arrays ) : NEW_LINE INDENT assert len ( input_arrays ) == len ( self . input_arrays ) NEW_LINE assert len ( self . input_arrays ) == len ( self . input_arrays ) NEW_LINE assert len ( self . input_arrays ) == len ( self . input_arrays ) NEW_LINE assert len ( self . input_arrays ) == len ( self . input_arrays ) NEW_LINE assert len ( self . input_arrays ) == len ( self . input_arrays ) NEW_LINE DEDENT
set_data_op_type ( self , data_op_type ) : NEW_LINE INDENT self . data_op_type = data_op_type NEW_LINE DEDENT
def def linearly_spaced_vector ( vector ) : NEW_LINE INDENT linearly_spaced_vector = linearly_spaced_vector ( vector ) NEW_LINE return linearly_spaced_vector ( linearly_spaced_vector ) NEW_LINE DEDENT
def get_ndarray_vector ( self , nd_array ) : NEW_LINE INDENT nd_array = np . asarray ( nd_array ) NEW_LINE nd_array = np . asarray ( nd_array ) NEW_LINE nd_array = np . asarray ( nd_array ) NEW_LINE return nd_array NEW_LINE DEDENT
def def _get_column_vector ( self ) : NEW_LINE INDENT return np . column_vector ( self . tensors , dtype = self . dtype ) NEW_LINE DEDENT
create_ndarray ( self , data ) : NEW_LINE INDENT if data is not None : NEW_LINE INDENT return self . _create_ndarray ( data ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_ndarray ( ) NEW_LINE DEDENT DEDENT
def create_ndarray ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return self . __class__ ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT DEDENT
shape ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return self . _shape NEW_LINE DEDENT else : NEW_LINE INDENT return self . _shape NEW_LINE DEDENT DEDENT
is_accumulated ( self ) : NEW_LINE INDENT return self . updater . is_accumulated ( ) NEW_LINE DEDENT
subtract_complex_numbers ( self , complex_numbers ) : NEW_LINE INDENT if complex_numbers is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif complex_numbers is not None : NEW_LINE INDENT return complex_numbers NEW_LINE DEDENT elif complex_numbers is not None : NEW_LINE INDENT return complex_numbers NEW_LINE DEDENT else : NEW_LINE INDENT return complex_numbers NEW_LINE DEDENT DEDENT
sin ( self , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _sin ( complex_number ) NEW_LINE DEDENT DEDENT
ceiling ( self , complex number ) : NEW_LINE INDENT if complex number is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return complex . ceiling ( number ) NEW_LINE DEDENT except OverflowError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
log_value ( self , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . log_value ( complex_number ) NEW_LINE DEDENT DEDENT
absolute_value ( self , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return complex_number NEW_LINE DEDENT DEDENT
def def def _parse_power ( self , number ) : NEW_LINE INDENT if isinstance ( number , complex ) : NEW_LINE INDENT return number NEW_LINE DEDENT elif isinstance ( number , complex ) : NEW_LINE INDENT return number NEW_LINE DEDENT else : NEW_LINE INDENT return number NEW_LINE DEDENT DEDENT
get_context ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . context NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
binarize ( self , dataset , cutoff = 1 ) : NEW_LINE INDENT if cutoff == 1 : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
sample_dataset ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _sample_dataset ( dataset ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_memory_used ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _memory_used NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String toString ( Throwable exception ) { if ( exception == null ) { return " " ; } if ( exception . getCause ( ) != null ) { return exception . getCause ( ) . toString ( ) ; } if ( exception . getCause ( ) != null ) { return exception . getCause ( ) . toString ( ) ; } if ( exception . getCause ( ) != null ) { return exception . getCause ( ) ; } return " " ; }
fullHostname ( self , hostname ) : NEW_LINE INDENT if not hostname : NEW_LINE INDENT return None NEW_LINE DEDENT hostname = hostname . strip ( ) NEW_LINE if not hostname : NEW_LINE INDENT return None NEW_LINE DEDENT hostname = hostname . strip ( ) NEW_LINE if not hostname : NEW_LINE INDENT return None NEW_LINE DEDENT return hostname NEW_LINE DEDENT
static String [ ] split ( String [ ] strings ) { if ( strings == null || strings . length == 0 ) { return null ; } if ( strings . length == 1 ) { return strings [ 0 ] ; } if ( strings . length == 2 ) { return strings [ 1 ] ; } return strings [ 2 ] ; }
convert_bytes ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes_type ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes_type ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT DEDENT
static ArrayList < String > getStringArrayList ( String string ) { if ( string == null ) { return new ArrayList < String > ( ) ; } if ( string . length ( ) == 0 ) { return new ArrayList < String > ( ) ; } return getStringArrayList ( string ) ; }
split ( self , separator ) : NEW_LINE INDENT separator = separator . lower ( ) NEW_LINE separator = separator . lower ( ) NEW_LINE separator = separator . lower ( ) NEW_LINE return separator NEW_LINE DEDENT
split ( self , separator ) : NEW_LINE INDENT separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE separator = separator . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE return separator . split ( separator ) NEW_LINE DEDENT

escape_html_special_characters ( self ) : NEW_LINE INDENT return self . _escape_html_special_characters ( self . _escape_html_special_characters ( ) ) NEW_LINE DEDENT
static String concat ( String s ) { if ( s == null ) { return null ; } return s ; }
_convert_to_some_stuff ( self ) : NEW_LINE INDENT return self . _convert_to_some_stuff ( ) NEW_LINE DEDENT
static String replace ( String template , String replacement ) { if ( template == null ) { throw new IllegalArgumentException ( " template is null " ) ; } if ( replacement == null ) { throw new IllegalArgumentException ( " template is null " ) ; } if ( template . length ( ) == 0 ) { throw new IllegalArgumentException ( " template is empty " ) ; } if ( template . length ( ) == 0 ) { throw new IllegalArgumentException ( " template is empty " ) ; } if ( template . length ( ) == 0 ) { throw new IllegalArgumentException ( " template is empty " ) ; } return template . replace ( template , replacement ) ; }
get_stack_trace ( self ) : NEW_LINE INDENT stack_trace = [ ] NEW_LINE for thread in self . threads : NEW_LINE INDENT stack_trace . append ( get_stack_trace ( thread ) ) NEW_LINE DEDENT return stack_trace NEW_LINE DEDENT
invert_matrix ( matrix ) : NEW_LINE INDENT if matrix is None : NEW_LINE INDENT return matrix NEW_LINE DEDENT matrix = matrix . copy ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix . transpose ( ) NEW_LINE return matrix NEW_LINE DEDENT
factorial ( self , integer ) : NEW_LINE INDENT if integer < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif integer > 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif integer < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT
_get_host_side_data ( self ) : NEW_LINE INDENT host_side = self . _get_host_side ( ) NEW_LINE if host_side : NEW_LINE INDENT return host_side NEW_LINE DEDENT return None NEW_LINE DEDENT
get_device_side ( self , device_side ) : NEW_LINE INDENT if device_side is None : NEW_LINE INDENT return None NEW_LINE DEDENT return device_side NEW_LINE DEDENT
create_shapeInformation_buffer ( self ) : NEW_LINE INDENT shapeInformation = self . shapeInformation NEW_LINE if shapeInformation is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT shapeInformation = shapeInformation . copy ( ) NEW_LINE DEDENT return shapeInformation NEW_LINE DEDENT
create_shape_information_buffer ( self , shape , order ) : NEW_LINE INDENT self . shape = shape NEW_LINE self . order = order NEW_LINE return self NEW_LINE DEDENT
is_vector ( self , shape ) : NEW_LINE INDENT if shape is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def _order ( self , array , strides ) : NEW_LINE INDENT if isinstance ( array , np . ndarray ) : NEW_LINE INDENT return self . _order ( array , strides ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _order ( array , strides ) NEW_LINE DEDENT DEDENT
static int offset ( int [ ] indices ) { int offset = 0 ; for ( int i = 0 ; i < indices . length ; i ++ ) { offset += indices [ i ] ; } return offset ; }
convert_indexes ( self , indexes ) : NEW_LINE INDENT if isinstance ( indexes , int ) : NEW_LINE INDENT return indexes NEW_LINE DEDENT elif isinstance ( indexes , int ) : NEW_LINE INDENT return indexes NEW_LINE DEDENT else : NEW_LINE INDENT return indexes NEW_LINE DEDENT DEDENT
public public static void addSpecialMethod ( final String name , final String name , final String value ) { if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } return ; }
_reallocate_native_memory ( self , buffer ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reallocate_native_memory ( buffer ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
copy ( self , from_buffer , to_buffer , offsets = None , strides = None ) : NEW_LINE INDENT if offsets is None : NEW_LINE INDENT offsets = [ ] NEW_LINE strides = [ ] NEW_LINE DEDENT if strides is None : NEW_LINE INDENT strides = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT strides = [ ] NEW_LINE DEDENT return self . _copy ( from_buffer , to_buffer , offsets , strides ) NEW_LINE DEDENT
DataBuffer get ( DataBuffer input ) { if ( input == null ) { throw new IllegalArgumentException ( " DataBuffer must not be null " ) ; } if ( input == null ) { throw new IllegalArgumentException ( " DataBuffer must not be null " ) ; } return input ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
power ( self , x , y ) : NEW_LINE INDENT if x == y : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
log ( self , * args , ** kwargs ) : NEW_LINE INDENT if args : NEW_LINE INDENT self . log ( * args , ** kwargs ) NEW_LINE DEDENT else : NEW_LINE INDENT self . log ( * args , ** kwargs ) NEW_LINE DEDENT DEDENT
maximum_function ( self , function ) : NEW_LINE INDENT if function is None : NEW_LINE INDENT return None NEW_LINE DEDENT return function NEW_LINE DEDENT
maximum_function ( self ) : NEW_LINE INDENT return self . maximum_function ( ) NEW_LINE DEDENT
minimum_function ( self , function ) : NEW_LINE INDENT return self . _minimum_function ( function ) NEW_LINE DEDENT
minimum_function ( self ) : NEW_LINE INDENT def minimum_function ( self ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return minimum_function NEW_LINE DEDENT
public public static boolean isWithin ( int k , int k ) { if ( k > 0 ) { return true ; } else if ( k <= 0 ) { return false ; } else { return true ; } }
exponential ( self ) : NEW_LINE INDENT return self . _exponential ( ) NEW_LINE DEDENT
log ( x ) : NEW_LINE INDENT if x == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
prepare_boundary_for_processing ( self ) : NEW_LINE INDENT if self . boundaries : NEW_LINE INDENT return self . boundaries NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def def def presence ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def presence___python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def presence___python____python____python____python____python____python__ def def def def def presence___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def presence___python____python____python____python____python____python__ def def def ___python____python____python__ def def _
def next_element ( self ) : NEW_LINE INDENT if not self . hasNext ( ) : NEW_LINE INDENT raise StopIteration NEW_LINE DEDENT return self . next ( ) NEW_LINE DEDENT
def def def def def def def def def ___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def
get_allocation_shape ( self ) : NEW_LINE INDENT return self . _get_allocation_shape ( ) NEW_LINE DEDENT
exists ( self , path ) : NEW_LINE INDENT if os . path . exists ( path ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static void deserialize ( final String serialization_path , final String deserialization_path ) { if ( serialization_path == null ) { return ; } final String serialization_path = serialization_path + " / " + deserialization_path ; final String deserialization_path = serialization_path + " / " + deserialization_path + " / " + deserialization_path ; if ( deserialization_path == null ) { return ; } final String deserialization_path = deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path + " / " + deserialization_path ; }
def def _ensure_queue_finished ( self ) : NEW_LINE INDENT if self . _queue_finished : NEW_LINE INDENT self . _queue_finished = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _queue_finished = False NEW_LINE DEDENT DEDENT
def create_from_numpy_pointer ( self , numpy_pointer ) : NEW_LINE INDENT if numpy_pointer is None : NEW_LINE INDENT return self . create_from_numpy_pointer ( numpy_pointer ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_from_numpy_pointer ( numpy_pointer ) NEW_LINE DEDENT DEDENT
create_from_numpy_file ( self , numpy_file ) : NEW_LINE INDENT if numpy_file is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_from_numpy_file ( numpy_file ) NEW_LINE DEDENT DEDENT
allocate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _allocate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
lock ( self ) : NEW_LINE INDENT locker = self . locker NEW_LINE if locker is not None : NEW_LINE INDENT return locker . lock ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
is_bth ( self , master , responder ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _is_bth ( master , responder ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
main_entry_points ( self ) : NEW_LINE INDENT entry_points = [ ] NEW_LINE for entry_point in self . entry_points : NEW_LINE INDENT entry_points . append ( entry_point ) NEW_LINE DEDENT return entry_points NEW_LINE DEDENT
enqueued_ops ( self ) : NEW_LINE INDENT if self . enqueued_ops is None : NEW_LINE INDENT self . enqueued_ops = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . enqueued_ops . append ( self . enqueued_ops ) NEW_LINE DEDENT DEDENT
static InputStream getInputStream ( ClassPathResource resource ) { if ( resource instanceof InputStream ) { return ( ( InputStream ) resource ) . asInputStream ( ) ; } return null ; }
get_device_id ( self ) : NEW_LINE INDENT deviceId = self . _device_id NEW_LINE if deviceId is None : NEW_LINE INDENT deviceId = self . _device_id NEW_LINE DEDENT return deviceId NEW_LINE DEDENT
pairs ( self , thread , device ) : NEW_LINE INDENT if not thread : NEW_LINE INDENT return NEW_LINE DEDENT if not device : NEW_LINE INDENT return NEW_LINE DEDENT method = getattr ( self , ' method ' , None ) NEW_LINE if method is None : NEW_LINE INDENT return NEW_LINE DEDENT method = getattr ( self , ' method ' , None ) NEW_LINE if method is None : NEW_LINE INDENT return NEW_LINE DEDENT method = getattr ( self , ' method ' , method ) NEW_LINE if method is None : NEW_LINE INDENT return NEW_LINE DEDENT method = getattr ( self , ' method ' , method ) NEW_LINE if method is None : NEW_LINE INDENT return NEW_LINE DEDENT return method NEW_LINE DEDENT
get_device_id ( self ) : NEW_LINE INDENT device_id = self . device_id NEW_LINE if device_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return device_id NEW_LINE DEDENT DEDENT
get_os_name ( self ) : NEW_LINE INDENT return self . _os_name NEW_LINE DEDENT
def def calculate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _calculate ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _calculate ( ) NEW_LINE DEDENT DEDENT
void publish ( String topic , String connection ) throws Exception { if ( connection == null ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } if ( connection == " " ) { throw new IllegalArgumentException ( " connection is null " ) ; } }
start_server ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . server . stop ( ) NEW_LINE DEDENT DEDENT
create_data_buffer ( self ) : NEW_LINE INDENT if self . data_buffer is None : NEW_LINE INDENT self . data_buffer = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . data_buffer = [ ] NEW_LINE DEDENT return self . data_buffer NEW_LINE DEDENT
check_op_type ( self , op_type ) : NEW_LINE INDENT if isinstance ( op_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( op_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( op_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( op_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def def add_complex_numbers ( self , numbers ) : NEW_LINE INDENT if len ( numbers ) == 1 : NEW_LINE INDENT return numbers [ 0 ] NEW_LINE DEDENT elif len ( numbers ) == 1 : NEW_LINE INDENT return numbers [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return numbers [ 0 ] NEW_LINE DEDENT DEDENT
assign_value ( self , key , value ) : NEW_LINE INDENT if key not in self . array : NEW_LINE INDENT self . array [ key ] = value NEW_LINE DEDENT else : NEW_LINE INDENT self [ key ] = value NEW_LINE DEDENT DEDENT
def def pooling ( self , operation ) : NEW_LINE INDENT if operation == ' avg ' : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
separable_conv2d ( self , weights ) : NEW_LINE INDENT if weights is not None : NEW_LINE INDENT return self . conv2d ( weights ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . conv2d ( ) NEW_LINE DEDENT DEDENT
reset_all_counters ( self ) : NEW_LINE INDENT self . reset_all_counters ( ) NEW_LINE self . reset_all_counters ( ) NEW_LINE DEDENT
get_op_class ( self , opName ) : NEW_LINE INDENT op = getattr ( self , opName ) NEW_LINE if op is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return op NEW_LINE DEDENT DEDENT
initialize ( self , vertex , weight ) : NEW_LINE INDENT self . vertex = vertex NEW_LINE self . weight = weight NEW_LINE DEDENT
get_shape ( self ) : NEW_LINE INDENT if self . shape is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . shape NEW_LINE DEDENT
evaluate ( self , variable ) : NEW_LINE INDENT if isinstance ( variable , str ) : NEW_LINE INDENT return variable NEW_LINE DEDENT elif isinstance ( variable , str ) : NEW_LINE INDENT return variable NEW_LINE DEDENT elif isinstance ( variable , int ) : NEW_LINE INDENT return variable NEW_LINE DEDENT else : NEW_LINE INDENT return variable NEW_LINE DEDENT DEDENT
create_compressed_ INDArray ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_compressed_ INDArray ( self ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
exponential ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _exponential ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _exponential ( ) NEW_LINE DEDENT DEDENT
center ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT else : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT return array NEW_LINE DEDENT
truncate ( self , shape ) : NEW_LINE INDENT if isinstance ( shape , int ) : NEW_LINE INDENT return self . _truncate ( shape ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _truncate ( shape ) NEW_LINE DEDENT DEDENT
def Pads ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return np . zeros ( self . shape ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return np . zeros ( self . shape ) NEW_LINE DEDENT DEDENT
def def get_index ( self , element ) : NEW_LINE INDENT index = self . index ( element ) NEW_LINE return index NEW_LINE DEDENT
duplicates ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
start ( self ) : NEW_LINE INDENT if self . executor is None : NEW_LINE INDENT self . executor = self . executor . start ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . executor = self . executor . start ( ) NEW_LINE DEDENT DEDENT
def def def def get_Euler ( self ) : public static final public static final Euler_Euler_Mascheroni_Mascheroni ( ) { return new Euler_Mascheroni_Mascheroni ( ) ; } public static final Euler ( ) { return new Euler_Euler_Mascheroni ( ) ; }
square_root ( self ) : NEW_LINE INDENT root = self . root NEW_LINE if root is not None : NEW_LINE INDENT return root NEW_LINE DEDENT else : NEW_LINE INDENT return root NEW_LINE DEDENT DEDENT
cube_root ( self ) : NEW_LINE INDENT if self . cube_root is not None : NEW_LINE INDENT return self . cube_root NEW_LINE DEDENT DEDENT
root ( self ) : NEW_LINE INDENT root = self . _root ( ) NEW_LINE if root is None : NEW_LINE INDENT root = self . _root ( ) NEW_LINE DEDENT return root NEW_LINE DEDENT
def def exponential ( self ) : NEW_LINE INDENT return self . _exponential_function ( ) NEW_LINE DEDENT
def natural_logarithm ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _natural_logarithm ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _natural_logarithm ( ) NEW_LINE DEDENT DEDENT
def _power_function ( self , x , y ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . func ( x , y ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . func ( x , y ) NEW_LINE DEDENT DEDENT
round ( self , power ) : NEW_LINE INDENT if power == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif power == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif power == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
sine ( self , sine ) : NEW_LINE INDENT if sine is None : NEW_LINE INDENT return None NEW_LINE DEDENT sine = sine . strip ( ) NEW_LINE if sine is not None : NEW_LINE INDENT return sine NEW_LINE DEDENT DEDENT
tangent ( tangent ) : NEW_LINE INDENT if tangent is None : NEW_LINE INDENT tangent = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT tangent . append ( tangent ) NEW_LINE DEDENT return tangent NEW_LINE DEDENT
hyperbolic_cosine ( self ) : NEW_LINE INDENT return self . _hyperbolic_cosine ( ) NEW_LINE DEDENT
def def hyperbolic_sine ( self , sine ) : NEW_LINE INDENT sine = self . hyperbolic_sine ( sine ) NEW_LINE if sine is not None : NEW_LINE INDENT return sine NEW_LINE DEDENT DEDENT
tangent ( self , tangent ) : NEW_LINE INDENT if tangent is None : NEW_LINE INDENT tangent = self NEW_LINE DEDENT else : NEW_LINE INDENT tangent = tangent NEW_LINE DEDENT return tangent NEW_LINE DEDENT
def inverse_hyperbolic_sine ( hyperbolic_sine ) : NEW_LINE INDENT return hyperbolic_sine NEW_LINE DEDENT
hyperbolic_cosine ( self ) : NEW_LINE INDENT return self . _hyperbolic_cosine ( ) NEW_LINE DEDENT
_gamma_function ( self ) : NEW_LINE INDENT return self . _gamma_function ( ) NEW_LINE DEDENT
ladder_sequence ( ladder_sequence ) : NEW_LINE INDENT if ladder_sequence is None : NEW_LINE INDENT ladder_sequence = [ ] NEW_LINE DEDENT ladder_sequence . append ( ladder_sequence ) NEW_LINE return ladder_sequence NEW_LINE DEDENT
append_decimal_zeros ( self , value ) : NEW_LINE INDENT if self . precision is None : NEW_LINE INDENT self . precision = self . precision NEW_LINE DEDENT if self . precision is not None : NEW_LINE INDENT self . precision = self . precision NEW_LINE DEDENT if self . precision is not None : NEW_LINE INDENT self . precision = self . precision NEW_LINE DEDENT if self . precision is not None : NEW_LINE INDENT self . precision = self . precision NEW_LINE DEDENT if self . precision is not None : NEW_LINE INDENT self . precision = self . precision NEW_LINE DEDENT DEDENT
precision ( self , value ) : NEW_LINE INDENT if isinstance ( value , decimal . Decimal ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , decimal . Decimal ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , decimal . Decimal ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
_convert_absolute_error ( self , error ) : NEW_LINE INDENT try : NEW_LINE INDENT return float ( error ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return float ( error ) NEW_LINE DEDENT DEDENT
get_function ( self , id ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _functions [ id ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_inputs ( self , function ) : NEW_LINE INDENT if not self . inputs : NEW_LINE INDENT self . inputs = [ ] NEW_LINE DEDENT return self . inputs NEW_LINE DEDENT
update_ndarray ( self , vertex_id ) : NEW_LINE INDENT if vertex_id is not None : NEW_LINE INDENT return self . _update_ndarray ( vertex_id ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _update_ndarray ( None ) NEW_LINE DEDENT DEDENT
def def public public public static final String getVertexId ( int vertex_id ) { if ( vertex_id == null ) { return null ; } else { return vertex_id ; } }
def Associate ( self , array , variable ) : NEW_LINE INDENT if ( array . size ( ) == 0 ) : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
get_property_for_function ( self , function ) : NEW_LINE INDENT def get_property_for_function ( self , function ) : NEW_LINE INDENT return getattr ( self , function ) NEW_LINE DEDENT def get_property_for_function ( self , function ) : NEW_LINE INDENT return getattr ( self , function ) NEW_LINE DEDENT DEDENT
add_property ( self , function , property_name ) : NEW_LINE INDENT if property_name is None : NEW_LINE INDENT property_name = function . name NEW_LINE DEDENT if property_name is None : NEW_LINE INDENT property_name = property_name NEW_LINE DEDENT return property_name NEW_LINE DEDENT
add_edge_to_graph ( graph , edge ) : NEW_LINE INDENT graph . add_edge ( edge ) NEW_LINE return graph NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
has_defined_arguments ( self ) : NEW_LINE INDENT return self . _has_defined_arguments ( ) NEW_LINE DEDENT
def def evaluate ( self , inputs ) : NEW_LINE INDENT inputs = [ ] NEW_LINE for input in inputs : NEW_LINE INDENT inputs = np . asarray ( inputs ) NEW_LINE if input . ndim == 1 : NEW_LINE INDENT inputs = inputs [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT inputs = inputs [ 0 ] NEW_LINE DEDENT return inputs NEW_LINE DEDENT DEDENT
initialize ( self ) : NEW_LINE INDENT if self . _initialized : NEW_LINE INDENT self . _initialized = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _initialized = False NEW_LINE DEDENT return self NEW_LINE DEDENT
get_variable ( self , input_shape ) : NEW_LINE INDENT if isinstance ( input_shape , list ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , tuple ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , list ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , tuple ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT else : NEW_LINE INDENT return input_shape NEW_LINE DEDENT DEDENT
get_variable ( self , input_shape ) : NEW_LINE INDENT if isinstance ( input_shape , int ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , int ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , int ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , int ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT elif isinstance ( input_shape , int ) : NEW_LINE INDENT return input_shape NEW_LINE DEDENT else : NEW_LINE INDENT return input_shape NEW_LINE DEDENT DEDENT
remove_argument ( self , argument ) : NEW_LINE INDENT if not argument : NEW_LINE INDENT return NEW_LINE DEDENT self . _remove_argument ( argument ) NEW_LINE self . _remove_argument ( argument ) NEW_LINE DEDENT
def def assign_vertex_id ( self , vertex_id ) : NEW_LINE INDENT try : NEW_LINE INDENT vertex_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return vertex_id NEW_LINE DEDENT DEDENT
def def def def def def def def pooling__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def AveragePooling__python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def def def def average__python____python____python____python____python____python__ def def def def def def def def Average ( self ,__python____python____python____python____python____python__ def def def def def__python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python__
def def gru_cell ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , gru_cell ) : NEW_LINE INDENT return cell NEW_LINE DEDENT else : NEW_LINE INDENT return cell NEW_LINE DEDENT DEDENT
exec ( self , operations ) : NEW_LINE INDENT if not self . operations : NEW_LINE INDENT self . operations = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . operations . append ( operations ) NEW_LINE DEDENT return self . operations NEW_LINE DEDENT

exec_function ( self , function ) : NEW_LINE INDENT if not hasattr ( self , function ) : NEW_LINE INDENT return NEW_LINE DEDENT function = getattr ( self , function ) NEW_LINE if not hasattr ( self , function ) : NEW_LINE INDENT return NEW_LINE DEDENT if not hasattr ( self , function ) : NEW_LINE INDENT return NEW_LINE DEDENT return self . _exec_function ( function ) NEW_LINE DEDENT
execute_function ( self , function , ops ) : NEW_LINE INDENT if ops is None : NEW_LINE INDENT ops = [ ] NEW_LINE DEDENT for op in ops : NEW_LINE INDENT ops . append ( op ) NEW_LINE DEDENT for op in ops : NEW_LINE INDENT ops . append ( op ) NEW_LINE DEDENT return ops NEW_LINE DEDENT
backwards ( self ) : NEW_LINE INDENT result = self . end ( ) NEW_LINE if result is not None : NEW_LINE INDENT return result NEW_LINE DEDENT return result NEW_LINE DEDENT
add_vertex_id ( self , vertex_id ) : NEW_LINE INDENT if isinstance ( vertex_id , int ) : NEW_LINE INDENT vertex_id = vertex_id . encode ( ' utf - 8' ) NEW_LINE DEDENT return vertex_id NEW_LINE DEDENT
allocate_memory_chunk ( self ) : NEW_LINE INDENT return self . _allocate_memory_chunk ( ) NEW_LINE DEDENT
length ( self , data opType ) : NEW_LINE INDENT if isinstance ( data opType , str ) : NEW_LINE INDENT return self . length ( data opType ) NEW_LINE DEDENT return self . length ( data opType ) NEW_LINE DEDENT
def get_alocation_mode_name ( self ) : NEW_LINE INDENT return self . alocation_mode_name NEW_LINE DEDENT
get_allocation_mode ( self , context ) : NEW_LINE INDENT if self . allocation_mode is None : NEW_LINE INDENT return self . allocation_mode NEW_LINE DEDENT return self . allocation_mode NEW_LINE DEDENT
get_op_id ( self , opName ) : NEW_LINE INDENT op_id = self . get_op_id ( opName ) NEW_LINE if op_id : NEW_LINE INDENT return op_id NEW_LINE DEDENT return None NEW_LINE DEDENT
destroys_workspaces ( self , workspaces ) : NEW_LINE INDENT if self . _workspaces is None : NEW_LINE INDENT self . _workspaces = workspaces NEW_LINE DEDENT else : NEW_LINE INDENT self . _workspaces = self . _workspaces . copy ( ) NEW_LINE DEDENT DEDENT
get_basic_statistics ( self ) : NEW_LINE INDENT return self . _basic_statistics NEW_LINE DEDENT
trmv ( self , matrix ) : NEW_LINE INDENT matrix = np . atleast_2d ( matrix ) NEW_LINE matrix = np . atleast_2d ( matrix ) NEW_LINE return matrix NEW_LINE DEDENT
def def def receive ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_accumulate ( self , accumulation ) : NEW_LINE INDENT if len ( accumulation ) == 1 : NEW_LINE INDENT return accumulation [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return accumulation [ 0 ] NEW_LINE DEDENT DEDENT
decodes_thresholds ( self , thresholds ) : NEW_LINE INDENT thresholds = np . array ( thresholds , dtype = np . float32 ) NEW_LINE return np . array ( thresholds , dtype = np . float32 ) NEW_LINE DEDENT
import_tensorflow_node ( self , tensorflow_node_name ) : NEW_LINE INDENT if isinstance ( tensorflow_node_name , six . string_types ) : NEW_LINE INDENT tensorflow_node_name = tensorflow_node_name . lower ( ) NEW_LINE DEDENT if isinstance ( tensorflow_node_name , six . string_types ) : NEW_LINE INDENT tensorflow_node_name = tensorflow_node_name . lower ( ) NEW_LINE DEDENT if isinstance ( tensorflow_node_name , six . string_types ) : NEW_LINE INDENT tensorflow_node_name = tensorflow_node_name . lower ( ) NEW_LINE DEDENT if isinstance ( tensorflow_node_name , six . string_types ) : NEW_LINE INDENT tensorflow_node_name = tensorflow_node_name . lower ( ) NEW_LINE DEDENT return tensorflow_node_name NEW_LINE DEDENT
scalar_op ( self ) : NEW_LINE INDENT return self . _scalar_op ( ) NEW_LINE DEDENT
assert_no_workspaces ( self , workspaces ) : NEW_LINE INDENT if not workspaces : NEW_LINE INDENT return NEW_LINE DEDENT if not workspaces : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
negative_log_likelihood ( self ) : NEW_LINE INDENT log_likelihood = self . log_likelihood NEW_LINE return log_likelihood NEW_LINE DEDENT
change_state ( self , state ) : NEW_LINE INDENT if self . state == state : NEW_LINE INDENT self . state = state NEW_LINE DEDENT else : NEW_LINE INDENT self . state = state NEW_LINE DEDENT DEDENT
change_state ( self , state ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _state = state NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _state = None NEW_LINE DEDENT if self . _state is not None : NEW_LINE INDENT self . _state = self . _state NEW_LINE DEDENT DEDENT
release_toe_status ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT status = self . _toe_status NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT status = self . _toe_status NEW_LINE DEDENT self . _toe_status = status NEW_LINE return status NEW_LINE DEDENT
current_memory_state ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _current_memory_state NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
build ( self ) : NEW_LINE INDENT self . _build_method ( ) NEW_LINE return self . _build_method ( ) NEW_LINE DEDENT
public void saveAggregations ( ) { if ( this . aggregations . size ( ) > 0 ) { for ( int i = 0 ; i < this . aggregations . size ( ) ; i ++ ) { if ( this . aggregations . get ( i ) != null ) { this . aggregations . get ( i ) . save ( ) ; } } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static int preconfigured_number_of_host_memory_collectors ( ) { return preconfigured_number_of_host_memory_collectors ( ) ; }
get_device_pointer ( self ) : NEW_LINE INDENT device_pointer = self . device_pointer NEW_LINE if not device_pointer : NEW_LINE INDENT return None NEW_LINE DEDENT return device_pointer NEW_LINE DEDENT
_verify_data ( self , data ) : NEW_LINE INDENT if data is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_feature_learning_rate ( self , opName ) : NEW_LINE INDENT return self . _get_feature_learning_rate ( opName ) NEW_LINE DEDENT
static boolean containsLatestData ( ) { if ( HOST_MEMORY != null ) { return HOST_MEMORY . containsLatestData ( ) ; } else { return false ; } }
def create_matrix ( self , ndarrayindex ) : NEW_LINE INDENT if isinstance ( ndarrayindex , list ) : NEW_LINE INDENT return self . _create_matrix ( ndarrayindex ) NEW_LINE DEDENT elif isinstance ( ndarrayindex , tuple ) : NEW_LINE INDENT return self . _create_matrix ( ndarrayindex ) NEW_LINE DEDENT return self . _create_matrix ( ndarrayindex ) NEW_LINE DEDENT
def properties ( self , function ) : NEW_LINE INDENT return self . properties ( function ) NEW_LINE DEDENT
has_place_holder_inputs ( self ) : NEW_LINE INDENT return self . _has_place_holder_inputs ( ) NEW_LINE DEDENT
def def differentiation ( self ) : NEW_LINE INDENT if len ( self . input_variables ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return self . input_variables NEW_LINE DEDENT DEDENT
format_ndarray ( self , ndarray ) : NEW_LINE INDENT if isinstance ( ndarray , str ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT elif isinstance ( ndarray , tuple ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT elif isinstance ( ndarray , list ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT else : NEW_LINE INDENT return ndarray NEW_LINE DEDENT DEDENT
convert ( self , tf ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert ( tf ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
convert_ndarray_to_blob ( self , ndarray ) : NEW_LINE INDENT if isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT else : NEW_LINE INDENT return ndarray NEW_LINE DEDENT DEDENT
load_complex_ndarray ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_complex_ndarray ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save_ndarray ( self , ndarray ) : NEW_LINE INDENT if isinstance ( ndarray , list ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT else : NEW_LINE INDENT return ndarray . save ( ) NEW_LINE DEDENT DEDENT
copy_real_numbers ( arr ) : NEW_LINE INDENT if isinstance ( arr , list ) : NEW_LINE INDENT arr = [ arr ] NEW_LINE DEDENT else : NEW_LINE INDENT arr = [ arr ] NEW_LINE DEDENT for i in range ( len ( arr ) ) : NEW_LINE INDENT if isinstance ( arr [ i ] , float ) : NEW_LINE INDENT arr [ i ] = float ( arr [ i ] ) NEW_LINE DEDENT DEDENT DEDENT
copy_imaginary_numbers ( self , ndarray ) : NEW_LINE INDENT if isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return self . copy_imaginary_numbers ( ndarray ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . copy_imaginary_numbers ( ndarray ) NEW_LINE DEDENT DEDENT
def __getitem__ ( self , element ) : NEW_LINE INDENT if isinstance ( element , np . ndarray ) : NEW_LINE INDENT return element NEW_LINE DEDENT elif isinstance ( element , np . ndarray ) : NEW_LINE INDENT return element NEW_LINE DEDENT elif isinstance ( element , np . ndarray ) : NEW_LINE INDENT return element NEW_LINE DEDENT elif isinstance ( element , np . ndarray ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
def def def _assign ( self , ndarray ) : NEW_LINE INDENT if isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT elif isinstance ( ndarray , ndarray ) : NEW_LINE INDENT return ndarray NEW_LINE DEDENT else : NEW_LINE INDENT return ndarray NEW_LINE DEDENT DEDENT
get_rows ( self , indices ) : NEW_LINE INDENT rows = [ ] NEW_LINE for index in indices : NEW_LINE INDENT rows . append ( self . _get_row ( index ) ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
insert_row ( self , ndarray ) : NEW_LINE INDENT if not isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
insert_column ( self , ndarray ) : NEW_LINE INDENT if not isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( ndarray , np . ndarray ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
copy_subtraction ( self , two_matrices ) : NEW_LINE INDENT if isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT else : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT DEDENT
addition ( self , two matrices ) : NEW_LINE INDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( two matrices , list ) : NEW_LINE INDENT return NEW_LINE DEDENT return two matrices NEW_LINE DEDENT
def place_subtraction ( self , two_matrices ) : NEW_LINE INDENT if isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT elif isinstance ( two_matrices , list ) : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT else : NEW_LINE INDENT return two_matrices NEW_LINE DEDENT DEDENT
add_two_matrices ( self , two_matrices ) : NEW_LINE INDENT if two_matrices is not None : NEW_LINE INDENT return self . add_two_matrices ( two_matrices ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . add_two_matrices ( two_matrices ) NEW_LINE DEDENT DEDENT
def set_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , ndarray ) : NEW_LINE INDENT self . _value = value NEW_LINE DEDENT else : NEW_LINE INDENT self . _value = value NEW_LINE DEDENT DEDENT
flatten ( self , array ) : NEW_LINE INDENT if isinstance ( array , np . ndarray ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
eigenvalues ( self ) : NEW_LINE INDENT eigenvalues = self . eigenvalues ( ) NEW_LINE return eigenvalues NEW_LINE DEDENT
compute_generalized_eigenvectors ( self ) : NEW_LINE INDENT x = self . data NEW_LINE if len ( x ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( x ) == 1 : NEW_LINE INDENT return x [ 0 ] NEW_LINE DEDENT elif len ( x ) == 2 : NEW_LINE INDENT return x [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
largest_absolute_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
copy ( self , vector ) : NEW_LINE INDENT if isinstance ( vector , vector ) : NEW_LINE INDENT return self . copy ( vector ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . copy ( vector ) NEW_LINE DEDENT DEDENT
def def scalar_product ( self , vector ) : NEW_LINE INDENT return self . _scalar_product ( vector ) NEW_LINE DEDENT
dot ( self , rows ) : NEW_LINE INDENT if len ( rows ) == 1 : NEW_LINE INDENT return rows [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return rows [ 0 ] NEW_LINE DEDENT DEDENT
the number of weight entries that are non - zero after broadcasting .
_final_reduce_loss ( self , loss ) : NEW_LINE INDENT if self . loss is not None : NEW_LINE INDENT return self . loss ( loss ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . loss ( ) NEW_LINE DEDENT DEDENT
public public public public static void checkNoArgConstructor ( Class < ? extends Constructor < ? > clazz ) { if ( clazz . getConstructor ( ) != null ) { throw new IllegalStateException ( ) ; } if ( clazz . getConstructor ( ) != null ) { throw new IllegalStateException ( ) ; } }
static Constructor < T > getConstructor ( Class < T > clazz ) { if ( clazz == null ) { throw new NullPointerException ( " clazz " ) ; } Constructor < T > constructor = clazz . getConstructor ( ) ; if ( constructor == null ) { throw new NullPointerException ( " constructor " ) ; } Constructor < T > constructor = clazz . getConstructor ( ) ; if ( constructor == null ) { throw new NullPointerException ( " constructor " ) ; } return constructor ; }
def def def def def def def _ def def def def def def _ def def def def def def def def _ def def def def def _ def def def def def def _ def def def def def get_exception ( self ) :__python__ def def def get_runtime def def def def get_exception ( self ) : def get_exception ( self ) : def get_exception ( self ) : def get_runtime_runtime_exception ( self ) :__python__
static Annotation getAnnotation ( Class < ? extends Annotation > annotationType ) { if ( annotationType == null ) { return null ; } if ( annotationType . getAnnotationType ( ) != null ) { return annotationType . getAnnotation ( annotationType . getAnnotationType ( ) ) ; } return null ; }
get_declared_annotation ( self ) : NEW_LINE INDENT return self . _declared_annotation NEW_LINE DEDENT
declared_annotation ( self ) : NEW_LINE INDENT if self . declared_annotation is not None : NEW_LINE INDENT return self . declared_annotation NEW_LINE DEDENT return self . declared_annotation NEW_LINE DEDENT
static ResultProxy createResultProxy ( Class < ? > interface ) { if ( interface . isInterface ( ) ) { return new ResultProxy ( interface ) ; } else { return new ResultProxy ( interface ) ; } }
public static EntityMetadata convert ( EntityMetadata metadata ) { if ( metadata != null ) { return new EntityMetadata ( metadata ) ; } else { return new EntityMetadata ( metadata ) ; } }
convert_to_datastore_entity ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . datastore . getEntity ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . datastore . getEntity ( ) NEW_LINE DEDENT DEDENT

get_metadata_for_kind ( self , kind ) : NEW_LINE INDENT kind = kind . lower ( ) NEW_LINE return self . _get_metadata_for_kind ( kind ) NEW_LINE DEDENT
public static void query ( String query ) { if ( query == null ) { return ; } if ( query . length ( ) == 0 ) { return ; } if ( query . length ( ) == 0 ) { return ; } else { return ; } }
get_keys ( self ) : NEW_LINE INDENT keys = self . _get_keys ( ) NEW_LINE if len ( keys ) == 1 : NEW_LINE INDENT return keys [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return keys NEW_LINE DEDENT DEDENT
def def def def def def def def def def hybrid___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def
projection ( self , session ) : NEW_LINE INDENT if self . session is None : NEW_LINE INDENT self . session = session NEW_LINE DEDENT return self . session NEW_LINE DEDENT
query_count ( self ) : NEW_LINE INDENT return self . _query_count ( ) NEW_LINE DEDENT
def detect ( int value ) : NEW_LINE INDENT if value < 0 : NEW_LINE INDENT return Integer . MAX_VALUE NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT

def log ( self , path , message ) : NEW_LINE INDENT if not self . path : NEW_LINE INDENT return NEW_LINE DEDENT if self . path . startswith ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . path . startswith ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . path . startswith ( path + ' / ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . path . startswith ( path + ' / ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . path . startswith ( path + ' / ' ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String createKey ( String key ) { if ( key == null ) { return null ; } if ( key . length ( ) == 0 ) { return null ; } return key ; }
def def __init__ ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT super ( ) . __init__ ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . __init__ ( ) NEW_LINE DEDENT DEDENT
safe_conversion ( self , raw_key ) : NEW_LINE INDENT if raw_key is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( raw_key , str ) : NEW_LINE INDENT return raw_key NEW_LINE DEDENT elif isinstance ( raw_key , unicode ) : NEW_LINE INDENT return raw_key NEW_LINE DEDENT else : NEW_LINE INDENT return raw_key NEW_LINE DEDENT DEDENT
safe_conversion ( self , typed_key ) : NEW_LINE INDENT if isinstance ( typed_key , basestring ) : NEW_LINE INDENT return self . safe_conversion ( typed_key ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . safe_conversion ( typed_key ) NEW_LINE DEDENT DEDENT
get_kind_from_class ( cls ) : NEW_LINE INDENT kind = None NEW_LINE try : NEW_LINE INDENT kind = cls . kind NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT if kind is None : NEW_LINE INDENT kind = cls . kind NEW_LINE DEDENT return kind NEW_LINE DEDENT
check_type ( self , type ) : NEW_LINE INDENT if type . isPrimitive ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
isSubtype ( subType , superType ) : NEW_LINE INDENT if subType is not None : NEW_LINE INDENT return issubclass ( subType , superType ) NEW_LINE DEDENT DEDENT
directSupertypes ( self , Resolves type ) : NEW_LINE INDENT return self . type . directSupertypes ( type ) NEW_LINE DEDENT
apply_capture_conversion_to_type ( self , type ) : NEW_LINE INDENT if isinstance ( type , str ) : NEW_LINE INDENT return self . _capture_conversion_to_type ( type ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _capture_conversion_to_type ( type ) NEW_LINE DEDENT DEDENT
def def def def get_trans def get_translator ( self ) : NEW_LINE INDENT return self . _get_translator ( ) NEW_LINE DEDENT def get_translator ( self ) : NEW_LINE INDENT return self . _get_translator ( ) NEW_LINE DEDENT def get_translator ( self ) : NEW_LINE INDENT return self . _get_translator ( ) NEW_LINE DEDENT
get_populator ( self , class ) : NEW_LINE INDENT populator = self . populators . get ( class ) NEW_LINE if populator : NEW_LINE INDENT return populator NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def _get_index_instruction ( self ) : NEW_LINE INDENT return self . _index_instructions . get ( self . class_name ) NEW_LINE DEDENT
create_property ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , method ) ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_persistable_fields_and_methods ( self ) : NEW_LINE INDENT return self . persistable_fields_and_methods NEW_LINE DEDENT
get_key_metadata ( self ) : NEW_LINE INDENT key_metadata = self . _get_key_metadata ( ) NEW_LINE if key_metadata is not None : NEW_LINE INDENT return key_metadata NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_key_metadata ( ) NEW_LINE DEDENT DEDENT
get_cached_result ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cached_result NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _cached_result NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python__ def def def def def def def def def def def def get_result_result ( self ) : NEW__python____python____python____python____python____python____python__ def def def def def def get_result_result ( self ) : NEW__python____python____python____python____python____python____python__ def def def def def get_result ( self ) : NEW__python____python____python____python____python__ def def def def def get_result ( self , def def def def def _
get_stuffed_collection ( self ) : NEW_LINE INDENT return self . stuffed_collection NEW_LINE DEDENT
void addDiscriminators ( List < Discriminator > discriminators ) { if ( discriminators != null && discriminators . size ( ) > 0 ) { for ( Discriminator discriminator : discriminators ) { discriminators . add ( discriminator ) ; } } }
static void registerTranslator ( Class < ? extends Translator > translator ) { if ( translator != null ) { translator . registerTranslator ( translator ) ; } else { translator . registerTranslator ( translator ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Map < String , String > getKeyTypes ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , " value " ) ; return map ; }
reverses ( path ) : NEW_LINE INDENT if isinstance ( path , ForwardPath ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
get_complete_path ( self , path ) : NEW_LINE INDENT if not path : NEW_LINE INDENT return None NEW_LINE DEDENT path = os . path . abspath ( path ) NEW_LINE if not path : NEW_LINE INDENT return None NEW_LINE DEDENT return path NEW_LINE DEDENT
def _create_full_x ( self , x , y , z ) : NEW_LINE INDENT x = x . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE z = z . copy ( ) NEW_LINE z = z . copy ( ) NEW_LINE return x , y , z NEW_LINE DEDENT
static void setTopLevelEntityProperties ( int topLevelEntityProperties ) { if ( topLevelEntityProperties == 0 ) { return ; } if ( topLevelEntityProperties == 1 ) { return ; } if ( topLevelEntityProperties == 2 ) { return ; } if ( topLevelEntityProperties == 3 ) { return ; } if ( topLevelEntityProperties == 4 ) { return ; } if ( topLevelEntityProperties == 5 ) { return ; } if ( topLevelEntityProperties == 6 ) { return ; } if ( topLevelEntityProperties == 7 ) { return ; } if ( topLevelEntityProperties == 8 ) { return ; } if ( topLevelEntityProperties == 1 ) { return ; } if ( topLevelEntityProperties == 6 ) { return ; } if ( topLevelEntityProperties == 7 ) { return ; } if ( topLevelEntityProperties == 8 ) { return ; } if ( topLevelEntityProperties == 6 ) { return ; } if
set_buckets ( self , buckets ) : NEW_LINE INDENT for bucket in buckets : NEW_LINE INDENT self . buckets . add ( bucket ) NEW_LINE DEDENT DEDENT
def revert ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE DEDENT DEDENT
def def _get_buckets ( self ) : NEW_LINE INDENT buckets = [ ] NEW_LINE for bucket in self . _buckets : NEW_LINE INDENT buckets . append ( bucket ) NEW_LINE DEDENT return buckets NEW_LINE DEDENT
get_keys ( self , keys ) : NEW_LINE INDENT for key in keys : NEW_LINE INDENT if key not in self . _keys : NEW_LINE INDENT self . _keys . add ( key ) NEW_LINE DEDENT DEDENT DEDENT
get_keys ( self ) : NEW_LINE INDENT keys = self . keys NEW_LINE if isinstance ( keys , list ) : NEW_LINE INDENT keys = [ keys ] NEW_LINE DEDENT return keys NEW_LINE DEDENT
def get_fields ( self ) : NEW_LINE INDENT return self . _get_fields ( ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_contents ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _contents NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
register ( cls , translators ) : NEW_LINE INDENT cls . translators = translators NEW_LINE return cls NEW_LINE DEDENT
static boolean intersection ( Iterable < ? extends Type > types ) { if ( types == null ) { return false ; } if ( types . size ( ) == 0 ) { return true ; } if ( types . size ( ) == 1 ) { return true ; } return false ; }

static void checkAnnotations ( Class < ? > clazz ) { if ( clazz . isInterface ( ) ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if ( clazz . getSuperclass ( ) != null ) { return ; } if (
def def def add_entry ( self ) : NEW_LINE INDENT if self . session . session . is_active ( ) : NEW_LINE INDENT return self . session . add_entry ( self . session . session_id , self . session . session_id , self . session_id ) NEW_LINE DEDENT def add_entry ( self ) : NEW_LINE INDENT self . session . add_entry ( self . session_id , self . session_id , self . session_id ) NEW_LINE DEDENT DEDENT
def prepare_session ( self , session ) : NEW_LINE INDENT self . session = session NEW_LINE return self . session . prepare ( session ) NEW_LINE DEDENT
def def fetch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fetch ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _fetch ( ) NEW_LINE DEDENT DEDENT

get_keys ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_keys ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT return self . _get_keys ( ) NEW_LINE DEDENT
convert ( self , entity ) : NEW_LINE INDENT if isinstance ( entity , datastore . Entity ) : NEW_LINE INDENT return entity NEW_LINE DEDENT else : NEW_LINE INDENT return entity NEW_LINE DEDENT DEDENT
static Key create ( String id ) { if ( id == null ) { return null ; } if ( id . length ( ) == 0 ) { return null ; } return new Key ( id ) ; }
_extract_raw_key ( self , raw_key ) : NEW_LINE INDENT if raw_key is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( raw_key , str ) : NEW_LINE INDENT return raw_key NEW_LINE DEDENT if isinstance ( raw_key , str ) : NEW_LINE INDENT return raw_key NEW_LINE DEDENT return raw_key NEW_LINE DEDENT
get_id_from_key ( self , key ) : NEW_LINE INDENT return self . _get_id_from_key ( key ) NEW_LINE DEDENT

void close ( ) { if ( session != null ) { session . close ( ) ; } }
public public public void validateSession ( Session parentSession ) { if ( parentSession != null ) { if ( parentSession == null ) { throw new IllegalStateException ( ) ; } else { throw new IllegalStateException ( ) ; } } }
execute ( self , transaction ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transaction . execute ( transaction ) NEW_LINE DEDENT except : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE DEDENT DEDENT
def test_conditions ( self ) : NEW_LINE INDENT assert len ( self . conditions ) == 1 NEW_LINE assert len ( self . conditions ) == 1 NEW_LINE assert len ( self . conditions ) == 1 NEW_LINE assert len ( self . conditions ) == 1 NEW_LINE assert len ( self . conditions ) == 1 NEW_LINE assert len ( self . conditions ) == 1 NEW_LINE DEDENT
get_current_objectify_instance ( self ) : NEW_LINE INDENT ref = self . ref NEW_LINE if not ref : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return ref NEW_LINE DEDENT DEDENT
def get_cached_version ( self ) : NEW_LINE INDENT if self . _cached_version is not None : NEW_LINE INDENT return self . _cached_version NEW_LINE DEDENT else : NEW_LINE INDENT return self . _cached_version NEW_LINE DEDENT DEDENT
def def def _construct__python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def def _ public static public static final public static final public static final void add__python__
def def numCopies ( self , incompleteKey ) : NEW_LINE INDENT return len ( incompleteKey ) NEW_LINE DEDENT
void set_impl ( String impl ) { if ( impl != null ) { this . impl = impl ; } else { this . impl = null ; } }
void setPopsContext ( Context context ) { if ( context == null ) { throw new IllegalArgumentException ( " context is null " ) ; } if ( context . getTransaction ( ) == null ) { throw new IllegalArgumentException ( " context is null " ) ; } if ( context . getTransaction ( ) == null ) { throw new IllegalArgumentException ( " context is null " ) ; } context . getTransaction ( ) . setPopsContext ( context ) ; }
def reordering ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
create_ref ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_ref ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_value ( self , key , value ) : NEW_LINE INDENT if key not in self . set : NEW_LINE INDENT self . set [ key ] = value NEW_LINE DEDENT else : NEW_LINE INDENT self . set [ key ] = value NEW_LINE DEDENT DEDENT
check_for_done ( self ) : NEW_LINE INDENT if self . is_done ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
public public public static boolean is_empty ( ) { if ( ! is_empty ( ) ) { return false ; } else { return true ; } }
execute ( self , batch ) : NEW_LINE INDENT self . batch = batch NEW_LINE self . batch . execute ( ) NEW_LINE DEDENT

def track ( self ) : NEW_LINE INDENT if self . _stats is not None : NEW_LINE INDENT self . _stats = self . _stats NEW_LINE DEDENT else : NEW_LINE INDENT self . _stats = self . _stats NEW_LINE DEDENT return self NEW_LINE DEDENT
unwrap ( ExecutionException e ) : NEW_LINE INDENT if e . getCause ( ) != null : NEW_LINE INDENT return e . getCause ( ) NEW_LINE DEDENT if e . getCause ( ) != null : NEW_LINE INDENT return e . getCause ( ) NEW_LINE DEDENT return e NEW_LINE DEDENT
static Translator get ( Class < ? > type ) { if ( type == null ) { throw new IllegalArgumentException ( " type must not be null " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive " ) ; } if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( " type must be a primitive
get_translator ( self ) : NEW_LINE INDENT translator = self . translator NEW_LINE if translator is None : NEW_LINE INDENT return None NEW_LINE DEDENT return translator NEW_LINE DEDENT

public void set ( Object pojo , Object value ) { if ( value == null ) { throw new IllegalArgumentException ( ) ; } if ( value == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
def get_alsoload_collisions ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _alsoload_collisions NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public void set ( String key , String value ) { if ( value == null ) { throw new IllegalArgumentException ( ) ; } else if ( value == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
public static String get ( String name , String prop ) { if ( prop == null ) { return null ; } else { return prop . toLowerCase ( ) ; } }
translate ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
_get_extensions ( self ) : NEW_LINE INDENT extensions = [ ] NEW_LINE for extension in self . extensions : NEW_LINE INDENT extensions . extend ( extension . getExtensions ( ) ) NEW_LINE DEDENT return extensions NEW_LINE DEDENT
def public static String toString ( String name ) { if ( factory . isStrictMode ( ) || factory . isStrictMode ( ) ) { return name ; } else { return name ; } }
static ContentCategory [ ] getContentCategories ( ) { ContentCategory [ ] contentCategories = new ContentCategory [ 0 ] ; return contentCategories ; }
process_raw_snippet ( self , raw_snippet ) : NEW_LINE INDENT if not raw_snippet : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( raw_snippet , str ) : NEW_LINE INDENT return raw_snippet NEW_LINE DEDENT if isinstance ( raw_snippet , str ) : NEW_LINE INDENT return raw_snippet NEW_LINE DEDENT if isinstance ( raw_snippet , str ) : NEW_LINE INDENT return raw_snippet NEW_LINE DEDENT return NEW_LINE DEDENT
iter_bids ( self , bids ) : NEW_LINE INDENT for bid in bids : NEW_LINE INDENT if bid in self . bids : NEW_LINE INDENT yield bid NEW_LINE DEDENT DEDENT DEDENT
bid ( self , id ) : NEW_LINE INDENT bid_id = id NEW_LINE bid_id = self . _get_id ( bid_id ) NEW_LINE return bid_id NEW_LINE DEDENT
update_bids ( self ) : NEW_LINE INDENT bids = [ ] NEW_LINE for bid in self . bids : NEW_LINE INDENT bids . append ( bid ) NEW_LINE DEDENT return bids NEW_LINE DEDENT
remove_bids ( self , bid ) : NEW_LINE INDENT bids = self . _get_bids ( bid ) NEW_LINE if not bids : NEW_LINE INDENT return NEW_LINE DEDENT bids . remove ( bid ) NEW_LINE return bids NEW_LINE DEDENT
filter ( self ) : NEW_LINE INDENT return self . _filter ( self ) NEW_LINE DEDENT
read_extensions ( self ) : NEW_LINE INDENT extensions = [ ] NEW_LINE for extension in self . extensions : NEW_LINE INDENT extensions . extend ( extension . getExtensions ( ) ) NEW_LINE DEDENT extensions . extend ( self . extensions ) NEW_LINE extensions . extend ( self . extensions ) NEW_LINE return extensions NEW_LINE DEDENT
empty_string_input ( self , input ) : NEW_LINE INDENT if input is None : NEW_LINE INDENT return None NEW_LINE DEDENT return input NEW_LINE DEDENT
registerExtensionReader ( self , extensionReader ) : NEW_LINE INDENT self . extensionReader = extensionReader NEW_LINE DEDENT
register_extension_writer ( self , writer ) : NEW_LINE INDENT self . writer = writer NEW_LINE if self . writer is None : NEW_LINE INDENT self . writer = writer NEW_LINE DEDENT DEDENT
process ( self , context ) : NEW_LINE INDENT if self . macros : NEW_LINE INDENT self . macros = self . macros NEW_LINE DEDENT else : NEW_LINE INDENT self . macros = [ ] NEW_LINE DEDENT DEDENT
process_bid ( self , bid ) : NEW_LINE INDENT if isinstance ( bid , dict ) : NEW_LINE INDENT return self . process_bid ( bid ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_bid ( bid ) NEW_LINE DEDENT DEDENT
update ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , Sequence ) : NEW_LINE INDENT return self . _update ( sequence ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _update ( sequence ) NEW_LINE DEDENT DEDENT
filter ( self , objects ) : NEW_LINE INDENT if isinstance ( objects , list ) : NEW_LINE INDENT return self . filter ( objects ) NEW_LINE DEDENT elif isinstance ( objects , dict ) : NEW_LINE INDENT return self . filter ( objects ) NEW_LINE DEDENT DEDENT
get_current_field_name ( self ) : NEW_LINE INDENT if self . field_name is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . field_name NEW_LINE DEDENT
public
public static String [ ] getFields ( String name ) { String [ ] fields = new String [ ] { } ; for ( String field : fields ) { if ( field . startsWith ( " [ " ) ) { fields [ 0 ] = field ; } else { fields [ 0 ] = field ; } } return fields ; }
_get_field_name ( self , field_name ) : NEW_LINE INDENT if field_name is not None : NEW_LINE INDENT return field_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def write_boolean ( self , boolean value ) : NEW_LINE INDENT if value == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if value == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT
write_string_array ( self , string_array ) : NEW_LINE INDENT if isinstance ( string_array , str ) : NEW_LINE INDENT return string_array NEW_LINE DEDENT elif isinstance ( string_array , str ) : NEW_LINE INDENT return string_array NEW_LINE DEDENT elif isinstance ( string_array , list ) : NEW_LINE INDENT return string_array NEW_LINE DEDENT elif isinstance ( string_array , str ) : NEW_LINE INDENT return string_array NEW_LINE DEDENT else : NEW_LINE INDENT return string_array NEW_LINE DEDENT DEDENT
static int [ ] toArray ( int [ ] array ) { int [ ] array = new int [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = 0 ; } return array ; }
write ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return array NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT if len ( array ) == 2 : NEW_LINE INDENT return array [ 1 ] NEW_LINE DEDENT if len ( array ) == 3 : NEW_LINE INDENT return array [ 2 ] NEW_LINE DEDENT return array NEW_LINE DEDENT
def write_enum_array ( self , enum_array ) : NEW_LINE INDENT return self . write_enum_array ( enum_array ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String lowercasedHostname ( String url ) { if ( url == null ) { return null ; } if ( url . length ( ) == 0 ) { return null ; } if ( url . length ( ) == 0 ) { return null ; } return url . substring ( 0 , url . length ( ) - 1 ) ; }
def def get_page ( self , url ) : NEW_LINE INDENT url = urlparse . urlparse ( url ) NEW_LINE url = urlparse . urlparse ( url ) NEW_LINE if not urlparse ( url ) . scheme : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return url NEW_LINE DEDENT DEDENT
static List < String > get ( String key ) { if ( key == null || key . isEmpty ( ) ) { return new ArrayList < String > ( ) ; } if ( key . length ( ) == 0 ) { return new ArrayList < String > ( ) ; } else { return new ArrayList < String > ( ) ; } }
def def _get_config ( self ) : def _get_config ( self ) : NEW_LINE INDENT return self . config NEW_LINE DEDENT def _get_config ( self ) : NEW_LINE INDENT return self . config NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def
static WARCInfo entry ( WARC file ) { WARCInfo info = new WARCInfo ( ) ; info . setFile ( file ) ; info . setFileName ( file . getName ( ) ) ; return info ; }
get_normalised_value ( self ) : NEW_LINE INDENT if self . content is not None : NEW_LINE INDENT return self . content NEW_LINE DEDENT return self . content NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
which metadata should be persisted for a given document including those which are not necessarily transferred to the outlinks .
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void remove ( String name ) { if ( name == null ) { return ; } if ( name . length ( ) == 0 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 3 ) { return ; } if ( name . length ( ) == 4 ) { return ; } if ( name . length ( ) == 3 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 3 ) { return ; } }
detect_bom ( self ) : NEW_LINE INDENT return self . _detect_bom ( ) NEW_LINE DEDENT
guess_charset ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _guess_charset ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def find_meta_tag ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . META_TAGS [ self . META_TAG ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . META_TAG NEW_LINE DEDENT DEDENT
static byte [ ] getSitemap ( ) { if ( sitemap == null ) { sitemap = new byte [ 0 ] ; } return sitemap ; }
set_value ( self , key , value ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return NEW_LINE DEDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _set_value ( key , value ) NEW_LINE DEDENT
first_non_empty_value ( self , keys ) : NEW_LINE INDENT if keys is None : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( keys ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return keys [ 0 ] NEW_LINE DEDENT DEDENT
get_cookies ( self ) : NEW_LINE INDENT cookies = [ ] NEW_LINE for cookie in self . cookies : NEW_LINE INDENT cookies . append ( cookie ) NEW_LINE DEDENT return cookies NEW_LINE DEDENT
check_cookie_domain ( url , cookie_domain ) : NEW_LINE INDENT if not cookie_domain : NEW_LINE INDENT return False NEW_LINE DEDENT if cookie_domain . startswith ( ' http ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT if cookie_domain . startswith ( ' https ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT if cookie_domain . startswith ( ' ftp ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
get_key ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _key NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_robots_rules ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . robots_rules NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
bolts ( parser ) : NEW_LINE INDENT return parser . bolts ( ) NEW_LINE DEDENT
collect ( self ) : NEW_LINE INDENT store = self . store ( ) NEW_LINE collect = self . collect ( ) NEW_LINE return store NEW_LINE DEDENT
def public public public static boolean isValid ( final String name , final String value ) { if ( value != null ) { if ( value != null ) { if ( value != null ) { return value != null ; } else { return true ; } } } else { return false ; } } }
replace_regex_patterns ( self , regex_patterns ) : NEW_LINE INDENT if not regex_patterns : NEW_LINE INDENT return None NEW_LINE DEDENT for regex_pattern in regex_patterns : NEW_LINE INDENT if not regex_pattern . match ( regex_pattern ) : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT return self . _replace_regex ( regex_patterns ) NEW_LINE DEDENT
read_configuration_file ( self ) : NEW_LINE INDENT config = ConfigParser . ConfigParser ( ) NEW_LINE config . read ( self . configuration_file ) NEW_LINE return config NEW_LINE DEDENT
remove_query_parameters ( self , url ) : NEW_LINE INDENT self . remove_query_parameters ( url ) NEW_LINE self . remove_query_parameters ( url ) NEW_LINE DEDENT
static NavigationFilters loadNavigationFilters ( Map < String , NavigationFilter > navigationFilters ) { if ( navigationFilters == null || navigationFilters . size ( ) == 0 ) { return new NavigationFilters ( ) ; } return navigationFilters ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static ParseFilter parseFilter ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } ParseFilter parseFilter = new ParseFilter ( name ) ; parseFilter . setName ( name ) ; return parseFilter ; }
append_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( node , Node ) : NEW_LINE INDENT return NEW_LINE DEDENT if
def def def public void receive ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def public public public public public public public public void receive ( public void receive ( public static void receive ( String content , public static final String content , public void receive ( final String content ) { if ( ign public void receive ( final String content ) { if ( content . length ( ) > 0 ) { return ; } else if ( content . length ( ) > 0 ) { return ; } else if ( content . length ( ) > 0 ) { return ; } } } }
def def receive_instruction ( self ) : NEW_LINE INDENT if self . is_processing_instruction ( ) : NEW_LINE INDENT return self . process_instruction ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_instruction ( ) NEW_LINE DEDENT DEDENT
static String comment ( String comment ) { if ( comment == null ) { return " " ; } if ( comment . length ( ) == 0 ) { return " " ; } return comment ; }
def def def def def receive ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
start_dtd_declaration ( self ) : NEW_LINE INDENT if self . _dtd_declaration : NEW_LINE INDENT return self . _dtd_declaration NEW_LINE DEDENT else : NEW_LINE INDENT return self . _dtd_declaration NEW_LINE DEDENT DEDENT
def def prefix_uri_namespace ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . prefix_uri_namespace NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . prefix_uri_namespace NEW_LINE DEDENT DEDENT
static String canonical ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return null ; } if ( value . length ( ) == 1 ) { return value . substring ( 0 , 1 ) ; } if ( value . length ( ) == 2 ) { return value . substring ( 1 ) ; } return value . substring ( 1 ) ; }
trim ( self , threshold = None ) : NEW_LINE INDENT if threshold is None : NEW_LINE INDENT threshold = self . threshold NEW_LINE DEDENT else : NEW_LINE INDENT threshold = self . threshold NEW_LINE DEDENT return self . _trim ( threshold ) NEW_LINE DEDENT
def firstMatchingCustomInterval ( self , custom_interval ) : NEW_LINE INDENT if custom_interval is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif custom_interval is not None : NEW_LINE INDENT return custom_interval NEW_LINE DEDENT else : NEW_LINE INDENT return custom_interval NEW_LINE DEDENT DEDENT
def def def def def load def def def def def def def def load def def def def def load def def def def load def def def def load def def def def load def def def def get_url def def def get_url def def def get_url def get_url def get_url def _get_config ( self ) : def get_config ( self ) : def get_config ( self ,
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void setTaken ( final int api , final int version ) { if ( api < 11 ) { throw new IllegalArgumentException ( " API < 11" ) ; } if ( version < 11 ) { throw new IllegalArgumentException ( " Version < 11" ) ; } if ( version < 11 ) { throw new IllegalArgumentException ( " Version < 11" ) ; } if ( version < 11 ) { throw new IllegalArgumentException ( " Version < 11" ) ; } }
static Drawable createEmptyItemDrawable ( Context context , AttributeSet attrs ) { if ( attrs == null ) { return null ; } if ( attrs . getStyle ( ) == null ) { return null ; } if ( attrs . getStyle ( ) != null ) { return attrs . getStyle ( ) ; } if ( attrs . getStyle ( ) != null ) { return attrs . getStyle ( ) ; } return null ; }
def def set_angle ( self , angle ) : NEW_LINE INDENT self . angle = self . angle NEW_LINE self . angle = angle NEW_LINE DEDENT
public public public public void check ( ) { if ( selectedPosition != null ) { if ( selectedPosition != null ) { if ( selectedPosition != null ) { if ( selectedPosition != null ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( ) ) { if ( selectedPosition . isValid ( )
void invalidateDrawable ( int position ) { if ( position < 0 ) { throw new IllegalArgumentException ( " position must be greater than 0 . " ) ; } if ( position > 0 ) { throw new IllegalArgumentException ( " position must be greater than 0 . " ) ; } if ( position < 0 ) { throw new IllegalArgumentException ( " position must be greater than 0 . " ) ; } }
def def get_position ( self ) : NEW_LINE INDENT position = self . raw_position NEW_LINE if self . raw_position is not None : NEW_LINE INDENT return self . raw_position NEW_LINE DEDENT return self . raw_position NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
darker_contrast ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_material_darker_contrast ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
clamp ( self , value , upperLimit ) : NEW_LINE INDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if value > upperLimit : NEW_
write_coverage_data ( self , coverage_data ) : NEW_LINE INDENT if coverage_data is None : NEW_LINE INDENT coverage_data = coverage_data NEW_LINE DEDENT return coverage_data NEW_LINE DEDENT
static byte [ ] decode ( byte [ ] data ) { if ( data == null ) { return null ; } if ( data . length == 0 ) { return new byte [ 0 ] ; } return data ; }
static void setArrayChar ( String s ) { if ( s . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( s . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( s . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } }
static String [ ] equivilent ( String [ ] strings ) { String [ ] array = new String [ strings . length ] ; for ( int i = 0 ; i < strings . length ; i ++ ) { array [ i ] = strings [ i ] ; } return array ; }
static ArrayChar fromString ( String s ) { if ( s == null ) { throw new NullPointerException ( ) ; } return new ArrayChar ( s ) ; }
static ArrayChar fromString ( String s ) { if ( s == null ) { throw new NullPointerException ( ) ; } return new ArrayChar ( s ) ; }
static ArrayChar make1DStringArray ( String s ) { return new ArrayChar ( s ) ; }

show_window ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . window . show ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . window . show ( ) NEW_LINE DEDENT DEDENT
show ( self ) : NEW_LINE INDENT if not self . iconified : NEW_LINE INDENT self . iconified = True NEW_LINE DEDENT else : NEW_LINE INDENT self . iconified = False NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT return self . _size NEW_LINE DEDENT
count_records ( self ) : NEW_LINE INDENT count = 0 NEW_LINE for record in self . records : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT


pluralForm ( name ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE name = name . upper ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE return name NEW_LINE DEDENT
is_valid_date_range ( self , date_range ) : NEW_LINE INDENT if not self . is_valid_date_range ( date_range ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
void intersect ( DateRange range ) { if ( range != null ) { for ( int i = 0 ; i < range . size ( ) ; i ++ ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range . get ( i ) ) { if ( range . get ( i ) == range .
extend ( self , date_range ) : NEW_LINE INDENT if date_range is None : NEW_LINE INDENT return self NEW_LINE DEDENT date_range = date_range . copy ( ) NEW_LINE date_range . sort ( ) NEW_LINE return date_range NEW_LINE DEDENT
extend ( self , date ) : NEW_LINE INDENT self . date = date NEW_LINE return self NEW_LINE DEDENT
def start ( self ) : NEW_LINE INDENT if useStart : NEW_LINE INDENT if useEnd : NEW_LINE INDENT return self . start ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . start ( ) NEW_LINE DEDENT DEDENT DEDENT
void setEnd ( Date end ) { if ( end != null ) { end . setTime ( end . getTime ( ) ) ; } else { end . setTime ( end . getTime ( ) ) ; } }
def def _set def def _ public public public static final public static final void start ( ) { if ( useDuration ( useDuration ) { if ( useDuration ) { if ( useDuration ) { if ( useDuration == null ) { return ; } else { return ; } } } else { return ; } } } }
move ( self ) : NEW_LINE INDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_moving ( ) : NEW_LINE INDENT return NEW_LINE DEDENT self . move ( ) NEW_LINE DEDENT
MapBean addMapBean ( MapBean bean ) { MapBean mapBean = new MapBean ( bean ) ; mapBean . setName ( bean . getName ( ) ) ; mapBean . setValue ( bean . getValue ( ) ) ; return mapBean ; }
def em__python__ def def em def _emits_emits_error ( self ) : def _emits_error ( self ) : NEW_LINE INDENT return self . _emits_error = self . _emits_error ( ) NEW_LINE DEDENT
last_part ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , list ) : NEW_LINE INDENT return dataset [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
def create_parameters ( self , parameters ) : NEW_LINE INDENT if len ( parameters ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( parameters ) == 1 : NEW_LINE INDENT return parameters [ 0 ] NEW_LINE DEDENT return parameters NEW_LINE DEDENT
static byte [ ] accessRawByteStream ( byte [ ] rawBytes ) { byte [ ] rawBytes = new byte [ rawBytes . length ] ; for ( int i = 0 ; i < rawBytes . length ; i ++ ) { rawBytes [ i ] = rawBytes [ i ] ; } return rawBytes ; }
def def y_ranges ( self , x , y ) : NEW_LINE INDENT y = np . asarray ( y ) NEW_LINE y = np . asarray ( y ) NEW_LINE y = np . asarray ( y ) NEW_LINE return y NEW_LINE DEDENT
set_values ( self , values ) : NEW_LINE INDENT self . values = values NEW_LINE DEDENT
test ( self ) : NEW_LINE INDENT self . assertGreater ( len ( self . dimension ) , 0 ) NEW_LINE self . assertGreater ( len ( self . dimension ) , 0 ) NEW_LINE self . assertGreater ( len ( self . dimension ) , 0 ) NEW_LINE self . assertGreater ( len ( self . dimension ) , 0 ) NEW_LINE self . assertGreater ( len ( self . dimension ) , 0 ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
copy ( self ) : NEW_LINE INDENT if self . modified : NEW_LINE INDENT self . modified = True NEW_LINE DEDENT else : NEW_LINE INDENT self . modified = False NEW_LINE DEDENT return self NEW_LINE DEDENT
def def open ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT return Dataset . open ( dataset ) NEW_LINE DEDENT except ValueError as e : NEW_LINE INDENT raise ValueError ( e ) NEW_LINE DEDENT if isinstance ( dataset , Dataset . FeatureDataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
def def wrap ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset . FeatureDataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
static boolean isFeatureType ( FeatureType featureType ) { if ( featureType == null ) { return false ; } if ( featureType . equals ( factoryType ) ) { return true ; } if ( featureType . equals ( factoryType ) ) { return true ; } if ( featureType . equals ( factoryType ) ) { return true ; } return false ; }
get_feature_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . feature_type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . feature_type NEW_LINE DEDENT DEDENT
public public public public public long size ( ) throws IOException { int size = 0 ; for ( int i = 0 ; i < size ; i ++ ; i ++ ; i ++ ) { if ( i > 0 ) { size = 0 ; } else if ( i > 0 ) { size = 0 ; } else if ( i > 0 ) { size = 0 ; } else { size = 0 ; } } return size ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static final String UNIDATA_CSS ( final String UNIDATA_CSS ) { if ( UNIDATA_CSS == null || UNIDATA_CSS . length ( ) == 0 ) { return UNIDATA_CSS ; } final String UNIDATA_CSS = UNIDATA_CSS . trim ( ) ; if ( UNIDATA_CSS . length ( ) == 0 ) { return UNIDATA_CSS ; } return UNIDATA_CSS ; }
static final String UNIDATA_HEAD ( final String UNIDATA_HEAD ) { if ( UNIDATA_HEAD == null || UNIDATA_HEAD . length ( ) == 0 ) { return UNIDATA_HEAD ; } return UNIDATA_HEAD ; }
def barfola ( self ) : NEW_LINE INDENT return self . barfola ( ) NEW_LINE DEDENT
def def add def def def add def def def public public public public public public public public public public public static public static public static final public static void modify ( final public static void modify_catalogs ( ) { if ( !
initialize ( self ) : NEW_LINE INDENT self . _client = None NEW_LINE if self . _client is not None : NEW_LINE INDENT self . _client = self . _client NEW_LINE DEDENT if self . _client is None : NEW_LINE INDENT self . _client = None NEW_LINE DEDENT DEDENT
def get_content ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_content ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_content ( url ) NEW_LINE DEDENT DEDENT
put_content ( self , url ) : NEW_LINE INDENT self . url = url NEW_LINE self . headers = self . headers . copy ( ) NEW_LINE self . headers . update ( self . headers ) NEW_LINE return self NEW_LINE DEDENT
override_front_page_builder ( self ) : NEW_LINE INDENT if self . _front_page_builder is not None : NEW_LINE INDENT return self . _front_page_builder NEW_LINE DEDENT return self . _front_page_builder NEW_LINE DEDENT
static List < URL > getTopDocs ( ) { List < URL > urls = new ArrayList < URL > ( ) ; for ( URL url : urls ) { urls . add ( url ) ; } return urls ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_keep_urls ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _keep_urls NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
hashCode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . hashCode ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_attribute_spec ( self , attribute_spec ) : NEW_LINE INDENT if isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , list ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_spec , dict ) : NEW_LINE INDENT return attribute_spec NEW_LINE DEDENT elif isinstance ( attribute_
parse_header ( self , input_file ) : NEW_LINE INDENT if isinstance ( input_file , str ) : NEW_LINE INDENT return parse_header ( input_file ) NEW_LINE DEDENT elif isinstance ( input_file , str ) : NEW_LINE INDENT return parse_header ( input_file ) NEW_LINE DEDENT else : NEW_LINE INDENT return parse_header ( input_file ) NEW_LINE DEDENT DEDENT
convert_short_to_integer ( self , short ) : NEW_LINE INDENT if isinstance ( short , int ) : NEW_LINE INDENT return short NEW_LINE DEDENT elif isinstance ( short , int ) : NEW_LINE INDENT return short NEW_LINE DEDENT elif isinstance ( short , int ) : NEW_LINE INDENT return short NEW_LINE DEDENT else : NEW_LINE INDENT return short NEW_LINE DEDENT DEDENT
convert_bytes ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT else : NEW_LINE INDENT return bytes NEW_LINE DEDENT DEDENT
get_jave_date ( self , jave_date ) : NEW_LINE INDENT jave_date = jave_date NEW_LINE return jave_date NEW_LINE DEDENT
_convert_name ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT return name NEW_LINE DEDENT
makeValidNetcdf3ObjectName ( name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' ' , ' ' ) NEW_LINE return name NEW_LINE DEDENT
read_existing_file ( self , file_name ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( file_name , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
ByteBuffer read ( ByteBuffer buffer ) { if ( buffer . remaining ( ) == 0 ) { return ByteBuffer . allocate ( 0 ) ; } if ( buffer . remaining ( ) == 0 ) { return ByteBuffer . allocate ( 0 ) ; } if ( buffer . remaining ( ) == 0 ) { return ByteBuffer . allocate ( 0 ) ; } return ByteBuffer . wrap ( buffer ) ; }
data from record structure that has been subsetted .
fill ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT value = 0 NEW_LINE DEDENT else : NEW_LINE INDENT value = float ( value ) NEW_LINE DEDENT return value NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static GradsTimeStruct getGradsTimeStructFromCalendar ( Calendar calendar ) { GradsTimeStruct gradsTimeStruct = new GradsTimeStruct ( ) ; gradsTimeStruct . setCalendar ( calendar ) ; return gradsTimeStruct ; }
def _get_time_template ( self ) : NEW_LINE INDENT template = self . template NEW_LINE if not template : NEW_LINE INDENT return None NEW_LINE DEDENT return template NEW_LINE DEDENT
def def is_function ( self ) : NEW_LINE INDENT return isinstance ( self . function , BaseType ) NEW_LINE return isinstance ( self . function , bool ) NEW_LINE DEDENT
load_function ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_function ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _load_function ( ) NEW_LINE DEDENT DEDENT
load_function ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_function ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _load_function ( ) NEW_LINE DEDENT DEDENT
load_function ( name ) : NEW_LINE INDENT try : NEW_LINE INDENT return load_function ( name ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
get_level_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_level_name ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_level_description ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _level_description NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_level_unit ( self , level_unit ) : NEW_LINE INDENT return self . _get_level_unit ( level_unit ) NEW_LINE DEDENT
get_projection_type ( self ) : NEW_LINE INDENT projection_type = self . _projection_type NEW_LINE if projection_type is not None : NEW_LINE INDENT return projection_type NEW_LINE DEDENT DEDENT
public public public VerticalCoordinate public static VerticalCoordinate createVerticalCoordinate ( ) { return new VerticalCoordinate ( ) { @ Override public VerticalCoordinate createVerticalCoordinate ( ) { return new VerticalCoordinate ( ) ; } } }
layer ( self ) : NEW_LINE INDENT if self . _layer is not None : NEW_LINE INDENT return self . _layer NEW_LINE DEDENT return self . _layer NEW_LINE DEDENT
CoordinateTransform getCoordinateTransform ( ) { if ( coordinateTransform == null ) { throw new IllegalArgumentException ( " CoordinateTransform is null " ) ; } CoordinateTransform coordinateTransform = new CoordinateTransform ( ) ; coordinateTransform . setCoordinateTransform ( this ) ; return coordinateTransform ; }
create_dummy_coordinate_transform ( self , CoordinateTransform ) : NEW_LINE INDENT CoordinateTransform = self . CoordinateTransform NEW_LINE if self . CoordinateTransform is None : NEW_LINE INDENT self . CoordinateTransform = self . CoordinateTransform NEW_LINE DEDENT else : NEW_LINE INDENT self . CoordinateTransform = self . CoordinateTransform NEW_LINE DEDENT return CoordinateTransform NEW_LINE DEDENT
static CoordinateTransform fromGridCoordTransform ( GridCoordTransform gridCoordTransform ) { if ( gridCoordTransform == null ) { throw new IllegalArgumentException ( " GridCoordTransform cannot be null " ) ; } return gridCoordTransform ; }
static void main ( String [ ] args ) { Application application = new Application ( args ) ; application . start ( ) ; }

def get_utc def get_utc_time_zone ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _utc_time_zone NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _utc_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def prefix_count ( self , prefix ) : NEW_LINE INDENT prefix_count = len ( prefix ) NEW_LINE if prefix_count > 0 : NEW_LINE INDENT return prefix_count NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
def def def write ( self ) : NEW def write ( self , value ) : NEW_LINE INDENT out = self . out . out . write ( ) NEW_LINE out . write ( value ) NEW_LINE return out . write ( out ) NEW_LINE DEDENT
write_out ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT else : NEW_LINE INDENT return bytes NEW_LINE DEDENT DEDENT
def def def def debug__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def def get___python____python____python____python__ def def def ___python____python____python____python__ def def def def def _ def _get__python____python____python____python____python____python__ def def def def def def _get__python____python____python____python__ def def def def def _get___python____python____python____python____python____python__ def def def def def _get___python____python____python____python____python____python____python__ def def def def _get___python____python____python____python____python____python____python__ def def def ____python____python____python____python____python__ def def def debug__python____python____python____python__ def def def _get___python____python____python____python____python____python____python__ def def def def _get___python____python____python____python____python____python____python__
def do_finish ( self ) : NEW_LINE INDENT if self . _finished : NEW_LINE INDENT self . _finished = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _finished = False NEW_LINE DEDENT DEDENT
def def handle_standard_calendars ( self , calendars ) : NEW_LINE INDENT if not isinstance ( calendars , list ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not isinstance ( calendars , list ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not isinstance ( calendars , dict ) : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( calendars , dict ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
reletive_error ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . error = True NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . error = False NEW_LINE DEDENT DEDENT
parse_dds ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_dds ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_das ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_das ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_das ( ) NEW_LINE DEDENT DEDENT
SwapGridHeader ( self , gridHeader ) : NEW_LINE INDENT if isinstance ( gridHeader , str ) : NEW_LINE INDENT gridHeader = gridHeader . strip ( ) NEW_LINE DEDENT if isinstance ( gridHeader , str ) : NEW_LINE INDENT gridHeader = gridHeader . strip ( ) NEW_LINE DEDENT if isinstance ( gridHeader , str ) : NEW_LINE INDENT gridHeader = gridHeader . strip ( ) NEW_LINE DEDENT if isinstance ( gridHeader , str ) : NEW_LINE INDENT gridHeader = gridHeader . strip ( ) NEW_LINE DEDENT return gridHeader NEW_LINE DEDENT
def def def def get_grid_grid ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def test ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def test__python____python____python____python____python____python__ def def def def def test__python____python____python____python____python__ def def def def def test__python____python____python__ def def def def test__python____python____python____python____python____python____python__ def def def def def def def def def test def test def test__python____python____python____python____python____python____python____python__ def def def def def def test def test def test def test def test__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def test def test def test def test__python____python____python____python____python____python____python____python____python__ def def test def test def test def test__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def
write_constraint ( self , element ) : NEW_LINE INDENT if isinstance ( element , OWS ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
write_headers ( self , headers , service_sections ) : NEW_LINE INDENT self . _headers = headers NEW_LINE self . _service_sections = service_sections NEW_LINE DEDENT
def def get_operations_metadata ( self ) : NEW_LINE INDENT return self . metadata . get_operations ( ) NEW_LINE DEDENT
process_file ( self , filename ) : NEW_LINE INDENT if not os . path . exists ( filename ) : NEW_LINE INDENT os . makedirs ( filename ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT os . makedirs ( filename ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT os . makedirs ( filename ) NEW_LINE DEDENT DEDENT
read_log_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT log_file = open ( self . log_file , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT log_file = None NEW_LINE DEDENT if log_file : NEW_LINE INDENT log_file = log_file . read ( ) NEW_LINE DEDENT return log_file NEW_LINE DEDENT
get_grid_packing_type ( self ) : NEW_LINE INDENT if self . grid_packing_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . grid_packing_type NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def

unpack_grib_data ( self , grib_data ) : NEW_LINE INDENT grib_data = grib_data . unpack ( ) NEW_LINE grib_data = grib_data . unpack ( ) NEW_LINE grib_data = grib_data . unpack ( ) NEW_LINE return grib_data NEW_LINE DEDENT
static Grib1 getGrib1 ( ) { Grib1 grib1 = null ; try { grib1 = new Grib1 ( ) ; grib1 . read ( ) ; return grib1 ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
read_packed_grib2 ( self ) : NEW_LINE INDENT data = self . _read_packed_grib2 ( ) NEW_LINE if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
def def print_grids ( self , grids ) : NEW_LINE INDENT if len ( grids ) == 0 : NEW_LINE INDENT return " " " NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
nextByte ( self ) : NEW_LINE INDENT return self . _nextByte ( ) NEW_LINE DEDENT
get_calendar_date ( self ) : NEW_LINE INDENT return self . calendar . get_calendar_date ( ) NEW_LINE DEDENT
createCalendarDate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _createCalendarDate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_calendar_date ( self , msecs ) : NEW_LINE INDENT if msecs == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif msecs == 1 : NEW_LINE INDENT return None NEW_LINE DEDENT elif msecs == 2 : NEW_LINE INDENT return self . create_calendar_date ( msecs ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_calendar_date ( msecs ) NEW_LINE DEDENT DEDENT
CalendarDate createCalendarDate ( int msecs ) { CalendarDate calendarDate = new CalendarDate ( ) ; calendarDate . setTimeInMillis ( msecs ) ; calendarDate . setTimeInMillis ( msecs ) ; calendarDate . setTimeZone ( TimeZone . getTimeZone ( " UTC " ) ) ; return calendarDate ; }
get_calendar_date ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . calendar_date NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
difference between two calendar dates in given Field units .
def def atomic_val def atomic_val ( self ) : NEW_LINE INDENT if self . is_atomic_valued ( ) : NEW_LINE INDENT return self . _atomic_valued_variable ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _atomic_variable ( ) NEW_LINE DEDENT DEDENT
def def get_request_requests ( self ) : NEW_LINE INDENT for request in self . request_set : NEW_LINE INDENT for request in self . request_set . values ( ) : NEW_LINE INDENT yield request NEW_LINE DEDENT DEDENT return self . request_set NEW_LINE DEDENT
insert_ backslashes ( self , backslashes ) : NEW_LINE INDENT if backslashes : NEW_LINE INDENT self . insert_backslashes ( backslashes ) NEW_LINE DEDENT else : NEW_LINE INDENT self . insert_backslashes ( ) NEW_LINE DEDENT DEDENT
create_cdm_ranges ( self ) : NEW_LINE INDENT if self . ma2 is not None : NEW_LINE INDENT return self . ma2 . create_cdm_ranges ( ) NEW_LINE DEDENT DEDENT
wrap_netcdf_file ( self , netcdf_file ) : NEW_LINE INDENT if isinstance ( netcdf_file , NetcdfFile ) : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT elif isinstance ( netcdf_file , NetcdfDataset ) : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT elif isinstance ( netcdf_file , NetcdfDataset ) : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT elif isinstance ( netcdf_file , NetcdfDataset ) : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT else : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT DEDENT
test_dimension_length ( self ) : NEW_LINE INDENT if self . dimension is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def def compute_shape ( self ) : NEW_LINE INDENT if len ( self . shape ) == 0 : NEW_LINE INDENT return self . shape NEW_LINE DEDENT else : NEW_LINE INDENT return self . shape NEW_LINE DEDENT DEDENT
add_time ( self , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . add_time ( date ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def divide ( self , unit ) : NEW_LINE INDENT unit = unit . copy ( ) NEW_LINE unit = unit . copy ( ) NEW_LINE unit = unit . copy ( ) NEW_LINE unit = unit . copy ( ) NEW_LINE return unit NEW_LINE DEDENT
divide ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , Unit ) : NEW_LINE INDENT return self . _divide ( unit ) NEW_LINE DEDENT return self . _divide ( unit ) NEW_LINE DEDENT
Raises this unit to a power ( ) : NEW_LINE INDENT def _raise ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , Unit . class ) : NEW_LINE INDENT raise NotImplementedError ( unit ) NEW_LINE DEDENT else : NEW_LINE INDENT raise NotImplementedError ( unit ) NEW_LINE DEDENT DEDENT DEDENT
convert_numeric ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , int ) : NEW_LINE INDENT return unit NEW_LINE DEDENT elif isinstance ( unit , float ) : NEW_LINE INDENT return unit NEW_LINE DEDENT else : NEW_LINE INDENT return unit NEW_LINE DEDENT DEDENT
convert_numeric ( self , value , unit ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
convert_numeric ( self , value ) : NEW_LINE INDENT if isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
canonical_string ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , str ) : NEW_LINE INDENT return unit NEW_LINE DEDENT if isinstance ( unit , str ) : NEW_LINE INDENT return canonical_string ( unit ) NEW_LINE DEDENT return canonical_string ( unit ) NEW_LINE DEDENT
read_section_data ( self ) : NEW_LINE INDENT data = self . _read_section_data ( ) NEW_LINE if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
Coordinate [ ] subsetting ( Coordinate [ ] coordinates ) { Coordinate [ ] subsetting = new Coordinate [ coordinates . length ] ; for ( Coordinate [ ] coordinates : coordinates ) { subsetting [ coordinates . length ] = coordinates [ coordinates . length ] ; } return subsetting ; }
def override ( self ) : NEW_LINE INDENT if self . _override : NEW_LINE INDENT self . _override = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _override = False NEW_LINE DEDENT DEDENT

get_gate_size ( self ) : NEW_LINE INDENT gate_size = self . get_gate_size ( ) NEW_LINE if gate_size is not None : NEW_LINE INDENT return gate_size NEW_LINE DEDENT DEDENT
get_starting_gate ( self ) : NEW_LINE INDENT gate = self . get_gate ( ) NEW_LINE if gate is None : NEW_LINE INDENT return None NEW_LINE DEDENT return gate NEW_LINE DEDENT
get_gates ( self ) : NEW_LINE INDENT gates = self . gates NEW_LINE if gates is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return gates NEW_LINE DEDENT DEDENT
write ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , NetcdfDataset ) : NEW_LINE INDENT return self . _write ( stream ) NEW_LINE DEDENT elif isinstance ( stream , NetcdfDataset ) : NEW_LINE INDENT return self . _write ( stream ) NEW_LINE DEDENT DEDENT
def def def def def def def def handle def _handle__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def get___python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def def ____python____python____python____python____python__ def def def def def def ____python____python____python____python____python____python____python__ def def def def def def def ____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python__ def def def def def ____python____python____python____python____python____python____python____python__ def def def def def ____python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def _
get_dataset_filter ( Dataset dataset ) { if ( dataset == null ) { return null ; } else if ( dataset == null ) { return null ; } else { return dataset ; } } }

def createCalendarDateUnit ( self , calendarDate , unit ) : NEW_LINE INDENT if calendarDate is None : NEW_LINE INDENT return None NEW_LINE DEDENT calendarDateUnit = self . _createCalendarDateUnit ( calendarDate , unit ) NEW_LINE calendarDateUnit = self . _createCalendarDateUnit ( calendarDate , unit ) NEW_LINE calendarDateUnit = self . _createCalendarDateUnit ( calendarDateUnit , unit ) NEW_LINE return calendarDateUnit NEW_LINE DEDENT
def createCalendarDateUnit ( self , calendarDate , unit ) : NEW_LINE INDENT calendarDateUnit = self . calendarDateUnit ( calendarDate ) NEW_LINE calendarDateUnit = self . calendarDateUnit ( calendarDateUnit ) NEW_LINE calendarDateUnit = self . calendarDateUnit ( calendarDateUnit ) NEW_LINE calendarDateUnit = self . calendarDateUnit ( calendarDateUnit ) NEW_LINE return calendarDateUnit NEW_LINE DEDENT
CalendarDateUnit getCalendarDateUnit ( CalendarPeriod period ) { CalendarDateUnit calendarDateUnit = new CalendarDateUnit ( ) ; calendarDateUnit . setCalendarPeriod ( period ) ; calendarDateUnit . setCalendarDateUnit ( calendarDateUnit ) ; return calendarDateUnit ; }
makeCalendarDate ( self ) : NEW_LINE INDENT return self . _makeCalendarDate ( ) NEW_LINE DEDENT
makeOffsetFromRefDate ( self , refDate ) : NEW_LINE INDENT offset = self . makeOffsetFromRefDate ( refDate ) NEW_LINE if offset is not None : NEW_LINE INDENT return offset NEW_LINE DEDENT else : NEW_LINE INDENT return offset NEW_LINE DEDENT DEDENT
get_quantity_dimension ( self ) : NEW_LINE INDENT quantity_dimension = self . quantity_dimension NEW_LINE if quantity_dimension is None : NEW_LINE INDENT return None NEW_LINE DEDENT return quantity_dimension NEW_LINE DEDENT
boolean isValid ( ) { if ( ! isValid ( ) ) { throw new IllegalArgumentException ( " Invalid SIGMET - IRIS file " ) ; } return true ; }
def getStationName ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _stationName NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _stationName NEW_LINE DEDENT DEDENT
read_memory_residents ( self ) : NEW_LINE INDENT residents = [ ] NEW_LINE for resident in self . residents : NEW_LINE INDENT residents . append ( resident ) NEW_LINE DEDENT return residents NEW_LINE DEDENT
read_data ( self ) : NEW_LINE INDENT data = self . _read_data ( ) NEW_LINE if not data : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
static WritableByteChannel read ( WritableByteChannel channel ) throws IOException { if ( channel == null ) { throw new IllegalArgumentException ( " channel is null " ) ; } return channel . read ( ) ; }
get_radial_elevation ( ray ) : NEW_LINE INDENT elevation = ray . elevation NEW_LINE return elevation NEW_LINE DEDENT
distance ( self , bins ) : NEW_LINE INDENT if len ( bins ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return len ( bins ) NEW_LINE DEDENT DEDENT
azimuth ( self , ray ) : NEW_LINE INDENT if isinstance ( ray , Ray ) : NEW_LINE INDENT return ray . azimuth ( ) NEW_LINE DEDENT return ray . azimuth ( ) NEW_LINE DEDENT
def get_raw_data ( self ) : NEW_LINE INDENT raw_data = self . _raw_data NEW_LINE raw_data = self . _raw_data NEW_LINE raw_data = raw_data [ ' raw _ data ' ] NEW_LINE raw_data = raw_data [ ' raw _ data ' ] NEW_LINE return raw_data NEW_LINE DEDENT
get_velocity ( self ) : NEW_LINE INDENT if self . velocity is None : NEW_LINE INDENT self . velocity = [ ] NEW_LINE DEDENT return self . velocity NEW_LINE DEDENT
def def def make_vertical_transform ( self ) : NEW_LINE def make_vertical_transform ( self ) : NEW_LINE INDENT return self . _make_vertical_transform ( ) NEW_LINE DEDENT def make_vertical_transform ( self ) : NEW_LINE INDENT return self . _make_vertical_transform ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_indexes ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _indexes NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
read_YX_array ( self ) : NEW_LINE INDENT YX_array = self . read_YX_array ( ) NEW_LINE if YX_array is None : NEW_LINE INDENT return None NEW_LINE DEDENT return YX_array NEW_LINE DEDENT
_get_level ( self , level ) : NEW_LINE INDENT if level == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT return level NEW_LINE DEDENT
bounding_box ( self , lat , lon ) : NEW_LINE INDENT bounding_box = self . bounding_box ( lat , lon ) NEW_LINE if bounding_box is not None : NEW_LINE INDENT return bounding_box NEW_LINE DEDENT return bounding_box NEW_LINE DEDENT
set_sequence_lengths ( self , sequence_lengths ) : NEW_LINE INDENT if len ( sequence_lengths ) == 0 : NEW_LINE INDENT self . set_sequence_lengths ( sequence_lengths ) NEW_LINE DEDENT else : NEW_LINE INDENT self . set_sequence_lengths ( sequence_lengths ) NEW_LINE DEDENT DEDENT
fill_sbuff ( self ) : NEW_LINE INDENT if self . tabStop : NEW_LINE INDENT return self . fill_sbuff ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . fill_sbuff ( ) NEW_LINE DEDENT DEDENT
static String pad ( String string , int width ) { if ( width < 0 ) { throw new IllegalArgumentException ( " width must be greater or equal to 0 . " ) ; } if ( width > 0 ) { throw new IllegalArgumentException ( " width must be greater or equal to 0 . " ) ; } if ( width > 0 ) { throw new IllegalArgumentException ( " width must be greater or equal to 0 . " ) ; } if ( width > 0 ) { throw new IllegalArgumentException ( " width must be greater or equal to 0 . " ) ; } return string ; }
format_integer ( value ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( value ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
format_long ( self , value ) : NEW_LINE INDENT if isinstance ( value , long ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
def def bytes ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _bytes ( self . _bytes ( self . _bytes ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _bytes ( ) NEW_LINE DEDENT DEDENT

static double parseDouble ( String value ) { if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } double value = Double . parseDouble ( value ) ; if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } return value ; }
display_name ( self , display_name ) : NEW_LINE INDENT display_name = display_name . replace ( ' _ ' , ' - ' ) NEW_LINE display_name = display_name . replace ( ' _ ' , ' - ' ) NEW_LINE return display_name NEW_LINE DEDENT
sanity_check ( self , slice ) : NEW_LINE INDENT self . sanity_check_slice ( slice ) NEW_LINE self . sanity_check_slice ( slice ) NEW_LINE DEDENT
convert_slice_to_string ( self , slice ) : NEW_LINE INDENT if isinstance ( slice , str ) : NEW_LINE INDENT return slice NEW_LINE DEDENT elif isinstance ( slice , str ) : NEW_LINE INDENT return slice NEW_LINE DEDENT else : NEW_LINE INDENT return slice NEW_LINE DEDENT DEDENT
compose ( src , target ) : NEW_LINE INDENT if src is None : NEW_LINE INDENT return None NEW_LINE DEDENT if target is None : NEW_LINE INDENT return None NEW_LINE DEDENT if src is not None : NEW_LINE INDENT return src NEW_LINE DEDENT if target is not None : NEW_LINE INDENT return target NEW_LINE DEDENT return None NEW_LINE DEDENT
def def _map_ith_element ( self , target_range ) : NEW_LINE INDENT if isinstance ( target_range , Range ) : NEW_LINE INDENT return target_range NEW_LINE DEDENT elif isinstance ( target_range , Range ) : NEW_LINE INDENT return target_range NEW_LINE DEDENT return target_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def dump_buffer ( self , buffer , position = 0 ) : NEW_LINE INDENT if position == 0 : NEW_LINE INDENT return " " " NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
find_ellipsoid ( self , name ) : NEW_LINE INDENT name = name . replace ( ' . ' , ' _ ' ) NEW_LINE name = name . replace ( ' . ' , ' _ ' ) NEW_LINE return name NEW_LINE DEDENT
find_ EarthEllipsoid ( self ) : NEW_LINE INDENT return self . _find_ EarthEllipsoid ( ) NEW_LINE DEDENT
def def def top__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def top__python____python____python____python____python____python____python____python____python____python__ def def def def def def def def top__python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def top def top__python__ def top def top__python__ def top__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def top__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def top__python____python____python____python__ def def def def top__python____python____python____python____python__ def def def def def top__python____python____python____python____python__ def def def def def top__python____python____python____python____python__ def def def def def def top__python____python____python____python__ def def def def def top__python__
vlen ( self ) : NEW_LINE INDENT return self . vlen ( ) NEW_LINE DEDENT
def Extract all A - HREF contained URLS from the given URL and return in List < A - HREF > List < A - HREF > list = new ArrayList < A - HREF > ( ) ; List < A - HREF > list = new ArrayList < A - HREF > ( ) ; return list ; }
extract_text_from_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _extract_text_from_url ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_content_encoding ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parser . parse_content_encoding ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def write ( self , dataOutputStream ) : NEW_LINE INDENT try : NEW_LINE INDENT dataOutputStream = new ByteArrayOutputStream ( ) NEW_LINE dataOutputStream . write ( dataOutputStream . toByteArray ( ) ) NEW_LINE dataOutputStream . write ( dataOutputStream . toByteArray ( ) ) NEW_LINE dataOutputStream . close ( ) NEW_LINE dataOutputStream . close ( ) NEW_LINE return dataOutputStream ; }
replace_old ( old , newname ) : NEW_LINE INDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT if old . name == newname : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
remove_attribute_by_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return name NEW_LINE DEDENT
remove_attribute_by_name ( self , name ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE name = name . lower ( ) NEW_LINE return name NEW_LINE DEDENT
get_offsets ( self , firstDate ) : NEW_LINE INDENT offsets = [ ] NEW_LINE for offset in self . offsets : NEW_LINE INDENT offsets . append ( offset ) NEW_LINE DEDENT return offsets NEW_LINE DEDENT

create_date ( self , udunits ) : NEW_LINE INDENT try : NEW_LINE INDENT return datetime . datetime . strptime ( udunits , " yyyy - MM - dd " ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return datetime . datetime . strptime ( udunits , " yyyy - MM - dd " ) NEW_LINE DEDENT DEDENT
static java . util . Date getDate ( String udunit ) { if ( udunit == null || udunit . length ( ) == 0 ) { return new java . util . Date ( ) ; } return new java . util . Date ( udunit ) ; }
getOriginDate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . originDate NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static java . util . Date getDate ( String date ) { if ( date == null ) { return null ; } if ( date . length ( ) == 0 ) { return new java . util . Date ( ) ; } return new java . util . Date ( date ) ; }
createDate ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return datetime . datetime . fromtimestamp ( value ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT

def def get_standard_GMT_string_representation ( self , unit , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return ' GMT ' NEW_LINE DEDENT DEDENT
get_grid_spacing ( self ) : NEW_LINE INDENT if self . grid_spacing is not None : NEW_LINE INDENT return self . grid_spacing NEW_LINE DEDENT return self . grid_spacing NEW_LINE DEDENT
add_dimensions ( self , coord_sys ) : NEW_LINE INDENT if self . coord_sys is None : NEW_LINE INDENT self . coord_sys = coord_sys NEW_LINE DEDENT else : NEW_LINE INDENT self . coord_sys = self . coord_sys NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_projection ( self , projection ) : NEW_LINE INDENT if projection is None : NEW_LINE INDENT projection = self . projection NEW_LINE DEDENT return projection NEW_LINE DEDENT
add_params ( self , variable , params ) : NEW_LINE INDENT if params is None : NEW_LINE INDENT params = { } NEW_LINE DEDENT else : NEW_LINE INDENT params = params . copy ( ) NEW_LINE DEDENT params . update ( params ) NEW_LINE return params NEW_LINE DEDENT
def def add_coordinate_system_variable ( self , coordinate_system_variable ) : NEW_LINE INDENT if coordinate_system_variable is not None : NEW_LINE INDENT coordinate_system_variable = coordinate_system_variable NEW_LINE DEDENT return coordinate_system_variable NEW_LINE DEDENT
static LambertConformalConic projection ( LambertConformalConic projection ) { if ( projection == null ) { projection = new LambertConformalConic ( ) ; } return projection ; }
static PolarStereographic projection ( PolarStereographic projection ) { if ( projection == null ) { projection = new PolarStereographicProjection ( ) ; } return projection ; }
static Mercator projection ( Mercator projection ) { if ( projection == null ) { projection = new Mercator ( ) ; } return projection ; }
static GeostationaryProjection projection ( ) { return new GeostationaryProjection ( ) ; }
def def get_projection ( self , startx , starty , startx , starty , projection ) : NEW_LINE INDENT startx , starty = startx , starty , projection NEW_LINE startx , starty = startx , starty , projection NEW_LINE startx , starty = startx , projection NEW_LINE starty , projection = starty , projection NEW_LINE DEDENT
read_dataset_element ( self , dataset_element ) : NEW_LINE INDENT if dataset_element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return dataset_element NEW_LINE DEDENT DEDENT
read_dataset_scan_element ( self , dataset_scan_element ) : NEW_LINE INDENT if dataset_scan_element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return dataset_scan_element NEW_LINE DEDENT DEDENT
get_metadata ( self ) : NEW_LINE INDENT if self . _metadata is not None : NEW_LINE INDENT return self . _metadata NEW_LINE DEDENT return self . _metadata NEW_LINE DEDENT
get_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void checkFile ( ) throws IOException { if ( ! file . exists ( ) ) { throw new IOException ( " File not found : " + file . getAbsolutePath ( ) ) ; } }
void write ( byte [ ] bytes ) throws IOException { if ( bytes . length == 0 ) { throw new EOFException ( ) ; } else if ( bytes . length == 1 ) { throw new EOFException ( ) ; } else if ( bytes . length == 2 ) { throw new EOFException ( ) ; } }
def def unencoded_name ( self ) : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT
find_coordinate_variable ( self , coordinate_type ) : NEW_LINE INDENT if coordinate_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT if coordinate_type is not None : NEW_LINE INDENT return coordinate_type NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_coordinate_variable ( self , type , dimension = None ) : NEW_LINE INDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT if dimension is None : NEW_LINE INDENT dimension = self . dimension NEW_LINE DEDENT return dimension NEW_LINE DEDENT
convert_error_response ( self , error_response ) : NEW_LINE INDENT if isinstance ( error_response , ErrorResponse ) : NEW_LINE INDENT return error_response NEW_LINE DEDENT else : NEW_LINE INDENT return error_response NEW_LINE DEDENT DEDENT
an ErrorResponse to the equivalent DapException . DapException errorResponse = new DapException . DapException ( errorResponse ) ; return errorResponse ; }
def list_dimensions ( self ) : NEW_LINE INDENT return self . _get_dimensions ( ) NEW_LINE return self . _get_dimensions ( ) NEW_LINE DEDENT
def make_new_variable ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( values [ 0 ] , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( values [ 0 ] , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( values [ 0 ] , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( values [ 0 ] , list ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
create_variables ( self , ncVar ) : NEW_LINE INDENT self . ncVar = ncVar NEW_LINE self . ncVar_sections = [ ] NEW_LINE self . ncVar_sections . append ( self . ncVar_sections ) NEW_LINE return self . ncVar_sections NEW_LINE DEDENT
construct_time_coordinate ( self , time_coordinate ) : NEW_LINE INDENT if time_coordinate is not None : NEW_LINE INDENT return time_coordinate NEW_LINE DEDENT else : NEW_LINE INDENT return time_coordinate NEW_LINE DEDENT DEDENT
def shave_n_bits ( self , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif n == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return n NEW_LINE DEDENT DEDENT
write_grib_file ( self , grib_file ) : NEW_LINE INDENT if grib_file is None : NEW_LINE INDENT grib_file = self . _write_grib_file ( grib_file ) NEW_LINE DEDENT return grib_file NEW_LINE DEDENT
def def make_netcdf_dataset ( self , file , enhance_mode = None ) : NEW_LINE INDENT if enhance_mode is None : NEW_LINE INDENT enhance_LINE INDENT enhance_mode = self . enhance_mode NEW_LINE DEDENT else : NEW_LINE INDENT enhance_LINE enhance_mode = self . enhance_mode NEW_LINE DEDENT return NetcdfDataset ( file , enhance_mode = enhance_mode ) NEW_LINE DEDENT DEDENT
open ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _open ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _open ( ) NEW_LINE DEDENT DEDENT
def clear_metadata ( self ) : NEW_LINE INDENT self . _metadata = { } NEW_LINE self . _metadata . clear ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_coordinate_axis_axis ( self , type ) : NEW_LINE INDENT return self . _get_coordinate_axis ( type ) NEW_LINE DEDENT
get_coordinate_system ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _coordinate_system NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _coordinate_system NEW_LINE DEDENT DEDENT
get_coordinate_transform ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _coordinate_transform NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _coordinate_transform NEW_LINE DEDENT DEDENT
def def def done ( ) public public void done ( ) { if ( enhancement ==
def def def reshape__python____python____python____python____python____python____python____python____python____python____python____python__ def def def reshape__python____python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python__ def def def def get___python____python____python____python____python__ def def def def get___python____python____python____python____python__ def def def def get___python____python____python____python____python__ def def def ___python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def get___python____python____python____python____python__ def def _ def _get_ def _get_value ( self
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def make_array_from_list ( self , list ) : NEW_LINE INDENT if len ( list ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
linear_index ( self ) : NEW_LINE INDENT return self . _linear_index ( ) NEW_LINE DEDENT
static MFileOS7 getMFileOS7 ( File file ) { if ( file == null ) { return null ; } if ( file . exists ( ) ) { return new MFileOS7 ( file ) ; } else { return new MFileOS7 ( file ) ; } }
List < Feature > getAllFeatures ( ) { List < Feature > features = new ArrayList < Feature > ( ) ; for ( Feature feature : features ) { features . add ( feature ) ; } return features ; }
def _dis def _discretize ( self , array ) : NEW_LINE INDENT if ( array . size ( array . size ( ) == 0 ) : NEW_LINE INDENT return array . size ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return array . size ( ) ; } }

set_doc_type ( self , doc_type ) : NEW_LINE INDENT self . doc_type = doc_type NEW_LINE return self . doc_type NEW_LINE DEDENT
remove_all_docs ( self , type ) : NEW_LINE INDENT if isinstance ( type , six . string_types ) : NEW_LINE INDENT return self . remove_all_docs ( type ) NEW_LINE DEDENT elif isinstance ( type , six . string_types ) : NEW_LINE INDENT return self . remove_all_docs ( type ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . remove_all_docs ( type ) NEW_LINE DEDENT DEDENT

def get_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( self . filename , ' r ' ) . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_convention_names ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convention_names NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
identify_axes ( self , axes ) : NEW_LINE INDENT if isinstance ( axes , tuple ) : NEW_LINE INDENT return axes NEW_LINE DEDENT else : NEW_LINE INDENT return axes NEW_LINE DEDENT DEDENT
_CoordinateAxes ( self ) : NEW_LINE INDENT if self . _CoordinateAxes is not None : NEW_LINE INDENT return self . _CoordinateAxes NEW_LINE DEDENT else : NEW_LINE INDENT return self . _CoordinateAxes NEW_LINE DEDENT DEDENT
_CoordinateSystems ( self ) : NEW_LINE INDENT if self . _CoordinateSystems is not None : NEW_LINE INDENT return self . _CoordinateSystems NEW_LINE DEDENT return self . _CoordinateSystems NEW_LINE DEDENT
create_coordinate_system ( self ) : NEW_LINE INDENT self . CoordinateSystem = self . CoordinateSystem NEW_LINE self . CoordinateSystem = self . CoordinateSystem NEW_LINE return self . CoordinateSystem NEW_LINE DEDENT

def def fit ( self , axis ) : NEW_LINE INDENT if isinstance ( axis , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( axis , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
track_coordinate_variables ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT track_coordinate_variables ( self ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT track_coordinate_variables ( self ) NEW_LINE DEDENT DEDENT

remove_dataset ( self , dataset , filter ) : NEW_LINE INDENT if not dataset : NEW_LINE INDENT return NEW_LINE DEDENT if filter : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def _get_catalog_refs ( self ) : NEW_LINE INDENT return self . _get_catalog_refs ( ) NEW_LINE DEDENT
remove_datasets ( self , datasets ) : NEW_LINE INDENT for dataset in datasets : NEW_LINE INDENT self . remove_dataset ( dataset ) NEW_LINE DEDENT DEDENT
get ( self , * args , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get ( * args , ** kwargs ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_counter ( self , counter ) : NEW_LINE INDENT if not self . _counter : NEW_LINE INDENT self . _counter = counter NEW_LINE DEDENT else : NEW_LINE INDENT self . _counter += 1 NEW_LINE DEDENT DEDENT

compare ( self , other ) : NEW_LINE INDENT if self . compare ( other ) : NEW_LINE INDENT return self . compare ( other ) NEW_LINE DEDENT return self NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parser . parse ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_reserved_xml_attributes ( self , xml_attributes ) : NEW_LINE INDENT if xml_attributes is None : NEW_LINE INDENT xml_attributes = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT xml_attributes . append ( xml_attributes ) NEW_LINE DEDENT return xml_attributes NEW_LINE DEDENT
if a valid date range was specified .
interface extended ( Iterator interface ) { if ( interface . hasNext ( ) ) { return interface . next ( ) ; } else { return interface . hasNext ( ) ; } }


is_registered ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return True NEW_LINE DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
unregister_dsp ( dsp ) : NEW_LINE INDENT if dsp is not None : NEW_LINE INDENT dsp . unregister ( ) NEW_LINE DEDENT DEDENT

def get_interval_size ( self ) : NEW_LINE INDENT return self . _get_interval_size ( ) NEW_LINE DEDENT
get_time_interval ( self ) : NEW_LINE INDENT if self . time_interval is None : NEW_LINE INDENT return self . time_interval NEW_LINE DEDENT return self . time_interval NEW_LINE DEDENT
get_unit_of_vertical_coordinate ( self ) : NEW_LINE INDENT return self . _get_unit_of_vertical_coordinate ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_all_interfaces ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
find_first_variable_with_attribute_name ( self , attribute_name ) : NEW_LINE INDENT return self . _find_first_variable_with_attribute_name ( attribute_name ) NEW_LINE DEDENT
find_first_variable ( self , name , value ) : NEW_LINE INDENT if self . is_variable ( name ) : NEW_LINE INDENT return self . find_first_variable ( name , value ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_first_variable_with_attribute_name ( self , attribute_name , value ) : NEW_LINE INDENT return self . find_first_variable_with_attribute_name ( attribute_name , value ) NEW_LINE DEDENT
find_first_member_variable ( self , name , value ) : NEW_LINE INDENT return self . _find_first_member_variable ( name , value ) NEW_LINE DEDENT
find_nested_structure ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , dict ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , list ) : NEW_LINE INDENT return structure NEW_LINE DEDENT else : NEW_LINE INDENT return structure NEW_LINE DEDENT DEDENT
def get_record_structure ( self , dataset ) : NEW_LINE INDENT if not isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT return dataset NEW_LINE DEDENT
translate_key ( self , key , value ) : NEW_LINE INDENT key = self . translate_key ( key , value ) NEW_LINE key = self . translate_key ( key , value ) NEW_LINE return key NEW_LINE DEDENT
get_feature_type ( key ) : NEW_LINE INDENT if isinstance ( key , str ) : NEW_LINE INDENT return key NEW_LINE DEDENT else : NEW_LINE INDENT if isinstance ( key , str ) : NEW_LINE INDENT return key NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_coordinate ( self , i , j ) : NEW_LINE INDENT try : NEW_LINE INDENT return self [ i ] [ j ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def _make__python____python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python____python__ def def def def def def def ___python____python____python____python__ def def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python__ def def def def get___python____python____python____python____python__ def def def def ___python____python____python__ def def _
double [ ] getCoordinates ( double [ ] coords ) { if ( coords == null ) { return null ; } double [ ] coords = new double [ coords . length ] ; for ( int i = 0 ; i < coords . length ; i ++ ) { coords [ i ] = coords [ i ] ; } return coords ; }
CoordinateAxis2D addCoordinateAxis2D ( CoordinateAxis2D coordinateAxis2D ) { if ( coordinateAxis2D == null ) { throw new IllegalArgumentException ( " CoordinateAxis2D cannot be null . " ) ; } CoordinateAxis2D . addCoordinateAxis2D ( coordinateAxis2D ) ; return coordinateAxis2D ; }
get_closest_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
getName ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_action ( self , action , menuName = None ) : NEW_LINE INDENT if menuName is None : NEW_LINE INDENT menuName = action . getMenuName ( ) NEW_LINE DEDENT else : NEW_LINE INDENT menuName = action . getMenuName ( ) NEW_LINE DEDENT if menuName == None : NEW_LINE INDENT menuName = action . getMenuName ( ) NEW_LINE DEDENT else : NEW_LINE INDENT menuName = action . getMenuName ( ) NEW_LINE DEDENT return menuName NEW_LINE DEDENT
longest_match ( self , match ) : NEW_LINE INDENT if match is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return match NEW_LINE DEDENT DEDENT
def def test ( self ) : NEW_LINE INDENT assert len ( self ) == 1 NEW_LINE assert len ( self ) == 1 NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
store_image ( self , image ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( image ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
inspect ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT cache = self . cache NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT cache = self . cache NEW_LINE DEDENT return cache NEW_LINE DEDENT
stop_background_loading ( self ) : NEW_LINE INDENT if self . background_loading is not None : NEW_LINE INDENT self . background_loading . stop ( ) NEW_LINE self . background_loading = None NEW_LINE DEDENT DEDENT
stop_background_loading ( self ) : NEW_LINE INDENT if self . background_loading : NEW_LINE INDENT self . background_loading = False NEW_LINE DEDENT else : NEW_LINE INDENT self . background_loading = True NEW_LINE DEDENT DEDENT
static HTTPMethod [ ] createHTTPMethodInstances ( ) { return new HTTPMethod [ ] { new HTTPMethod ( ) , new HTTPMethod ( ) } ; }
create_method_creation_code ( self ) : NEW_LINE INDENT def create_method_creation_code ( self ) : NEW_LINE INDENT return self . _create_method_creation_code ( ) NEW_LINE DEDENT return create_method_creation_code NEW_LINE DEDENT
float_type ( self , value ) : NEW_LINE INDENT if isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float_type ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
def integer_range ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( self [ 0 ] ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self [ 0 ] NEW_LINE DEDENT DEDENT
read_entry_point ( self ) : NEW_LINE INDENT return self . _read_entry_point ( ) NEW_LINE DEDENT
re_create ( self ) : NEW_LINE INDENT filesystem = self . filesystem NEW_LINE if filesystem is None : NEW_LINE INDENT return NEW_LINE DEDENT filesystem = filesystem . copy ( ) NEW_LINE filesystem . update ( ) NEW_LINE filesystem . update ( ) NEW_LINE filesystem . update ( ) NEW_LINE filesystem . update ( ) NEW_LINE DEDENT
static GempakTable getGempakTable ( ) { if ( GempakTable == null ) { GempakTable = new GempakTable ( ) ; } return GempakTable ; }
makeSparseArray ( self ) : NEW_LINE INDENT return self . makeSparseArray ( ) NEW_LINE DEDENT
set_reminder ( self ) : NEW_LINE INDENT if self . _reminder is not None : NEW_LINE INDENT self . _reminder . set_reminder ( self ) NEW_LINE DEDENT DEDENT
convert_cloud_height ( cls , cloud_height ) : NEW_LINE INDENT if isinstance ( cloud_height , meters ) : NEW_LINE INDENT return cloud_height NEW_LINE DEDENT elif isinstance ( cloud_height , meters ) : NEW_LINE INDENT return cloud_height NEW_LINE DEDENT DEDENT
get_read_variables ( self ) : NEW_LINE INDENT agg_variables = self . get_read_variables ( ) NEW_LINE if agg_variables is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return agg_variables NEW_LINE DEDENT DEDENT
set_colors ( self , colorscale ) : NEW_LINE INDENT self . colorscale = colorscale NEW_LINE DEDENT
map_coords ( self , coords ) : NEW_LINE INDENT if coords is None : NEW_LINE INDENT coords = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT coords = coords . copy ( ) NEW_LINE DEDENT return coords NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
compare_gds ( self , gds ) : NEW_LINE INDENT if gds is None : NEW_LINE INDENT return False NEW_LINE DEDENT if gds is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def is_reciprocal_reciprocal ( self ) : NEW_LINE INDENT return isinstance ( self . reciprocal , Factor ) NEW_LINE DEDENT
catalog ( self , directory ) : NEW_LINE INDENT catalog = self . _catalog ( directory ) NEW_LINE if catalog : NEW_LINE INDENT return catalog NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
find_index ( self , value ) : NEW_LINE INDENT index = self . index NEW_LINE if index == None : NEW_LINE INDENT return None NEW_LINE DEDENT return index NEW_LINE DEDENT


static InvMetadata contentToInvMetadata ( InvMetadata content ) { if ( content instanceof InvMetadata ) { return content ; } else { return new InvMetadata ( content ) ; } }
validate_content_object ( self , content_object ) : NEW_LINE INDENT if content_object is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , list ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT if isinstance ( content_object , dict ) : NEW_LINE INDENT return content_object NEW_LINE DEDENT return content_object NEW_LINE DEDENT
CatalogGenConfig getCatalogGenConfig ( ) { CatalogGenConfig catalogGenConfig = new CatalogGenConfig ( ) ; return catalogGenConfig ; }
DatasetSource getDatasetSource ( JDOMElement element ) { if ( element == null ) { return null ; } if ( element instanceof DatasetSource ) { return ( ( DatasetSource ) element ) . getDatasetSource ( ) ; } return null ; }
DatasetNamer getDatasetNamer ( ) { if ( datasetNamer == null ) { throw new IllegalArgumentException ( " DatasetNamer is null " ) ; } return datasetNamer ; }
DatasetFilter getDatasetFilter ( JDOMElement element ) { if ( element == null ) { return null ; } DatasetFilter filter = new DatasetFilter ( ) ; filter . setDatasetFilter ( element ) ; filter . setDatasetFilter ( element ) ; return filter ; }
def def get_result_service ( self ) : NEW_LINE INDENT resultService = self . resultService NEW_LINE if isinstance ( resultService , JDOMElement ) : NEW_LINE INDENT return resultService NEW_LINE DEDENT else : NEW_LINE INDENT return resultService NEW_LINE DEDENT DEDENT
create_catalog_gen_config ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_catalog_gen_config ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_dataset_source ( self , element ) : NEW_LINE INDENT if isinstance ( element , DatasetSource ) : NEW_LINE INDENT return element NEW_LINE DEDENT elif isinstance ( element , DatasetSource ) : NEW_LINE INDENT return element NEW_LINE DEDENT return None NEW_LINE DEDENT
create_dataset_namer ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return DatasetNamer NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def createDatasetFilter ( self , JDOM element ) : NEW_LINE INDENT if isinstance ( element , DatasetFilter ) : NEW_LINE INDENT return DatasetFilter ( element ) NEW_LINE DEDENT def createDatasetFilter ( element ) : NEW_LINE INDENT return DatasetFilter ( element ) NEW_LINE DEDENT def createDatasetFilter ( element ) : NEW_LINE INDENT return DatasetFilter ( element ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def _get_value ( self , name ) : NEW_LINE INDENT if not self . store . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . store . get ( name ) NEW_LINE DEDENT DEDENT
def def def def _create__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def public public public public public public static void build ( self ) : NEW public static void build ( self ) { if ( self . _get_config ( ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_menu ( self , menu ) : NEW_LINE INDENT self . menu . append ( menu ) NEW_LINE return self NEW_LINE DEDENT
add_parameters ( self , table ) : NEW_LINE INDENT parameters = [ ] NEW_LINE for param in table : NEW_LINE INDENT parameters . append ( param ) NEW_LINE DEDENT parameters = [ ] NEW_LINE for param in parameters : NEW_LINE INDENT parameters . append ( param ) NEW_LINE DEDENT return parameters NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_parameter_for_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . params [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
String read ( InputStream inputStream ) throws IOException { String result = null ; try { result = new String ( inputStream . read ( ) ) ; } catch ( IOException e ) { throw new IOException ( e ) ; } return result ; }
def read_bytes ( self , input_stream ) : NEW_LINE INDENT if isinstance ( input_stream , bytes ) : NEW_LINE INDENT return input_stream . read ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return input_stream . read ( ) NEW_LINE DEDENT DEDENT
replace_template_parameters ( self , template_parameters , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT template_parameters [ ' template ' ] = template_parameters [ ' template ' ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT template_parameters [ ' template ' ] = filename NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
boolean save ( ) { if ( editComponent != null ) { return editComponent . save ( ) ; } if ( editComponent != null ) { return editComponent . save ( ) ; } return false ; }
def def def _get_integer_input_field ( self ) : NEW_LINE INDENT return self . _get_integer_input_field ( ) NEW_LINE DEDENT def _get_integer_input_field ( self ) : NEW_LINE INDENT return self . _input_field ( ) NEW_LINE DEDENT
read_bit_map_array ( self ) : NEW_LINE INDENT if self . bit_map_array is None : NEW_LINE INDENT self . bit_map_array = [ ] NEW_LINE DEDENT return self . bit_map_array NEW_LINE DEDENT
allow_calling_from_outside ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . allow_calling_from_outside ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . allow_calling_from_outside ( ) NEW_LINE DEDENT DEDENT
debug_flags ( self , flags ) : NEW_LINE INDENT self . _flags = flags NEW_LINE return self . _flags NEW_LINE DEDENT
decompose_name ( name ) : NEW_LINE INDENT try : NEW_LINE INDENT return decompose_name ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return decompose_name ( name ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static boolean is_netcdf_char_array ( char [ ] array ) { if ( array == null ) { return false ; } if ( array . length == 0 ) { return false ; } return true ; }
add_dimension ( self , dimension ) : NEW_LINE INDENT if dimension . name == self . name : NEW_LINE INDENT self . name = dimension . name NEW_LINE self . length = dimension . length NEW_LINE DEDENT else : NEW_LINE INDENT self . length = dimension . length NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static boolean isUnsigned ( int type ) { if ( type == 0 ) { return false ; } if ( type == 1 ) { return true ; } if ( type == 2 ) { return true ; } return false ; }
def def get_data ( self ) : def def def def def def _ def def def def get_ def def def def get_ def def def get_ def def def get_ def def def def get_ def def _ def get_ def def def get_ def _ def _
static ImageIcon getImage ( String filename ) { ImageIcon image = new ImageIcon ( new File ( filename ) ) ; if ( image . exists ( ) ) { return image ; } else { return null ; } }
make_gif ( self , gif_file ) : NEW_LINE INDENT if isinstance ( gif_file , str ) : NEW_LINE INDENT return gif_file NEW_LINE DEDENT elif isinstance ( gif_file , str ) : NEW_LINE INDENT return gif_file NEW_LINE DEDENT else : NEW_LINE INDENT return gif_file NEW_LINE DEDENT DEDENT
make_gif ( self ) : NEW_LINE INDENT cursor = self . get_cursor ( ) NEW_LINE if cursor is None : NEW_LINE INDENT cursor = self . get_cursor ( ) NEW_LINE DEDENT if cursor is None : NEW_LINE INDENT cursor = self . get_cursor ( ) NEW_LINE DEDENT if cursor is None : NEW_LINE INDENT cursor = self . get_cursor ( ) NEW_LINE DEDENT return cursor NEW_LINE DEDENT
static int [ ] getTotalNelems ( RandomAccessFile raf ) throws IOException { int [ ] totalNelems = new int [ Layout . getTotalNelems ( ) ] ; raf . readFully ( totalNelems ) ; return totalNelems ; }
static PositioningDataInputStream createPositioningDataInputStream ( ) { PositioningDataInputStream positioningDataInputStream = new PositioningDataInputStream ( ) ; positioningDataInputStream . read ( ) ; positioningDataInputStream . read ( ) ; positioningDataInputStream . read ( ) ; return positioningDataInputStream ; }
static ByteBuffer createByteBuffer ( int size ) { ByteBuffer buf = ByteBuffer . allocate ( size ) ; buf . putInt ( 0 ) ; buf . putInt ( size ) ; buf . putInt ( 0 ) ; buf . putInt ( size ) ; buf . putInt ( 0 ) ; buf . putInt ( size ) ; buf . putInt ( size ) ; buf . putInt ( size ) ; return buf ; }
static PrimitiveArray createPrimitiveArray ( int size , int type ) { PrimitiveArray primitiveArray = new PrimitiveArray ( size , type ) ; if ( size == 0 ) { return primitiveArray ; } if ( type == 0 ) { return primitiveArray ; } return primitiveArray ; }
convert_byte_array ( byte [ ] array ) : NEW_LINE INDENT if isinstance ( array , str ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
convert_char_to_byte_array ( self , char_array ) : NEW_LINE INDENT return self . _convert_char_to_byte_array ( char_array ) NEW_LINE DEDENT
convert_byte_array_to_char_array ( byte_array ) : NEW_LINE INDENT if isinstance ( byte_array , str ) : NEW_LINE INDENT return byte_array NEW_LINE DEDENT else : NEW_LINE INDENT return byte_array NEW_LINE DEDENT DEDENT
read_member_data ( self ) : NEW_LINE INDENT if self . _member_data is not None : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT return self . _member_data NEW_LINE DEDENT
createView ( self , view ) : NEW_LINE INDENT if view is None : NEW_LINE INDENT return None NEW_LINE DEDENT return view NEW_LINE DEDENT
static String [ ] getMemberDatabuffer ( Class < ? > clazz ) { return getMemberDatabuffer ( clazz . getName ( ) ) ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
StructureMembers getStructureMembers ( ) { StructureMembers members = new StructureMembers ( ) ; return members ; }
add_dimension ( self , dimension ) : NEW_LINE INDENT if dimension is None : NEW_LINE INDENT dimension = self . add_dimension ( dimension ) NEW_LINE DEDENT return dimension NEW_LINE DEDENT
a CrawlableDataset for the given path using the CrawlableDataset implementation indicated by the given class name .
normalize ( self , path ) : NEW_LINE INDENT if path is None : NEW_LINE INDENT return self . _normalize ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _normalize ( path ) NEW_LINE DEDENT DEDENT
enhance ( self ) : NEW_LINE INDENT if self . enhance is None : NEW_LINE INDENT self . enhance = True NEW_LINE DEDENT else : NEW_LINE INDENT self . enhance = False NEW_LINE DEDENT return self . enhance NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
finish ( self ) : NEW_LINE INDENT if self . finished : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def override_dataset_factory ( self ) : NEW_LINE INDENT if self . _dataset_factory : NEW_LINE INDENT return self . _dataset_factory NEW_LINE DEDENT else : NEW_LINE INDENT return self . _dataset_factory NEW_LINE DEDENT DEDENT
def _resource_control_attributes ( self ) : NEW_LINE INDENT return self . _resource_control_attributes NEW_LINE DEDENT
add_point ( self , line , point ) : NEW_LINE INDENT if point is None : NEW_LINE INDENT return NEW_LINE DEDENT if point is not None : NEW_LINE INDENT self . points . append ( point ) NEW_LINE DEDENT DEDENT
get_upper_bound_box ( self ) : NEW_LINE INDENT if self . bounding_box is None : NEW_LINE INDENT return self . bounding_box NEW_LINE DEDENT return self . bounding_box NEW_LINE DEDENT
get_lower_bound_box ( self , line ) : NEW_LINE INDENT bounding_box = self . bounding_box NEW_LINE if bounding_box is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return bounding_box NEW_LINE DEDENT DEDENT
boolean isValid ( DatasetFilter filter ) { if ( filter == null ) { return false ; } if ( filter . isValid ( ) ) { return true ; } return false ; }
filter ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def close ( fdPoint ) : NEW_LINE INDENT fdPoint = fdPoint . copy ( ) NEW_LINE fdPoint . close ( ) NEW_LINE fdPoint = fdPoint . copy ( ) NEW_LINE DEDENT
parseConstraint ( self , constraint ) : NEW_LINE INDENT if isinstance ( constraint , Constraint ) : NEW_LINE INDENT return parseConstraint ( constraint ) NEW_LINE DEDENT else : NEW_LINE INDENT return parseConstraint ( constraint ) NEW_LINE DEDENT DEDENT
evaluate ( self , Clause vector ) : NEW_LINE INDENT if len ( vector ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( vector ) == 1 : NEW_LINE INDENT return vector [ 0 ] NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
print_all_Clauses ( self ) : NEW_LINE INDENT self . print_all_Clauses ( ) NEW_LINE self . print_all_Clauses ( ) NEW_LINE DEDENT
def def read_metadata ( self ) : NEW_LINE INDENT structMetadata = self . _read_metadata ( ) NEW_LINE return self . _read_metadata ( structMetadata ) NEW_LINE DEDENT
def def def convert to shared dimensions ( self ) : public static int [
get_dimension ( self , dimension ) : NEW_LINE INDENT if dimension is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return dimension NEW_LINE DEDENT DEDENT
recurse ( self , name ) : NEW_LINE INDENT if self . name == name : NEW_LINE INDENT self . recurse ( name ) NEW_LINE DEDENT else : NEW_LINE INDENT self . recurse ( name ) NEW_LINE DEDENT DEDENT
get_inline_content ( self ) : NEW_LINE INDENT if self . inline_content is None : NEW_LINE INDENT return self . inline_content NEW_LINE DEDENT else : NEW_LINE INDENT return self . inline_content NEW_LINE DEDENT DEDENT
resolve ( self , uri ) : NEW_LINE INDENT if isinstance ( uri , str ) : NEW_LINE INDENT return uri NEW_LINE DEDENT if isinstance ( uri , str ) : NEW_LINE INDENT return uri NEW_LINE DEDENT return None NEW_LINE DEDENT
construct_input_fields ( cls ) : NEW_LINE INDENT input_fields = [ ] NEW_LINE for field in cls . input_fields : NEW_LINE INDENT input_fields . append ( field ) NEW_LINE DEDENT return input_fields NEW_LINE DEDENT

static void invalidate ( LayoutManager layoutManager ) { if ( layoutManager != null ) { layoutManager . invalidate ( ) ; } }
void removeComponent ( Component component ) { if ( component != null && component . getClass ( ) == component . getClass ( ) ) { component . getClass ( ) . remove ( component . getClass ( ) ) ; } }
static Dimension minimumSize ( Container container ) { Dimension minimumSize = null ; if ( container != null ) { minimumSize = container . getMinimumSize ( ) ; } return minimumSize ; }
def _lays_out_container ( self , container ) : NEW_LINE INDENT if self . _container_name is not None : NEW_LINE INDENT return self . _container_name NEW_LINE DEDENT if self . _container_name is not None : NEW_LINE INDENT return self . _container_name NEW_LINE DEDENT DEDENT
if this CoordinateSystem can be made into a RadialCoordSys .
get_maximum_radial_distance ( self ) : NEW_LINE INDENT if self . radius is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . radius NEW_LINE DEDENT DEDENT

geographic Earth coordinates to satellite view angle coordinate system in CGMS Normalized Geostationary Projection .
satellite view angle coordinates known as the intermeidate coordinates in the CGMS Normalized Geostationary Projection to geographic Earth coordinates .
view angle coordinates in the GOES scan geometry frame to view angle coordinates in the GEOS scan geometry frame .
sweep_angle_axis ( self ) : NEW_LINE INDENT sweep_angle_axis = self . sweep_angle_axis NEW_LINE if sweep_angle_axis : NEW_LINE INDENT return sweep_angle_axis NEW_LINE DEDENT return None NEW_LINE DEDENT
sweep_angle_axis ( sweep_angle_axis ) : NEW_LINE INDENT sweep_angle_axis = sweep_angle_axis [ 0 ] NEW_LINE return sweep_angle_axis [ 1 ] NEW_LINE DEDENT
CoordinateTimeAbstract add ( CoordinateTimeAbstract coordinateTimeAbstract ) { if ( coordinateTimeAbstract == null ) { throw new IllegalArgumentException ( " CoordinateTimeAbstract is null " ) ; } if ( coordinateTimeAbstract . isEmpty ( ) ) { throw new IllegalArgumentException ( " CoordinateTimeAbstract is empty " ) ; } return coordinateTimeAbstract ; }
write ( self , data ) : NEW_LINE INDENT self . _write ( data ) NEW_LINE self . _write ( ) NEW_LINE DEDENT
write_point ( self , point ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_point ( point ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write_point ( point ) NEW_LINE DEDENT DEDENT
get_sequence ( self , type ) : NEW_LINE INDENT return self . _get_sequence ( type ) NEW_LINE DEDENT
get_full_heirarchical_name ( self ) : NEW_LINE INDENT return self . _get_full_heirarchical_name ( ) NEW_LINE DEDENT

get_access_element ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _access_element NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _access_element NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_metadata_elements ( self , type ) : NEW_LINE INDENT metadata = { } NEW_LINE for key in self . metadata . keys ( ) : NEW_LINE INDENT metadata [ key ] = self . metadata [ key ] NEW_LINE DEDENT return metadata NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_variables_from_vocabulary ( self , vocabulary ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_variables_from_vocabulary ( vocabulary ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def escape_path ( path ) : NEW_LINE INDENT if isinstance ( path , basestring ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path . encode ( ' utf - 8' ) NEW_LINE DEDENT DEDENT
linear_average ( self , values ) : NEW_LINE INDENT if len ( values ) == 1 : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT DEDENT
def add ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return array NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT return array [ 0 ] NEW_LINE DEDENT
compute_RHO_parameters ( self , params ) : NEW_LINE INDENT if params is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return params NEW_LINE DEDENT DEDENT
get_detail_information ( self ) : NEW_LINE INDENT if self . detail_information is None : NEW_LINE INDENT self . detail_information = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . detail_information = [ ] NEW_LINE DEDENT return self . detail_information NEW_LINE DEDENT
def make_part_structure ( self , part_structure ) : NEW_LINE INDENT part_structure = { } NEW_LINE for part in part_structure . values ( ) : NEW_LINE INDENT part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part_structure [ part
def def def def make_missing_missing_variable ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def def def get_missing_missing_missing_missing ( self ) : NEW__python____python____python____python____python____python____python____python____python____python__ def def def def def def def def get_missing_missing ( self ) : NEW def get_missing_missing ( self ) : NEW def get_missing_missing ( self ) : NEW__python__ def get_missing_missing ( self ) : NEW def get_missing ( self ) : NEW_LINE def get_missing_missing ( self ) : NEW_LINE
static GempakParmaeter getGempakParmaeter ( ) { GempakParmaeter g = new GempakParmaeter ( ) ; g . setGempakParmaeter ( g ) ; return g ; }
def def def add_global_global_attributes ( self ) : NEW_LINE INDENT global attributes = { } NEW_LINE for type in self . types : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT for type in types : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT for type in types : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types ) : NEW_LINE INDENT if not isinstance ( type , types ) : NEW_LINE INDENT if isinstance ( type , types )
size ( self ) : NEW_LINE INDENT return self . _size NEW_LINE DEDENT
get_array ( self , type , length ) : NEW_LINE INDENT if isinstance ( length , int ) : NEW_LINE INDENT length = int ( length ) NEW_LINE DEDENT if isinstance ( length , int ) : NEW_LINE INDENT length = int ( length ) NEW_LINE DEDENT if isinstance ( length , int ) : NEW_LINE INDENT length = int ( length ) NEW_LINE DEDENT return length NEW_LINE DEDENT
post_reduction_state ( self , reduction_state ) : NEW_LINE INDENT if reduction_state is None : NEW_LINE INDENT reduction_state = { } NEW_LINE DEDENT reduction_state = reduction_state . copy ( ) NEW_LINE reduction_state . update ( reduction_state ) NEW_LINE reduction_state . update ( reduction_state ) NEW_LINE return reduction_state NEW_LINE DEDENT
def def generate_error_message ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _generate_error_message ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _generate_error_message ( ) NEW_LINE DEDENT DEDENT
def def _parse_rule ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_rule ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
def def trim ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _trim ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _trim ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
read ( self ) : NEW_LINE INDENT databuffer = self . databuffer NEW_LINE if len ( databuffer ) == 0 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT if len ( databuffer ) == 1 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT elif len ( databuffer ) == 2 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT elif len ( databuffer ) == 3 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT else : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT DEDENT
read_chunk ( self , input_stream ) : NEW_LINE INDENT chunk = self . _read_chunk ( input_stream ) NEW_LINE if not chunk : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT return chunk NEW_LINE DEDENT
def def handle ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _handle_calendars ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _handle_calendars ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _handle_calendars ( ) NEW_LINE DEDENT DEDENT
read_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return file . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
transfer_objects ( self , src_group , target_group ) : NEW_LINE INDENT src_group = src_group . copy ( ) NEW_LINE target_group = target_group . copy ( ) NEW_LINE src_group = src_group . copy ( ) NEW_LINE target_group = target_group . copy ( ) NEW_LINE DEDENT
stn_file ( self , filename ) : NEW_LINE INDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise ValueError ( " stn file must be in the same directory " ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise ValueError ( " stn file must be in the same directory " ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise ValueError ( " stn file must be in the same directory " ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise ValueError ( " stn file must be in the same directory " ) NEW_LINE DEDENT return os . path . abspath ( filename ) NEW_LINE DEDENT
def def _get_data_file_name ( self ) : NEW_LINE INDENT return self . _get_data ( ) NEW_LINE DEDENT def _get_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_data ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_beginning_index ( self , geometry ) : NEW_LINE INDENT if geometry is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return geometry NEW_LINE DEDENT DEDENT
get_end_index ( self , geometry ) : NEW_LINE INDENT if geometry is None : NEW_LINE INDENT return None NEW_LINE DEDENT return geometry . getEnd_index ( ) NEW_LINE DEDENT
create_runtime_collection ( runtime ) : NEW_LINE INDENT runtime_collection = [ ] NEW_LINE runtime_collection . append ( runtime ) NEW_LINE runtime_collection . append ( runtime ) NEW_LINE return runtime_collection NEW_LINE DEDENT
set_current_value ( editComponent ) : NEW_LINE INDENT if editComponent is not None : NEW_LINE INDENT editComponent . set_current_value ( editComponent ) NEW_LINE DEDENT else : NEW_LINE INDENT editComponent . set_current_value ( editComponent ) NEW_LINE DEDENT DEDENT
get_entity_id ( self , entity_id ) : NEW_LINE INDENT if entity_id : NEW_LINE INDENT return entity_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
compare_api ( self , api ) : NEW_LINE INDENT if api is not None : NEW_LINE INDENT return api NEW_LINE DEDENT if api is not None : NEW_LINE INDENT return api NEW_LINE DEDENT if api is not None : NEW_LINE INDENT return api NEW_LINE DEDENT DEDENT
unit_string ( self , unit_string ) : NEW_LINE INDENT if unit_string : NEW_LINE INDENT return unit_string NEW_LINE DEDENT else : NEW_LINE INDENT return unit_string NEW_LINE DEDENT DEDENT
clean_strings ( self ) : NEW_LINE INDENT if not self . _strings : NEW_LINE INDENT self . _strings = [ ] NEW_LINE DEDENT return self . _strings NEW_LINE DEDENT
unitless ( self , unit ) : NEW_LINE INDENT if not self . is_unitless ( unit ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_unitless ( unit ) : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT

def def def get_compound_id ( self ) : NEW_LINE INDENT return self . _get_compound_id ( ) NEW_LINE DEDENT def get_variables ( self ) : NEW_LINE INDENT return self . _get_variables ( ) NEW_LINE DEDENT
assign_dods ( self , dodsV ) : NEW_LINE INDENT if isinstance ( dodsV , dict ) : NEW_LINE INDENT dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV = dodsV . copy ( ) NEW_LINE dodsV .
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
findDodsV ( self , dataVlist ) : NEW_LINE INDENT ddsVlist = [ ] NEW_LINE for ddsV in dataVlist : NEW_LINE INDENT ddsVlist . append ( ddsV ) NEW_LINE DEDENT return ddsVlist NEW_LINE DEDENT
def child ( self , index ) : NEW_LINE INDENT if self . index == index : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_parent_group ( self ) : NEW_LINE INDENT group = self . parent_group NEW_LINE if group is None : NEW_LINE INDENT return None NEW_LINE DEDENT return group NEW_LINE DEDENT
get_ith_dimension ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _ith_dimension NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_unit_string ( self , value ) : NEW_LINE INDENT if value : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
shape ( self ) : NEW_LINE INDENT shape = self . shape NEW_LINE if isinstance ( shape , Section ) : NEW_LINE INDENT return shape NEW_LINE DEDENT else : NEW_LINE INDENT return shape NEW_LINE DEDENT DEDENT
create_slice ( self ) : NEW_LINE INDENT index = self . index NEW_LINE self . index = self . index NEW_LINE self . index = self . index NEW_LINE self . index = self . index NEW_LINE self . index = self . index NEW_LINE return self . index NEW_LINE DEDENT
static boolean isPublic ( ) { if ( isPublic ( ) ) { return true ; } else { return false ; } }
read_memory_resident ( self , netcdf_file ) : NEW_LINE INDENT try : NEW_LINE INDENT data = netcdf_file . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
def def def def def get ( String value ) : public static String getString ( String value , String value ) { if ( value != null ) { if ( value != null ) { if ( value . length == 1 ) { return value . length ( ) == 1 ? String . valueOf ( value ) : String . valueOf ( value ) ; } else if ( value . length ( value . length ( ) == 1 ) { return String . valueOf ( value ) ; } else if ( value . length ( ) == 1 ) { return String . valueOf ( value ) ; } else { return String . valueOf ( value ) ; } } } else { return value ; } } }
def def public public static final void setVariables ( final String name , final String value ) { if ( value == null ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } else { return ; } } }
validate_section ( self , section ) : NEW_LINE INDENT if not section . isValidated ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if section . isValidated ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if section . isValidated ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
static String toString ( Variable variable ) { if ( variable == null ) { return " " ; } return variable . toString ( ) ; }
__repr__ ( self ) : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT
set_data_type ( self , data_type ) : NEW_LINE INDENT self . data_type = data_type NEW_LINE DEDENT
_set_dimensions ( self , dimensions ) : NEW_LINE INDENT if dimensions is None : NEW_LINE INDENT raise ValueError ( " Dimensions must be a list of Dimensions . " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " Dimensions must be a list of Dimensions . " ) NEW_LINE DEDENT DEDENT
recalculate_shape ( self , shape ) : NEW_LINE INDENT self . shape = shape NEW_LINE return self . shape NEW_LINE DEDENT
def setDimensions ( self , dimensions ) : NEW_LINE INDENT self . dimensions = dimensions NEW_LINE DEDENT
void reset ( ) { super . reset ( ) ; if ( dimensionArray != null ) { dimensionArray . reset ( ) ; } }
replace_dimension ( self , dimension ) : NEW_LINE INDENT if isinstance ( dimension , Dimension ) : NEW_LINE INDENT return self . replace_dimension ( dimension ) NEW_LINE DEDENT return self . replace_dimension ( dimension ) NEW_LINE DEDENT
set_data_cache ( self , data_cache ) : NEW_LINE INDENT self . data_cache = data_cache NEW_LINE DEDENT
get_dimensions ( self ) : NEW_LINE INDENT parents = self . parents NEW_LINE if parents is not None : NEW_LINE INDENT return parents NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
set_earth_location ( self ) : NEW_LINE INDENT self . _earth_location = self . _earth_location NEW_LINE self . _earth_location = self . _earth_location NEW_LINE DEDENT
add_all_runs ( self ) : NEW_LINE INDENT self . add_runs ( ) NEW_LINE self . add_runs ( ) NEW_LINE DEDENT
get_all_datasets ( self ) : NEW_LINE INDENT return self . _get_all_datasets ( ) NEW_LINE DEDENT
def is_synthetic_path ( path ) : NEW_LINE INDENT return isinstance ( path , SyntheticPath ) NEW_LINE DEDENT

def def def build_metadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _build_metadata ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _build_metadata ( ) NEW_LINE DEDENT DEDENT
construct_sequence_type ( self , vlen ) : NEW_LINE INDENT if isinstance ( vlen , SequenceType ) : NEW_LINE INDENT return self . construct_sequence_type ( vlen ) NEW_LINE DEDENT elif isinstance ( vlen , SequenceType ) : NEW_LINE INDENT return self . construct_sequence_type ( vlen ) NEW_LINE DEDENT return self . construct_sequence_type ( vlen ) NEW_LINE DEDENT
def def assign_dimensions ( self , dimensions ) : NEW_LINE INDENT if dimensions is not None : NEW_LINE INDENT return self . _assign_dimensions ( dimensions ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _assign_dimensions ( dimensions ) NEW_LINE DEDENT DEDENT
find_enum_decl ( self , d ) : NEW_LINE INDENT s = self . _get_enum_decl ( d ) NEW_LINE if s is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return s NEW_LINE DEDENT DEDENT
def _strip_vlen_dimensions ( self , dimensions ) : NEW_LINE INDENT if len ( dimensions ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
extract_messages ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _extract_messages ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
print_data ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_affine_transform ( self ) : NEW_LINE INDENT if self . affine_transform is None : NEW_LINE INDENT return self . affine_transform NEW_LINE DEDENT return self . affine_transform NEW_LINE DEDENT
rotate_aspect_ratio ( self , aspect_ratio ) : NEW_LINE INDENT if aspect_ratio is not None : NEW_LINE INDENT return self . _rotate_aspect_ratio ( aspect_ratio ) NEW_LINE DEDENT return self . _rotate_aspect_ratio ( aspect_ratio ) NEW_LINE DEDENT
get_map_area ( self ) : NEW_LINE INDENT return self . _get_map_area ( ) NEW_LINE DEDENT
convert_world_to_display_point ( self , world_coordinate ) : NEW_LINE INDENT if world_coordinate is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return world_coordinate NEW_LINE DEDENT DEDENT
set_center ( self , center ) : NEW_LINE INDENT if center is not None : NEW_LINE INDENT self . center = center NEW_LINE DEDENT DEDENT
zoom ( self , width , height ) : NEW_LINE INDENT self . width = width NEW_LINE self . height = height NEW_LINE return self NEW_LINE DEDENT
fit ( self , bounding_box ) : NEW_LINE INDENT if bounding_box is not None : NEW_LINE INDENT return bounding_box NEW_LINE DEDENT if bounding_box is None : NEW_LINE INDENT return None NEW_LINE DEDENT if bounding_box is not None : NEW_LINE INDENT return bounding_box NEW_LINE DEDENT DEDENT

remove_listener ( self , listener ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _listeners . remove ( listener ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void remove ( Listener listener ) { if ( listener != null ) { try { listener . remove ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_command ( self , command ) : NEW_LINE INDENT if not isinstance ( command , str ) : NEW_LINE INDENT raise TypeError ( " command must be a string . " ) NEW_LINE DEDENT return command NEW_LINE DEDENT
parse_command_string ( self , command_string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_command_string ( command_string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_command_string ( command_string ) NEW_LINE DEDENT DEDENT
print_data ( self , Variable ) : NEW_LINE INDENT if self . data is None : NEW_LINE INDENT self . data = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . data . append ( self . data ) NEW_LINE DEDENT DEDENT
print_section ( self , variable ) : NEW_LINE INDENT print ( " % s : % s " % ( self . name , variable ) ) NEW_LINE print ( " % s : % s " % ( self . name , variable ) ) ; DEDENT
printStructureData ( StructureData structureData ) : NEW_LINE INDENT if isinstance ( structureData , StructureData ) : NEW_LINE INDENT printStructureData ( structureData ) NEW_LINE DEDENT else : NEW_LINE INDENT printStructureData ( structureData ) NEW_LINE DEDENT DEDENT
undifferentiated_sequence ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return array NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT return array NEW_LINE DEDENT
print_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT print_array ( self , array ) NEW_LINE DEDENT else : NEW_LINE INDENT print_array ( self , array ) NEW_LINE DEDENT DEDENT
writeNcML ( self , file ) : NEW_LINE INDENT logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info ( " Writing NcML file . . . " ) NEW_LINE logger . info (
read_variable ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_variable ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public CoordinateTransform getParameter ( String name ) { CoordinateTransform parameter = new CoordinateTransform ( ) ; parameter . setName ( name ) ; parameter . setName ( name ) ; return parameter . getParameter ( name ) ; }
log ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT logger . info ( message ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . exception ( e ) NEW_LINE DEDENT DEDENT
public static final String [ ] getSupportedTypes ( ) { return new String [ ] { " basetype " , " basetype " } ; }
public public static VerticalCoordinate createPositiveUpVerticalCoordinate ( ) { return new PositiveUpVerticalCoordinate ( ) ; }
def convert_numeric ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , float ) : NEW_LINE INDENT return self . convert_numeric ( unit ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . convert_numeric ( unit ) NEW_LINE DEDENT DEDENT
get_label_for_quantity ( self , quantity ) : NEW_LINE INDENT if quantity == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if quantity == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT

static UnsignedLong read ( int nb ) { if ( nb < 0 ) { throw new IllegalArgumentException ( " nb < 0 : " + nb ) ; } return new UnsignedLong ( nb ) ; }
read_nb_bits ( nb_bits ) : NEW_LINE INDENT if nb_bits == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if nb_bits == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return nb_bits NEW_LINE DEDENT
open_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def get_das ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _das NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _das NEW_LINE DEDENT DEDENT


convert_projection_coordinates ( self , projection_coordinates ) : NEW_LINE INDENT if isinstance ( projection_coordinates , LatLonPoint ) : NEW_LINE INDENT return projection_coordinates NEW_LINE DEDENT if isinstance ( projection_coordinates , LatLonPoint ) : NEW_LINE INDENT return projection_coordinates NEW_LINE DEDENT return projection_coordinates NEW_LINE DEDENT
match_catalog ( self , catalog ) : NEW_LINE INDENT if not self . match_catalog ( catalog ) : NEW_LINE INDENT return None NEW_LINE DEDENT return self . match_catalog ( catalog ) NEW_LINE DEDENT
def def def _get_days def _get_days def _get_days ( self ) : NEW_LINE INDENT return self . _get_days ( ) NEW_LINE DEDENT def _get_days ( self ) : NEW_LINE INDENT return self . _get_days ( ) NEW_LINE DEDENT def _get_days ( self ) : NEW_LINE INDENT return self . _get_days ( ) NEW_LINE DEDENT
static boolean isValidDMSPFile ( String file ) { if ( file == null ) { return false ; } if ( file . length ( ) == 0 ) { return false ; } return true ; }
parse_satellite_info ( self , header ) : NEW_LINE INDENT satellite_info = { } NEW_LINE satellite_info . update ( header ) NEW_LINE satellite_info . update ( header ) NEW_LINE satellite_info . update ( header ) NEW_LINE return satellite_info NEW_LINE DEDENT
parse_sensor_info ( self , header ) : NEW_LINE INDENT sensor_info = { } NEW_LINE for key in header : NEW_LINE INDENT sensor_info [ key ] = header [ key ] NEW_LINE DEDENT sensor_info = { } NEW_LINE for key in sensor_info : NEW_LINE INDENT sensor_info [ key ] = header [ key ] NEW_LINE DEDENT return sensor_info NEW_LINE DEDENT
read_xml_document ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT root = etree . fromstring ( url ) NEW_LINE DEDENT except etree . XMLSyntaxError : NEW_LINE INDENT root = etree . fromstring ( url ) NEW_LINE DEDENT return root NEW_LINE DEDENT
static boolean isXMLSafe ( String text ) { if ( text == null ) { return false ; } if ( text . length ( ) == 0 ) { return false ; } if ( text . length ( ) == 1 ) { return true ; } return false ; }
static String translate ( String str ) { if ( str != null && str . length ( ) > 0 ) { return str . substring ( 0 , str . length ( ) - 1 ) ; } else { return " " ; } }
escape ( self , expression ) : NEW_LINE INDENT return self . _escape ( expression ) NEW_LINE DEDENT
unescape ( self , expression ) : NEW_LINE INDENT return self . _unescape ( expression ) NEW_LINE DEDENT
unescape ( self , url ) : NEW_LINE INDENT return self . _unescape ( url ) NEW_LINE DEDENT
_escape_url ( self , url ) : NEW_LINE INDENT if url . startswith ( ' / ' ) : NEW_LINE INDENT return url NEW_LINE DEDENT else : NEW_LINE INDENT return url NEW_LINE DEDENT DEDENT
add_global_attributes ( self , attributes ) : NEW_LINE INDENT self . _global_attributes = attributes NEW_LINE return self NEW_LINE DEDENT
public public static short swap ( byte [ ] bytes , int offset , int offset ) { if ( offset < 0 ) { return - 1 ; } else if ( offset < 0 ) { return - 1 ; } else if ( offset < 0 ) { return - 1 ; } else if ( offset < 0 ) { return - 1 ; } else { return - 1 ; } }
static int reversing ( byte [ ] bytes , int offset ) { if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset > 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } return offset ; }
static double reverse ( byte [ ] bytes , int offset ) { if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset < 0 : " + offset ) ; } return reverse ( bytes , offset ) ; }
def def reversing_float ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reversing_float ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _reversing_float ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _reversing_float ( ) NEW_LINE DEDENT DEDENT
reverse ( self , double ) : NEW_LINE INDENT if isinstance ( double , float ) : NEW_LINE INDENT return double . reverse ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return double NEW_LINE DEDENT DEDENT
a short to an array of 2 bytes .
convert_int_to_array ( self , int_array ) : NEW_LINE INDENT if isinstance ( int_array , int ) : NEW_LINE INDENT return int_array NEW_LINE DEDENT elif isinstance ( int_array , int_array ) : NEW_LINE INDENT return int_array NEW_LINE DEDENT else : NEW_LINE INDENT return int_array NEW_LINE DEDENT DEDENT
static long bytesToLong ( byte [ ] bytes ) { if ( bytes == null ) { throw new NullPointerException ( " bytes " ) ; } return bytesToLong ( bytes ) ; }

write_xml_representation ( self , xml ) : NEW_LINE INDENT if isinstance ( xml , str ) : NEW_LINE INDENT return xml NEW_LINE DEDENT elif isinstance ( xml , str ) : NEW_LINE INDENT return xml NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
make_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT array = [ array ] NEW_LINE DEDENT return array NEW_LINE DEDENT
def Initiate_response ( self ) : NEW_LINE INDENT response = self . _get_response ( ) NEW_LINE if response is not None : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
writeFeatures ( self , featureList ) : NEW_LINE INDENT features = [ ] NEW_LINE for feature in featureList : NEW_LINE INDENT features . append ( feature ) NEW_LINE DEDENT for feature in features : NEW_LINE INDENT features . append ( feature ) NEW_LINE DEDENT return features NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def add_coordinate_system ( self , coordinate_system ) : NEW_LINE INDENT if coordinate_system is not None : NEW_LINE INDENT return coordinate_system NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def get_coordinate_transform ( self ) : NEW_LINE INDENT return self . coordinate_transform NEW_LINE DEDENT
get_index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . index NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
exit ( self ) : NEW_LINE INDENT if self . process is not None : NEW_LINE INDENT self . process . terminate ( ) NEW_LINE self . process = None NEW_LINE DEDENT DEDENT
get_cached_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cached_file NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( filename ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . cache . get ( filename ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_last_modified_time ( self ) : NEW_LINE INDENT if self . last_modified_time : NEW_LINE INDENT self . last_modified_time = self . last_modified_time NEW_LINE DEDENT return self . last_modified_time NEW_LINE DEDENT
calculateBearing ( self , points ) : NEW_LINE INDENT if len ( points ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif len ( points ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif len ( points ) == 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT
calculateBearing ( self ) : NEW_LINE INDENT return self . _calculateBearing ( ) NEW_LINE DEDENT
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; System . out . println ( args [ i ] ) ; } }
position ( self , point , azimuth , distance ) : NEW_LINE INDENT if distance == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance > 1 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance > 1 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance < 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif distance > 1 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
position ( self , point , azimuth , distance ) : NEW_LINE INDENT if distance == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if azimuth == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if azimuth == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if distance < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if distance < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
static Position getPosition ( int azimuth , int distance ) { if ( azimuth < 0 ) { throw new IllegalArgumentException ( " azimuth < 0 . " ) ; } if ( distance < 0 ) { throw new IllegalArgumentException ( " distance < 0 . " ) ; } return new Position ( azimuth , distance ) ; }
load_picture ( self , filename = None , url = None ) : NEW_LINE INDENT if url is None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT else : NEW_LINE INDENT url = self . url NEW_LINE DEDENT if url is None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT if url is not None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT if url is not None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT if url is not None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT if url is not None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT return url NEW_LINE DEDENT
load_picture ( self , filename = None , url = None ) : NEW_LINE INDENT if filename is None : NEW_LINE INDENT filename = self . filename NEW_LINE DEDENT if url is None : NEW_LINE INDENT url = self . url NEW_LINE DEDENT else : NEW_LINE INDENT url = self . url NEW_LINE DEDENT return self . _load_picture ( filename , url ) NEW_LINE DEDENT
static BufferedImage getSourcePictureBufferedImage ( String imageUrl ) { BufferedImage sourcePictureBufferedImage = null ; try { sourcePictureBufferedImage = ImageIO . read ( new File ( imageUrl ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return sourcePictureBufferedImage ; }
stop ( self ) : NEW_LINE INDENT if self . reader is not None : NEW_LINE INDENT self . reader . stop ( ) NEW_LINE DEDENT DEDENT
stop ( self ) : NEW_LINE INDENT if self . reader is not None : NEW_LINE INDENT self . reader . stop ( ) NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT if not self . image : NEW_LINE INDENT return 0 NEW_LINE DEDENT return self . image . size ( ) NEW_LINE DEDENT
def get_buffered_image ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _buffered_image NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _buffered_image NEW_LINE DEDENT DEDENT

get_fields ( self ) : NEW_LINE INDENT for field in self . fields . values ( ) : NEW_LINE INDENT if isinstance ( field , dict ) : NEW_LINE INDENT for field in field . values ( ) : NEW_LINE INDENT yield field NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT yield field NEW_LINE DEDENT DEDENT DEDENT

count_bits ( self , dd ) : NEW_LINE INDENT if not dd : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return len ( dd ) NEW_LINE DEDENT DEDENT
hashCode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _hashCode ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _hashCode ( ) NEW_LINE DEDENT DEDENT
load_dbase_header ( self ) : NEW_LINE INDENT dbase_header = [ ] NEW_LINE for header in self . header : NEW_LINE INDENT dbase_header . append ( header ) NEW_LINE DEDENT return dbase_header NEW_LINE DEDENT
load_dbase_file ( self , dbase_file ) : NEW_LINE INDENT dbase_file . seek ( 0 ) NEW_LINE dbase_file . close ( ) NEW_LINE return dbase_file NEW_LINE DEDENT
extract_data ( self , field_name ) : NEW_LINE INDENT field_name = field_name . lower ( ) NEW_LINE field_name = field_name . lower ( ) NEW_LINE return self . _extract_data ( field_name ) NEW_LINE DEDENT
double [ ] getData ( String name ) { double [ ] data = new double [ ] { } ; for ( int i = 0 ; i < data . length ; i ++ ) { data [ i ] = Double . parseDouble ( data [ i ] ) ; } return data ; }
static String extract ( String name ) { if ( name == null || name . length ( ) == 0 ) { return " " ; } else { return name ; } }
static boolean [ ] getBooleanArray ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " Name must not be null " ) ; } return getBooleanArray ( name ) ; }

get_field_names ( self , dbase ) : NEW_LINE INDENT field_names = [ ] NEW_LINE for field in dbase : NEW_LINE INDENT field_names . append ( field . name ) NEW_LINE DEDENT return field_names NEW_LINE DEDENT
dumps ( self ) : NEW_LINE INDENT stdout = self . stdout NEW_LINE stdout . flush ( ) NEW_LINE stdout . flush ( ) NEW_LINE return stdout NEW_LINE DEDENT
def node_attributes ( self , node_type ) : NEW_LINE INDENT if node_type in self . node_types : NEW_LINE INDENT return self . node_attributes ( node_type ) NEW_LINE DEDENT elif node_type in self . node_types : NEW_LINE INDENT return self . node_attributes ( node_type ) NEW_LINE DEDENT DEDENT
def def _initial_init ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _init ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
suppress_attributes ( self ) : NEW_LINE INDENT if self . attributes is None : NEW_LINE INDENT self . attributes = [ ] NEW_LINE DEDENT return self . attributes NEW_LINE DEDENT
containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing group Closest containing
Closest containing group structure sequence in Closest Closest Closest Closest Closest Closest containing group structure sequence in Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest Closest
escape_short_name ( short_name ) : NEW_LINE INDENT escaped_short_name = ' \\ ' + short_name + ' \\ ' NEW_LINE escaped_short_name = escaped_short_name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE return escaped_short_name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_groups ( self ) : NEW_LINE INDENT groups = [ ] NEW_LINE for group in self . groups : NEW_LINE INDENT groups . append ( group ) NEW_LINE DEDENT return groups NEW_LINE DEDENT
compute_fqn ( self , node ) : NEW_LINE INDENT if isinstance ( node , FQN ) : NEW_LINE INDENT return node NEW_LINE DEDENT else : NEW_LINE INDENT return self . _compute_fqn ( node ) NEW_LINE DEDENT DEDENT
def def _get_methods ( self ) : NEW_LINE INDENT return self . _get_methods ( ) NEW_LINE return self . _get_methods ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
store ( self , beans ) : NEW_LINE INDENT if isinstance ( beans , collections . Iterable ) : NEW_LINE INDENT beans = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT beans = [ ] NEW_LINE DEDENT for bean in beans : NEW_LINE INDENT if isinstance ( bean , collections . Iterable ) : NEW_LINE INDENT beans . append ( bean ) NEW_LINE DEDENT DEDENT return self NEW_LINE DEDENT
ArrayList < String > getArrayList ( ) { ArrayList < String > arrayList = new ArrayList < String > ( ) ; arrayList . add ( " " ) ; arrayList . add ( " " ) ; arrayList . add ( " " ) ; arrayList . add ( " " ) ; return arrayList ; }
public static boolean isLocked ( String key ) { if ( key == null ) { return false ; } if ( key . length ( ) == 0 ) { return false ; } if ( key . length ( ) == 0 ) { return false ; } return true ; }
read_data_array ( self , data_array ) : NEW_LINE INDENT if data_array is None : NEW_LINE INDENT data_array = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT data_array = data_array . copy ( ) NEW_LINE DEDENT return data_array NEW_LINE DEDENT
data from a DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained DSP - optionally constrained
print_structure ( structure , sequence , record ) : NEW_LINE INDENT print_structure ( structure , sequence , record ) NEW_LINE print_structure ( sequence , record ) NEW_LINE print_structure ( sequence , record ) NEW_LINE DEDENT
write ( self , element ) : NEW_LINE INDENT if isinstance ( element , NcML ) : NEW_LINE INDENT return element . write ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return element . write ( ) NEW_LINE DEDENT DEDENT
write ( self , element ) : NEW_LINE INDENT if isinstance ( element , NcMLElement ) : NEW_LINE INDENT return element . write ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return element . write ( ) NEW_LINE DEDENT DEDENT
write ( self , element ) : NEW_LINE INDENT if isinstance ( element , NcMLElement ) : NEW_LINE INDENT element . write ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT element . write ( element ) NEW_LINE DEDENT DEDENT
write ( self , writer ) : NEW_LINE INDENT writer . write ( self ) NEW_LINE writer . write ( self ) NEW_LINE writer . write ( self ) NEW_LINE writer . write ( self ) NEW_LINE DEDENT
void setSharedDimensions ( boolean sharedDimensions ) { if ( sharedDimensions ) { for ( int i = 0 ; i < sharedDimensions ; i ++ ) { this . sharedDimensions [ i ] = sharedDimensions [ i ] ; } } }
def transform ( self , coordinate ) : NEW_LINE INDENT if self . _transform is None : NEW_LINE INDENT return self . _transform ( coordinate ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _transform ( coordinate ) NEW_LINE DEDENT DEDENT
get_int_array ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_int_array ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT


def get_base_unit_database ( self ) : NEW_LINE INDENT return self . _base_unit_database . get_base_unit_database ( ) NEW_LINE DEDENT
get_derived_unit_database ( self ) : NEW_LINE INDENT return self . _derived_unit_database NEW_LINE DEDENT
static SI system of units ( ) { SI system = new SI ( ) ; system . initialize ( ) ; return system ; }
find_grid_element ( self , grid_element ) : NEW_LINE INDENT if grid_element is not None : NEW_LINE INDENT return grid_element NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
handle_discon_interval ( self , discon_interval ) : NEW_LINE INDENT if discon_interval is not None : NEW_LINE INDENT return discon_interval NEW_LINE DEDENT elif discon_interval is not None : NEW_LINE INDENT return discon_interval NEW_LINE DEDENT DEDENT
def open ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . dataset . open ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . dataset . open ( ) NEW_LINE DEDENT DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
read_data ( self ) : NEW_LINE INDENT data = self . _read_data ( ) NEW_LINE if data is not None : NEW_LINE INDENT return data NEW_LINE DEDENT return self . _read_data ( ) NEW_LINE DEDENT
def def _url_to_url ( self , url ) : NEW_LINE INDENT parts = url . split ( ' / ' ) NEW_LINE if len ( parts ) == 1 : NEW_LINE INDENT return url NEW_LINE DEDENT else : NEW_LINE INDENT return urljoin ( url , parts [ 0 ] ) NEW_LINE DEDENT DEDENT
canonicalize_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _canonicalize_url ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def write_specific def write_specific ( self ) : NEW_LINE INDENT return self . _write_to_file ( ) NEW_LINE if self . _write_to_file ( ) : NEW_LINE INDENT return self . _write_to_file ( ) NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) { MainEntry point = new MainEntry ( ) ; point . point ( args [ 0 ] ) ; point . point ( args [ 1 ] ) ; point . point ( args [ 2 ] ) ; }
def read_metadata ( self , href ) : NEW_LINE INDENT if not href : NEW_LINE INDENT return NEW_LINE DEDENT metadata = self . _get_metadata ( href ) NEW_LINE if metadata is not None : NEW_LINE INDENT return metadata NEW_LINE DEDENT metadata = self . _get_metadata ( href ) NEW_LINE return metadata NEW_LINE DEDENT
get_value ( self , table , key ) : NEW_LINE INDENT return self . _get_value ( table , key ) NEW_LINE DEDENT
def get ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . table . get ( self . table . key , None ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . table . get ( self . key , None ) NEW_LINE DEDENT DEDENT
date ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return datetime . datetime . strptime ( self . date , self . format ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . date ( ) NEW_LINE DEDENT DEDENT
print_info ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT info = self . _get_info ( node ) NEW_LINE if info is not None : NEW_LINE INDENT return info NEW_LINE DEDENT info = self . _get_info ( node ) NEW_LINE if info is not None : NEW_LINE INDENT return info NEW_LINE DEDENT return NEW_LINE DEDENT
PrintXMLAttributesHelper ( self ) : NEW_LINE INDENT def printXMLAttributes ( self ) : NEW_LINE INDENT self . _printXMLAttributes ( ) NEW_LINE self . _printXMLAttributes ( ) NEW_LINE self . _printXMLAttributes ( ) NEW_LINE self . _printXMLAttributes ( ) NEW_LINE self . _printXMLAttributes ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
static boolean isReserved ( String name ) { if ( name == null ) { return false ; } if ( name . equals ( " " ) ) { return true ; } if ( name . equals ( " " ) ) { return true ; } return false ; }
static void printDimensions ( String dimensionName ) { if ( dimensionName == null ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0 ) return ; if ( dimensionName . length ( ) == 0
static boolean isValidAREA ( String filename ) { if ( filename == null ) { return false ; } if ( filename . length ( ) == 0 ) { return false ; } if ( filename . length ( ) == 0 ) { return false ; } return true ; }
set_area_directory_attributes ( self , area_directory_attributes ) : NEW_LINE INDENT if area_directory_attributes is None : NEW_LINE INDENT area_directory_attributes = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT area_directory_attributes = area_directory_attributes NEW_LINE DEDENT DEDENT
def set_navigation_block_attributes ( self , block ) : NEW_LINE INDENT self . _navigation_block_attributes = { } NEW_LINE self . _navigation_block = block NEW_LINE DEDENT
get_calibration_type ( name ) : NEW_LINE INDENT try : NEW_LINE INDENT calibration_type = calibration_types . get ( name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT calibration_type = calibration_types . get ( name ) NEW_LINE DEDENT return calibration_type NEW_LINE DEDENT
set_calibration_type ( self , calibration_type ) : NEW_LINE INDENT self . calibration_type = calibration_type NEW_LINE self . calibration_type = calibration_type NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def search_axis_by_type ( self , axis_type ) : NEW_LINE INDENT return self . search_axis_by_type ( axis_type ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_named_variable ( self ) : NEW_LINE INDENT row = self . _get_row ( ) NEW_LINE if row is not None : NEW_LINE INDENT row = self . _get_row ( row ) NEW_LINE DEDENT else : NEW_LINE INDENT row = self . _get_row ( ) NEW_LINE DEDENT return row NEW_LINE DEDENT
deserialize ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return self . deserialize ( dataset ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . deserialize ( dataset ) NEW_LINE DEDENT DEDENT
read_marker_byte ( self ) : NEW_LINE INDENT if self . marker is None : NEW_LINE INDENT return None NEW_LINE DEDENT marker = self . marker . read ( ) NEW_LINE self . marker = marker NEW_LINE return marker NEW_LINE DEDENT
write_marker ( self , marker ) : NEW_LINE INDENT try : NEW_LINE INDENT self . write_marker ( marker ) NEW_LINE DEDENT except : NEW_LINE INDENT self . write_marker ( marker ) NEW_LINE DEDENT DEDENT
handle_events ( events ) : NEW_LINE INDENT for event in events : NEW_LINE INDENT try : NEW_LINE INDENT event = event [ ' event ' ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT except IndexError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT for event in events : NEW_LINE INDENT try : NEW_LINE INDENT event = event [ ' event ' ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT except IndexError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT

static void main ( String [ ] args ) { System . out . println ( " Starting point for demonstration application . . . " ) ; System . out . println ( " Starting point for demonstration application . . . " ) ; System . out . println ( " Starting point for demonstration application . . . " ) ; }
optimize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _optimize ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_available_parameter_names ( self ) : NEW_LINE INDENT return self . _available_parameter_names NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_station ( self , id ) : NEW_LINE INDENT station = self . get_station ( id ) NEW_LINE if station : NEW_LINE INDENT return station NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
redraw_graphics ( self ) : NEW_LINE INDENT if self . graphics is None : NEW_LINE INDENT return NEW_LINE DEDENT self . graphics = self . graphics . copy ( ) NEW_LINE self . graphics . clear ( ) NEW_LINE DEDENT
def public public public static Object read ( InputStream inputStream ) throws IOException { if ( inputStream . read ( ) != null ) { if ( inputStream . read ( ) != null ) { if ( inputStream . read ( ) != null ) { if ( inputStream . read ( ) != null ) { return readObject ( inputStream . read ( ) ) ; } else { return null ; } } } else { return null ; } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add ( self , database ) : NEW_LINE INDENT self . database . add ( database ) NEW_LINE self . database . commit ( ) NEW_LINE self . database . commit ( ) NEW_LINE self . database . commit ( ) NEW_LINE DEDENT
add_unit ( self , unit ) : NEW_LINE INDENT self . _unit = unit NEW_LINE self . _unit . save ( ) NEW_LINE DEDENT
add_symbol ( self , unit , symbol ) : NEW_LINE INDENT if not unit : NEW_LINE INDENT return NEW_LINE DEDENT self . add_unit ( unit ) NEW_LINE self . add_symbol ( symbol ) NEW_LINE DEDENT
get_unit_by_symbol ( self , name , symbol ) : NEW_LINE INDENT unit = self . get_unit_by_symbol ( name , symbol ) NEW_LINE if unit is None : NEW_LINE INDENT return None NEW_LINE DEDENT return unit NEW_LINE DEDENT


add_unit ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , Unit ) : NEW_LINE INDENT return self . add_unit ( unit ) NEW_LINE DEDENT return self . add_unit ( unit ) NEW_LINE DEDENT
JMenu getMenuItems ( ) { JMenu menu = new JMenu ( " Menu " ) ; menu . setMnemonic ( " Menu " ) ; menu . setMnemonic ( " MENU " ) ; menu . setMnemonic ( " MENU " ) ; menu . setMnemonic ( " MENU " ) ; menu . setMnemonic ( " MENU " ) ; menu . setMnemonic ( " MENU " ) ; menu . setMnemonic ( " MENU " ) ; return menu ; }
recapture_drs_position ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _recapture_drs_position ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _recapture_drs_position ( ) NEW_LINE DEDENT DEDENT
_get_scalar ( self ) : NEW_LINE INDENT if self . _scalar is not None : NEW_LINE INDENT return self . _scalar NEW_LINE DEDENT return self . _scalar NEW_LINE DEDENT
overrride ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return self . overrride ( structure ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . overrride ( structure ) NEW_LINE DEDENT DEDENT
def get_unpacked_data_values ( self ) : NEW_LINE INDENT return self . _unpacked_data_values ( ) NEW_LINE DEDENT
limit_circle ( self , radius ) : NEW_LINE INDENT if radius == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if radius < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
FeatureDataset createFeatureDataset ( ) { return new FeatureDataset ( ) ; }
def def open ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _open ( filename ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _open ( filename ) NEW_LINE DEDENT DEDENT
def open ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def override ( self , override ) : NEW_LINE INDENT if override : NEW_LINE INDENT return override NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static PartitionBuilder fromIndex ( int index ) { return new PartitionBuilder ( index ) ; }
addChildren ( self , children ) : NEW_LINE INDENT if len ( children ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( children ) == 1 : NEW_LINE INDENT return NEW_LINE
static RegExpAndDurationTimeCoverageEnhancer getInstance ( String name ) { RegExpAndDurationTimeCoverageEnhancer instance = new RegExpAndDurationTimeCoverageEnhancer ( name ) ; return instance ; }
static RegExpAndDurationTimeCoverageEnhancer create ( String path ) { return new RegExpAndDurationTimeCoverageEnhancer ( path ) ; }
write_catalog ( self , catalog , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return NEW_LINE DEDENT filename = os . path . abspath ( filename ) NEW_LINE if not os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( filename ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_buffered_image ( self , buffered_image ) : NEW_LINE INDENT if buffered_image is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( buffered_image , list ) : NEW_LINE
static ScalablePicture createScaledPictureInThread ( ScalablePicture scaledPicture ) { if ( scaledPicture == null ) { scaledPicture = new ScalablePicture ( ) ; scaledPicture . setSize ( scaledPicture . getSize ( ) ) ; } return scaledPicture ; }
void paintComponent ( Graphics g ) { if ( g == null ) { return ; } g . drawImage ( g , 0 , 0 , null ) ; }
convert_grid_file ( self , grid_file ) : NEW_LINE INDENT if isinstance ( grid_file , str ) : NEW_LINE INDENT grid_file = open ( grid_file , ' r ' ) NEW_LINE DEDENT if isinstance ( grid_file , str ) : NEW_LINE INDENT grid_file = open ( grid_file , ' r ' ) NEW_LINE DEDENT return grid_file NEW_LINE DEDENT
convert_time ( self , time ) : NEW_LINE INDENT if isinstance ( time , int ) : NEW_LINE INDENT return time NEW_LINE DEDENT elif isinstance ( time , datetime ) : NEW_LINE INDENT return time NEW_LINE DEDENT else : NEW_LINE INDENT return time NEW_LINE DEDENT DEDENT
convert_time ( self , time_array ) : NEW_LINE INDENT if isinstance ( time_array , int ) : NEW_LINE INDENT return time_array NEW_LINE DEDENT else : NEW_LINE INDENT return time_array NEW_LINE DEDENT DEDENT
get_days_in_month ( self , month , year ) : NEW_LINE INDENT if year is None : NEW_LINE INDENT year = self . year NEW_LINE DEDENT return self . _days_in_month ( month , year ) NEW_LINE DEDENT
void translate ( String value ) { if ( value == null ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 1 ) { return ; } if ( value . length ( ) == 2 ) { return ; } if ( value . length ( ) == 3 ) { return ; } if ( value . length ( ) == 4 ) { return ; } if ( value . length ( ) == 2 ) { return ; } if ( value . length ( ) == 3 ) { return ; } if ( value . length ( ) == 4 ) { return ; } if ( value . length ( ) == 2 ) { return ; } if ( value . length ( ) == 3 ) { return ; } }
swap ( self , integers ) : NEW_LINE INDENT if isinstance ( integers , int ) : NEW_LINE INDENT return self . swap ( integers ) NEW_LINE DEDENT return self . swap ( integers ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static byte [ ] externalize ( byte [ ] data ) { if ( data != null ) { return data . clone ( ) ; } else { return null ; } }
find_tag_by_code ( self , code ) : NEW_LINE INDENT tags = [ ] NEW_LINE for tag in self . tags : NEW_LINE INDENT tags . append ( tag ) NEW_LINE DEDENT return tags NEW_LINE DEDENT
open ( filename ) : NEW_LINE INDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise FileNotFoundException ( filename ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise FileNotFoundException ( filename ) NEW_LINE DEDENT DEDENT
static int size ( int size ) { if ( size == 0 ) { return 0 ; } if ( size == 0 ) { return 0 ; } return size ; }
sum ( self , array ) : NEW_LINE INDENT return sum ( array ) NEW_LINE DEDENT
set_grid_scale ( self , grid_scale ) : NEW_LINE INDENT self . grid_scale = grid_scale NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
clear_grid_cells ( self ) : NEW_LINE INDENT if self . grid_cells : NEW_LINE INDENT self . grid_cells . clear ( ) NEW_LINE DEDENT DEDENT
intersects ( self , rect ) : NEW_LINE INDENT if rect . intersects ( self . cell ) : NEW_LINE INDENT return True NEW_LINE DEDENT if rect . intersects ( self . cell ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
intersects ( self , rect ) : NEW_LINE INDENT if rect . intersects ( rect ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
boolean contains ( Point point ) { if ( point == null ) { return false ; } if ( point . isPoint ( ) ) { return true ; } return false ; }
find_closest_marked_cell ( self , point ) : NEW_LINE INDENT if self . marked_cell is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . marked_cell NEW_LINE DEDENT DEDENT
max_double ( self , bbox = None , cell = None ) : NEW_LINE INDENT if bbox is None : NEW_LINE INDENT bbox = self . bbox NEW_LINE DEDENT if cell is None : NEW_LINE INDENT cell = self . cell NEW_LINE DEDENT if bbox is None : NEW_LINE INDENT bbox = self . bbox NEW_LINE DEDENT if cell is None : NEW_LINE INDENT cell = self . cell NEW_LINE DEDENT if cell is None : NEW_LINE INDENT cell = self . cell NEW_LINE DEDENT if cell is None : NEW_LINE INDENT cell = self . cell NEW_LINE DEDENT return cell NEW_LINE DEDENT
create ( cls ) : NEW_LINE INDENT if not cls : NEW_LINE INDENT cls = cls ( ) NEW_LINE DEDENT return cls NEW_LINE DEDENT
find_markers ( self ) : NEW_LINE INDENT markers = [ ] NEW_LINE for marker in self . markers : NEW_LINE INDENT markers . append ( marker ) NEW_LINE DEDENT for marker in markers : NEW_LINE INDENT markers . append ( marker ) NEW_LINE DEDENT return markers NEW_LINE DEDENT
search ( self , path ) : NEW_LINE INDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT return self . _search ( path ) NEW_LINE DEDENT elif path . startswith ( ' / ' ) : NEW_LINE INDENT return self . _search ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _search ( path ) NEW_LINE DEDENT DEDENT
static String pathExtension ( String path ) { if ( path == null ) { return null ; } if ( path . length ( ) == 0 ) { return null ; } return path . substring ( 0 , path . length ( ) - 1 ) ; }
check_dds ( self ) : NEW_LINE INDENT if self . dds is not None : NEW_LINE INDENT return self . dds NEW_LINE DEDENT else : NEW_LINE INDENT return self . dds NEW_LINE DEDENT DEDENT
check_dmr ( self ) : NEW_LINE INDENT if self . dmr is not None : NEW_LINE INDENT return self . dmr NEW_LINE DEDENT if self . dmr is not None : NEW_LINE INDENT return self . dmr NEW_LINE DEDENT DEDENT
def def def def def def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def _ def def def def def _ def def def def def _ private static private static private static private static final private static final public static final void compress def def def _ def _ def _
last_name ( self ) : NEW_LINE INDENT result = self . _last_name ( ) NEW_LINE if result is not None : NEW_LINE INDENT return result NEW_LINE DEDENT DEDENT
prefix_name ( self , fqn ) : NEW_LINE INDENT if isinstance ( fqn , basestring ) : NEW_LINE INDENT return fqn NEW_LINE DEDENT elif isinstance ( fqn , str ) : NEW_LINE INDENT return fqn NEW_LINE DEDENT elif isinstance ( fqn , unicode ) : NEW_LINE INDENT return fqn NEW_LINE DEDENT else : NEW_LINE INDENT return fqn NEW_LINE DEDENT DEDENT
walk_dir ( self , dir ) : NEW_LINE INDENT if dir . startswith ( ' / ' ) : NEW_LINE INDENT return self . _walk_dir ( dir ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _walk_dir ( dir ) NEW_LINE DEDENT DEDENT
walk_dir ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return self . _walk_dir ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _walk_dir ( path ) NEW_LINE DEDENT DEDENT
static byte [ ] getBytes ( ByteBuffer byteBuffer ) { if ( byteBuffer == null ) { throw new NullPointerException ( " byteBuffer " ) ; } byte [ ] bytes = byteBuffer . array ( ) ; return bytes ; }
get_path_from_dap_variable ( dap_variable ) : NEW_LINE INDENT if dap_variable is not None : NEW_LINE INDENT return dap_variable NEW_LINE DEDENT else : NEW_LINE INDENT return dap_variable NEW_LINE DEDENT DEDENT
convert_paths ( paths ) : NEW_LINE INDENT if len ( paths ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( paths ) == 1 : NEW_LINE INDENT return paths [ 0 ] NEW_LINE DEDENT elif len ( paths ) == 2 : NEW_LINE INDENT return paths [ 1 ] NEW_LINE DEDENT return None NEW_LINE DEDENT
static int count ( String [ ] strings ) { int count = 0 ; for ( String s : strings ) { count += s . length ( ) ; } return count ; }
is_windows_drive ( self , path ) : NEW_LINE INDENT if os . path . isdir ( path ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isdir ( path ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def _get_leading_protocols ( self , url ) : NEW_LINE INDENT if url . startswith ( ' / ' ) : NEW_LINE INDENT return self . _get_leading_protocols ( url ) NEW_LINE DEDENT return self . _get_leading_protocols ( url ) NEW_LINE DEDENT
slice ( self , index ) : NEW_LINE INDENT if isinstance ( index , slice ) : NEW_LINE INDENT return self . _slice ( index ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _slice ( index ) NEW_LINE DEDENT DEDENT
def def convert ( self , offset ) : NEW_LINE INDENT if isinstance ( offset , slice ) : NEW_LINE INDENT return offset NEW_LINE DEDENT elif isinstance ( offset , slice ) : NEW_LINE INDENT return offset NEW_LINE DEDENT elif isinstance ( offset , slice ) : NEW_LINE INDENT return offset NEW_LINE DEDENT else : NEW_LINE INDENT return offset NEW_LINE DEDENT DEDENT
test_contiguous_region ( self ) : NEW_LINE INDENT self . assertEqual ( len ( self . strides ) , 1 ) NEW_LINE self . assertEqual ( len ( self . strides ) , 1 ) NEW_LINE DEDENT
test_slices ( self , slices ) : NEW_LINE INDENT if len ( slices ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( slices ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( slices ) == 2 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( slices ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
_get_slices ( self ) : NEW_LINE INDENT if len ( self . slices ) == 1 : NEW_LINE INDENT return self . slices [ 0 ] NEW_LINE DEDENT elif len ( self . slices ) == 1 : NEW_LINE INDENT return self . slices [ 0 ] NEW_LINE DEDENT return self . slices [ 0 ] NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def _get_members def _get_members def _get_member ( self , name ) : NEW_LINE def _get_member ( self ) : NEW_LINE INDENT return self . _get_member ( name ) NEW_LINE def _get_member ( self , name ) : NEW_LINE def _get_member ( self , name ) : NEW_LINE INDENT return self . _get_member ( name ) NEW_LINE DEDENT def _get_member ( self , name ) : NEW_LINE INDENT return self . _get_member ( name ) NEW_LINE DEDENT return self . _get_member ( name ) NEW_LINE DEDENT
static FeatureCollectionConfig extractFeatureCollectionConfigFromCatalog ( Catalog catalog ) { FeatureCollectionConfig featureCollectionConfig = new FeatureCollectionConfig ( ) ; featureCollectionConfig . setId ( catalog . getId ( ) ) ; featureCollectionConfig . setName ( catalog . getName ( ) ) ; featureCollectionConfig . setDescription ( catalog . getDescription ( ) ) ; return featureCollectionConfig ; }
add_declaration ( self , declarations ) : NEW_LINE INDENT for declaration in declarations : NEW_LINE INDENT self . add_declaration ( declaration ) NEW_LINE DEDENT DEDENT
order_groups ( self , groups ) : NEW_LINE INDENT if len ( groups ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT for group in groups : NEW_LINE INDENT if group in self . groups : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT return [ ] NEW_LINE DEDENT
def get_variable ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_variable ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _get_variable ( ) NEW_LINE DEDENT DEDENT
def _get_coordinate_axes ( self ) : NEW_LINE INDENT axes = self . axes NEW_LINE if self . coordinate_axes is None : NEW_LINE INDENT return axes NEW_LINE DEDENT return axes NEW_LINE DEDENT
get_time_unit_statistical_type ( self ) : NEW_LINE INDENT code = self . code NEW_LINE if isinstance ( code , str ) : NEW_LINE INDENT return code NEW_LINE DEDENT elif isinstance ( code , str ) : NEW_LINE INDENT return code NEW_LINE DEDENT elif isinstance ( code , int ) : NEW_LINE INDENT return code NEW_LINE DEDENT else : NEW_LINE INDENT return code NEW_LINE DEDENT DEDENT
cross ( self , seam ) : NEW_LINE INDENT self . seam = seam NEW_LINE if self . seam is not None : NEW_LINE INDENT return self . seam NEW_LINE DEDENT DEDENT
def def range ( self , x , y ) : NEW_LINE INDENT return self . _range ( x , y ) NEW_LINE return self . _range ( x , y ) NEW_LINE DEDENT
def def get_defaults ( self ) : NEW_LINE INDENT return self . settings . get_defaults ( ) NEW_LINE DEDENT
extract_sessionid_cookie_value ( self ) : NEW_LINE INDENT if self . sessionid : NEW_LINE INDENT return self . sessionid NEW_LINE DEDENT return None NEW_LINE DEDENT
def def max_redirects ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . max_redirects NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . max_redirects NEW_LINE DEDENT DEDENT
sessionid ( s ) : NEW_LINE INDENT if isinstance ( s , str ) : NEW_LINE INDENT return s NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
close_session ( self ) : NEW_LINE INDENT if self . session is not None : NEW_LINE INDENT self . session . close ( ) NEW_LINE self . session = None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
kill_sessions ( self ) : NEW_LINE INDENT if self . session_id is not None : NEW_LINE INDENT self . session_id = self . session_id NEW_LINE DEDENT return self . session_id NEW_LINE DEDENT
back_compatibility ( self ) : NEW_LINE INDENT if self . _back_compatibility : NEW_LINE INDENT return self . _back_compatibility NEW_LINE DEDENT else : NEW_LINE INDENT return self . _back_compatibility NEW_LINE DEDENT DEDENT
DqcFactory getDqcFactory ( ) { if ( dqcFactory == null ) { dqcFactory = new DqcFactory ( ) ; } return dqcFactory ; }
index ( self , index ) : NEW_LINE INDENT if isinstance ( index , Index ) : NEW_LINE INDENT return index NEW_LINE DEDENT else : NEW_LINE INDENT return Index ( self , index ) NEW_LINE DEDENT DEDENT
compute_standard_strides ( self , shape ) : NEW_LINE INDENT if shape is not None : NEW_LINE INDENT return self . _standard_strides ( shape ) NEW_LINE DEDENT return self . _standard_strides ( shape ) NEW_LINE DEDENT
create_index ( self , dimension , length ) : NEW_LINE INDENT if dimension == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif dimension == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif dimension == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif dimension == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
elim ( self , index ) : NEW_LINE INDENT if index . length == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index . length == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
createIndex ( Dimension dimension ) : NEW_LINE INDENT if dimension != null : NEW_LINE INDENT return new Index ( dimension , dimension ) ; }
transpose ( self , indices ) : NEW_LINE INDENT if len ( indices ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif len ( indices ) == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
create_index ( self , indices ) : NEW_LINE INDENT if len ( indices ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if len ( indices ) == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif len ( indices ) == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def def get_index_iterator ( self , array ) : NEW_LINE INDENT return self . _index_iterator ( array ) NEW_LINE DEDENT
get_current_element ( self ) : NEW_LINE INDENT return self . _current_element NEW_LINE DEDENT
def set_element_rank ( self , element_index ) : NEW_LINE INDENT self . element_index = element_index NEW_LINE DEDENT
set_current_element ( dim , v ) : NEW_LINE INDENT if v is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return v NEW_LINE DEDENT DEDENT
set_current_element ( self , dimension ) : NEW_LINE INDENT if dimension == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if dimension == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT if dimension == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT if dimension == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT if dimension == 4 : NEW_LINE INDENT return self NEW_LINE DEDENT if dimension == 5 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
check_time_interval_length ( self , time_interval_length ) : NEW_LINE INDENT if len ( time_interval_length ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( time_interval_length ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( time_interval_length ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_range ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _range NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _range NEW_LINE DEDENT DEDENT
get_dates ( self ) : NEW_LINE INDENT dates = [ ] NEW_LINE for date in self . dates : NEW_LINE INDENT dates . append ( date . isoformat ( ) ) NEW_LINE DEDENT return dates NEW_LINE DEDENT
static GempakParameters getGempakParametersFromList ( List < GempakParameters > list ) { GempakParameters gempakParameters = new GempakParameters ( ) ; gempakParameters . addAll ( list ) ; return gempakParameters ; }
get_station_list ( self ) : NEW_LINE INDENT station_list = [ ] NEW_LINE for station in self . station_list : NEW_LINE INDENT station_list . append ( station ) NEW_LINE DEDENT return station_list NEW_LINE DEDENT
def def get_station_from_header_info ( self , header_info ) : NEW_LINE INDENT if header_info is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif header_info is not None : NEW_LINE INDENT return header_info NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_station_keys ( self ) : NEW_LINE INDENT station_keys = [ ] NEW_LINE for key in self . station_keys : NEW_LINE INDENT station_keys . append ( key ) NEW_LINE DEDENT return station_keys NEW_LINE DEDENT
get_dates ( self ) : NEW_LINE INDENT dates = [ ] NEW_LINE for date in self . file : NEW_LINE INDENT dates . append ( datetime . datetime . strptime ( date , ' % Y - % m - % dT % H : % M ' ) ) NEW_LINE DEDENT return dates NEW_LINE DEDENT
get_station_index ( self , station_id ) : NEW_LINE INDENT station_id = self . _get_station_id ( station_id ) NEW_LINE if station_id : NEW_LINE INDENT return station_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_type ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT type = mimetypes . guess_type ( file ) [ 0 ] NEW_LINE DEDENT except IndexError : NEW_LINE INDENT type = None NEW_LINE DEDENT return type NEW_LINE DEDENT
setDepth ( self , n ) : NEW_LINE INDENT self . depth = n NEW_LINE DEDENT
def def depth ( self , n ) : NEW_LINE INDENT depth = self . depth ( ) NEW_LINE if n > 0 : NEW_LINE INDENT return depth NEW_LINE DEDENT return self . depth ( ) NEW_LINE DEDENT
create_gbx9_index ( self , grib1 , grib2 ) : NEW_LINE INDENT if not self . exists ( grib1 ) : NEW_LINE INDENT self . create_gbx9_index ( grib1 , grib2 ) NEW_LINE DEDENT if not self . exists ( grib2 ) : NEW_LINE INDENT self . create_gbx9_index ( grib1 , grib2 ) NEW_LINE DEDENT DEDENT
addDirectoryScan ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , DirectoryScanner ) : NEW_LINE INDENT return collection . addDirectoryScan ( ) NEW_LINE DEDENT DEDENT
def def recheck ( self , recheck ) : NEW_LINE INDENT if recheck is not None : NEW_LINE INDENT if recheck : NEW_LINE INDENT return True NEW_LINE DEDENT if recheck : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
__call__ ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT args = list ( args ) NEW_LINE DEDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT return args NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
write_variable ( self , variable ) : NEW_LINE INDENT try : NEW_LINE INDENT self . write_variable ( variable ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_file ( self , input_file , output_file ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_file ( input_file , output_file ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , ValidationError ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String convert ( String multislice ) { if ( multislice == null ) { return " " ; } if ( multislice . length ( ) == 0 ) { return " " ; } if ( multislice . length ( ) == 0 ) { return " " ; } return multislice ; }
wrap_structure ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT else : NEW_LINE INDENT return structure NEW_LINE DEDENT DEDENT
static void setVariables ( String variables ) { if ( variables == null ) { return ; } for ( String var : variables . split ( " , " ) ) { if ( var . length ( ) == 0 ) { return ; } } for ( String var : variables . split ( " , " ) ) { if ( var . length ( ) == 0 ) { return ; } } for ( String var : variables . split ( " , " ) ) { if ( var . length ( ) == 0 ) { return ; } } }
def regularVariable ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . regularVariable ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . regularVariable ( ) NEW_LINE DEDENT DEDENT
def def def is_conversion_needed ( self ) : NEW_LINE__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def get___python____python____python____python__ def def def def def def get___python____python____python__ def def def def def def _
def def def def get_cached def _get_cached_cached_data ( self ) : NEW_LINE def _get_cached_data ( self ) : NEW_LINE INDENT return self . _cached_data ( ) NEW_LINE def _get_cached_data ( self ) : NEW_LINE INDENT return self . _cached_data ( ) NEW_LINE DEDENT def _get_data ( self ) : NEW_LINE INDENT return self . _cached_data ( ) NEW_LINE DEDENT DEDENT
StructureMembers convert ( StructureMembers StructureMembers StructureMembers ) { if ( StructureMembers == null ) { throw new IllegalArgumentException ( " StructureMembers cannot be null " ) ; } if ( StructureMembers == null ) { throw new IllegalArgumentException ( " StructureMembers cannot be null " ) ; } return StructureMembers ; }
get_orgVar ( self , orgVar ) : NEW_LINE INDENT orgVar = self . orgVar NEW_LINE orgVar = self . orgVar NEW_LINE orgVar = self . orgVar NEW_LINE return orgVar NEW_LINE DEDENT
static boolean hasData ( String data ) { if ( data == null ) { return false ; } if ( data . length ( ) == 0 ) { return false ; } if ( data . length ( ) == 0 ) { return false ; } return true ; }
recalc ( self ) : NEW_LINE INDENT if self . is_public ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_private ( )
request_restricted_dataset ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . request_restricted_dataset ( dataset ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . request_restricted_dataset ( ) NEW_LINE DEDENT DEDENT
static ArraySequence emptyArraySequence ( ) { ArraySequence emptyArraySequence = new ArraySequence ( ) ; emptyArraySequence . add ( emptyArraySequence ) ; return emptyArraySequence ; }
static ArraySequence createArraySequence ( ) { ArraySequence arraySequence = new ArraySequence ( ) ; for ( int i = 0 ; i < data . length ; i ++ ) { arraySequence . add ( data [ i ] ) ; } return arraySequence ; }
makeSequence ( self , part ) : NEW_LINE INDENT if not part : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _makeSequence ( part ) NEW_LINE DEDENT DEDENT

read_catalog ( self ) : NEW_LINE INDENT if self . catalog is not None : NEW_LINE INDENT return self . catalog . read ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . catalog . read ( ) NEW_LINE DEDENT DEDENT
def readCatalog ( String catalog ) : NEW_LINE INDENT try : NEW_LINE INDENT return InvCatalog . parse ( catalog ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

void write ( OutputStream out ) throws IOException { if ( out != null ) { out . flush ( ) ; out . close ( ) ; } }
MetadataConverterIF getMetadataConverterIF ( String key ) { MetadataConverterIF metadataConverterIF = new MetadataConverterIF ( ) ; MetadataConverterIF metadataConverterIF = metadataConverterIF . getMetadataConverterIF ( key ) ; if ( metadataConverterIF != null ) { return metadataConverterIF ; } return null ; }
def def def def def def def def def get_identifiers def get_identifiers def get_identifiers_identifiers ( self ) : NEW def get_identifiers_identifiers ( self ) : NEW def get_identifier_identifiers ( self , dimensionless_unit ) : NEW_LINE def get_identifiers ( self ) : NEW_LINE def get_identifiers ( self ) : NEW_LINE INDENT return self . _get_identifiers ( ) NEW_LINE DEDENT def get_identifiers ( self ) : NEW_LINE INDENT return self . _get_identifiers ( ) NEW_LINE DEDENT def get_identifiers ( self ) : NEW_LINE INDENT return self . _get_identifiers ( ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_numeric ( self , unit ) : NEW_LINE INDENT if self . is_numeric ( unit ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_numeric ( unit ) : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
convert ( self , unit , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( value , unit ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , unit ) : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
build_xml ( self , xml ) : NEW_LINE INDENT if isinstance ( xml , str ) : NEW_LINE INDENT return self . _build_xml ( xml ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static void writeTakes ( Takes takes ) throws IOException { if ( takes == null ) { throw new IOException ( " Takes cannot be null . " ) ; } if ( takes != null ) { throw new IOException ( " Takes cannot be null . " ) ; } if ( takes != null ) { throw new IOException ( " Takes cannot be null . " ) ; } }
write ( self , line ) : NEW_LINE INDENT posList = [ ] NEW_LINE for line in line : NEW_LINE INDENT posList . append ( line ) NEW_LINE DEDENT return posList NEW_LINE DEDENT
static void Takes ( List < Polygon > polygons ) { if ( polygons . size ( ) == 0 ) { return ; } for ( Polygon polygon : polygons ) { if ( polygon . size ( ) == 0 ) { return ; } } if ( polygons . size ( ) == 1 ) { return ; } for ( Polygon polygon : polygons ) { if ( polygon . size ( ) == 0 ) { return ; } } if ( polygons . size ( ) == 1 ) { return ; } for ( Polygon polygon : polygons ) { if ( polygon . size ( ) == 0 ) { return ; } } }
static XMLAttribute utilities ( ) { XMLAttribute utilities = new XMLAttribute utilities ( ) ; return utilities ; }
subnodes ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
descent_parser ( self ) : NEW_LINE INDENT parser = self . parser NEW_LINE parser . parse ( ) NEW_LINE parser . parse ( ) NEW_LINE return parser NEW_LINE DEDENT
static String [ ] getUnreservedXmlAttributes ( ) { String [ ] attributes = new String [ ] { } ; for ( int i = 0 ; i < attributes . length ; i ++ ) { attributes [ i ] = attributes [ i ] . trim ( ) ; } return attributes ; }
subset_timeseries ( self ) : NEW_LINE INDENT subset_timeseries = [ ] NEW_LINE subset_timeseries = self . _subset_timeseries ( ) NEW_LINE if subset_timeseries : NEW_LINE INDENT subset_timeseries = subset_timeseries NEW_LINE DEDENT return subset_timeseries NEW_LINE DEDENT
any ArrayStructure into a ArrayStructureMA ( ) { return new ArrayStructureMA ( ) ; }

static ArrayStructure createArrayStructure ( Structure structure ) { if ( structure == null ) { throw new IllegalArgumentException ( " Structure cannot be null . " ) ; } return new ArrayStructure ( structure ) ; }
get_geometry_type ( self , variable_name ) : NEW_LINE INDENT if not self . geometry_type : NEW_LINE INDENT return None NEW_LINE DEDENT return self . geometry_type NEW_LINE DEDENT
static Station getStation ( String stationName ) { if ( stationName == null || stationName . length ( ) == 0 ) { return null ; } if ( stationName . length ( ) == 0 ) { return null ; } return new Station ( stationName ) ; }
compile_filters ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 2 : NEW_LINE INDENT return NEW_
field references in a filter to a list of field references in a filter .
process_dim_redefinition ( self ) : NEW_LINE INDENT if self . dim_redefinition : NEW_LINE INDENT return self . dim_redefinition NEW_LINE DEDENT else : NEW_LINE INDENT return self . dim_redefinition NEW_LINE DEDENT DEDENT
static Array createArray ( int indexImpl ) { if ( indexImpl == 0 ) { return new Array ( ) ; } else { return new Array ( indexImpl ) ; } }
bounding_box ( self ) : NEW_LINE INDENT bounding_box = self . bounding_box ( ) NEW_LINE if bounding_box is not None : NEW_LINE INDENT return bounding_box NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
bounding_box ( self , point ) : NEW_LINE INDENT if self . bounding_box is not None : NEW_LINE INDENT return self . bounding_box NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
extend_bounding_box ( self , bounding_box ) : NEW_LINE INDENT if bounding_box is None : NEW_LINE INDENT return NEW_LINE DEDENT bounding_box . extend ( bounding_box ) NEW_LINE return bounding_box NEW_LINE DEDENT
instersection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . instersection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add ( self , a , b ) : NEW_LINE INDENT assert isinstance ( a , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE assert isinstance ( b , self . type ) NEW_LINE DEDENT
check_array ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
_validate_shapes ( self , shapes ) : NEW_LINE INDENT if len ( shapes ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( shapes ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( shapes ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( shapes ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( shapes ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
convert_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , tuple ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
public public static final void copy ( final int [ ] a , final int [ ] result ) { if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if ( a . length == 0 ) { return ; } if (
copy ( self , a , result ) : NEW_LINE INDENT assert isinstance ( result , bytes ) NEW_LINE assert isinstance ( a , bytes ) NEW_LINE assert isinstance ( result , bytes ) NEW_LINE assert isinstance ( a , bytes ) NEW_LINE assert isinstance ( result , bytes ) NEW_LINE DEDENT
copy_array ( self , array , result ) : NEW_LINE INDENT if isinstance ( result , array ) : NEW_LINE INDENT return result NEW_LINE DEDENT if isinstance ( result , array ) : NEW_LINE INDENT return copy_array ( self , array , result ) NEW_LINE DEDENT DEDENT
find_min_max ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT elif len ( array ) == 2 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
double [ ] toArray ( double [ ] array ) { double [ ] array = new double [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) array [ i ] = array [ i ] ; return array ; }
def def def public public public static final CatalogBuilder <
ProjectionImpl fromProjectionImpl ( ProjectionImpl projection ) { if ( projection == null ) { return null ; } if ( projection instanceof ProjectionImpl ) { return ( ProjectionImpl ) projection ; } return null ; }
unescape ( opendap identifier ) : NEW_LINE INDENT if isinstance ( opendap identifier , str ) : NEW_LINE INDENT return opendap identifier NEW_LINE DEDENT elif isinstance ( opendap identifier , str ) : NEW_LINE INDENT return opendap identifier NEW_LINE DEDENT elif isinstance ( opendap identifier , int ) : NEW_LINE INDENT return opendap identifier NEW_LINE DEDENT else : NEW_LINE INDENT return opendap identifier NEW_LINE DEDENT DEDENT
unescape ( self , url ) : NEW_LINE INDENT return self . _unescape ( url ) NEW_LINE DEDENT
decode_url ( self , url ) : NEW_LINE INDENT if isinstance ( url , str ) : NEW_LINE INDENT return url NEW_LINE DEDENT elif isinstance ( url , str ) : NEW_LINE INDENT return url NEW_LINE DEDENT elif isinstance ( url , unicode ) : NEW_LINE INDENT return url NEW_LINE DEDENT else : NEW_LINE INDENT return url NEW_LINE DEDENT DEDENT
escape ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
unescape ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , list ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , tuple ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
_escape_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE return name NEW_LINE DEDENT
def def findFirstChar ( self , escapedName ) : NEW_LINE INDENT escapedName = escapedName . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE escapedName = escapedName . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE escapedName = escapedName . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE return escapedName NEW_LINE DEDENT
convert_name ( name ) : NEW_LINE INDENT if isinstance ( name , unicode ) : NEW_LINE INDENT return name NEW_LINE DEDENT elif isinstance ( name , str ) : NEW_LINE INDENT return name NEW_LINE DEDENT elif isinstance ( name , unicode ) : NEW_LINE INDENT return name NEW_LINE DEDENT else : NEW_LINE INDENT return name NEW_LINE DEDENT DEDENT
read_top_level_scalar_atomic_variable ( self ) : NEW_LINE INDENT top_level_scalar_atomic_variable = self . read_scalar_atomic_variable ( ) NEW_LINE return top_level_scalar_atomic_variable NEW_LINE DEDENT
get_cursors ( self ) : NEW_LINE INDENT cursor = self . cursor NEW_LINE if cursor is None : NEW_LINE INDENT cursor = self . cursor NEW_LINE DEDENT return cursor NEW_LINE DEDENT
static UIDefault getUIDefault ( Class < ? > clazz ) { UIDefault default = null ; if ( clazz != null ) { default = ( UIDefault ) clazz . newInstance ( ) ; } return default ; }
public public void obtain ( Component component ) { if ( component . getClass ( ) != null ) { if ( component . getClass ( ) != null ) { return ; } if ( component . getClass ( ) . getSuperclass ( ) != null ) { return ; } if ( component . getClass ( ) . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } if ( component . getSuperclass ( ) != null ) { return ; } } }
public public static void process ( String serializedDatabuffer ) throws IOException { if ( serializedDatabuffer . size ( ) == 0 ) { return ; } if ( serializedDatabuffer . size ( ) == 0 ) { return ; } if ( serializedDatabuffer . size ( ) == 0 ) { return ; } if ( serializedDatabuffer . size ( ) == 0 ) { return ; } if ( serializedDatabuffer . size ( ) == 0 ) { return ; } if ( serializedDatabuffer . size ( ) == 0 ) { return ; } else { return ; } } }
compile_structure_array ( structure_array ) : NEW_LINE INDENT if isinstance ( structure_array , Structure ) : NEW_LINE INDENT return structure_array NEW_LINE DEDENT elif isinstance ( structure_array , Structure ) : NEW_LINE INDENT return structure_array NEW_LINE DEDENT return structure_array NEW_LINE DEDENT
compile_structure_instance ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT DEDENT
compile_sequence_array ( self , sequence_array ) : NEW_LINE INDENT if isinstance ( sequence_array , list ) : NEW_LINE INDENT return sequence_array NEW_LINE DEDENT elif isinstance ( sequence_array , tuple ) : NEW_LINE INDENT return sequence_array NEW_LINE DEDENT else : NEW_LINE INDENT return sequence_array NEW_LINE DEDENT DEDENT
compile_sequence ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , list ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT elif isinstance ( sequence , tuple ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT elif isinstance ( sequence , list ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT else : NEW_LINE INDENT return sequence NEW_LINE DEDENT DEDENT
read_long ( self , endian ) : NEW_LINE INDENT if endian == ' little ' : NEW_LINE INDENT endian = ' little ' NEW_LINE DEDENT if endian == ' little ' : NEW_LINE INDENT endian = ' little ' NEW_LINE DEDENT if endian == ' little ' : NEW_LINE INDENT endian = ' little ' NEW_LINE DEDENT if endian == ' little ' : NEW_LINE INDENT endian = ' little ' NEW_LINE DEDENT return endian NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_current_value ( self ) : NEW_LINE INDENT if self . named_field_name : NEW_LINE INDENT return self . named_field_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def set_current_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _current_value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _current_value = self . _current_value NEW_LINE DEDENT DEDENT
create_field ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . fields [ self . user . id ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . fields [ self . user . id ] = self . fields [ self . user . id ] NEW_LINE DEDENT DEDENT


add_double_field ( self , field ) : NEW_LINE INDENT try : NEW_LINE INDENT self . fields [ field . name ] = field NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def add_integer_field ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT field = self . fields [ 0 ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT raise ValueError ( " Field ' % s ' is not an integer field " % self . name ) NEW_LINE DEDENT return field NEW_LINE DEDENT
add_password_text_field ( self ) : NEW_LINE INDENT if self . password_text_field is not None : NEW_LINE INDENT return self . password_text_field NEW_LINE DEDENT return self . password_text_field NEW_LINE DEDENT

add_text_combobox ( self , text_combobox ) : NEW_LINE INDENT self . text_combobox = text_combobox NEW_LINE self . text_combobox . append ( text_combobox ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def _add__python____python____python____python____python____python____python____python__ def def def def def _add__python____python____python____python____python____python____python__ def def def def def def _add def _add def _add def _add def _get_sep_sep_sep_sep_sep ( self ) : NEW def _get_sep_sep ( self , field ) : NEW def _sep_sep ( self ) : NEW_LINE def _sep ( self ) : NEW_LINE def _sep ( self ) : NEW_LINE INDENT seperator = ' , ' , ' , ' , ' , ' , ' , ' , ' , ' , ' , ' , ' , ' , ' ' ) NEW_LINE DEDENT def _sep ( self ) : NEW_LINE INDENT return ' , ' , ' , '

get_cell_spacing ( self ) : NEW_LINE INDENT if self . cell_spacing is None : NEW_LINE INDENT return self . cell_spacing NEW_LINE DEDENT return self . cell_spacing NEW_LINE DEDENT
static Factor [ ] createFactorArray ( int dimension ) { Factor [ ] factors = new Factor [ dimension ] ; for ( int i = 0 ; i < dimension ; i ++ ) { factors [ i ] = new Factor ( ) ; } return factors ; }

Raises this dimension to a power ( Dimension dimension ) : NEW_LINE INDENT dimension = dimension . copy ( ) NEW_LINE dimension = dimension . copy ( ) NEW_LINE dimension = dimension . copy ( ) NEW_LINE return dimension NEW_LINE DEDENT
boolean isReciprocal ( Dimension dimension ) { if ( dimension == null ) { return false ; } if ( dimension . isReciprocal ( ) ) { return true ; } return false ; }
boolean isDimensionless ( Dimension dimension ) { if ( dimension == null ) { return false ; } if ( dimension . isDimensionless ( ) ) { return true ; } if ( dimension . isDimensionless ( ) ) { return true ; } return false ; }
get_param_tables ( self ) : NEW_LINE INDENT return self . _get_param_tables ( ) NEW_LINE DEDENT
get_grib1Tables ( self ) : NEW_LINE INDENT return self . _get_grib1Tables ( ) NEW_LINE DEDENT
def list_tables ( self ) : NEW_LINE INDENT list = [ ] NEW_LINE for table in self . tables : NEW_LINE INDENT list = [ ] NEW_LINE for table in self . tables : NEW_LINE INDENT list . append ( table ) NEW_LINE DEDENT return list NEW_LINE DEDENT return list NEW_LINE DEDENT

def _raise_power ( self , unit ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _raise_power ( unit ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . _raise_power ( unit ) NEW_LINE DEDENT DEDENT
convert ( self , unit ) : NEW_LINE INDENT return self . convert ( unit ) NEW_LINE DEDENT
initialize_unit_table ( self ) : NEW_LINE INDENT if self . units is None : NEW_LINE INDENT self . units = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . units = [ ] NEW_LINE DEDENT DEDENT

def get_descriptor_name ( self ) : NEW_LINE INDENT return self . _descriptor_name NEW_LINE DEDENT
unpack ( self , byte [ ] array ) : NEW_LINE INDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
unpack ( self , byte [ ] array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
unpack ( self , byte array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( array [ 0 ] ) == 0 : NEW
unpack ( self , byte array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT if len ( array ) == 2 : NEW_LINE INDENT return array [ 1 ] NEW_LINE DEDENT return array [ 0 ] NEW_LINE DEDENT


createUnitConverter ( self ) : NEW_LINE INDENT converter = self . _createUnitConverter ( ) NEW_LINE if converter is None : NEW_LINE INDENT return None NEW_LINE DEDENT return converter NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static PointFeature createPointFeature ( Collection < PointFeature > data ) { if ( data == null ) { return null ; } if ( data . size ( ) == 0 ) { return null ; } if ( data . size ( ) == 1 ) { return data . get ( 0 ) ; } return new PointFeature ( data ) ; }
draw ( self ) : NEW_LINE INDENT if self . displayProjection : NEW_LINE INDENT self . displayProjection . draw ( self ) NEW_LINE DEDENT else : NEW_LINE INDENT self . displayProjection . draw ( self ) NEW_LINE DEDENT DEDENT
draw_convert_projections ( self , projections ) : NEW_LINE INDENT if not projections : NEW_LINE INDENT return NEW_LINE DEDENT projections = projections [ 0 ] NEW_LINE projections = projections [ 1 ] NEW_LINE projections = projections [ 2 ] NEW_LINE projections [ 3 ] = projections [ 4 ] NEW_LINE projections [ 5 ] = projections [ 5 ] NEW_LINE projections [ 6 ] = projections [ 6 ] NEW_LINE projections [ 7 ] = projections [ 7 ] NEW_LINE projections [ 8 ] = projections [ 8 ] NEW_LINE projections [ 8 ] = projections [ 8 ] NEW_LINE projections [ 9 ] = projections [ 8 ] NEW_LINE projections [ 9 ] = projections [ 8 ] NEW_LINE projections [ 8 ] = projections [ 8 ] NEW_LINE projections [ 9 ] = projections
process_bytes ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( bytes ) == 1 : NEW_LINE INDENT return bytes [ 0 ] NEW_LINE DEDENT if len ( bytes ) == 2 : NEW_LINE INDENT return bytes [ 1 ] NEW_LINE DEDENT return bytes [ 0 ] NEW_LINE DEDENT
byte [ ] read ( byte [ ] buffer ) throws IOException { if ( buffer == null || buffer . length == 0 ) { throw new EOFException ( ) ; } if ( buffer . length == 0 ) { throw new EOFException ( ) ; } if ( buffer . length == 1 ) { throw new EOFException ( ) ; } return buffer ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
read ( self , input_stream ) : NEW_LINE INDENT if len ( input_stream ) == 0 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT if len ( input_stream ) == 0 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT if len ( input_stream ) == 1 : NEW_LINE INDENT raise EOFError NEW_LINE DEDENT return input_stream NEW_LINE DEDENT
def skip ( self , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
add_coord ( self , coord ) : NEW_LINE INDENT self . coord = coord NEW_LINE if self . coord is None : NEW_LINE INDENT self . coord = coord NEW_LINE DEDENT else : NEW_LINE INDENT self . coord = coord NEW_LINE DEDENT DEDENT
get_coordinate_index ( self , record ) : NEW_LINE INDENT coordinate_index = None NEW_LINE try : NEW_LINE INDENT coordinate_index = self . _get_coordinate_index ( record ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT if coordinate_index is None : NEW_LINE INDENT return None NEW_LINE DEDENT return coordinate_index NEW_LINE DEDENT
check_file ( self , file ) : NEW_LINE INDENT if not file . exists ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
read_header_part ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT header = open ( file , ' r ' ) . read ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT return header NEW_LINE DEDENT
read_data ( self ) : NEW_LINE INDENT data = [ ] NEW_LINE for i in range ( len ( self . variables ) ) : NEW_LINE INDENT data . append ( self . variables [ i ] ) NEW_LINE DEDENT return data NEW_LINE DEDENT
read_data ( self , data ) : NEW_LINE INDENT if len ( data ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
def take_work ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _take_work ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _take_work ( ) NEW_LINE DEDENT DEDENT
turnVariableIntoOpendapVariable ( opendap ) : NEW_LINE INDENT if opendap is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return opendap NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def set_map_area ( self ) : NEW_LINE INDENT self . _map_area = { } NEW_LINE self . _map_area = { } NEW_LINE DEDENT
def def mapArea ( self , latLonRect ) : NEW_LINE INDENT if isinstance ( latLonRect , ProjectionRect ) : NEW_LINE INDENT return self . _mapArea ( latLonRect ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _mapArea ( latLonRect ) NEW_LINE DEDENT DEDENT
set_center_point ( self , center_point ) : NEW_LINE INDENT self . center_point = center_point NEW_LINE DEDENT
setProjection ( MapArea projection ) : NEW_LINE INDENT if ( projection == null ) { return NEW_LINE DEDENT mapArea = projection . copy ( ) NEW_LINE mapArea . setProjection ( projection ) NEW_LINE return NEW_LINE DEDENT
add_toolbar_actions ( self , toolbar_actions ) : NEW_LINE INDENT if toolbar_actions is None : NEW_LINE INDENT toolbar_actions = [ ] NEW_LINE DEDENT toolbar_actions . append ( toolbar_actions ) NEW_LINE DEDENT
def def def redraw ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def__python__ def def def def def redraw__python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def def _update__python____python____python____python____python____python____python____python____python__ def def def def def def def def def _update__python____python____python____python____python____python____python____python__ def def def def def def _update__python____python____python____python____python____python____python____python____python__ def def def def def def _update__python____python____python____python____python____python____python____python____python__ def def def def def def _update__python____python____python____python____python____python____python____python____python__ def def def def def def def _update__python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def setVariables ( self ) : NEW_LINE INDENT if self . selectedVariable is not None : NEW_LINE INDENT self . selectedVariable = self . selectedVariable NEW_LINE DEDENT else : NEW_LINE INDENT self . selectedVariable = self . selectedVariable NEW_LINE DEDENT DEDENT
int base to Index based on int index ( int base ) { if ( base == 0 ) { return 0 ; } if ( base == 1 ) { return 1 ; } return base ; }
get_dap4 ( self , dap4 ) : NEW_LINE INDENT dap4 = self . dap4 NEW_LINE if dap4 is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return dap4 NEW_LINE DEDENT DEDENT
Object get ( int index ) { if ( index < 0 ) { return null ; } if ( index > 0 ) { return null ; } if ( index < 0 ) { return null ; } if ( index > 1 ) { return null ; } if ( index < 0 ) { return null ; } if ( index > 1 ) { return null ; } if ( index < 0 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index > 1 ) { return null ; } if ( index >
static String getSector ( GINI image ) { if ( image == null ) { return null ; } if ( image instanceof GINIImage ) { GINIImage gINIImage = ( GINIImage ) image ; return gINIImage . getSector ( ) ; } return null ; }
read ( self , file ) : NEW_LINE INDENT if isinstance ( file , bytes ) : NEW_LINE INDENT return float ( file ) NEW_LINE DEDENT elif isinstance ( file , bytes ) : NEW_LINE INDENT return float ( file ) NEW_LINE DEDENT elif isinstance ( file , bytes ) : NEW_LINE INDENT return float ( file ) NEW_LINE DEDENT else : NEW_LINE INDENT return float ( file ) NEW_LINE DEDENT DEDENT
void lookUpParameter ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " Parameter name is null " ) ; } if ( name . equals ( " " ) ) { throw new IllegalArgumentException ( " Parameter name is null " ) ; } }
Iterator < API_Overrides > iterator ( ) { Iterator < API_Overrides > iter = API_Overrides . iterator ( ) ; while ( iter . hasNext ( ) ) { Iterator < API_Overrides > iter = iter . next ( ) ; if ( iter . hasNext ( ) ) { return iter ; } } return iter ; }
swap_byte_order ( self , byte_order ) : NEW_LINE INDENT self . byte_order = byte_order NEW_LINE return self . byte_order NEW_LINE DEDENT
get_number_of_timestamps ( self ) : NEW_LINE INDENT timesteps = self . get_timestamps ( ) NEW_LINE return timesteps NEW_LINE DEDENT
get_file_name ( self , time , ensemble_index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_file_name ( time , ensemble_index ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_filenames ( self ) : NEW_LINE INDENT filenames = [ ] NEW_LINE for filename in self . filenames : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT for filename in filenames : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT return filenames NEW_LINE DEDENT
def get_data_descriptor_file_path ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . join ( self . data_descriptor_dir , self . name ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_full_path ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . join ( self . path , filename ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
addChsub ( self , chsub ) : NEW_LINE INDENT self . chsub = chsub NEW_LINE DEDENT

parse_header ( self , input_file ) : NEW_LINE INDENT try : NEW_LINE INDENT header = open ( input_file , ' r ' ) . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return header NEW_LINE DEDENT
read_compressed_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_compressed_data ( ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_file_header ( self , file_header ) : NEW_LINE INDENT if file_header is None : NEW_LINE INDENT return False NEW_LINE DEDENT if file_header is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
calibrate_data ( self ) : NEW_LINE INDENT table = self . table NEW_LINE if table is not None : NEW_LINE INDENT return table . calibrate_data ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
calibrate_data ( self ) : NEW_LINE INDENT calibrate_data = { } NEW_LINE calibrate_data [ ' calibrate _ data ' ] = self . calibrate_data NEW_LINE calibrate_data [ ' calibrate _ data ' ] = self . calibrate_data NEW_LINE calibrate_data [ ' calibrate _ data ' ] = self . calibrate_data NEW_LINE return calibrate_data NEW_LINE DEDENT
add_variable ( self , netcdf_file ) : NEW_LINE INDENT self . netcdf_file = netcdf_file NEW_LINE self . netcdf_file . append ( netcdf_file ) NEW_LINE self . netcdf_file . append ( netcdf_file ) NEW_LINE DEDENT
add_parameter ( self , netcdf_file_name , netcdf_parameter_name , netcdf_parameter_name , netcdf_parameter_name , netcdf_parameter_name ) : NEW_LINE INDENT if netcdf_parameter_name is None : NEW_LINE INDENT netcdf_parameter_name = netcdf_parameter_name NEW_LINE DEDENT netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE netcdf_parameter_name = netcdf_parameter_name NEW_LINE DEDENT
def uncompress ( self ) : NEW_LINE INDENT if self . _compress_products : NEW_LINE INDENT self . _compress_products ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
get_unsigned_integer_from_byte_array ( byte [ ] array ) : NEW_LINE INDENT try : NEW_LINE INDENT return unsigned_integer_from_byte_array ( array ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return unsigned_integer_from_byte_array ( array ) NEW_LINE DEDENT DEDENT
get_signed_integer_from_bytes ( self , bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _signed_integer_from_bytes ( bytes ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
byte [ ] convert ( byte [ ] array ) { byte [ ] array = new byte [ array . length ] ; array [ 0 ] = array [ 0 ] ; array [ 1 ] = array [ 1 ] ; return array ; }
process_request ( self ) : NEW_LINE INDENT request = self . request NEW_LINE if request is not None : NEW_LINE INDENT return request NEW_LINE DEDENT request = self . request NEW_LINE if request is not None : NEW_LINE INDENT return request NEW_LINE DEDENT return request NEW_LINE DEDENT

generate_error ( self , parameters ) : NEW_LINE INDENT if not parameters : NEW_LINE INDENT return ' ' NEW_LINE DEDENT error = [ ] NEW_LINE for param in parameters : NEW_LINE INDENT error . append ( param ) NEW_LINE DEDENT return error NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
erase_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is None : NEW_LINE INDENT return NEW_LINE DEDENT rectangle . erase ( ) NEW_LINE rectangle . erase ( ) NEW_LINE DEDENT
get_current_bounds ( self ) : NEW_LINE INDENT return self . _current_bounds NEW_LINE DEDENT
get_previous_bounds ( self ) : NEW_LINE INDENT return self . _get_previous_bounds ( ) NEW_LINE DEDENT
parse_text ( self , text ) : NEW_LINE INDENT try : NEW_LINE INDENT return datetime . strptime ( text , " yyyy - MM - dd " ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
change_shape ( self , data_variables ) : NEW_LINE INDENT data_variables = data_variables . copy ( ) NEW_LINE data_variables = data_variables . copy ( ) NEW_LINE data_variables = data_variables . copy ( ) NEW_LINE data_variables = data_variables . copy ( ) NEW_LINE return data_variables NEW_LINE DEDENT
static int arraySize ( int size ) { if ( size > Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } if ( size > Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } return size ; }
2 bytes into a signed integer .
unsigned bytes into an integer .
3 bytes into a signed integer .
2 bytes into an unsigned integer .
3 bytes into an unsigned integer .
def convert_float ( self , bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return float ( bytes ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return float ( bytes ) NEW_LINE DEDENT DEDENT
def convert_float ( self , bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return float ( bytes ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return float ( bytes ) NEW_LINE DEDENT DEDENT
static long bytesToSignedLong ( byte [ ] bytes ) { if ( bytes == null ) { throw new NullPointerException ( ) ; } return bytesToSignedLong ( bytes ) ; }
count_bits_on_bitmap ( bitmap ) : NEW_LINE INDENT count = 0 NEW_LINE for bit in bitmap : NEW_LINE INDENT count += bit NEW_LINE DEDENT return count NEW_LINE DEDENT
def lon_naught ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _lon_naught ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _lon_naught ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
escape ( self , string ) : NEW_LINE INDENT return self . _escape ( string ) NEW_LINE DEDENT
remove_backslashes ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT return string NEW_LINE DEDENT
split ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT DEDENT

def def def get_thredds ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def def def def _get_proh def _get_prohected_components ( self ) : NEW_LINE INDENT return self . _prohected_components NEW_LINE DEDENT def get_prohected_components ( self ) : NEW_LINE INDENT return self . _prohected_components NEW_LINE DEDENT
get_header_time ( self ) : NEW_LINE INDENT if self . header_time is not None : NEW_LINE INDENT return self . header_time NEW_LINE DEDENT elif self . header_time is not None : NEW_LINE INDENT return self . header_time NEW_LINE DEDENT DEDENT
static ArrayStructureBB createArrayStructureBB ( ArrayStructureBB bb ) { if ( bb instanceof ArrayStructureBB ) { return ( ArrayStructureBB ) bb ; } return new ArrayStructureBB ( ) ; }
index_text_files ( self ) : NEW_LINE INDENT text_files = [ ] NEW_LINE for filename in self . text_files : NEW_LINE INDENT text_files . append ( os . path . join ( self . path , filename ) ) NEW_LINE DEDENT return text_files NEW_LINE DEDENT
Grib1Record deserialize ( Grib1Record object ) { if ( object instanceof Grib1Record ) { return ( Grib1Record ) object ; } return null ; }
def def _get_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( filename , ' rb ' ) . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
set_system_parameters ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _set_system_parameters ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _set_system_parameters ( ) NEW_LINE DEDENT DEDENT
reacquire_resources ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _acquire_resources ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _acquire_resources ( ) NEW_LINE DEDENT DEDENT
before ( self , date ) : NEW_LINE INDENT if not self . isPresent ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if self . get ( date ) : NEW_LINE INDENT return self . get ( date ) NEW_LINE DEDENT return None NEW_LINE DEDENT
before ( self , d ) : NEW_LINE INDENT if d . isPresent ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
date_after ( self , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . date_after ( date ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . date_after ( date ) NEW_LINE DEDENT DEDENT
set_i_th_value ( self , value ) : NEW_LINE INDENT self . i_th_value = value NEW_LINE return self . i_th_value NEW_LINE DEDENT
add_coordinate_system ( self , dataset ) : NEW_LINE INDENT if not self . _coordinate_system : NEW_LINE INDENT self . _coordinate_system = CoordinateSystem ( dataset ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _coordinate_system = self . _coordinate_system NEW_LINE DEDENT DEDENT
_set_units ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT self . _units = value NEW_LINE DEDENT else : NEW_LINE INDENT self . _units = value NEW_LINE DEDENT DEDENT
get_unit_string ( self ) : NEW_LINE INDENT if self . _unit_string : NEW_LINE INDENT return self . _unit_string NEW_LINE DEDENT else : NEW_LINE INDENT return self . _unit_string NEW_LINE DEDENT DEDENT
init ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
read_catalog ( self ) : NEW_LINE INDENT catalog = self . catalog NEW_LINE if not catalog : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return catalog NEW_LINE DEDENT DEDENT
def dirPath ( self ) : NEW_LINE INDENT dirPath = os . path . join ( rootDir , dirPath ) NEW_LINE dirPath = os . path . abspath ( dirPath ) NEW_LINE return dirPath NEW_LINE DEDENT
_getDirPath ( ) : NEW_LINE INDENT dirPath = os . path . abspath ( rootDir ) NEW_LINE return dirPath NEW_LINE DEDENT
wrap_point ( self , point ) : NEW_LINE INDENT if point is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . _wrap ( point ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
static String getLatitude ( String latitude ) { if ( latitude == null ) { latitude = " " ; } if ( latitude . length ( ) == 0 ) { latitude = " " ; } if ( latitude . length ( ) == 0 ) { latitude = " " ; } if ( latitude . length ( ) == 0 ) { latitude = " " ; } if ( latitude . length ( ) == 0 ) { latitude = " " ; } if ( latitude . length ( ) == 0 ) { latitude = " " ; } return latitude ; }
def longitude ( self , longitude ) : NEW_LINE INDENT if longitude is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return longitude NEW_LINE DEDENT DEDENT
public int compareTo ( Quantity quantity ) { if ( quantity == null ) { return 0 ; } else { return quantity . compareTo ( this . quantity ) ; } }
get_inv_dataset ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _invDataset NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def set_inv_dataset ( self , InvDataset invDataset ) : NEW_LINE INDENT if not InvDataset . is_selected ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if InvDataset . is_selected ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
TreePath getPath ( TreeNode node ) { TreePath path = new TreePath ( node . getPath ( ) ) ; return path ; }
def def open_all_nodes ( self ) : NEW_LINE INDENT nodes = [ ] NEW_LINE for node in self . nodes : NEW_LINE INDENT nodes . append ( node ) NEW_LINE DEDENT return nodes NEW_LINE DEDENT
void displayCatalog ( String catalogName ) { if ( catalogName == null ) { throw new IllegalArgumentException ( " CatalogName cannot be null . " ) ; } if ( catalogName . length ( ) == 0 ) { throw new IllegalArgumentException ( " CatalogName cannot be null . " ) ; } if ( catalogName . length ( ) == 0 ) { throw new IllegalArgumentException ( " CatalogName cannot be null . " ) ; } if ( catalogName . length ( ) == 0 ) { throw new IllegalArgumentException ( " CatalogName cannot be null . " ) ; } }

coord_axis_alias ( self ) : NEW_LINE INDENT coord_axis = self . coord_axis NEW_LINE coord_alias = self . coord_alias NEW_LINE if coord_axis is None : NEW_LINE INDENT coord_axis = self . coord_axis NEW_LINE coord_alias = self . coord_alias NEW_LINE DEDENT return coord_axis , coord_alias NEW_LINE DEDENT
write ( self , int value ) : NEW_LINE INDENT if value < 0 : NEW_LINE INDENT raise ValueError ( " Negative values are not supported . " ) NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT raise ValueError ( " Negative values are not supported . " ) NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT raise ValueError ( " Negative values are not supported . " ) NEW_LINE DEDENT DEDENT
write ( self , string ) : NEW_LINE INDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT if isinstance ( string , bytes ) : NEW_LINE INDENT return string NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT if isinstance ( string , bytes ) : NEW_LINE INDENT return string NEW_LINE DEDENT return string NEW_LINE DEDENT
read ( self ) : NEW_LINE INDENT if self . encoding is None : NEW_LINE INDENT self . encoding = ' UTF - 8' NEW_LINE DEDENT if self . encoding is not None : NEW_LINE INDENT self . encoding = self . encoding . lower ( ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def run__python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def def _run__python____python____python____python____python____python____python____python____python__ def def def def def def def def def def _run__python____python____python____python____python____python____python____python____python__ def def def def def def def _run__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def _get___python____python____python____python____python____python____python____python____python____python____python__
add_member ( self , member ) : NEW_LINE INDENT self . members . add ( member ) NEW_LINE DEDENT
remove_member ( self , member ) : NEW_LINE INDENT if member is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _remove_member ( member ) NEW_LINE DEDENT
def def get_members_names ( self ) : NEW_LINE INDENT return self . _member_names ( ) NEW_LINE DEDENT
find_member_by_name ( self , name ) : NEW_LINE INDENT return self . _find_member_by_name ( name ) NEW_LINE DEDENT
get_bitmap ( self ) : NEW_LINE INDENT if self . bitmap is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . bitmap NEW_LINE DEDENT
def def set_last_saved_state ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _last_saved_state = self . _last_saved_state NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _last_saved_state = None NEW_LINE DEDENT DEDENT
get_selected_rows ( self ) : NEW_LINE INDENT rows = [ ] NEW_LINE for row in self . selected_rows : NEW_LINE INDENT rows . append ( row ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
def translate_column_index ( self ) : NEW_LINE INDENT column_index = self . column_index NEW_LINE if self . column_index is not None : NEW_LINE INDENT column_index = self . column_index NEW_LINE DEDENT else : NEW_LINE INDENT column_index = self . column_index NEW_LINE DEDENT return column_LINE DEDENT
static Array getMemberDataArray ( Class < ? > type ) { if ( type . isArray ( ) ) { return getMemberDataArray ( type ) ; } else { return getMemberDataArray ( type ) ; } }
get_member_data ( self ) : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT
static double [ ] toArray ( double [ ] array ) { if ( array == null ) { return new double [ 0 ] ; } if ( array . length == 0 ) { return new double [ 0 ] ; } return array ; }
get_member_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT DEDENT
get_float_array ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _float_array NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_member_data ( self ) : NEW_LINE INDENT member_data = self . get_member_data ( ) NEW_LINE if member_data : NEW_LINE INDENT return member_data NEW_LINE DEDENT DEDENT
static byte [ ] getBytes ( Class < ? > type ) { byte [ ] bytes = new byte [ type . getSize ( ) ] ; for ( int i = 0 ; i < type . getSize ( ) ; i ++ ) { byte [ ] bytes = new byte [ type . getSize ( ) ] ; for ( int j = 0 ; j < type . getSize ( ) ; j ++ ) { bytes [ j ] = type . getSize ( ) ; } } return bytes ; }
get_member_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT DEDENT
get_int_array ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_int_array ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_member_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_short_array ( self ) : NEW_LINE INDENT return self . _get_short_array ( ) NEW_LINE DEDENT
get_member_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static long [ ] java_long_array ( long [ ] java_long_array ) { return java_long_array . clone ( ) ; }
get_member_data ( self , type ) : NEW_LINE INDENT if type == ' char ' : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT return self . _member_data NEW_LINE DEDENT
static char [ ] getCharArray ( Class < ? > clazz ) { if ( clazz . isPrimitive ( ) ) { return new char [ 0 ] ; } else { return new char [ 0 ] ; } }
def def def write ( self , dataset ) : NEW_LINE INDENT if not isinstance ( dataset , Dataset ) : NEW_LINE INDENT return NEW_LINE DEDENT def write ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return NEW_LINE DEDENT def write ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT write ( self , dataset ) NEW_LINE DEDENT else : NEW_LINE INDENT write ( self , dataset ) NEW_LINE DEDENT DEDENT DEDENT return NEW_LINE DEDENT
harvest ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return self . _harvest ( dataset ) NEW_LINE DEDENT return self . _harvest ( dataset ) NEW_LINE DEDENT
make_mutable_copy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . copy ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
transferMetadata ( self , parents ) : NEW_LINE INDENT if not parents : NEW_LINE INDENT return NEW_LINE DEDENT parents = parents [ 0 ] NEW_LINE parents [ 1 ] = parents [ 1 ] NEW_LINE parents [ 2 ] = parents [ 2 ] NEW_LINE parents [ 3 ] = parents [ 3 ] NEW_LINE parents [ 4 ] = parents [ 4 ] NEW_LINE parents [ 5 ] = parents [ 5 ] NEW_LINE parents [ 6 ] = parents [ 6 ] NEW_LINE parents [ 7 ] = parents [ 7 ] NEW_LINE parents [ 8 ] = parents [ 8 ] NEW_LINE parents [ 9 ] = parents [ 9 ] NEW_LINE parents [ 8 ] = parents [ 8 ] NEW_LINE parents [ 9 ] = parents [ 8 ] NEW_LINE parents [ 8 ] = parents [ 8 ] NEW_LINE parents [ 9 ] = parents [ 8 ] NEW_LINE parents [ 8 ] = parents [ 9
get_metadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _metadata NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def dump_missing_data ( self , data ) : NEW_LINE INDENT if len ( data ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
dump_variable ( self , variable ) : NEW_LINE INDENT if isinstance ( variable , str ) : NEW_LINE INDENT return self . _dump_variable ( variable ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _dump_variable ( variable ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
longitude ( self , coords ) : NEW_LINE INDENT if len ( coords ) == 1 : NEW_LINE INDENT return coords [ 0 ] NEW_LINE DEDENT elif len ( coords ) == 2 : NEW_LINE INDENT return coords [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return coords NEW_LINE DEDENT DEDENT
memcmp ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT for arg in args : NEW_LINE INDENT if arg in kwargs : NEW_LINE INDENT args . append ( arg ) NEW_LINE DEDENT else : NEW_LINE INDENT args . append ( arg ) NEW_LINE DEDENT DEDENT return args NEW_LINE DEDENT
parse ( self , text ) : NEW_LINE INDENT if isinstance ( text , str ) : NEW_LINE INDENT return self . _parse_text ( text ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _parse_text ( text ) NEW_LINE DEDENT DEDENT
def remove_attributes ( self , dataset ) : NEW_LINE INDENT if self . dataset is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . dataset is not None : NEW_LINE INDENT return self . dataset . remove_attributes ( dataset ) NEW_LINE DEDENT return NEW_LINE DEDENT
static CoordinatePartitionUnionizer message ( CoordinatePartitionUnionizer instance ) { CoordinatePartitionUnionizer message = new CoordinatePartitionUnionizer ( instance ) ; message . setId ( instance . getId ( ) ) ; message . setMessageId ( instance . getId ( ) ) ; return message ; }
def def adjustment ( self , la1 , la2 ) : NEW_LINE INDENT if len ( la1 ) != len ( la2 ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
parse_variable_name ( self , selector ) : NEW_LINE INDENT if isinstance ( selector , basestring ) : NEW_LINE INDENT return selector NEW_LINE DEDENT if isinstance ( selector , basestring ) : NEW_LINE INDENT return selector NEW_LINE DEDENT if isinstance ( selector , basestring ) : NEW_LINE INDENT return selector NEW_LINE DEDENT if isinstance ( selector , basestring ) : NEW_LINE INDENT return selector NEW_LINE DEDENT if isinstance ( selector , basestring ) : NEW_LINE INDENT return selector NEW_LINE DEDENT return selector NEW_LINE DEDENT
static String getSpecificationString ( List < String > list ) { if ( list . size ( ) == 0 ) { return " " ; } else { return list . get ( 0 ) ; } }
def def def def def def def ___python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def def ____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def ___python____python____python____python__ def def def def def ___python____python____python____python__ def def def def def ____python____python____python____python____python__ def def def def def ____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def ____python____python____python____python____python____python____python__ def def def ___python____python____python____python____python__ def def def ___python____python____python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def ___python____python____python____python__
close ( self ) : NEW_LINE INDENT if self . session is not None : NEW_LINE INDENT self . session . close ( ) NEW_LINE DEDENT DEDENT
def def def def def def def def bulk__python____python____python____python____python____python____python____python____python__ def def def def def bulk__python____python____python____python____python____python__ def def def def def bulk__python____python____python____python____python____python__ def def def def def bulk__python____python____python____python____python__ def def def def def bulk__python____python____python____python____python__ def def def def def bulk__python____python____python____python____python__ def def def def def bulk__python____python____python__ def def def bulk def bulk def bulk__python____python____python____python____python____python____python____python__ def def def bulk def bulk def bulk def bulk__python____python____python____python____python__ def bulk def bulk__python____python____python____python____python____python____python____python____python____python____python____python__ def def def bulk def bulk def bulk def bulk def bulk__python____python____python____python____python____python____python____python____python____python____python__ def bulk def bulk def bulk
def def get_encoding ( self ) : NEW_LINE INDENT if self . encoding is not None : NEW_LINE INDENT return self . encoding NEW_LINE DEDENT return self . encoding NEW_LINE DEDENT
anticipate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
reset ( self , input ) : NEW_LINE INDENT self . _input = input NEW_LINE if self . _input is None : NEW_LINE INDENT self . _input = None NEW_LINE DEDENT else : NEW_LINE INDENT self . _input = self . _input . copy ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def run ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT task = self . task NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . task = None NEW_LINE DEDENT else : NEW_LINE INDENT self . task = None NEW_LINE DEDENT return task NEW_LINE DEDENT
convertURI ( self , uri ) : NEW_LINE INDENT if isinstance ( uri , java . net . URI ) : NEW_LINE INDENT return uri NEW_LINE DEDENT elif isinstance ( uri , java . net . URI ) : NEW_LINE INDENT return uri NEW_LINE DEDENT else : NEW_LINE INDENT return uri NEW_LINE DEDENT DEDENT
def def remove_selected_fields_from_uri ( uri ) : NEW_LINE INDENT uri = URI . create ( uri ) NEW_LINE uri = URI . create ( uri ) NEW_LINE uri = URI . create ( uri ) NEW_LINE uri = URI . create ( uri ) NEW_LINE return uri NEW_LINE DEDENT
static String convertToZeroLengthString ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return " " ; } if ( string . length ( ) == 0 ) { return " " ; } if ( string . length ( ) == 0 ) { return " " ; } if ( string . length ( ) == 0 ) { return " " ; } if ( string . length ( ) == 0 ) { return " " ; } return string ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

make_partition_collection ( self ) : NEW_LINE INDENT for partition in self . partition_collection : NEW_LINE INDENT self . partition_collection . append ( partition ) NEW_LINE DEDENT return self NEW_LINE DEDENT
_get_grib_cache_paths ( self ) : NEW_LINE INDENT return self . _get_grib_cache_paths ( ) NEW_LINE DEDENT
static void set ( String name , String value ) { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value must not be null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value must not be null " ) ; } this . name = name ; this . value = value ; }
get_index_filename ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . basename ( filename ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_file_cacheable ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _file_cacheable NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _file_cacheable NEW_LINE DEDENT DEDENT
static Number of nested fields ( ) { return this . fields . size ( ) ; }
add_global_global_attribute ( self , name , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , str ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( value , str ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( value , str ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
add_global ( self , file ) : NEW_LINE INDENT if isinstance ( file , str ) : NEW_LINE INDENT return NEW_LINE DEDENT elif isinstance ( file , str ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
delete_global_attribute ( self ) : NEW_LINE INDENT if self . _global_attribute is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _global_attribute . delete ( ) NEW_LINE self . _global_attribute = None NEW_LINE DEDENT
rename_global_attribute ( self , name ) : NEW_LINE INDENT if self . is_global_attribute ( name ) : NEW_LINE INDENT return self . _rename_global_attribute ( name ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _rename_global_attribute ( name ) NEW_LINE DEDENT DEDENT
add_variable ( self , name , value ) : NEW_LINE INDENT if not isinstance ( name , str ) : NEW_LINE INDENT raise ValueError ( " Variable name must be a string . " ) NEW_LINE DEDENT if not isinstance ( value , str ) : NEW_LINE INDENT raise ValueError ( " Variable name must be a string . " ) NEW_LINE DEDENT if not isinstance ( value , str ) : NEW_LINE INDENT raise ValueError ( " Variable name must be a string . " ) NEW_LINE DEDENT if not isinstance ( value , str ) : NEW_LINE INDENT raise ValueError ( " Variable name must be a string . " ) NEW_LINE DEDENT DEDENT
def def addVariable ( self , name ) : NEW_LINE INDENT if not isinstance ( self . name , Variable ) : NEW_LINE INDENT raise ValueError ( " Variable ' % s ' must be an array of type Array . " % self . name ) NEW_LINE DEDENT return self . name NEW_LINE DEDENT
delete_variable ( self , name ) : NEW_LINE INDENT if self . is_defined ( name ) : NEW_LINE INDENT return self . _delete_variable ( name ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _delete_variable ( name ) NEW_LINE DEDENT DEDENT
rename_variable ( self , name , value ) : NEW_LINE INDENT if not name . startswith ( ' _ ' ) : NEW_LINE INDENT name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE DEDENT name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE name = ' _ ' . join ( name . split ( ' _ ' ) ) NEW_LINE return name NEW_LINE DEDENT
set_file_sub_type ( self , file_sub_type ) : NEW_LINE INDENT self . file_sub_type = file_sub_type NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void addFeature ( FeatureType featureType ) { if ( featureType == null ) { throw new IllegalArgumentException ( " FeatureType is null " ) ; } if ( featureType == null ) { throw new IllegalArgumentException ( " FeatureType is null " ) ; } if ( featureType == null ) { throw new IllegalArgumentException ( " FeatureType is null " ) ; } if ( featureType == null ) { throw new IllegalArgumentException ( " FeatureType is null " ) ; } }
stationObsDataset ( self ) : NEW_LINE INDENT stationObsDataset = self . _get_stationObsDataset ( ) NEW_LINE if stationObsDataset is None : NEW_LINE INDENT return stationObsDataset NEW_LINE DEDENT return stationObsDataset NEW_LINE DEDENT
def stationCollectionXML ( self ) : NEW_LINE INDENT stationCollection = { } NEW_LINE for station in self . stationCollection . values ( ) : NEW_LINE INDENT stationCollection [ station . name ] = station NEW_LINE DEDENT return stationCollection NEW_LINE DEDENT
def def write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _write ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _write ( ) NEW_LINE DEDENT DEDENT
def def def output ( self ) : NEW_LINE INDENT return self . _output ( ) NEW_LINE DEDENT def output ( self ) : NEW_LINE INDENT return self . _output ( ) NEW_LINE DEDENT
write_error_chunk ( self , mode ) : NEW_LINE INDENT if mode == DMR : NEW_LINE INDENT self . write_error_chunk ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . write_error_chunk ( ) NEW_LINE self . write_error_chunk ( ) NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . stream is None : NEW_LINE INDENT return NEW_LINE DEDENT self . stream . close ( ) NEW_LINE DEDENT
flush ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . out . flush ( ) NEW_LINE self . out . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . out . flush ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
constructCopy ( self ) : NEW_LINE INDENT return self . _constructCopy ( ) NEW_LINE DEDENT
contained_in_range ( self , range ) : NEW_LINE INDENT if not range : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( range , Range ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_element ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
shift ( self , range , factor ) : NEW_LINE INDENT if factor == 0 : NEW_LINE INDENT return range NEW_LINE DEDENT if factor == 1 : NEW_LINE INDENT return range NEW_LINE DEDENT if factor == 2 : NEW_LINE INDENT return range NEW_LINE DEDENT if factor == 3 : NEW_LINE INDENT return range NEW_LINE DEDENT return range NEW_LINE DEDENT
read_data_subset ( file ) : NEW_LINE INDENT data_subset = [ ] NEW_LINE for i in range ( len ( data_subset ) ) : NEW_LINE INDENT data_subset . append ( data_subset [ i ] ) NEW_LINE DEDENT return data_subset NEW_LINE DEDENT
read ( self , file ) : NEW_LINE INDENT if isinstance ( file , bytes ) : NEW_LINE INDENT return self . read ( file ) NEW_LINE DEDENT elif isinstance ( file , bytes ) : NEW_LINE INDENT return self . read ( file ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . read ( file ) NEW_LINE DEDENT DEDENT
static Vector createPrimitiveVector ( Vector data ) { if ( data == null ) { throw new IllegalArgumentException ( " data is null " ) ; } if ( data . size ( ) == 0 ) { throw new IllegalArgumentException ( " data is empty " ) ; } return new Vector ( data ) ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
delete_databases ( self , databases ) : NEW_LINE INDENT databases . delete ( ) NEW_LINE databases . delete ( ) NEW_LINE databases . delete ( ) NEW_LINE databases . delete ( ) NEW_LINE DEDENT
set_grid_nav_block_values ( self , grid_nav_block_values ) : NEW_LINE INDENT self . grid_nav_block_values = grid_nav_block_values NEW_LINE DEDENT

def make_double_array ( self , double array ) : NEW_LINE INDENT if isinstance ( array , int ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , float ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , int ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
def def backwardsCompatibility ( self , datasetBoundaries , datasetBoundaries ) : NEW_LINE INDENT if isinstance ( datasetBoundaries , datasetBoundaries . wkt ) : NEW_LINE INDENT return datasetBoundaries . wkt NEW_LINE DEDENT elif isinstance ( datasetBoundaries , datasetBoundaries . json ) : NEW_LINE INDENT return datasetBoundaries NEW_LINE DEDENT else : NEW_LINE INDENT return datasetBoundaries NEW_LINE DEDENT DEDENT
fill_vars_with_grid_names ( self , param , grid_names ) : NEW_LINE INDENT if len ( grid_names ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( grid_names ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
DatasetSourceStructure findDatasetSourceStructure ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " Name must not be null " ) ; } DatasetSourceStructure sourceStructure = new DatasetSourceStructure ( ) ; sourceStructure . setName ( name ) ; sourceStructure . setName ( name ) ; return sourceStructure ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
populate_ncfile ( self , ncfile ) : NEW_LINE INDENT try : NEW_LINE INDENT self . ncfile = ncfile NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . ncfile = None NEW_LINE DEDENT DEDENT
add_elements ( self , elements ) : NEW_LINE INDENT if len ( elements ) > 0 : NEW_LINE INDENT self . add_elements ( elements ) NEW_LINE DEDENT else : NEW_LINE INDENT self . add_elements ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def __init__ ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_dataset_from_dataset ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT elif isinstance ( dataset , list ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT elif isinstance ( dataset , list ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
replace_dataset ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT

remove_service_from_dataset ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _remove_service_from_dataset ( dataset ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_metadata ( self , metadata ) : NEW_LINE INDENT metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE metadata = metadata . copy ( ) NEW_LINE DEDENT
get_user_property ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _user_properties [ key ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _user_properties [ key ] NEW_LINE DEDENT DEDENT
boolean isValid ( DatasetNamer datasetNamer ) { if ( datasetNamer == null ) { return false ; } return datasetNamer . isValid ( ) ; }
get_data_descriptor_list ( self ) : NEW_LINE INDENT data_descriptor_list = [ ] NEW_LINE for descriptor in self . data_descriptor_list : NEW_LINE INDENT data_descriptor_list . append ( descriptor ) NEW_LINE DEDENT return data_descriptor_list NEW_LINE DEDENT
static String getFullServerURI ( ) { String fullServerURI = null ; try { fullServerURI = new String ( ) ; } catch ( Exception e ) { fullServerURI = new String ( ) ; } return fullServerURI ; }
get_capabilities ( self ) : NEW_LINE INDENT requests = [ ] NEW_LINE for request in self . requests : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT requests . append ( request ) NEW_LINE DEDENT DEDENT return requests NEW_LINE DEDENT
get_feature_requests ( self ) : NEW_LINE INDENT requests = self . _get_feature_requests ( ) NEW_LINE if not requests : NEW_LINE INDENT return requests NEW_LINE DEDENT return requests NEW_LINE DEDENT
validate_request_parameters ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _validate_request_parameters ( request ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _validate_request_parameters ( request ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_capabilities ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _capabilities NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT return self . dataset . size ( ) NEW_LINE DEDENT
static Date getLastModifiedDate ( Dataset dataset ) { if ( dataset == null ) { return null ; } if ( dataset instanceof Collection ) { return ( ( Collection ) dataset ) . getLastModifiedDate ( ) ; } return null ; }
static Node [ ] generators ( ) { Node [ ] generators = new Node [ 0 ] ; for ( int i = 0 ; i < generators . length ; i ++ ) { generators [ i ] = new Node ( i ) ; } return generators ; }
write_response ( self , response ) : NEW_LINE INDENT try : NEW_LINE INDENT self . response . write ( response ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT self . response . write ( e ) NEW_LINE DEDENT DEDENT

set_content_length ( self , content_length ) : NEW_LINE INDENT self . content_length = content_length NEW_LINE return self . content_length NEW_LINE DEDENT
def request_base ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . request_base NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . request_base NEW_LINE DEDENT DEDENT
servletPath ( servletPath , pathInfo ) : NEW_LINE INDENT if pathInfo is not None : NEW_LINE INDENT return pathInfo NEW_LINE DEDENT else : NEW_LINE INDENT return " / " NEW_LINE DEDENT DEDENT
request_query_string ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT request . query_string = request . query_string NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return request NEW_LINE DEDENT DEDENT
get_value ( self , request ) : NEW_LINE INDENT if self . multi_valued_parameters : NEW_LINE INDENT return self . multi_valued_parameters [ 0 ] NEW_LINE DEDENT elif self . multi_valued_parameters : NEW_LINE INDENT return self . multi_valued_parameters [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . multi_valued_parameters [ 0 ] NEW_LINE DEDENT DEDENT
save_state ( self , state ) : NEW_LINE INDENT self . state = state NEW_LINE self . save ( ) NEW_LINE DEDENT
write_file_directory ( self , file_directory ) : NEW_LINE INDENT if file_directory is None : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file_directory . write ( file_directory ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def get_nested_tables_tables ( self ) : NEW_LINE def get_tables ( self ) : NEW_LINE INDENT return self . _get_tables ( ) NEW_LINE DEDENT def get_tables ( self ) : NEW_LINE INDENT return self . _get_tables ( ) NEW_LINE DEDENT def get_tables ( self ) : NEW_LINE INDENT return self . _get_tables ( ) NEW_LINE return self . _get_tables ( ) NEW_LINE DEDENT
total_bits ( self ) : NEW_LINE INDENT table = self . table NEW_LINE subtables = self . subtables NEW_LINE total_bits = 0 NEW_LINE for table in table : NEW_LINE INDENT for subtable in subtables : NEW_LINE INDENT total_bits += subtable . total_bits ( ) NEW_LINE DEDENT total_bits += table . total_bits ( ) NEW_LINE DEDENT return total_bits NEW_LINE DEDENT
append ( self , line ) : NEW_LINE INDENT if not self . is_scrolling ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_scrolling ( ) : NEW_LINE INDENT self . scroll ( ) NEW_LINE DEDENT if self . is_scrolling ( ) : NEW_LINE INDENT self . scroll ( ) NEW_LINE DEDENT DEDENT
create_xml_document ( self , dataset ) : NEW_LINE INDENT if not isinstance ( dataset , Dataset ) : NEW_LINE INDENT raise ValueError ( " Dataset must be a dataset . " ) NEW_LINE DEDENT return self . _create_xml_document ( dataset ) NEW_LINE DEDENT
create_capabilities_xml_document ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_capabilities_xml_document ( dataset ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
find ( self , record ) : NEW_LINE INDENT if len ( record ) == 1 : NEW_LINE INDENT return record [ 0 ] NEW_LINE DEDENT elif len ( record ) == 2 : NEW_LINE INDENT return record [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_ith_coordinate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . ith_coordinate NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_item ( self , item ) : NEW_LINE INDENT if item not in self . list : NEW_LINE INDENT self . list . append ( item ) NEW_LINE DEDENT else { self . list . append ( item ) NEW_LINE DEDENT DEDENT
def def def _handle__python____python____python____python____python____python____python____python____python____python____python__ def def def _handle__python____python____python____python____python____python____python____python__ def def def def _get___python____python____python____python____python__ def def def def _get___python____python____python____python__ def def def _get___python____python____python____python__ def def def def def _get_error def _get_local def _get_local def _get_value ( self ) : NEW def _get_value ( self ) : NEW def _get_value ( self ) : NEW_LINE def _get_value ( self ) : NEW_LINE INDENT return self . _get_value ( ) NEW_LINE def _get_value ( self ) : NEW_LINE INDENT return self . _get_value ( ) NEW_LINE def _get_value ( self ) : NEW_LINE INDENT return self
slice ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _slice ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_completed ( self ) : NEW_LINE INDENT if self . completed : NEW_LINE INDENT return self . completed NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static void register ( Grib2 grib2 ) { if ( grib2 != null ) { grib2 . register ( this ) ; } }
_get_feature_type ( self ) : NEW_LINE INDENT featureType = self . _get_feature_type ( ) NEW_LINE if featureType is not None : NEW_LINE INDENT return featureType NEW_LINE DEDENT DEDENT
set_value_type ( self , value_type ) : NEW_LINE INDENT if isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , int ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT else : NEW_LINE INDENT return value_type NEW_LINE DEDENT DEDENT
Grib1Gds getGrib1Gds ( ) { Grib1Gds grib1Gds = new Grib1Gds ( ) ; grib1Gds . init ( ) ; return grib1Gds ; }
copy_bytes_from_in_to_out ( self , in , out ) : NEW_LINE INDENT out . write ( in ) NEW_LINE out . write ( out ) NEW_LINE out . flush ( ) NEW_LINE return out NEW_LINE DEDENT
String read ( InputStream inputStream ) throws IOException { if ( inputStream == null ) { return null ; } if ( inputStream . read ( ) == - 1 ) { return null ; } if ( inputStream . read ( ) == - 1 ) { return null ; } return inputStream . read ( ) ; }
byte [ ] read ( InputStream inputStream ) throws IOException { if ( inputStream == null ) { throw new EOFException ( ) ; } if ( inputStream . read ( ) == - 1 ) { throw new EOFException ( ) ; } if ( inputStream . read ( ) == - 1 ) { throw new EOFException ( ) ; } return new byte [ inputStream . read ( ) ] ; }
def public public public static Stream def def public public public public public static final public static String toString ( String s public static String toString ( String str ) { public static final String toString ( String s ) { public static final String toString ( String s ) { if ( s != null ) { if ( s != null ) { return new String ( s ) ; } public String toString ( String s ) { return s ; } else if ( s == null ) { return null ; } else { return s ; } } } } } }
copy_file_to_output_stream ( self , filename , output_stream ) : NEW_LINE INDENT if output_stream is None : NEW_LINE INDENT output_stream = open ( filename , ' wb ' ) NEW_LINE DEDENT else : NEW_LINE INDENT output_stream = open ( output_stream , ' wb ' ) NEW_LINE DEDENT return output_stream NEW_LINE DEDENT
static RandomAccessFile copy ( RandomAccessFile file ) throws IOException { RandomAccessFile raf = new RandomAccessFile ( file , " rw " ) ; raf . setLength ( file . length ( ) ) ; raf . seek ( file . length ( ) ) ; raf . seek ( file . length ( ) ) ; return raf ; }
copy_tree ( self , tree ) : NEW_LINE INDENT if tree . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if tree . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif tree . size ( ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
read_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( file , ' r ' ) . read ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT DEDENT
read_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( file , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return file . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
write_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' w ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT file = open ( filename , ' w ' ) NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT return file NEW_LINE DEDENT
write_contents ( self , contents ) : NEW_LINE INDENT if self . encoding : NEW_LINE INDENT self . encoding = self . encoding NEW_LINE DEDENT if self . encoding : NEW_LINE INDENT self . encoding = self . encoding NEW_LINE DEDENT self . write ( contents ) NEW_LINE DEDENT
copy_input_stream ( input_stream ) : NEW_LINE INDENT if input_stream is None : NEW_LINE INDENT return NEW_LINE DEDENT output_stream = open ( input_stream , ' wb ' ) NEW_LINE output_stream . close ( ) NEW_LINE return output_stream NEW_LINE DEDENT



def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def status_report public static final void override_status_report_report ( ) throws IOException { if ( status_report == null ) { return ; } if ( status_report == null ) { return ; } if ( status_report == null ) { return ; } else { return ; } } }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def _do__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def _do__python____python____python____python____python____python____python__ def def def def _do__python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python__ def def def get___python____python____python____python____python__ def def def get___python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def def get___python__ def get_ def _
NcmlCollectionReader getReader ( ) { return new NcmlCollectionReader ( ) ; }
static NcmlCollectionReader from ( URL location ) { if ( location == null ) { throw new IllegalArgumentException ( ) ; } return new NcmlCollectionReader ( location ) ; }
replaceChar ( self , replaceChar ) : NEW_LINE INDENT if not self . allowChars : NEW_LINE INDENT return self . replaceChar ( replaceChar ) NEW_LINE DEDENT return self . replaceChar ( replaceChar ) NEW_LINE DEDENT
delete_non_printable_characters ( self ) : NEW_LINE INDENT if self . printable : NEW_LINE INDENT return self . _delete_non_printable_characters ( ) NEW_LINE DEDENT return self . _delete_non_printable_characters ( ) NEW_LINE DEDENT
remove_char ( self , char ) : NEW_LINE INDENT if not self . is_valid_char ( char ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . is_valid_char ( char ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_valid_char ( char ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
printable_ascii ( self ) : NEW_LINE INDENT if self . printable_ascii : NEW_LINE INDENT return self . printable_ascii NEW_LINE DEDENT else : NEW_LINE INDENT return self . printable_ascii NEW_LINE DEDENT DEDENT
transform_embedded_space ( self , embedded_space ) : NEW_LINE INDENT if isinstance ( embedded_space , str ) : NEW_LINE INDENT return embedded_space NEW_LINE DEDENT elif isinstance ( embedded_space , str ) : NEW_LINE INDENT return embedded_space NEW_LINE DEDENT elif isinstance ( embedded_space , str ) : NEW_LINE INDENT return embedded_space NEW_LINE DEDENT elif isinstance ( embedded_space , str ) : NEW_LINE INDENT return embedded_space NEW_LINE DEDENT else : NEW_LINE INDENT return embedded_space NEW_LINE DEDENT DEDENT
count_chars ( self , chars ) : NEW_LINE INDENT if len ( chars ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return len ( chars ) NEW_LINE DEDENT
padString ( self , padString , length ) : NEW_LINE INDENT if length == 0 : NEW_LINE INDENT return padString NEW_LINE DEDENT elif length == 1 : NEW_LINE INDENT return padString NEW_LINE DEDENT else : NEW_LINE INDENT return padString NEW_LINE DEDENT DEDENT
padString ( self , padString , length ) : NEW_LINE INDENT if length == 0 : NEW_LINE INDENT return padString NEW_LINE DEDENT elif length == 1 : NEW_LINE INDENT return padString NEW_LINE DEDENT else : NEW_LINE INDENT return padString NEW_LINE DEDENT DEDENT
remove_sub ( self , s ) : NEW_LINE INDENT sub = self . sub ( s ) NEW_LINE if sub : NEW_LINE INDENT return sub NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
remove ( self , s ) : NEW_LINE INDENT if len ( s ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( s ) == 1 : NEW_LINE INDENT return s [ 0 ] NEW_LINE DEDENT elif len ( s ) == 2 : NEW_LINE INDENT return s [ 1 ] NEW_LINE DEDENT elif len ( s ) == 3 : NEW_LINE INDENT return s [ 0 ] NEW_LINE DEDENT elif len ( s ) == 4 : NEW_LINE INDENT return s [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return s [ 0 ] NEW_LINE DEDENT DEDENT
remove ( self , s ) : NEW_LINE INDENT if len ( s ) == 0 : NEW_LINE INDENT return s NEW_LINE DEDENT if len ( s ) == 1 : NEW_LINE INDENT return s NEW_LINE DEDENT if len ( s ) == 2 : NEW_LINE INDENT return s NEW_LINE DEDENT if len ( s ) == 3 : NEW_LINE INDENT return s NEW_LINE DEDENT if len ( s ) == 4 : NEW_LINE INDENT return s NEW_LINE DEDENT DEDENT
collapse_continuous_whitespace ( self ) : NEW_LINE INDENT if self . _continuous_whitespace : NEW_LINE INDENT self . _continuous_whitespace = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _continuous_whitespace = False NEW_LINE DEDENT DEDENT
replace_char ( self , s ) : NEW_LINE INDENT if not isinstance ( s , str ) : NEW_LINE INDENT return s NEW_LINE DEDENT if isinstance ( s , str ) : NEW_LINE INDENT return s NEW_LINE DEDENT if isinstance ( s , unicode ) : NEW_LINE INDENT return s NEW_LINE DEDENT if isinstance ( s , str ) : NEW_LINE INDENT return s NEW_LINE DEDENT return s NEW_LINE DEDENT
all occurrences of any char in replaceChar with corresponding String in replaceWithChar I am trying to replace all occurrences of any char in replaceChar with corresponding String in replaceWithChar . I tried the following code but it doesn't work : String replaceWithChar = replaceWithChar . replace ( " " , " " ) ; String replaceWithChar = replaceWithChar . replace ( " " , " " ) ; String replaceWithChar = replaceWithChar . replace ( " " , " " ) ; return replaceWithChar ; }
replace_pattern ( self , pattern , value ) : NEW_LINE INDENT return self . _replace_pattern ( pattern , value ) NEW_LINE DEDENT
substitute ( self , original , subst ) : NEW_LINE INDENT if isinstance ( subst , str ) : NEW_LINE INDENT return subst NEW_LINE DEDENT elif isinstance ( subst , str ) : NEW_LINE INDENT return subst NEW_LINE DEDENT DEDENT
subst ( self , original , subst ) : NEW_LINE INDENT return self . subst ( original , subst ) NEW_LINE DEDENT
remove_characters_from_out ( self , out ) : NEW_LINE INDENT if len ( out ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( out [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String replace ( String s , String s1 , String s2 ) { return replace ( s , s1 , s2 ) ; }
replace_characters_from_out ( self , out , in ) : NEW_LINE INDENT out = out . replace_characters_from_out ( in ) NEW_LINE out = out . replace_characters_from_out ( out ) NEW_LINE out = out . replace_characters_from_out ( in ) NEW_LINE out = out . replace_characters_from_out ( out ) NEW_LINE out = out . replace_characters_from_out ( in ) NEW_LINE out = out . replace_characters_from_out ( out ) NEW_LINE return out NEW_LINE DEDENT
substitute ( self , original , subst ) : NEW_LINE INDENT if not self . match ( original ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not self . match ( subst ) : NEW_LINE INDENT return None NEW_LINE DEDENT return self . match ( subst ) NEW_LINE DEDENT
remove_bad_chars ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
_get_trigger ( self ) : NEW_LINE INDENT if self . _trigger is None : NEW_LINE INDENT self . _trigger = None NEW_LINE DEDENT return self . _trigger NEW_LINE DEDENT
request_state ( self ) : NEW_LINE INDENT if self . request_state is not None : NEW_LINE INDENT return self . request_state NEW_LINE DEDENT if self . request_state is not None : NEW_LINE INDENT return self . request_state NEW_LINE DEDENT return self . request_state NEW_LINE DEDENT
handleCollectionEvent ( self , event ) : NEW_LINE INDENT if event . isCollectionEvent ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if event . isCollectionEvent ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if event . isCollectionEvent ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def get_templates ( self ) : NEW_LINE INDENT return self . _templates NEW_LINE DEDENT
get_nested_datasets ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_nested_datasets ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
undo ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . catalog . undo ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . catalog . undo ( ) NEW_LINE DEDENT DEDENT
deepcopy ( self , sdata ) : NEW_LINE INDENT if isinstance ( sdata , StructureData ) : NEW_LINE INDENT return deepcopy ( sdata ) NEW_LINE DEDENT else : NEW_LINE INDENT return deepcopy ( sdata ) NEW_LINE DEDENT DEDENT
static ByteBuffer copy ( ByteBuffer bb ) { return bb . copy ( ) ; }
deepCopy ( self , Structure bb ) : NEW_LINE INDENT if isinstance ( bb , ArrayStructureBB ) : NEW_LINE INDENT return bb . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return bb . copy ( ) NEW_LINE DEDENT DEDENT
deepCopy ( StructureData data ) : NEW_LINE INDENT if isinstance ( data , ByteBuffer ) : NEW_LINE INDENT return data . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return data . copy ( ) NEW_LINE DEDENT DEDENT
deepCopy ( StructureData structureData , ArrayStructureBB arrayStructureBB ) : NEW_LINE INDENT if isinstance ( structureData , StructureBB ) : NEW_LINE INDENT return arrayStructureBB . deepCopy ( structureData ) NEW_LINE DEDENT return arrayStructureBB . deepCopy ( arrayStructureBB ) NEW_LINE DEDENT
static final boolean isIntvMerge ( ) { boolean intvMerge = false ; if ( intvMerge ) { return true ; } else { return false ; } }
CoordinateAxis1D addCoordinateAxis1D ( CoordinateAxis1D coordinateAxis1D ) { if ( coordinateAxis1D == null ) { throw new IllegalArgumentException ( " CoordinateAxis1D cannot be null . " ) ; } CoordinateAxis1D . addCoordinateAxis1D ( coordinateAxis1D ) ; return coordinateAxis1D ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _make_nested_table ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , Dataset ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
extend ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT super ( self , self ) . extend ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_latitude_values ( self , type ) : NEW_LINE INDENT latitude_values = [ ] NEW_LINE for latitude in self . latitude_values : NEW_LINE INDENT latitude_values . append ( latitude ) NEW_LINE DEDENT return latitude_values NEW_LINE DEDENT
long reverse ( long offset ) { if ( offset < 0 ) { throw new IllegalArgumentException ( " offset must be at least 0 . " ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset must be at least 0 . " ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset must be at least 0 . " ) ; } if ( offset < 0 ) { throw new IllegalArgumentException ( " offset must be at least 0 . " ) ; } return offset ; }
def def reversing ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT offset = self . offset NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT offset = self . offset NEW_LINE DEDENT else : NEW_LINE INDENT offset = self . offset NEW_LINE DEDENT return self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float ( self . float (
swap ( self , offset , length ) : NEW_LINE INDENT if offset < 0 : NEW_LINE INDENT offset = 0 NEW_LINE DEDENT else : NEW_LINE INDENT offset = offset NEW_LINE DEDENT return self . _swap ( offset , length ) NEW_LINE DEDENT
def _CoordinateAxes ( self ) : NEW_LINE INDENT return self . _CoordinateAxes NEW_LINE DEDENT
public public public public CoordinateTransform transform ( CoordinateTransform parameter ) { CoordinateTransform parameter = new CoordinateTransform ( ) ; parameter = new CoordinateTransform ( ) ; parameter . setName ( parameter . getName ( ) ) ; parameter . setName ( parameter . getName ( ) ) ; parameter . setName ( parameter . getName ( ) ) ; return parameter ; }
def getCommonParent ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _getCommonParent ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _getCommonParent ( ) NEW_LINE DEDENT DEDENT
def def _get_parent ( self ) : NEW_LINE INDENT return self . _get_parent ( ) NEW_LINE if self . _parent ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

add_shared_dimension ( self , dimension , name ) : NEW_LINE INDENT if dimension . getName ( ) == name : NEW_LINE INDENT self . add_dimension ( dimension ) NEW_LINE DEDENT else : NEW_LINE INDENT self . add_dimension ( dimension ) NEW_LINE DEDENT DEDENT
add_nested_group ( self , nested_group ) : NEW_LINE INDENT if nested_group is not None : NEW_LINE INDENT return self . add_nested_group ( nested_group ) NEW_LINE DEDENT DEDENT

addVariable ( self , name , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if value is not None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
removeDimension ( self , name ) : NEW_LINE INDENT if self . name == name : NEW_LINE INDENT self . name = name NEW_LINE DEDENT else : NEW_LINE INDENT self . name = name NEW_LINE DEDENT DEDENT
ensure_path ( path ) : NEW_LINE INDENT if not path : NEW_LINE INDENT return None NEW_LINE DEDENT if not path . startswith ( ' / ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not path . startswith ( ' / ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not path . startswith ( ' / ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
public public public void resolve ( ) throws IOException { if ( this . attributeTable != null ) { for ( int i = 0 ; i < Aliases . length ; i ++ ) { if ( i < Aliases . length - 1 ) { for ( Aliases . length > 0 ; i < Aliases . length ; i ++ ) { for ( Aliases . length ; i < Aliases . length ; i ++ ) { for ( Aliases . length ; i < Aliases . length ; i ++ ) { Aliases [ i ] = Aliases [ i ] ; } } } } } } } }
static DAS createDAS ( DDS ds , BaseType baseType ) { DAS das = new DAS ( ds ) ; das . setBaseType ( baseType ) ; return das ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
write_grid_datatypes ( self , grid_datatypes ) : NEW_LINE INDENT self . write_grid_datatypes ( grid_datatypes ) NEW_LINE DEDENT
static float [ ] dataMinMax ( float [ ] dataMinMax ) { if ( dataMinMax == null ) { return null ; } if ( dataMinMax . length == 0 ) { return dataMinMax ; } if ( dataMinMax . length == 1 ) { return dataMinMax ; } if ( dataMinMax . length == 2 ) { return dataMinMax ; } if ( dataMinMax . length == 3 ) { return dataMinMax ; } return dataMinMax ; }
static byte [ ] toBytes ( byte [ ] data ) { if ( data == null ) { return null ; } if ( data . length == 0 ) { return data ; } if ( data . length == 1 ) { return data ; } if ( data . length == 2 ) { return data ; } if ( data . length == 3 ) { return data ; } if ( data . length == 4 ) { return data ; } if ( data . length == 5 ) { return data ; } if ( data . length == 6 ) { return data ; } if ( data . length == 7 ) { return data ; } return data ; }
def _get_wtf ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return WTF_LINE DEDENT except AttributeError : NEW_LINE INDENT return WTF_LINE DEDENT DEDENT
write_geotiff_file ( self , geotiff_file ) : NEW_LINE INDENT if geotiff_file is None : NEW_LINE INDENT return NEW_LINE DEDENT self . geotiff_file = geotiff_file NEW_LINE DEDENT
write_exception ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT self . exception = exception NEW_LINE DEDENT else : NEW_LINE INDENT self . exception = exception NEW_LINE DEDENT DEDENT
_begin_api ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _api . begin ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _api . begin ( ) NEW_LINE DEDENT DEDENT
def def _get_top def _get_gribCollection ( self ) : NEW_LINE INDENT return self . _gribCollection . get_gribCollection ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_grib_collection ( self , grib_collection ) : NEW_LINE INDENT if not grib_collection : NEW_LINE INDENT return NEW_LINE DEDENT grib_collection . update ( ) NEW_LINE grib_collection . update ( ) NEW_LINE DEDENT
update_gbx_indices ( self , directory ) : NEW_LINE INDENT for index in self . gbx_indices : NEW_LINE INDENT self . gbx_indices [ index ] = index NEW_LINE DEDENT return self . gbx_indices NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create ( self ) : NEW_LINE INDENT if not self . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT self . _create ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _create ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT DEDENT
has different semantics than urlCompare . Match has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare has different semantics than urlCompare . urlCompare .
add_to_default_rc ( self , rc ) : NEW_LINE INDENT self . _add_to_default_rc ( rc ) NEW_LINE DEDENT
search_default_rc ( self ) : NEW_LINE INDENT return self . _search_default_rc ( ) NEW_LINE DEDENT
def def _get_parameters ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_parameters ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_parameters ( ) NEW_LINE DEDENT DEDENT
overwriteExistingEntries ( self , entries ) : NEW_LINE INDENT if len ( entries ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( entries ) == 2 : NEW_LINE INDENT return NEW_
load_external_loading ( self ) : NEW_LINE INDENT if self . _external_loading : NEW_LINE INDENT return self . _external_loading NEW_LINE DEDENT else : NEW_LINE INDENT return self . _external_loading NEW_LINE DEDENT DEDENT
get_top_level_datasets ( self ) : NEW_LINE INDENT return self . _get_top_level_datasets ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def _ public static final void setProjection ( final Projection__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def deal ( self , projections = None , resolution = None , resolution = None ) : NEW_LINE INDENT if resolution is None : NEW_LINE INDENT resolution = self . resolution NEW_LINE DEDENT elif resolution is not None : NEW_LINE INDENT resolution = self . resolution NEW_LINE DEDENT else : NEW_LINE INDENT resolution = self . resolution NEW_LINE DEDENT if resolution is None : NEW_LINE INDENT resolution = self . resolution NEW_LINE DEDENT return resolution NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
compare_prefix_name ( self , prefix_name ) : NEW_LINE INDENT prefix_name = prefix_name . lower ( ) NEW_LINE prefix_name = prefix_name . lower ( ) NEW_LINE prefix_name = prefix_name . lower ( ) NEW_LINE return prefix_name NEW_LINE DEDENT
run ( self , task ) : NEW_LINE INDENT self . task = task NEW_LINE if self . task is not None : NEW_LINE INDENT return self . task . run ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . task NEW_LINE DEDENT DEDENT
scan_latest_last_partition ( self , partition ) : NEW_LINE INDENT if partition is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _scan_latest_last_partition ( partition ) NEW_LINE DEDENT DEDENT
def get_result ( self ) : NEW_LINE INDENT result = [ ] NEW_LINE result = [ ] NEW_LINE result = [ ] NEW_LINE for i in range ( 0 , len ( result ) : NEW_LINE INDENT result . append ( result [ i ] ) NEW_LINE result . append ( result [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT
set_structure_data ( self , ArrayStructure arrayStructure ) : NEW_LINE INDENT if isinstance ( arrayStructure , StructureData ) : NEW_LINE INDENT self . StructureData = arrayStructure NEW_LINE DEDENT else : NEW_LINE INDENT self . StructureData = arrayStructure . StructureData NEW_LINE DEDENT DEDENT
get_structure_data ( self , ArrayStructure structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
_get_member_data ( self ) : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT
get_member_data_array ( self ) : NEW_LINE INDENT member_data_array = [ ] NEW_LINE for data in self . data : NEW_LINE INDENT member_data_array . append ( data ) NEW_LINE DEDENT return member_data_array ; }
scalar ( self , value ) : NEW_LINE INDENT if isinstance ( value , double . class ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float . class ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int . class ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float . class ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
scalar_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return int ( value ) NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return int ( value ) NEW_LINE DEDENT return value NEW_LINE DEDENT
get_scalar_member_data ( self ) : NEW_LINE INDENT scalar_member_data = self . _get_scalar_member_data ( ) NEW_LINE return scalar_member_data NEW_LINE DEDENT
get_scalar_member_data ( self ) : NEW_LINE INDENT return self . _get_scalar_member_data ( ) NEW_LINE DEDENT
get_scalar_member_data ( self ) : NEW_LINE INDENT return self . _get_scalar_member_data ( ) NEW_LINE DEDENT
def get_scalar_member_data ( self ) : NEW_LINE INDENT return self . _get_scalar_member_data ( ) NEW_LINE DEDENT
static String [ ] getMemberData ( Class < ? > clazz ) { String [ ] memberData = new String [ 0 ] ; memberData [ 0 ] = clazz . getName ( ) ; return memberData ; }
get_member_data ( self ) : NEW_LINE INDENT if self . _member_data is not None : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT return None NEW_LINE DEDENT
get_member_data ( self ) : NEW_LINE INDENT member_data = self . _member_data NEW_LINE if member_data is None : NEW_LINE INDENT return self . _member_data NEW_LINE DEDENT return member_data NEW_LINE DEDENT
get_member_data ( self ) : NEW_LINE INDENT member_data = self . _member_data NEW_LINE if member_data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return member_data NEW_LINE DEDENT
public public public static final void setPeg public static final void setPeg ( final double value , final double value , final double value ) { if ( value == 0.0 ) { if ( value == 0.0 ) { return ; } if ( value < 0 ) { return ; } if ( value < 0 ) { return ; } if ( value < 0 ) { return ; } if ( value > 0 ) { return ; } if ( value > 0 ) { return ; } if ( value < 0 ) { return ; } if ( value > 0 ) { return ; } if ( value < 0 ) { return ; } if ( value > 0 ) { return ; } if ( value < 0 ) { return ; } if ( value > 0 ) { return ; } if ( value < 0 ) { return ; } if ( value > 0 )
public public static boolean canonicalize ( final Sequence record ) { if ( filter . isCanonicalized ( ) ) { return true ; } else { return true ; } } }
def convert_view_to_constraint_string ( self , view ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_view_to_constraint ( view ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _convert_view_to_constraint_string ( view ) NEW_LINE DEDENT DEDENT
match_reference_X ( self , reference_X ) : NEW_LINE INDENT if reference_X is None : NEW_LINE INDENT return False NEW_LINE DEDENT if reference_X is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
filter ( self , filter ) : NEW_LINE INDENT if isinstance ( filter , str ) : NEW_LINE INDENT return filter NEW_LINE DEDENT elif isinstance ( filter , str ) : NEW_LINE INDENT return filter NEW_LINE DEDENT elif isinstance ( filter , tuple ) : NEW_LINE INDENT return filter NEW_LINE DEDENT else : NEW_LINE INDENT return filter NEW_LINE DEDENT DEDENT
count_fields ( self , view ) : NEW_LINE INDENT return self . _count_fields ( view ) NEW_LINE DEDENT

def def def get_included def def def public public public void walk ( ) { public void walk ( ) { if ( ! public void walk ( ) { return ; public void walk ( ) { for ( int i = 0 ; public void walk ( ) { for ( int i = 0 ; i < included declarations . size ( ) ; i ++ ) { for ( int i = 0 ; i < declarations . size ( ) ; i ++ ) { for ( int i = 0 ; i < declarations . size ( ) ; i ++ ) { for ( int i = 0 ; i < declarations . size ( ) ; i ++ ) { for ( int i = 0 ; i < declarations . size ( ) ; i ++ ) {
compile_constraint_string ( self , constraint_string ) : NEW_LINE INDENT if isinstance ( constraint_string , str ) : NEW_LINE INDENT return constraint_string NEW_LINE DEDENT elif isinstance ( constraint_string , str ) : NEW_LINE INDENT return constraint_string NEW_LINE DEDENT elif isinstance ( constraint_string , str ) : NEW_LINE INDENT return constraint_string NEW_LINE DEDENT else : NEW_LINE INDENT return constraint_string NEW_LINE DEDENT DEDENT
accept ( self , grib2 , ncx ) : NEW_LINE INDENT if grib2 : NEW_LINE INDENT return self . accept ( grib2 ) NEW_LINE DEDENT elif ncx : NEW_LINE INDENT return self . accept ( ncx ) NEW_LINE DEDENT elif grib2 : NEW_LINE INDENT return self . accept ( grib2 ) NEW_LINE DEDENT elif ncx : NEW_LINE INDENT return self . accept ( ncx ) NEW_LINE DEDENT elif grib2 : NEW_LINE INDENT return self . accept ( grib2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . accept ( ncx ) NEW_LINE DEDENT DEDENT
def actions ( self ) : NEW_LINE INDENT actions = [ ] NEW_LINE for action in self . _actions : NEW_LINE INDENT actions . append ( action ) NEW_LINE DEDENT return actions NEW_LINE DEDENT
byte [ ] get_machine_type ( ) { byte [ ] machine_type = { } ; if ( machine_type != null ) { return machine_type ; } return null ; }
set_machine_type ( self , machine_type ) : NEW_LINE INDENT self . _machine_type = machine_type NEW_LINE DEDENT
find_key_with_name ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT key = self . get_key ( name ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return key NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
read_file_header ( self , file_header ) : NEW_LINE INDENT if file_header is None : NEW_LINE INDENT return None NEW_LINE DEDENT file = open ( file_header , ' r ' ) NEW_LINE try : NEW_LINE INDENT file . seek ( 0 ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
print_part_information ( self , part_info ) : NEW_LINE INDENT if not part_info : NEW_LINE INDENT return NEW_LINE DEDENT part_info = part_info [ 0 ] NEW_LINE if not part_info [ 1 ] : NEW_LINE INDENT return NEW_LINE DEDENT if part_info [ 2 ] : NEW_LINE INDENT return NEW_LINE DEDENT if part_info [ 3 ] : NEW_LINE INDENT return NEW_LINE DEDENT if part_info [ 4 ] : NEW_LINE INDENT return NEW_LINE DEDENT if part_info [ 5 ] : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def get_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _data NEW_LINE DEDENT DEDENT
read_float ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return float ( self . read_float ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_string ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_string ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static int [ ] unpack ( int [ ] packedInts ) { int [ ] packedInts = new int [ packedInts . length ] ; for ( int i = 0 ; i < packedInts . length ; i ++ ) { packedInts [ i ] = packedInts [ i ] ; } return packedInts ; }
static String getBitString ( int integer ) { if ( integer == 0 ) { return "0" ; } if ( integer == 1 ) { return "1" ; } if ( integer == 2 ) { return "2" ; } if ( integer == 3 ) { return "3" ; } if ( integer == 4 ) { return "4" ; } if ( integer == 5 ) { return "5" ; } if ( integer == 6 ) { return "6" ; } if ( integer == 7 ) { return "7" ; } if ( integer == 8 ) { return "8" ; } return "8" ; }
write_to_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_to_file ( filename ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT self . _write_to_file ( filename ) NEW_LINE DEDENT DEDENT
public void traverse ( ) throws SAXException { if ( this . document != null ) { if ( this . document != null ) { this . document . appendChild ( this . document . getFirstChild ( ) ) ; } } }

all of the Alias tags in the XML document . Add each one to the correct Attribute Table .
expand ( self , table ) : NEW_LINE INDENT if isinstance ( table , list ) : NEW_LINE INDENT return table NEW_LINE DEDENT else : NEW_LINE INDENT return self . _expand ( table ) NEW_LINE DEDENT DEDENT
move_replicated_items ( self ) : NEW_LINE INDENT subtree = self . get_replicated_items ( ) NEW_LINE if subtree is not None : NEW_LINE INDENT return subtree NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_dataset_filename ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT filename = os . path . basename ( filename ) NEW_LINE if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return filename NEW_LINE DEDENT DEDENT
get_feature_type ( self ) : NEW_LINE INDENT feature_type = self . _get_feature_type ( ) NEW_LINE if feature_type is not None : NEW_LINE INDENT return feature_type NEW_LINE DEDENT return None NEW_LINE DEDENT
is_near ( self , x , y ) : NEW_LINE INDENT return self . is_near ( x , y ) NEW_LINE DEDENT
def _get_overrides ( self ) : NEW_LINE INDENT def _get_overrides ( self ) : NEW_LINE INDENT return self . _get_overrides ( ) NEW_LINE DEDENT def _get_overrides ( self ) : NEW_LINE INDENT return self . _get_overrides ( ) NEW_LINE DEDENT def _get_overrides ( self ) : NEW_LINE INDENT return self . _get_overrides ( ) NEW_LINE DEDENT DEDENT
def parseUnitSpecification ( self ) : NEW_LINE INDENT return self . _parseUnitSpecification ( ) NEW_LINE def parseUnit ( self ) : NEW_LINE INDENT return self . _parseUnit ( ) NEW_LINE DEDENT DEDENT
static void show ( Object object ) { if ( object == null ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { return ; } }
tiled ( self ) : NEW_LINE INDENT if self . dimensions == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT elif self . dimensions == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
covert ( self ) : NEW_LINE INDENT reftime = self . reftime NEW_LINE if reftime is not None : NEW_LINE INDENT return reftime NEW_LINE DEDENT return self NEW_LINE DEDENT
ProjectionRect getProjectionRect ( ) { ProjectionRect projectionRect = new ProjectionRect ( ) ; projectionRect . setProjection ( projection ) ; return projectionRect ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
turn_list ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , tuple ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , dict ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
def get_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , Array ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return value [ 0 ] NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
static double parseDouble ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return Double . NaN ; } if ( value . length ( ) == 1 ) { return Double . NaN ; } if ( value . length ( ) == 2 ) { return Double . parseDouble ( value ) ; } return Double . parseDouble ( value ) ; }
write ( self , f ) : NEW_LINE INDENT self . f = f NEW_LINE self . f . write ( f ) NEW_LINE DEDENT
static String trim ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } return value ; }
set_values ( self , values ) : NEW_LINE INDENT if isinstance ( values , list ) : NEW_LINE INDENT self . _values = values NEW_LINE DEDENT else : NEW_LINE INDENT self . _values = values NEW_LINE DEDENT DEDENT
set_values ( self , values ) : NEW_LINE INDENT if isinstance ( values , list ) : NEW_LINE INDENT self . values = values NEW_LINE DEDENT else : NEW_LINE INDENT self . values = values NEW_LINE DEDENT DEDENT
gather ( self , collection ) : NEW_LINE INDENT self . _collection = collection NEW_LINE return self . _collection NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
put ( self , message ) : NEW_LINE INDENT if not self . scheduled : NEW_LINE INDENT return NEW_LINE DEDENT self . scheduled = True NEW_LINE self . queue . put ( message ) NEW_LINE DEDENT
def def J def def def public public public public public static void jumpToTabbed def def def def def public public public public public public public public static public static public static final public static final public static void jumpToTab public static void jumpToTabbed public static void jumpToTabbed public static void jumpToTab ( int index = 0 ) { for ( int i = 0 , i = 0 ; i = 0 ; i = 0 ; for ( int i = 0 , i = 0 ; i < 4 ; i ++ public static final int i = 0 ; i
def def jumpToTab ( self ) : NEW_LINE INDENT tab = self . tabbedPane . getTab ( ) NEW_LINE if tab == None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return tab NEW_LINE DEDENT DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_look_and_ feel ( self , look_and_feel ) : NEW_LINE INDENT self . _look_and_feel = look_and_feel NEW_LINE self . _look_and_feel = look_and_feel NEW_LINE DEDENT
_call_event_thread ( self , event ) : NEW_LINE INDENT if not self . _event_thread : NEW_LINE INDENT self . _event_thread = event NEW_LINE DEDENT else : NEW_LINE INDENT self . _event_thread . start ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def prefer__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def rank__python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def _
CoordinateAxis findAxis ( AxisType axisType ) { CoordinateAxis coordinateAxis = null ; if ( axisType != null ) { coordinateAxis = new CoordinateAxis ( axisType ) ; } if ( coordinateAxis == null ) { coordinateAxis = new CoordinateAxis ( ) ; } return coordinateAxis ; }
def def def def public public public public static Projection public static CoordinateTransform getProjectionCT ( List < CoordinateTransforms > coordinateTransforms ) { return CoordinateTransforms . get ( CoordinateTransforms . get ( 0 ) ) ; }
def def Projection def def def def _ public public public static final public static Coord def def public public public public public public static public static public static boolean public static boolean public static final Coord public static Coord public static Coord public static Coord public static Coord public static Coord public static Coord public static Coord public static Coord public static Coord public static final Coord public static boolean isCoord public static final boolean isCoord public static final boolean is_coordTransform ( ) { if ( ! isCoord public static final boolean is_coordTransform ( ) { return false public static final boolean is_coord
def def def def def _ def def def def public public public public static boolean public static boolean boolean is_coordinateAxis1 def def def def _ public static public static boolean public static boolean public static boolean public static boolean def is_coordinateAxis1DAxis1D ( ) { if ( ! is_coordinateAxis1DAxis1D ( axes ) : NEW_LINE INDENT return false
subset ( self , subset ) : NEW_LINE INDENT if len ( subset ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def def def def _get_axes ( self , axes ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_dimensions ( self ) : NEW_LINE INDENT return self . dimensions NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
clone ( self ) : NEW_LINE INDENT if self . recursive : NEW_LINE INDENT self . recursive = True NEW_LINE DEDENT else : NEW_LINE INDENT self . recursive = False NEW_LINE DEDENT return self NEW_LINE DEDENT
get_selected_bean ( self ) : NEW_LINE INDENT bean = self . get_selected_bean ( ) NEW_LINE if bean is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return bean NEW_LINE DEDENT DEDENT
get_selected_beans ( self ) : NEW_LINE INDENT beans = [ ] NEW_LINE for bean in self . beans : NEW_LINE INDENT beans . append ( bean ) NEW_LINE DEDENT return beans NEW_LINE DEDENT
get_selected_cells ( self ) : NEW_LINE INDENT if self . columnSelection is not None : NEW_LINE INDENT return self . columnSelection . get_selected_cells ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def def def def def get_row ( self , row ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
restore_state ( self , state ) : NEW_LINE INDENT if state : NEW_LINE INDENT return self . _restore_state ( state ) NEW_LINE DEDENT return self . _restore_state ( state ) NEW_LINE DEDENT

close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . close ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_v ( self , v ) : NEW_LINE INDENT if isinstance ( v , six . string_types ) : NEW_LINE INDENT self . v = v NEW_LINE DEDENT else : NEW_LINE INDENT self . v = v NEW_LINE DEDENT DEDENT
_get_coordinate_axis ( self ) : NEW_LINE INDENT return self . _get_coordinate_axis ( ) NEW_LINE DEDENT
def def def get_coord_axis_coord_axis ( self , type ) : NEW_LINE INDENT return self . _get_coord_axis ( type ) NEW_LINE DEDENT
def def _get_parent_variables ( self ) : NEW_LINE INDENT parent = self . parent_variables NEW_LINE parent = self . parent_variables [ 0 ] NEW_LINE return parent NEW_LINE DEDENT
add_table_join ( self , cursor ) : NEW_LINE INDENT self . cursor = cursor NEW_LINE self . cursor . add_table_join ( self . cursor ) NEW_LINE return self . cursor NEW_LINE DEDENT
void addFeatureIterator ( StandardPointFeatureIterator featureIterator ) { if ( featureIterator == null ) { return ; } featureIterator . addFeatureIterator ( featureIterator ) ; featureIterator . addFeatureIterator ( featureIterator ) ; }
convert ( self , conversion ) : NEW_LINE INDENT if isinstance ( conversion , NodeMap ) : NEW_LINE INDENT return conversion NEW_LINE DEDENT else : NEW_LINE INDENT if isinstance ( conversion , NodeMap ) : NEW_LINE INDENT return conversion NEW_LINE DEDENT else : NEW_LINE INDENT return conversion NEW_LINE DEDENT DEDENT DEDENT

SimpleUnit createSimpleUnit ( String name ) { SimpleUnit result = new SimpleUnit ( ) ; result . setName ( name ) ; return result ; }
subclass_access ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _subclass_access ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
is_unit_string_convertible ( unitString1 , unitString2 ) : NEW_LINE INDENT if isinstance ( unitString1 , str ) : NEW_LINE INDENT return unitString1 == unitString2 NEW_LINE DEDENT elif isinstance ( unitString2 , str ) : NEW_LINE INDENT return unitString1 == unitString2 NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
is_date ( self ) : NEW_LINE INDENT return self . units . is_date ( ) NEW_LINE DEDENT
is_time_unit ( self , unit ) : NEW_LINE INDENT if unit is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( unit , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( unit , float ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( unit , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
convert ( inputUnit , outputUnit ) : NEW_LINE INDENT if isinstance ( inputUnit , Unit ) : NEW_LINE INDENT return inputUnit NEW_LINE DEDENT if isinstance ( outputUnit , Unit ) : NEW_LINE INDENT return outputUnit NEW_LINE DEDENT if isinstance ( inputUnit , Unit ) : NEW_LINE INDENT return inputUnit NEW_LINE DEDENT if isinstance ( outputUnit , Unit ) : NEW_LINE INDENT return outputUnit NEW_LINE DEDENT return inputUnit NEW_LINE DEDENT
convert ( self , value , unit ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
static UnknownUnit getInstance ( String name ) { if ( name == null ) { throw new NullPointerException ( ) ; } return new UnknownUnit ( name ) ; }
extract ( self , value ) : NEW_LINE INDENT if isinstance ( value , ScaledUnit ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT

def generate_boolean_clause ( self ) : NEW_LINE INDENT def generate_clause ( self ) : NEW_LINE INDENT return self . function ( ) NEW_LINE DEDENT def generate_clause ( self ) : NEW_LINE INDENT return self . function ( ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def def generate_ def def def def def def generate_ def def def def def def generate_ def def def def generate def generate_ def generate ( self ) : def generate ( self ) : def generate ( self ) : NEW__python__ def generate ( self ) : NEW_LINE INDENT def generate ( self ) : NEW_LINE INDENT def generate ( self ) : NEW_LINE INDENT def generate ( self ) : NEW_LINE INDENT self .
static BufferedImage adapt ( BufferedImage image , int rank ) { if ( rank == 2 ) { return image ; } if ( rank == 3 ) { return image . copy ( ) ; } if ( rank == 4 ) { return image . copy ( ) ; } if ( rank == 5 ) { return image . copy ( ) ; } if ( rank == 6 ) { return image . copy ( ) ; } if ( rank == 7 ) { return image . copy ( ) ; } if ( rank == 8 ) { return image . copy ( ) ; } return image . copy ( ) ; }
def def crawl ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _catalog . crawl ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _catalog . crawl ( ) NEW_LINE DEDENT DEDENT
crawl ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , list ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT elif isinstance ( dataset , dict ) : NEW_LINE INDENT return dataset NEW_LINE DEDENT else : NEW_LINE INDENT return dataset NEW_LINE DEDENT DEDENT
crawl ( self , dataset ) : NEW_LINE INDENT if isinstance ( dataset , list ) : NEW_LINE INDENT return crawl ( dataset ) NEW_LINE DEDENT else : NEW_LINE INDENT return crawl ( dataset ) NEW_LINE DEDENT DEDENT
get_index_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_index_file ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_file ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( filename ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
release ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT if os . path . exists ( file ) : NEW_LINE INDENT os . unlink ( file ) NEW_LINE DEDENT DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def set_position ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . position = self . position NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . position = 0 NEW_LINE self . position = 0 NEW_LINE DEDENT DEDENT
copy_buffer ( self , buffer ) : NEW_LINE INDENT if isinstance ( buffer , memoryview ) : NEW_LINE INDENT return buffer . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return buffer . copy ( ) NEW_LINE DEDENT DEDENT
read_data ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT data = file . read ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT return data NEW_LINE DEDENT
read_shorts ( self , shorts ) : NEW_LINE INDENT if len ( shorts ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( shorts ) == 1 : NEW_LINE INDENT return shorts [ 0 ] NEW_LINE DEDENT elif len ( shorts ) == 2 : NEW_LINE INDENT return shorts [ 1 ] NEW_LINE DEDENT elif len ( shorts ) == 3 : NEW_LINE INDENT return shorts [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return shorts [ 3 ] NEW_LINE DEDENT DEDENT
read ( self , position ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . buffer . read ( position ) NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return self . buffer . read ( position ) NEW_LINE DEDENT DEDENT
read_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT for i in array : NEW_LINE INDENT if isinstance ( i , int ) : NEW_LINE INDENT ints = [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT ints = [ i ] NEW_LINE DEDENT DEDENT return ints NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
read_long_array ( self , longs ) : NEW_LINE INDENT if isinstance ( longs , list ) : NEW_LINE INDENT return longs NEW_LINE DEDENT elif isinstance ( longs , tuple ) : NEW_LINE INDENT return longs NEW_LINE DEDENT elif isinstance ( longs , list ) : NEW_LINE INDENT return longs NEW_LINE DEDENT return longs NEW_LINE DEDENT
read_floats ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_floats ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _read_floats ( ) NEW_LINE DEDENT DEDENT
read_double_array ( self , doubles ) : NEW_LINE INDENT if isinstance ( doubles , list ) : NEW_LINE INDENT doubles = [ doubles ] NEW_LINE DEDENT else : NEW_LINE INDENT doubles = [ doubles ] NEW_LINE DEDENT if isinstance ( doubles , dict ) : NEW_LINE INDENT doubles = [ doubles ] NEW_LINE DEDENT return doubles NEW_LINE DEDENT
read_string ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_string ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_string ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_string ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def write_boolean_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , bool ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , bool ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
def write_shorts ( self , shorts ) : NEW_LINE INDENT if len ( shorts ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( shorts ) == 1 : NEW_LINE INDENT return shorts [ 0 ] NEW_LINE DEDENT return shorts [ 0 ] NEW_LINE DEDENT
def def chars ( self , chars ) : NEW_LINE INDENT if isinstance ( chars , basestring ) : NEW_LINE INDENT return chars NEW_LINE DEDENT elif isinstance ( chars , basestring ) : NEW_LINE INDENT return chars NEW_LINE DEDENT else : NEW_LINE INDENT return chars NEW_LINE DEDENT DEDENT
def def array_ints ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _array_ints ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _array_ints ( ) NEW_LINE DEDENT DEDENT
write_array ( self , long [ ] longs ) : NEW_LINE INDENT if len ( longs ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( longs ) == 1 : NEW_LINE INDENT return longs [ 0 ] NEW_LINE DEDENT return longs [ 0 ] NEW_LINE DEDENT
static float [ ] getFloatArray ( float [ ] floats ) { if ( floats == null ) { return null ; } float [ ] floats = new float [ floats . length ] ; for ( float f : floats ) { floats [ f ] = Float . parseFloat ( f ) ; } return floats ; }
static double [ ] toArray ( double [ ] doubles ) { if ( doubles == null ) { return null ; } double [ ] doubles = new double [ doubles . length ] ; for ( double d : doubles ) { doubles [ d ] = d ; } return doubles ; }
write_string ( self , string ) : NEW_LINE INDENT if len ( string ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( string ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
write ( self , string ) : NEW_LINE INDENT if len ( string ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( string ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( string ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( string ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
search_forward ( self , pos ) : NEW_LINE INDENT if pos == self . current_pos : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . search_forward ( pos ) NEW_LINE DEDENT DEDENT
def append ( self , result ) : NEW_LINE INDENT if self . selector_result is not None : NEW_LINE INDENT return self . selector_result . append ( result ) NEW_LINE DEDENT return self . selector_result NEW_LINE DEDENT
_get_directory_partition_or_directory_collection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_directory_partition_or_directory_collection ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String canonicalName ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } return name ; }
static PartitionCollection createPartitionCollection ( ) { PartitionCollection partitionCollection = new PartitionCollection ( ) ; partitionCollection . initialize ( ) ; partitionCollection . initialize ( ) ; partitionCollection . initialize ( ) ; partitionCollection . initialize ( ) ; return partitionCollection ; }
static void recurse ( ) { if ( this . children != null ) { this . children . addAll ( this . children ) ; } }
def def make_child_directory ( self , directory ) : NEW_LINE INDENT if isinstance ( directory , DirectoryBuilder ) : NEW_LINE INDENT return DirectoryBuilder ( directory ) NEW_LINE DEDENT else : NEW_LINE INDENT return directory NEW_LINE DEDENT DEDENT
read_files ( self , index ) : NEW_LINE INDENT if isinstance ( index , list ) : NEW_LINE INDENT return self . _read_files ( index ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _read_files ( index ) NEW_LINE DEDENT DEDENT
def def def getGridDatatype ( self ) : NEW_LINE INDENT GridCoordSys = self . _getGridCoordSys ( ) NEW_LINE if self . GridCoordSys is not None : NEW_LINE INDENT return self . _getGridCoordSys ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _getGridCoordSys ( ) NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _cache . close ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_cache_element ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _remove_cache_element ( ) NEW_LINE self . _remove_cache_element ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove ( self , object ) : NEW_LINE INDENT if object is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance (
void release ( FileCacheable fileCacheable ) { if ( fileCacheable != null && fileCacheable . isClosed ( ) ) { fileCacheable . close ( ) ; } }

CacheElement getCacheElement ( String hashKey ) { if ( hashKey == null ) { throw new NullPointerException ( " hashKey " ) ; } if ( hashKey . equals ( " " ) ) { throw new NullPointerException ( " hashKey " ) ; } if ( hashKey . equals ( " " ) ) { throw new NullPointerException ( " hashKey " ) ; } if ( hashKey . equals ( " " ) ) { throw new NullPointerException ( " hashKey " ) ; } if ( hashKey . equals ( " " ) ) { throw new NullPointerException ( " hashKey " ) ; } return cacheElement ; }
removeCacheEntries ( self ) : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE self . cache . clear ( ) NEW_LINE self . cache . clear ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
coverage ( self , longitude , latitude ) : NEW_LINE INDENT if longitude : NEW_LINE INDENT return self . _coverage ( longitude , latitude ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _coverage ( latitude , longitude ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def _ def def def def def _ def def def def def _ def def def def def _ def def def def _ def def def def def _ def def def def def def def _ public static final public static final public static boolean isZ def def _ def _ def _
find_x_y_index ( self , x , y ) : NEW_LINE INDENT x = x . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE x = x . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE DEDENT
find_closest_point ( self , x , y ) : NEW_LINE INDENT n = len ( x ) NEW_LINE if n == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif n == 1 : NEW_LINE INDENT return x NEW_LINE DEDENT elif n == 2 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
find_lat_lon_point ( self , x , y ) : NEW_LINE INDENT return self . _find_lat_lon_point ( x , y ) NEW_LINE DEDENT
find_closest_point ( self , x , y ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . find_closest_point ( x , y ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_slider_indicator_position ( self ) : NEW_LINE INDENT if self . slider_indicator is not None : NEW_LINE INDENT return self . slider_indicator NEW_LINE DEDENT else : NEW_LINE INDENT return self . slider_indicator NEW_LINE DEDENT DEDENT
item_selected ( self ) : NEW_LINE INDENT item = self . item NEW_LINE if item is not None : NEW_LINE INDENT return item NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def try_with_resource ( self , resource ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . try_with_resource ( resource ) NEW_LINE DEDENT finally : NEW_LINE INDENT self . try_with_resource ( resource ) NEW_LINE DEDENT DEDENT
copy_remote_files ( self , localDir ) : NEW_LINE INDENT localDir . mkdirs ( ) NEW_LINE localDir . mkdirs ( ) NEW_LINE localDir . mkdirs ( ) NEW_LINE localDir . mkdirs ( ) NEW_LINE localDir . mkdirs ( ) NEW_LINE localDir . mkdirs ( ) NEW_LINE DEDENT
combine ( grib1 , grib2 , bufr ) : NEW_LINE INDENT if grib1 == grib2 : NEW_LINE INDENT return grib1 NEW_LINE DEDENT elif grib1 == grib2 : NEW_LINE INDENT return grib1 NEW_LINE DEDENT elif grib1 == grib2 : NEW_LINE INDENT return grib2 NEW_LINE DEDENT else : NEW_LINE INDENT return grib1 NEW_LINE DEDENT DEDENT
convert_period_string ( self , period_string ) : NEW_LINE INDENT if isinstance ( period_string , basestring ) : NEW_LINE INDENT return period_string NEW_LINE DEDENT elif isinstance ( period_string , basestring ) : NEW_LINE INDENT return period_string NEW_LINE DEDENT else : NEW_LINE INDENT return period_string NEW_LINE DEDENT DEDENT


subtract ( self , period ) : NEW_LINE INDENT if not self . units : NEW_LINE INDENT self . units = period . units NEW_LINE DEDENT else : NEW_LINE INDENT self . units = period . units NEW_LINE DEDENT return self . units NEW_LINE DEDENT
convert_calendar_period_to_conversion_factor ( self , calendar_period ) : NEW_LINE INDENT if isinstance ( calendar_period , CalendarPeriod ) : NEW_LINE INDENT return calendar_period . conversion_factor NEW_LINE DEDENT return calendar_period . conversion_factor NEW_LINE DEDENT
duration ( self ) : NEW_LINE INDENT duration = self . _duration NEW_LINE if duration is None : NEW_LINE INDENT return None NEW_LINE DEDENT return duration NEW_LINE DEDENT
def start_offset ( self , start , end ) : NEW_LINE INDENT start = self . start NEW_LINE end = self . end NEW_LINE self . start = start NEW_LINE self . end = end NEW_LINE DEDENT
sync ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _sync ( file ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _sync ( file ) NEW_LINE DEDENT DEDENT
def initialize_parameters ( self ) : NEW_LINE INDENT self . parameters = { } NEW_LINE self . tables = [ ] NEW_LINE DEDENT

longest_path_match ( self , path ) : NEW_LINE INDENT longest_path_match = self . _longest_path_match ( path ) NEW_LINE if longest_path_match : NEW_LINE INDENT return longest_path_match NEW_LINE DEDENT return None NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_dataRoot ( self , dataRootExt ) : NEW_LINE INDENT if isinstance ( dataRootExt , list ) : NEW_LINE INDENT dataRootExt = dataRootExt [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT dataRootExt = dataRootExt [ 0 ] NEW_LINE DEDENT return dataRootExt NEW_LINE DEDENT
def def get_calendar_date_range ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _calendar_date_range NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _calendar_date_range NEW_LINE DEDENT DEDENT
redo_variables ( self , variables ) : NEW_LINE INDENT if not isinstance ( variables , list ) : NEW_LINE INDENT variables = [ variables ] NEW_LINE DEDENT if not isinstance ( variables , list ) : NEW_LINE INDENT variables = [ variables ] NEW_LINE DEDENT for i in range ( len ( variables ) ) : NEW_LINE INDENT for j in range ( len ( variables ) ) : NEW_LINE INDENT variables [ j ] = variables [ j ] NEW_LINE DEDENT DEDENT return variables NEW_LINE DEDENT
def def create_netcdf_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT if self . fill_mode : NEW_LINE INDENT self . fill_mode = True NEW_LINE DEDENT else : NEW_LINE INDENT self . fill_mode = False NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT self . fill_mode = False NEW_LINE DEDENT DEDENT
add_root_group ( self , name , parent = None ) : NEW_LINE INDENT if parent is None : NEW_LINE INDENT parent = self NEW_LINE DEDENT else : NEW_LINE INDENT parent = parent . parent NEW_LINE DEDENT if parent . name == name : NEW_LINE INDENT parent . name = name NEW_LINE DEDENT return parent NEW_LINE DEDENT
add_enum_typedef ( self , file ) : NEW_LINE INDENT if not self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_defined ( ) : NEW_LINE INDENT return NEW_LINE
delete_group_attribute ( self ) : NEW_LINE INDENT if self . group_attribute is not None : NEW_LINE INDENT self . group_attribute . delete ( ) NEW_LINE self . group_attribute . delete ( ) NEW_LINE DEDENT DEDENT
rename_group ( self , group ) : NEW_LINE INDENT if group is None : NEW_LINE INDENT return NEW_LINE DEDENT name = group . getName ( ) NEW_LINE if name . startswith ( ' _ ' ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE DEDENT else : NEW_LINE INDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE DEDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE return name NEW_LINE DEDENT
def make_structure ( self , variables ) : NEW_LINE INDENT if len ( variables ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
write_to_file ( self , file ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return NEW_LINE DEDENT self . _write_to_file ( file ) NEW_LINE DEDENT
write_xml ( self , obj ) : NEW_LINE INDENT if obj is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return obj . write_xml ( ) NEW_LINE DEDENT DEDENT
extract_info ( self , feature_dataset ) : NEW_LINE INDENT if feature_dataset is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _extract_info ( feature_dataset ) NEW_LINE DEDENT DEDENT
divide ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , Unit ) : NEW_LINE INDENT return self . _divide ( unit ) NEW_LINE DEDENT return self . _divide ( unit ) NEW_LINE DEDENT
convert ( self , unit ) : NEW_LINE INDENT if isinstance ( unit , Unit ) : NEW_LINE INDENT return self . convert ( unit ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . convert ( unit ) NEW_LINE DEDENT DEDENT
convert ( self , value , unit ) : NEW_LINE INDENT if isinstance ( value , unit ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , unit ) : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
a DataDDS into an Array for a Structure member variable .
static Array < DataDDS > getTopLevelVariables ( ) { return new Array < DataDDS > ( ) ; }
a DataDDS into an Array < DataDDS > ( ) { return new DataDDS ( ) ; }
reinit ( self ) : NEW_LINE INDENT if self . _shutdown : NEW_LINE INDENT return NEW_LINE DEDENT self . _shutdown = True NEW_LINE self . _reinit ( ) NEW_LINE DEDENT

a time udunit string to a time udunit string .
ensureCapacity ( self , minCapacity ) : NEW_LINE INDENT if minCapacity < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity < minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity < self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if self . capacity > self . minCapacity : NEW_LINE INDENT return NEW_LINE DEDENT if
get_element ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( element , list ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
def buildCatalog ( String path ) : NEW_LINE INDENT if ( path . startsWith ( InvDatasetScan . getPath ( ) ) : NEW_LINE INDENT return new InvDatasetScan ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT return new InvDatasetScan ( path ) NEW_LINE DEDENT DEDENT

def def def _get_data_type ( self ) : NEW_LINE INDENT return self . data_type ( ) NEW_LINE DEDENT def _get_data_type ( self ) : NEW_LINE INDENT return self . data_type ( ) NEW_LINE DEDENT
static Grib2Pds getGrib2Pds ( ) { Grib2Pds grib2pds = new Grib2Pds ( ) ; grib2pds . setGrib2Pds ( grib2pds ) ; return grib2pds ; }
public static void setRefTime ( String refTime ) { if ( refTime == null ) { throw new NullPointerException ( " refTime " ) ; } if ( refTime == null ) { throw new NullPointerException ( " refTime " ) ; } if ( refTime == null ) { throw new NullPointerException ( " refTime " ) ; } }
scale_factor ( self , value ) : NEW_LINE INDENT if isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return self . _scale_factor ( value ) NEW_LINE DEDENT DEDENT
parse_localConcepts ( self ) : NEW_LINE INDENT localConcepts = self . _parse_localConcepts ( ) NEW_LINE if localConcepts : NEW_LINE INDENT return localConcepts NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
public void addLocalConcepts ( Map < String , String > localConcepts ) { Map < String , String > localConcepts = new HashMap < String , String > ( ) ; localConcepts . put ( " localConcepts " , localConcepts ) ; }
clean ( self , line ) : NEW_LINE INDENT if not line . strip ( ) : NEW_LINE INDENT return NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line . strip ( ) : NEW_LINE INDENT return NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line . strip ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return line NEW_LINE DEDENT
store_local_concepts ( self , localConcepts ) : NEW_LINE INDENT self . localConcepts = localConcepts NEW_LINE self . localConcepts . clear ( ) NEW_LINE self . localConcepts . putAll ( localConcepts ) NEW_LINE DEDENT
write_grib1tables ( self ) : NEW_LINE INDENT grib1tables = [ ] NEW_LINE grib1tables = [ ] NEW_LINE for table in self . grib1tables : NEW_LINE INDENT grib1tables . append ( table ) NEW_LINE DEDENT return grib1tables NEW_LINE DEDENT
def write_lookupTables ( self ) : NEW_LINE INDENT lookupTables = [ ] NEW_LINE for table in self . lookupTables : NEW_LINE INDENT lookupTables . append ( table ) NEW_LINE DEDENT return lookupTables NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static List < Grib1Table > getGrib1Tables ( ) { List < Grib1Table > grib1Tables = new ArrayList < Grib1Table > ( ) ; grib1Tables . add ( new Grib1Table ( ) ) ; grib1Tables . add ( new Grib1Table ( ) ) ; return grib1Tables ; }
DatasetSourceType getDatasetSourceType ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " DatasetSourceType name is null " ) ; } DatasetSourceType sourceType = new DatasetSourceType ( name ) ; sourceType . setName ( name ) ; return sourceType ; }
def def get_inv_catalog ( self , DatasetSource ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_inv_catalog ( DatasetSource ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_inv_catalog ( DatasetSource ) NEW_LINE DEDENT DEDENT
def def _generate_new_invCatalog ( self ) : NEW_LINE INDENT if self . DatasetSource is not None : NEW_LINE INDENT return self . DatasetSource . clone ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache . load ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
load_picture ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _load_picture ( url ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _load_picture ( url ) NEW_LINE DEDENT DEDENT
void notifySourcePictureListener ( SourcePictureListener sourcePictureListener ) { if ( sourcePictureListener != null ) { sourcePictureListener . notifySourcePictureListener ( sourcePictureListener ) ; } }
update ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _update ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _update ( ) NEW_LINE DEDENT DEDENT
create_scaled_image ( self , image ) : NEW_LINE INDENT if not self . thread : NEW_LINE INDENT self . thread = threading . Thread ( ) NEW_LINE self . thread . start ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . thread . join ( ) NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT if self . size is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . size NEW_LINE DEDENT
size ( self , image ) : NEW_LINE INDENT if image is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return image . size ( ) NEW_LINE DEDENT DEDENT
get_merged_parts ( self , file ) : NEW_LINE INDENT merged_parts = [ ] NEW_LINE for part in file : NEW_LINE INDENT merged_parts . append ( part ) NEW_LINE DEDENT merged_parts = [ ] NEW_LINE for part in merged_parts : NEW_LINE INDENT merged_parts . append ( part ) NEW_LINE DEDENT return merged_parts NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_sounding_data ( self ) : NEW_LINE INDENT if self . _sounding_data is not None : NEW_LINE INDENT self . _sounding_data = self . _sounding_data NEW_LINE self . _sounding_data = self . _sounding_data NEW_LINE DEDENT DEDENT
validate_groups ( self , groups ) : NEW_LINE INDENT for group in groups : NEW_LINE INDENT if group not in self . groups : NEW_LINE INDENT continue NEW_LINE DEDENT if group not in self . groups : NEW_LINE INDENT continue NEW_LINE DEDENT if group not in self . groups : NEW_LINE INDENT continue NEW_LINE DEDENT self . groups . add ( group ) NEW_LINE self . groups . add ( group ) NEW_LINE DEDENT DEDENT
create_cache_root ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache_root = os . path . expanduser ( self . cache_root ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT self . cache_root = os . path . expanduser ( self . cache_root ) NEW_LINE DEDENT return self . cache_root NEW_LINE DEDENT
check_root ( ) : NEW_LINE INDENT if os . path . isdir ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
get_cached_file ( self ) : NEW_LINE INDENT if self . _cached_file is None : NEW_LINE INDENT self . _cached_file = self . _get_cached_file ( ) NEW_LINE DEDENT if self . _cached_file is not None : NEW_LINE INDENT self . _cached_file = self . _cached_file NEW_LINE DEDENT return self . _cached_file NEW_LINE DEDENT
remove_date ( self , date ) : NEW_LINE INDENT if date < self . cutoff : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
void removeFiles ( int maxBytes ) { if ( maxBytes > 0 ) { for ( int i = 0 ; i < maxBytes ; i ++ ) { if ( files . get ( i ) == null ) { files . remove ( i ) ; } else { files . remove ( i ) ; } } } }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def copy ( self ) : NEW_LINE INDENT if self . _cache is not None : NEW_LINE INDENT return self . _cache . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _cache NEW_LINE DEDENT DEDENT
def def _get_numeric_numeric_numeric_values ( self , axis ) : NEW_LINE INDENT return self . _numeric_values . get_numeric_values ( axis ) NEW_LINE DEDENT
get_string_representation ( self , string_representation ) : NEW_LINE INDENT if isinstance ( string_representation , str ) : NEW_LINE INDENT return string_representation NEW_LINE DEDENT else : NEW_LINE INDENT return string_representation NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
replaceRowList ( self , rowList ) : NEW_LINE INDENT if not rowList : NEW_LINE INDENT return NEW_LINE DEDENT rowList = [ ] NEW_LINE for row in rowList : NEW_LINE INDENT rowList . append ( row ) NEW_LINE DEDENT return rowList NEW_LINE DEDENT
get_selected_row ( self ) : NEW_LINE INDENT row = self . get_row ( ) NEW_LINE if row is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return row NEW_LINE DEDENT DEDENT
decrement ( self , selection ) : NEW_LINE INDENT if selection . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if selection . size ( ) ==
get_model_index ( self ) : NEW_LINE INDENT for column in self . columns : NEW_LINE INDENT model_index = self . get_model_index ( column ) NEW_LINE if model_index is not None : NEW_LINE INDENT return model_index NEW_LINE DEDENT DEDENT DEDENT
set_current_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . current_value = value NEW_LINE DEDENT
void sort ( String name ) { if ( name == null ) { return ; } if ( name . length ( ) == 0 ) { return ; } if ( name . length ( ) == 0 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ; } if ( name . length ( ) == 1 ) { return ; } if ( name . length ( ) == 2 ) { return ;
swap ( self , array ) : NEW_LINE INDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT elif len ( array ) == 2 : NEW_LINE INDENT return array [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT DEDENT
static MFileOS getMFileOS ( File file ) { if ( file == null ) { return null ; } if ( file . exists ( ) ) { return new MFileOS ( file ) ; } else { return new MFileOS ( file ) ; } }
rotate ( self ) : NEW_LINE INDENT self . _rotate ( ) NEW_LINE self . _rotate ( ) NEW_LINE DEDENT
read ( filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return XMLStore . read ( filename ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read ( self , input_stream ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read ( input_stream ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read ( self ) : NEW_LINE INDENT return self . _read ( ) NEW_LINE DEDENT
create_store_file ( self ) : NEW_LINE INDENT if self . _store_file is None : NEW_LINE INDENT self . _store_file = self . _create_store_file ( ) NEW_LINE DEDENT return self . _store_file NEW_LINE DEDENT
save ( self ) : NEW_LINE INDENT filename = self . filename NEW_LINE if not filename : NEW_LINE INDENT filename = self . filename NEW_LINE DEDENT else : NEW_LINE INDENT filename = self . filename NEW_LINE DEDENT return filename NEW_LINE DEDENT
save ( self ) : NEW_LINE INDENT return self . _save ( ) NEW_LINE DEDENT
def def def write_atomic_variable ( self , variable ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _write_atomic_variable ( variable ) NEW_LINE DEDENT def write_atomic_variable ( self , variable ) : NEW_LINE INDENT self . _write_atomic_variable ( variable ) NEW_LINE DEDENT def write_atomic_variable ( self , variable ) : NEW_LINE INDENT self . _write_atomic_variable ( variable ) NEW_LINE DEDENT DEDENT
out_scalar ( self ) : NEW_LINE INDENT return self . _out_scalar ( ) NEW_LINE DEDENT
def def write_structure ( self ) : NEW_LINE INDENT out = { } NEW_LINE for structure in self . structure : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT out [ structure . name ] = structure NEW_LINE DEDENT else : NEW_LINE INDENT out [ structure . name ] = structure NEW_LINE DEDENT DEDENT DEDENT
def write_sequence ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , Sequence ) : NEW_LINE INDENT return self . write_sequence ( sequence ) NEW_LINE DEDENT elif isinstance ( sequence , Sequence ) : NEW_LINE INDENT return self . write_sequence ( sequence ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . write_sequence ( sequence ) NEW_LINE DEDENT DEDENT
write_single_record ( self , record ) : NEW_LINE INDENT if isinstance ( record , Record ) : NEW_LINE INDENT self . write_single_record ( record ) NEW_LINE DEDENT else : NEW_LINE INDENT self . write_single_record ( record ) NEW_LINE DEDENT DEDENT
def def validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT if not self . is_valid ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_wmo_station_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _wmo_station_id NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_entry ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , str ) : NEW_LINE INDENT return self . read_entry ( stream ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . read_entry ( stream ) NEW_LINE DEDENT DEDENT
retrieve_data ( self , field_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_data ( field_name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
pack_point_data ( self ) : NEW_LINE INDENT return self . pack_point_data ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void abstractMethods ( AbstractCursor cursor ) { if ( cursor == null ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ; if ( cursor . isClosed ( ) ) return ;
netcdf ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . netcdf_file NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_netcdf_file ( self , netcdf_file ) : NEW_LINE INDENT if netcdf_file is not None : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT if netcdf_file is not None : NEW_LINE INDENT return netcdf_file NEW_LINE DEDENT return netcdf_file NEW_LINE DEDENT
def def write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _write_file ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return self . _write_file ( ) NEW_LINE DEDENT return self . _write_file ( ) NEW_LINE DEDENT
def def def def get_list_stations ( self , stations ) : NEW_LINE def get_stations ( self ) : NEW_LINE INDENT stations = [ ] NEW_LINE def get_stations ( self ) : NEW_LINE INDENT stations = [ ] NEW_LINE def get_stations ( self ) : NEW_LINE INDENT stations . append ( self . stations ) NEW_LINE return self . stations NEW_LINE DEDENT return self . stations NEW_LINE DEDENT return stations NEW_LINE DEDENT
set_selected_sttion ( self , sttion_id ) : NEW_LINE INDENT self . selected_sttion = sttion_id NEW_LINE DEDENT
find_station ( self , point ) : NEW_LINE INDENT station = self . get_station ( point ) NEW_LINE if station is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return station NEW_LINE DEDENT DEDENT
find_station_closest ( self , point ) : NEW_LINE INDENT station = self . get_station ( point ) NEW_LINE if station is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return station NEW_LINE DEDENT DEDENT
get_selected_station ( self ) : NEW_LINE INDENT station = self . get_selected_station ( ) NEW_LINE if station is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return station NEW_LINE DEDENT DEDENT
get_projection_type_name ( self , projection_type ) : NEW_LINE INDENT projection_type_name = projection_type . name NEW_LINE if projection_type_name : NEW_LINE INDENT projection_type_name = projection_type_name NEW_LINE DEDENT return projection_type_name NEW_LINE DEDENT
get_all_stations ( self , bounding_box ) : NEW_LINE INDENT if bounding_box is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_all_stations ( bounding_box ) NEW_LINE DEDENT DEDENT
find_station_by_name ( self , name ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE return self . find_station_by_name ( name ) NEW_LINE DEDENT
List < Station > getAllStations ( ) { List < Station > allStations = new ArrayList < Station > ( ) ; for ( int i = 0 ; i < allStations . size ( ) ; i ++ ) { allStations . add ( allStations . get ( i ) ) ; } return allStations ; }
get_data ( self ) : NEW_LINE INDENT data = [ ] NEW_LINE for station in self . getStations ( ) : NEW_LINE INDENT data . append ( station ) NEW_LINE DEDENT data = [ ] NEW_LINE for station in self . getStations ( ) : NEW_LINE INDENT data . append ( station ) NEW_LINE DEDENT return data NEW_LINE DEDENT
read_data ( self , ray ) : NEW_LINE INDENT try : NEW_LINE INDENT data = ray . read_data ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT data = ray . read_data ( ) NEW_LINE DEDENT return data NEW_LINE DEDENT
dot ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT elif len ( args ) == 3 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 4 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 3 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return args [ 2 ] NEW_LINE DEDENT DEDENT
norm ( self , vector ) : NEW_LINE INDENT norm = np . linalg . norm ( vector ) NEW_LINE if norm is not None : NEW_LINE INDENT return norm NEW_LINE DEDENT return norm NEW_LINE DEDENT
normalize ( self , vector ) : NEW_LINE INDENT norm = self . norm ( vector ) NEW_LINE if norm == 0 : NEW_LINE INDENT norm = 1 NEW_LINE DEDENT if norm == 1 : NEW_LINE INDENT norm = 1 NEW_LINE DEDENT return norm NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_id ( self ) : NEW_LINE INDENT id = self . get_id ( ) NEW_LINE if id : NEW_LINE INDENT return id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_id ( self , id ) : NEW_LINE INDENT if not id : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return id NEW_LINE DEDENT DEDENT

addPrefix ( self , prefix ) : NEW_LINE INDENT if prefix : NEW_LINE INDENT self . prefix = prefix NEW_LINE DEDENT else : NEW_LINE INDENT self . prefix = prefix NEW_LINE DEDENT DEDENT
prefix ( self , identifier ) : NEW_LINE INDENT prefix = self . _prefix ( identifier ) NEW_LINE if prefix : NEW_LINE INDENT return prefix NEW_LINE DEDENT return prefix NEW_LINE DEDENT
validate_email ( self , email ) : NEW_LINE INDENT if isinstance ( email , basestring ) : NEW_LINE INDENT email = email . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( email , basestring ) : NEW_LINE INDENT email = email . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( email , basestring ) : NEW_LINE INDENT email = email . encode ( ' utf - 8' ) NEW_LINE DEDENT return email NEW_LINE DEDENT

CRC ( self ) : NEW_LINE INDENT return self . _crc NEW_LINE DEDENT
thin_grid ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . grid NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def _get_data_cursor_api_overrides ( self ) : NEW_LINE INDENT return self . _get_data_cursor_api_overrides ( ) NEW_LINE DEDENT
def code table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5 - 2010 edition of WMO manual on codes table 5
def _get_time_coordinate_string ( self ) : NEW_LINE INDENT return self . _time_coordinate_string ( ) NEW_LINE DEDENT
next ( self , polygon ) : NEW_LINE INDENT if isinstance ( polygon , CFPolygon ) : NEW_LINE INDENT return polygon NEW_LINE DEDENT else : NEW_LINE INDENT return polygon . next ( ) NEW_LINE DEDENT DEDENT
def def def _set def def def def _set def def def _set def _set def _get_previous def _get_previousPolygon ( self ) : NEW_LINE INDENT prev = self . _get_polygon ( ) : NEW_LINE INDENT prev = self . _get_polygon ( ) NEW_LINE if prev is not None : NEW_LINE INDENT if prev is not None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT if prev is not None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE DEDENT DEDENT DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_projection ( self , projection ) : NEW_LINE INDENT if projection is not None : NEW_LINE INDENT self . projection = projection NEW_LINE DEDENT else : NEW_LINE INDENT self . projection = None NEW_LINE DEDENT DEDENT
handle_time ( self , time ) : NEW_LINE INDENT if time is None : NEW_LINE INDENT return NEW_LINE DEDENT elif time is not None : NEW_LINE INDENT return NEW_LINE DEDENT elif time is not None : NEW_LINE INDENT return NEW_LINE DEDENT elif time is not None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT


register ( self , iospclass ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _register ( iospclass ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . _register ( iospclass ) NEW_LINE DEDENT DEDENT
def def _get_registered_ IOServiceProvider ( ) : NEW_LINE INDENT return IOServiceProviderRegistry . get ( ) . get ( IOServiceProvider . class ) ; }
remove ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _registered = True NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _registered = False NEW_LINE DEDENT DEDENT
def find_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( self . file , ' r ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
open_netcdf_file ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return NEW_LINE DEDENT netcdf_file = open ( filename , ' r ' ) NEW_LINE if not netcdf_file : NEW_LINE INDENT return NEW_LINE DEDENT netcdf_file . close ( ) NEW_LINE return NEW_LINE DEDENT
open ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return NEW_LINE DEDENT file = open ( filename , ' rb ' ) NEW_LINE if not file : NEW_LINE INDENT return NEW_LINE DEDENT file . close ( ) NEW_LINE return file NEW_LINE DEDENT
read ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT file = open ( filename , ' rb ' ) NEW_LINE if not file : NEW_LINE INDENT return None NEW_LINE DEDENT return file . read ( ) NEW_LINE DEDENT
read ( self , filename ) : NEW_LINE INDENT if not self . _is_valid ( filename ) : NEW_LINE INDENT raise ValueError ( " % s is not a valid CDM file . " % filename ) NEW_LINE DEDENT if not self . _is_valid ( filename ) : NEW_LINE INDENT raise ValueError ( " % s is not a valid CDM file . " % filename ) NEW_LINE DEDENT return self . _read ( filename ) NEW_LINE DEDENT
_get_global_attribute ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , name ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
header_info ( self , header_info ) : NEW_LINE INDENT if header_info is None : NEW_LINE INDENT return None NEW_LINE DEDENT if header_info is not None : NEW_LINE INDENT return header_info NEW_LINE DEDENT DEDENT
write ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write ( data ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT self . _write ( data ) NEW_LINE DEDENT DEDENT
write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . writer . write ( self ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE self . writer . flush ( ) NEW_LINE DEDENT except
def def get_actual_work ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _actual_work NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _actual_work NEW_LINE DEDENT DEDENT
add_attribute ( self , name , value ) : NEW_LINE INDENT self . add_attribute ( name , value ) NEW_LINE DEDENT

add_group ( self , group ) : NEW_LINE INDENT self . groups . add ( group ) NEW_LINE DEDENT

static Dimension remove ( String name ) { if ( name == null ) { return null ; } if ( name . equals ( " " ) ) { return null ; } if ( name . equals ( " " ) ) { return null ; } if ( name . equals ( " " ) ) { return null ; } if ( name . equals ( " " ) ) { return null ; } return new Dimension ( name ) ; }
add_variable_to_group ( self , group ) : NEW_LINE INDENT if self . group is None : NEW_LINE INDENT self . group = group NEW_LINE DEDENT else : NEW_LINE INDENT self . group . append ( self . group ) NEW_LINE DEDENT DEDENT
add ( self , group ) : NEW_LINE INDENT if self . group is None : NEW_LINE INDENT self . group = group NEW_LINE DEDENT else : NEW_LINE INDENT self . group . add ( group ) NEW_LINE DEDENT DEDENT
add ( self , group ) : NEW_LINE INDENT if self . group is None : NEW_LINE INDENT self . group = group NEW_LINE DEDENT else : NEW_LINE INDENT self . group . add ( group ) NEW_LINE DEDENT DEDENT
remove_variable ( self , name ) : NEW_LINE INDENT group = self . get_group_by_name ( name ) NEW_LINE if group is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return group NEW_LINE DEDENT DEDENT
send_message ( self , message ) : NEW_LINE INDENT if self . file is not None : NEW_LINE INDENT self . file . write ( message ) NEW_LINE DEDENT else : NEW_LINE INDENT self . file . close ( ) NEW_LINE DEDENT DEDENT

def _construct_object_model ( self ) : NEW_LINE INDENT return self . _construct_object_model ( ) NEW_LINE DEDENT
read_variable ( self , section ) : NEW_LINE INDENT result = self . _read_variable ( section ) NEW_LINE if ( result is not None ) : NEW_LINE INDENT return result NEW_LINE DEDENT return result NEW_LINE DEDENT
static WritableByteChannel read ( ) throws IOException { WritableByteChannel channel = new WritableByteChannel ( ) ; channel . read ( ) ; return channel ; }
bulk_read ( self , * Variables ) : NEW_LINE INDENT if isinstance ( Variables , list ) : NEW_LINE INDENT return self . bulk_read ( * Variables ) NEW_LINE DEDENT return self . bulk_read ( * Variables ) NEW_LINE DEDENT
read_variable ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_variable ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _read_variable ( ) NEW_LINE DEDENT return self . _read_variable ( ) NEW_LINE DEDENT
create_full_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE name = name . replace ( ' \\ ' , ' \\\\ ' ) NEW_LINE return name NEW_LINE DEDENT
synthetic_full_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . synthetic_full_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . synthetic_full_name NEW_LINE DEDENT DEDENT
def inclusion ( self ) : NEW_LINE INDENT if self . inclusion is not None : NEW_LINE INDENT return self . inclusion NEW_LINE DEDENT if self . inclusion is not None : NEW_LINE INDENT return self . inclusion NEW_LINE DEDENT DEDENT
is_exclusion ( self , exclusion ) : NEW_LINE INDENT if exclusion is None : NEW_LINE INDENT return False NEW_LINE DEDENT if exclusion is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
all_filters ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT elif len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT elif len ( filters ) == 3 : NEW_LINE INDENT return filters [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
append_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if
isLegalValue ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
convert_type ( self , type , value ) : NEW_LINE INDENT if not isinstance ( type , types . PrimitiveType ) : NEW_LINE INDENT raise TypeError ( " type must be a primitive type . " ) NEW_LINE DEDENT if isinstance ( value , types . PrimitiveType ) : NEW_LINE INDENT raise TypeError ( " type must be a primitive type . " ) NEW_LINE DEDENT if isinstance ( value , types . PrimitiveType ) : NEW_LINE INDENT raise TypeError ( " type must be a primitive type . " ) NEW_LINE DEDENT return value NEW_LINE DEDENT
static boolean isValid ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 1 ) { return true ; } if ( string . length ( ) == 2 ) { return true ; } return false ; }
static boolean isValidInt16 ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 1 ) { return true ; } if ( string . length ( ) == 2 ) { return true ; } return false ; }
isValidInt32 ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
check_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static boolean isValidFloat32 ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 1 ) { return true ; } if ( string . length ( ) == 2 ) { return true ; } return false ; }
static boolean isValidFloat64 ( String string ) { if ( string == null ) { return false ; } if ( string . length ( ) == 0 ) { return true ; } if ( string . length ( ) == 1 ) { return true ; } if ( string . length ( ) == 2 ) { return true ; } return false ; }
def def _get_data_type ( self ) : NEW_LINE INDENT return self . data_type NEW_LINE DEDENT
boolean is_gridded_dataset ( ) { if ( ! is_gridded_dataset ( ) ) { return false ; } return true ; }
static boolean parseBoolean ( String str ) { if ( str == null ) { return false ; } if ( str . length ( ) == 0 ) { return true ; } if ( str . length ( ) == 1 ) { return true ; } return false ; }
static boolean isAlphanumeric ( String str ) { if ( str == null ) { return false ; } if ( str . length ( ) == 0 ) { return false ; } if ( str . length ( ) == 1 ) { return true ; } return false ; }
boolean isValid ( String constrainedString ) { if ( constrainedString == null ) { return false ; } if ( constrainedString . length ( ) == 0 ) { return false ; } if ( constrainedString . length ( ) == 0 ) { return false ; } return true ; }
ascend ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif path . startswith ( " / " ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static String percentHexOctets ( String percentHexOctets ) { if ( percentHexOctets == null || percentHexOctets . length ( ) == 0 ) { return percentHexOctets ; } return percentHexOctets . trim ( ) ; }
get_param_value ( self , param , value ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_param_value ( param , value ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static boolean nearlyEquals ( int x , int y ) { if ( x == y ) { return true ; } if ( x > y ) { return false ; } return false ; }
def read ( self ) : NEW_LINE INDENT self . _read ( ) NEW_LINE self . _read ( ) NEW_LINE DEDENT
def def get_buffer ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . buffer NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . buffer NEW_LINE DEDENT DEDENT
remove_double_quotes ( self , string ) : NEW_LINE INDENT if string . startswith ( ' " ' ) and string . endswith ( ' " ' ) : NEW_LINE INDENT return string . replace ( ' " ' , ' " ' ) NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
public public public static void projection ( ) { if ( this . projection == null ) { return ; } else if ( this . projection == null ) { return ; } else { return ; } } }
write_ncml_from_dataset ( self , dataset ) : NEW_LINE INDENT try : NEW_LINE INDENT ncml = self . _write_ncml_from_dataset ( dataset ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT if ncml is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT ncml = self . _write_ncml_from_dataset ( dataset ) NEW_LINE DEDENT DEDENT
static void staticMethod ( final Class < ? extends Enum > enumClass ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum > enumClass = enumClass . getSuperclass ( ) ; if ( enumClass != null ) { final Class < ? extends Enum >
String toString ( ) { try { return String . format ( " % s ( % s ) " , id , name ) ; } catch ( Exception e ) { return String . format ( " % s " , id ) ; } }
void initializeStationHelper ( ) { if ( stationHelper == null ) { stationHelper = new StationHelper ( ) ; } else { stationHelper . initialize ( ) ; } }
static boolean isValidResultService ( ResultService resultService ) { if ( resultService == null ) { return false ; } if ( resultService . isValid ( ) ) { return true ; } return false ; }
azimuth ( self , degrees ) : NEW_LINE INDENT if degrees : NEW_LINE INDENT return self . azimuth ( degrees ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_angle ( self , angle ) : NEW_LINE INDENT if angle is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return angle NEW_LINE DEDENT DEDENT
per_ray_latitudes ( self , latitudes ) : NEW_LINE INDENT if latitudes == null : NEW_LINE INDENT return None NEW_LINE DEDENT if latitudes . length == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT return latitudes [ 0 ] NEW_LINE DEDENT
per_ray_longitudes ( self ) : NEW_LINE INDENT return self . _per_ray_longitudes . get ( self . _per_ray_longitudes ) NEW_LINE DEDENT
get_per_ray_altitudes ( self ) : NEW_LINE INDENT if self . _per_ray_altitudes is None : NEW_LINE INDENT self . _per_ray_altitudes = [ ] NEW_LINE DEDENT return self . _per_ray_altitudes NEW_LINE DEDENT
get_azimuths ( sweep ) : NEW_LINE INDENT azimuths = [ ] NEW_LINE for azimuth in sweep : NEW_LINE INDENT azimuths . append ( azimuth ) NEW_LINE DEDENT return azimuths NEW_LINE DEDENT
elevations ( self , sweep ) : NEW_LINE INDENT elevations = [ ] NEW_LINE for elevation in sweep . elevations : NEW_LINE INDENT elevations . append ( elevation ) NEW_LINE DEDENT return elevations NEW_LINE DEDENT
subset_structure ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT else : NEW_LINE INDENT return structure NEW_LINE DEDENT DEDENT
subset_structure ( self , structure ) : NEW_LINE INDENT if isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT elif isinstance ( structure , Structure ) : NEW_LINE INDENT return structure NEW_LINE DEDENT else : NEW_LINE INDENT return structure NEW_LINE DEDENT DEDENT
add_member_variable ( self , member_variable ) : NEW_LINE INDENT if member_variable is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( member_variable , dict ) : NEW_LINE
def def get_member_variables ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _member_variables NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def set_parent_group ( self ) : NEW_LINE INDENT parent_group = self . parent_group NEW_LINE if parent_group is not None : NEW_LINE INDENT self . parent_group = parent_group NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT size = self . size ( ) NEW_LINE return size NEW_LINE DEDENT
static StructureData get ( int index ) { StructureData data = new StructureData ( ) ; data . setIndex ( index ) ; return data ; }
read_structure ( self , data ) : NEW_LINE INDENT if len ( data ) == 1 : NEW_LINE INDENT return data [ 0 ] NEW_LINE DEDENT elif len ( data ) == 2 : NEW_LINE INDENT return data [ 1 ] NEW_LINE DEDENT elif len ( data ) == 3 : NEW_LINE INDENT return data [ 2 ] NEW_LINE DEDENT elif len ( data ) == 4 : NEW_LINE INDENT return data [ 3 ] NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
iterator ( self ) : NEW_LINE INDENT iterator = self . iterator ( ) NEW_LINE if iterator . hasNext ( ) : NEW_LINE INDENT return iterator . next ( ) NEW_LINE DEDENT return iterator NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_projection_name ( self ) : NEW_LINE INDENT return self . projection . projection . name NEW_LINE DEDENT
add_projection ( self , projection ) : NEW_LINE INDENT self . projection = projection NEW_LINE DEDENT
def def get_header ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _headers . get_header ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
latLonToProjBB ( latLonToProjBB ) : NEW_LINE INDENT if latLonToProjBB is not None : NEW_LINE INDENT return latLonToProjBB NEW_LINE DEDENT else : NEW_LINE INDENT return latLonToProjBB NEW_LINE DEDENT DEDENT
get_version ( self ) : NEW_LINE INDENT version = self . _get_version ( ) NEW_LINE if version is None : NEW_LINE INDENT version = self . _get_version ( ) NEW_LINE DEDENT return version NEW_LINE DEDENT
def _get_ZisPositive ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _ZisPositive NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _ZisPositive NEW_LINE DEDENT DEDENT
remove_last_file ( self , file ) : NEW_LINE INDENT if file is None : NEW_LINE INDENT return NEW_LINE DEDENT if file is not None : NEW_LINE INDENT try : NEW_LINE INDENT file . delete ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
set_colorscale_limits ( self , limits ) : NEW_LINE INDENT self . _colorscale_limits = limits NEW_LINE DEDENT
void render ( Graphics2D graphics2d ) { if ( graphics2d == null ) { return ; } Graphics2D g2d = ( Graphics2D ) graphics2d ; if ( g2d == null ) { return ; } g2d . render ( graphics2d ) ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def install ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def def def align__python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def align__python____python____python____python____python____python____python__ def def def def def def def align__python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def align__python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def _
authenticate ( self , api_key , api_secret ) : NEW_LINE INDENT if api_key is None : NEW_LINE INDENT api_key = api_key NEW_LINE DEDENT if api_secret is None : NEW_LINE INDENT api_secret = api_secret NEW_LINE DEDENT return self . _authenticate ( api_key , api_secret ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Socket createSocket ( ) { return new Socket ( ) ; }
static List < IPType > convert ( List < IPType > ipTypes ) { List < IPType > ipTypes = new ArrayList < IPType > ( ) ; for ( IPType ipType : ipTypes ) { ipTypes . add ( ipType ) ; } return ipTypes ; }
static SocketFactory getSocketFactory ( ) { if ( socketFactory == null ) { throw new IllegalArgumentException ( " SocketFactory is null . " ) ; } if ( ! socketFactory . isConnected ( ) ) { throw new IllegalArgumentException ( " SocketFactory is not connected . " ) ; } return socketFactory ; }
purge ( self ) : NEW_LINE INDENT logger = self . logger NEW_LINE logger . purge ( ) NEW_LINE logger . purge ( ) NEW_LINE logger . purge ( ) NEW_LINE logger . purge ( ) NEW_LINE DEDENT
compile_sources ( self , sources ) : NEW_LINE INDENT for source in sources : NEW_LINE INDENT self . compile_sources ( source ) NEW_LINE DEDENT DEDENT
compile_source ( self , source ) : NEW_LINE INDENT if source is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return source NEW_LINE DEDENT DEDENT
add_source_code ( self , source_code ) : NEW_LINE INDENT self . source_code = source_code NEW_LINE return self . source_code NEW_LINE DEDENT

next_frame ( self ) : NEW_LINE INDENT frame = self . frame NEW_LINE if frame is not None : NEW_LINE INDENT return frame NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def public public static String toString ( String name ) { if ( name == null || name . isEmpty ( ) ) { return " " " ; } return name ; }
recreate_ targetType ( targetType ) : NEW_LINE INDENT if targetType is not None : NEW_LINE INDENT return targetType NEW_LINE DEDENT else : NEW_LINE INDENT return targetType NEW_LINE DEDENT DEDENT
def def get_person ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_person ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_person ( ) NEW_LINE DEDENT DEDENT
validate ( self , validator ) : NEW_LINE INDENT if not validator . validate ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not validator . validate ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not validator . validate ( ) : NEW_LINE INDENT return NEW_LINE DEDENT validator . validate ( ) NEW_LINE DEDENT
set_person_id ( self , person_id ) : NEW_LINE INDENT self . _person_id = person_id NEW_LINE return self . _person_id NEW_LINE DEDENT
createViewModel ( self , view ) : NEW_LINE INDENT self . view = view NEW_LINE return self . view NEW_LINE DEDENT
createViewModel ( self ) : NEW_LINE INDENT view = self . view NEW_LINE if view is None : NEW_LINE INDENT return None NEW_LINE DEDENT return view NEW_LINE DEDENT
load_countries ( self ) : NEW_LINE INDENT countries = [ ] NEW_LINE for country in self . countries : NEW_LINE INDENT countries . append ( country ) NEW_LINE DEDENT for country in countries : NEW_LINE INDENT countries . append ( country ) NEW_LINE DEDENT return countries NEW_LINE DEDENT
load_subdivisions ( self ) : NEW_LINE INDENT self . subdivisions = [ ] NEW_LINE for subdiv in self . subdivisions : NEW_LINE INDENT self . subdivisions . append ( subdiv ) NEW_LINE DEDENT return self NEW_LINE DEDENT
void addModelField ( String fieldName , String fieldType ) { if ( fieldType == null ) { throw new IllegalArgumentException ( ) ; } if ( fieldType . equals ( String . class . getName ( ) ) ) { throw new IllegalArgumentException ( ) ; } if ( fieldType . equals ( String . class . getName ( ) ) ) { throw new IllegalArgumentException ( ) ; } }
void add ( final String value ) { if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } else { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } }
load_view ( self ) : NEW_LINE INDENT return self . _get_view ( ) NEW_LINE DEDENT
load ( self ) : NEW_LINE INDENT return self . _load ( ) NEW_LINE DEDENT
void clear ( final Map < String , Object > map ) { if ( map != null && map . size ( ) > 0 ) { map . remove ( map . keySet ( ) . iterator ( ) . next ( ) ) ; } }
set_index ( self , index ) : NEW_LINE INDENT self . index = index NEW_LINE DEDENT
execute_callback ( self , callback ) : NEW_LINE INDENT self . callback = callback NEW_LINE return self NEW_LINE DEDENT
loadViewTuple ( self , viewTuple ) : NEW_LINE INDENT if viewTuple is None : NEW_LINE INDENT return None NEW_LINE DEDENT viewTuple = viewTuple . copy ( ) NEW_LINE viewTuple . clear ( ) NEW_LINE viewTuple . add ( viewTuple ) NEW_LINE return viewTuple NEW_LINE DEDENT
static String create ( String path ) { if ( path == null ) { return null ; } if ( path . length ( ) == 0 ) { return " " ; } return path ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _get_pixel_value ( self , pixel_value ) : NEW_LINE INDENT if isinstance ( pixel_value , int ) : NEW_LINE INDENT return pixel_value NEW_LINE DEDENT elif isinstance ( pixel_value , int ) : NEW_LINE INDENT return pixel_value NEW_LINE DEDENT elif isinstance ( pixel_value , int ) : NEW_LINE INDENT return pixel_value NEW_LINE DEDENT else : NEW_LINE INDENT return pixel_value NEW_LINE DEDENT DEDENT
get_pixel_values ( self , image ) : NEW_LINE INDENT if image is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
validate_image_type ( image_type ) : NEW_LINE INDENT if isinstance ( image_type , int ) : NEW_LINE INDENT return image_type NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return image_type NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return image_type NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return image_type NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return image_type NEW_LINE DEDENT else : NEW_LINE INDENT return image_type NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_tile_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . tile_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . tile_data NEW_LINE DEDENT DEDENT
raw_query ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _raw_query ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
wrap ( self , query ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _wrap ( query ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _wrap ( query ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _wrap ( query ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_cursor_to_result_type ( cursor ) : NEW_LINE INDENT result_type_cursor = cursor . cursor NEW_LINE result_type_cursor = result_type_cursor . cursor NEW_LINE return result_type_cursor NEW_LINE DEDENT
get_feature_row ( self ) : NEW_LINE INDENT feature_row = [ ] NEW_LINE for row in self . geometry_indexes : NEW_LINE INDENT feature_row . append ( row ) NEW_LINE DEDENT return feature_row NEW_LINE DEDENT

get_tile_row ( self ) : NEW_LINE INDENT if self . tile_row is None : NEW_LINE INDENT self . tile_row = [ ] NEW_LINE DEDENT return self . tile_row NEW_LINE DEDENT
get_tiled_gridded_coverage_data ( self ) : NEW_LINE INDENT return self . _get_tiled_gridded_coverage_data ( ) NEW_LINE DEDENT
get_coverage_data_pixel_tile_size ( self ) : NEW_LINE INDENT if self . coverage_data_pixel_tile_size : NEW_LINE INDENT return self . coverage_data_pixel_tile_size NEW_LINE DEDENT else : NEW_LINE INDENT return self . coverage_data_pixel_tile_size NEW_LINE DEDENT DEDENT
static Tiled GriddedCoverageData getTile ( int width , int height ) { TiledGriddedCoverageData tile = new TiledGriddedCoverageData ( ) ; tile . setWidth ( width ) ; tile . setHeight ( height ) ; return tile ; }
get_coverage_data_tile ( self , tile_matrix ) : NEW_LINE INDENT if tile_matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT tile_matrix = tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE DEDENT
get_coverage_data_tile ( self , tile_matrix ) : NEW_LINE INDENT if tile_matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT tile_matrix = tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE tile_matrix . copy ( ) NEW_LINE return tile_matrix NEW_LINE DEDENT
get_coverage_data_tile ( self ) : NEW_LINE INDENT tile_matrix = self . _get_tile_matrix ( ) NEW_LINE if tile_matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return tile_matrix NEW_LINE DEDENT DEDENT
get_coverage_data_tile ( self ) : NEW_LINE INDENT coverage_data_tile = self . _get_coverage_data_tile ( ) NEW_LINE if coverage_data_tile is not None : NEW_LINE INDENT return coverage_data_tile NEW_LINE DEDENT return coverage_data_tile NEW_LINE DEDENT
get_tile_matrix ( self ) : NEW_LINE INDENT tile_matrix = [ ] NEW_LINE for tile in self . tile_matrix : NEW_LINE INDENT tile_matrix . append ( tile ) NEW_LINE DEDENT return tile_matrix NEW_LINE DEDENT
get_coverage_data ( self , pixel ) : NEW_LINE INDENT if isinstance ( pixel , int ) : NEW_LINE INDENT return pixel NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def icon ( self , geometry_type ) : NEW_LINE INDENT if isinstance ( geometry_type , GeometryType ) : NEW_LINE INDENT return self . icon ( geometry_type ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . icon ( geometry_type ) NEW_LINE DEDENT DEDENT
get_icon_for_geometry_type ( self , geometry_type ) : NEW_LINE INDENT if geometry_type is not None : NEW_LINE INDENT return geometry_type NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
decode ( self , bytes ) : NEW_LINE INDENT if len ( bytes ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( bytes ) == 1 : NEW_LINE INDENT return bytes [ 0 ] NEW_LINE DEDENT return bytes NEW_LINE DEDENT
compress ( self , bitmap ) : NEW_LINE INDENT if isinstance ( bitmap , bytes ) : NEW_LINE INDENT return bitmap NEW_LINE DEDENT if isinstance ( bitmap , bytearray ) : NEW_LINE INDENT return bytearray ( bitmap ) NEW_LINE DEDENT if isinstance ( bitmap , memoryview ) : NEW_LINE INDENT return memoryview ( bitmap ) NEW_LINE DEDENT if isinstance ( bitmap , bytearray ) : NEW_LINE INDENT return bytearray ( bitmap ) NEW_LINE DEDENT if isinstance ( bitmap , bytearray ) : NEW_LINE INDENT return bytearray ( bitmap ) NEW_LINE DEDENT return bytearray ( bitmap ) NEW_LINE DEDENT
create_table_metadata ( self , table_name ) : NEW_LINE INDENT self . table_metadata = { } NEW_LINE self . table_metadata [ table_name ] = table_name NEW_LINE self . table_metadata [ table_name ] = table_metadata NEW_LINE DEDENT
delete_database_table ( self , database_table_name ) : NEW_LINE INDENT if database_table_name is None : NEW_LINE INDENT return NEW_LINE DEDENT table_name = database_table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table_name . lower ( ) NEW_LINE table_name = table
get_table_metadata ( self , table_name ) : NEW_LINE INDENT if not table_name : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_table_metadata ( table_name ) NEW_LINE DEDENT DEDENT
get_geo_package_id ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_geo_package_id ( name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_table_metadata ( self ) : NEW_LINE INDENT table_metadata = { } NEW_LINE table_metadata . update ( self . metadata ) NEW_LINE table_metadata . update ( self . metadata ) NEW_LINE table_metadata . update ( self . metadata ) NEW_LINE return table_metadata NEW_LINE DEDENT
create_extension ( self , feature_table ) : NEW_LINE INDENT extension = self . _create_extension ( feature_table ) NEW_LINE if extension is not None : NEW_LINE INDENT return extension NEW_LINE DEDENT return extension NEW_LINE DEDENT
get_feature_row ( self ) : NEW_LINE INDENT feature_row = self . _get_feature_row ( ) NEW_LINE if feature_row is None : NEW_LINE INDENT return None NEW_LINE DEDENT return feature_row NEW_LINE DEDENT
raw_query ( self , query ) : NEW_LINE INDENT if query is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif query is not None : NEW_LINE INDENT return query NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_rows_within_bounding_box ( self , bounding_box ) : NEW_LINE INDENT if bounding_box is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def get_rows_within_geometry_envelope ( self , geometry_envelope ) : NEW_LINE INDENT if geometry_envelope is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT for row in geometry_envelope : NEW_LINE INDENT if isinstance ( row , GeometryEnvelope ) : NEW_LINE INDENT return [ row ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
count_rows ( self , geometry ) : NEW_LINE INDENT if geometry is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return len ( geometry ) NEW_LINE DEDENT DEDENT
def def def get_rows_within_bounds ( self ) : NEW_LINE INDENT for row in self . rows : NEW_LINE INDENT if self . bounds : NEW_LINE INDENT for i in range ( self . bounds ) : NEW_LINE INDENT for row in range ( 0 , self . bounds ) : NEW_LINE INDENT yield row NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
count_rows_within_bounding_box ( self , bounding_box ) : NEW_LINE INDENT if bounding_box is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return len ( bounding_box ) NEW_LINE DEDENT DEDENT
def def def def query_geometry_envelope ( self , geometry_envelope ) : NEW_LINE INDENT for row in geometry_envelope : NEW_LINE INDENT if isinstance ( geometry_envelope , GeometryEnvelope ) : NEW_LINE INDENT for row in geometry_envelope : NEW_LINE INDENT if isinstance ( geometry_envelope , GeometryEnvelope ) : NEW_LINE INDENT for row in geometry_envelope : NEW_LINE INDENT if isinstance ( row , GeometryEnvelope ) : NEW_LINE INDENT return row NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT return geometry_envelope NEW_LINE DEDENT DEDENT DEDENT
def def def def query ( self , bounds ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
count_rows_within_bounds ( self , bounds ) : NEW_LINE INDENT rows = [ ] NEW_LINE for i in range ( len ( bounds ) ) : NEW_LINE INDENT rows . append ( bounds [ i ] ) NEW_LINE DEDENT for i in range ( len ( bounds ) ) : NEW_LINE INDENT rows . append ( bounds [ i ] ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
def get_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . data NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_bitmap_compress_config ( self , bitmap_compress_config ) : NEW_LINE INDENT self . _bitmap_compress_config = bitmap_compress_config NEW_LINE DEDENT
get_tile_count ( self ) : NEW_LINE INDENT tile_count = 0 NEW_LINE for tile in self . tiles : NEW_LINE INDENT tile_count += 1 NEW_LINE DEDENT return tile_count NEW_LINE DEDENT
adjust_tile_matrix ( self , tile_matrix , bounds ) : NEW_LINE INDENT self . tile_matrix = tile_matrix NEW_LINE self . bounds = bounds NEW_LINE DEDENT
adjust_tile_matrix ( self , tile_matrix ) : NEW_LINE INDENT if self . tile_matrix is None : NEW_LINE INDENT self . tile_matrix = tile_matrix NEW_LINE DEDENT return self . tile_matrix NEW_LINE DEDENT
def _adjust_tile_matrix ( self , tile_matrix ) : NEW_LINE INDENT if self . tile_matrix is None : NEW_LINE INDENT self . tile_matrix = tile_matrix NEW_LINE DEDENT return self . tile_matrix NEW_LINE DEDENT
def _adjust_tile_grid_bounds ( self , tile_grid_width , tile_grid_height ) : NEW_LINE INDENT tile_grid_width = tile_grid_width NEW_LINE tile_grid_height = tile_grid_height NEW_LINE return tile_grid_width NEW_LINE DEDENT
bounding_box ( self ) : NEW_LINE INDENT if self . bounding_box is None : NEW_LINE INDENT return self . bounding_box NEW_LINE DEDENT return self . bounding_box NEW_LINE DEDENT
get_tile_grid ( self ) : NEW_LINE INDENT tile_grid = self . tile_grid NEW_LINE if tile_grid is None : NEW_LINE INDENT return None NEW_LINE DEDENT return tile_grid NEW_LINE DEDENT
def def def get_tile ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_tile ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _get_tile ( ) NEW_LINE DEDENT DEDENT
def get_tiles ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_tiles ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_tiles ( ) NEW_LINE DEDENT DEDENT
get_closest_zoom_level ( self , width , height ) : NEW_LINE INDENT zoom_level = self . get_zoom_level ( width , height ) NEW_LINE if zoom_level : NEW_LINE INDENT return zoom_level NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_approximate_zoom_level ( self ) : NEW_LINE INDENT zoom_level = self . get_zoom_level ( ) NEW_LINE if zoom_level : NEW_LINE INDENT return zoom_level NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def bounding ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . bounding ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . bounding ( ) NEW_LINE DEDENT DEDENT
delete_tile ( self , tile ) : NEW_LINE INDENT if not tile : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( tile , Tile ) : NEW_LINE INDENT return NEW_LINE DEDENT tile . delete ( ) NEW_LINE DEDENT
count_tiles ( self ) : NEW_LINE INDENT return self . _count_tiles ( ) NEW_LINE DEDENT
isTile ( self , tile ) : NEW_LINE INDENT return isinstance ( tile , Tile ) NEW_LINE DEDENT
get_pixel_value ( self , image ) : NEW_LINE INDENT if isinstance ( image , Image ) : NEW_LINE INDENT return image . get_pixel_value ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return image . get_pixel ( ) NEW_LINE DEDENT DEDENT
get_pixel_values ( self , image ) : NEW_LINE INDENT if isinstance ( image , Image ) : NEW_LINE INDENT return image . pixel_values NEW_LINE DEDENT else : NEW_LINE INDENT return image . pixel_values NEW_LINE DEDENT DEDENT
validate_image_type ( self , image_type ) : NEW_LINE INDENT if isinstance ( image_type , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( image_type , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( image_type , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( image_type , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
create_image ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT image = self . image NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT image = self . image NEW_LINE DEDENT return image NEW_LINE DEDENT
def set_pixel_value ( self , image , pixel_value ) : NEW_LINE INDENT if pixel_value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( pixel_value , int ) : NEW_LINE INDENT pixel_value = pixel_value NEW_LINE DEDENT if isinstance ( pixel_value , float ) : NEW_LINE INDENT pixel_value = pixel_value NEW_LINE DEDENT if isinstance ( pixel_value , int ) : NEW_LINE INDENT pixel_value = pixel_value NEW_LINE DEDENT return pixel_value NEW_LINE DEDENT
GeoPackage getCachedGeoPackage ( ) { if ( cachedGeoPackage == null ) { cachedGeoPackage = new GeoPackage ( ) ; cachedGeoPackage . open ( ) ; } return cachedGeoPackage ; }
get_current_row ( self ) : NEW_LINE INDENT row = self . current_row NEW_LINE if row is None : NEW_LINE INDENT return None NEW_LINE DEDENT return row NEW_LINE DEDENT
requery ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _requery ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _requery ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
delete_geometry_type ( self , geometry_type ) : NEW_LINE INDENT if geometry_type is None : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type is not None : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type is not None : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
build_rectangle ( self , tile_width , tile_height , bounding_box ) : NEW_LINE INDENT if bounding_box is None : NEW_LINE INDENT bounding_box = self . bounding_box NEW_LINE DEDENT else : NEW_LINE INDENT bounding_box = self . bounding_box NEW_LINE DEDENT return bounding_box NEW_LINE DEDENT
build_rectangle ( self ) : NEW_LINE INDENT bounding_box = self . bounding_box NEW_LINE if bounding_box is not None : NEW_LINE INDENT bounding_box = self . bounding_box NEW_LINE DEDENT return bounding_box NEW_LINE DEDENT
delete_databases ( self ) : NEW_LINE INDENT if not self . databases : NEW_LINE INDENT return NEW_LINE DEDENT self . databases . clear ( ) NEW_LINE self . databases . addAll ( self . databases ) NEW_LINE DEDENT
create_database_connection ( self ) : NEW_LINE INDENT connection = self . getConnection ( ) NEW_LINE connection . close ( ) NEW_LINE return connection NEW_LINE DEDENT
validate_geo_package_database ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _validate_geo_package_database ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . database . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . database . close ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not header . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
validate_database ( self , database_file ) : NEW_LINE INDENT if isinstance ( database_file , basestring ) : NEW_LINE INDENT database_file = open ( database_file , ' r ' ) NEW_LINE DEDENT if isinstance ( database_file , basestring ) : NEW_LINE INDENT database_file = open ( database_file , ' r ' ) NEW_LINE DEDENT if isinstance ( database_file , basestring ) : NEW_LINE INDENT database_file = open ( database_file , ' r ' ) NEW_LINE DEDENT if isinstance ( database_file , basestring ) : NEW_LINE INDENT database_file = open ( database_file , ' r ' ) NEW_LINE DEDENT if isinstance ( database_file , basestring ) : NEW_LINE INDENT database_file = open ( database_file , ' r ' ) NEW_LINE DEDENT return database_file . read ( ) NEW_LINE DEDENT
check_header ( self ) : NEW_LINE INDENT if self . header is None : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
add_internal_databases ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( collection , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( collection , list ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
add_external_databases ( self , collection ) : NEW_LINE INDENT if not collection : NEW_LINE INDENT return NEW_LINE DEDENT collection . add_external_databases ( ) NEW_LINE DEDENT

get_metadata ( self ) : NEW_LINE INDENT metadata = { } NEW_LINE for metadata in self . metadata . values ( ) : NEW_LINE INDENT metadata [ metadata . name ] = metadata [ metadata . name ] NEW_LINE DEDENT return metadata NEW_LINE DEDENT
getMetadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . metadata NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_geometry_metadata ( self ) : NEW_LINE INDENT if self . geometry_metadata is None : NEW_LINE INDENT self . geometry_metadata = { } NEW_LINE DEDENT return self . geometry_metadata NEW_LINE DEDENT
a new geometry metadata from an envelope .
delete_geometry_metadata ( self ) : NEW_LINE INDENT if self . geometry_metadata is not None : NEW_LINE INDENT self . geometry_metadata . delete ( self . geometry_metadata ) NEW_LINE DEDENT DEDENT
update_geometry_metadata ( self , geometry_metadata ) : NEW_LINE INDENT if geometry_metadata is not None : NEW_LINE INDENT self . geometry_metadata = geometry_metadata NEW_LINE DEDENT else : NEW_LINE INDENT self . geometry_metadata = None NEW_LINE DEDENT DEDENT
update_geometry_metadata ( self , geometry_metadata ) : NEW_LINE INDENT self . update_geometry_metadata ( geometry_metadata ) NEW_LINE DEDENT
def def get_geometry_geometry_metadata_count ( self ) : NEW_LINE INDENT return self . geometry_metadata_count ( ) NEW_LINE DEDENT
create_geometry_metadata ( self ) : NEW_LINE INDENT self . geometry_metadata = { } NEW_LINE self . geometry_metadata . update ( ) NEW_LINE self . geometry_metadata . update ( ) NEW_LINE DEDENT
update ( self , values ) : NEW_LINE INDENT if values is None : NEW_LINE INDENT values = [ ] NEW_LINE DEDENT for row in self . rows : NEW_LINE INDENT values . append ( row [ 0 ] ) NEW_LINE DEDENT return values NEW_LINE DEDENT
draw_tile ( self , text_label ) : NEW_LINE INDENT if text_label is not None : NEW_LINE INDENT text_label = text_label NEW_LINE DEDENT else : NEW_LINE INDENT text_label = text_label NEW_LINE DEDENT if text_label is not None : NEW_LINE INDENT text_label = text_label . strip ( ) NEW_LINE DEDENT if text_label is not None : NEW_LINE INDENT text_label = text_label . strip ( ) NEW_LINE DEDENT if text_label is not None : NEW_LINE INDENT text_label = text_label . strip ( ) NEW_LINE DEDENT if text_label is not None : NEW_LINE INDENT text_label = text_label . strip ( ) NEW_LINE DEDENT return text_label NEW_LINE DEDENT
get_simple_attributes_rows ( self , ids ) : NEW_LINE INDENT rows = [ ] NEW_LINE for id in ids : NEW_LINE INDENT rows . append ( self . _get_simple_attributes_row ( id ) ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
check_cursor ( self ) : NEW_LINE INDENT cursor = self . cursor ( ) NEW_LINE if cursor is not None : NEW_LINE INDENT cursor . close ( ) NEW_LINE DEDENT return cursor NEW_LINE DEDENT
get_user_mapping_from_table_name ( self , table_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_user_mapping_from_table_name ( table_name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_simple_attributes_table ( self ) : NEW_LINE INDENT return self . _get_simple_attributes_table ( ) NEW_LINE DEDENT
get_related_id_mappings ( self , base_id ) : NEW_LINE INDENT mappings = { } NEW_LINE for id in base_id : NEW_LINE INDENT mappings [ id ] = self . get_related_id_mappings ( id ) NEW_LINE DEDENT return mappings NEW_LINE DEDENT
get_base_id_mappings ( self ) : NEW_LINE INDENT base_id_mappings = { } NEW_LINE base_id_mappings = self . _get_base_id_mappings ( ) NEW_LINE for id in base_id_mappings . keys ( ) : NEW_LINE INDENT base_id_mappings [ id ] = base_id_mappings [ id ] NEW_LINE DEDENT return base_id_mappings NEW_LINE DEDENT
get_id_mapping ( self , base_id , related_id ) : NEW_LINE INDENT return self . _get_id_mapping ( base_id ) NEW_LINE DEDENT
close_cursor ( cursor ) : NEW_LINE INDENT cursor . close ( ) NEW_LINE DEDENT

create_dao ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_dao ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_tile_from_bbox ( self , bbox ) : NEW_LINE INDENT if bbox is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return bbox NEW_LINE DEDENT DEDENT
draw_tile ( self , tile ) : NEW_LINE INDENT self . tile = tile NEW_LINE if self . tile is not None : NEW_LINE INDENT self . tile . draw ( ) NEW_LINE DEDENT DEDENT
static Tile tile ( Tile tile ) { if ( tile == null ) { throw new IllegalArgumentException ( " tile is null " ) ; } Tile tile = new Tile ( tile ) ; return tile ; }
get_tile_row_results ( self ) : NEW_LINE INDENT tile_row_results = [ ] NEW_LINE for tile in self . tile_rows : NEW_LINE INDENT tile_row_results = [ ] NEW_LINE for tile in tile_row_results : NEW_LINE INDENT tile_row_results . append ( tile ) NEW_LINE DEDENT DEDENT return tile_row_results NEW_LINE DEDENT
paint ( self ) : NEW_LINE INDENT return self . _paint ( ) NEW_LINE DEDENT
set_density ( self , density ) : NEW_LINE INDENT self . density = density NEW_LINE DEDENT
set_line_paint ( self , line_paint ) : NEW_LINE INDENT self . line_paint = line_paint NEW_LINE DEDENT
set_polygon_paint ( self , polygon_paint ) : NEW_LINE INDENT self . polygon_paint = polygon_paint NEW_LINE DEDENT
get_tile_bytes ( self , x , y , zoom ) : NEW_LINE INDENT tile = self . get_tile ( x , y , zoom ) NEW_LINE if tile is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return tile NEW_LINE DEDENT DEDENT
tile_bitmap ( self , x , y , zoom ) : NEW_LINE INDENT tile_bitmap = self . _tile_bitmap ( x , y , zoom ) NEW_LINE if tile_bitmap is not None : NEW_LINE INDENT return tile_bitmap NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
tile_bitmap ( self , x , y , zoom_level ) : NEW_LINE INDENT tile_bitmap = self . tile_bitmap ( x , y , zoom_level ) NEW_LINE if tile_bitmap : NEW_LINE INDENT return tile_bitmap NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def
feature_result_count ( self , bounding_box ) : NEW_LINE INDENT feature_result_count = self . feature_result_count ( bounding_box ) NEW_LINE return feature_result_count NEW_LINE DEDENT
def get_features ( self , tile_location ) : NEW_LINE INDENT if tile_location is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Bitmap tile ( int x , int y , int zoom ) { Bitmap bitmap = null ; try { bitmap = BitmapFactory . decodeResource ( getResources ( ) , x , y , zoom ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } if ( bitmap != null ) { bitmap . recycle ( ) ; } return bitmap ; }
simplify ( self ) : NEW_LINE INDENT if self . simplify tolerance is None : NEW_LINE INDENT self . simplify ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . simplify ( ) NEW_LINE DEDENT DEDENT
get_point_paint ( self , feature_style ) : NEW_LINE INDENT return self . _get_point_paint ( feature_style ) NEW_LINE DEDENT
get_line_paint ( self ) : NEW_LINE INDENT if self . line_paint is None : NEW_LINE INDENT return self . line_paint NEW_LINE DEDENT return self . line_paint NEW_LINE DEDENT
get_polygon_paint ( self ) : NEW_LINE INDENT return self . _get_polygon_paint ( ) NEW_LINE DEDENT
get_fill_paint ( self ) : NEW_LINE INDENT return self . _get_fill_paint ( ) NEW_LINE DEDENT
get_feature_style_paint ( self ) : NEW_LINE INDENT if self . feature_style_paint is not None : NEW_LINE INDENT return self . feature_style_paint NEW_LINE DEDENT return self . feature_style_paint NEW_LINE DEDENT
get_style_paint ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . style_paint NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_paint_type ( self ) : NEW_LINE INDENT return self . _get_paint_type ( ) NEW_LINE DEDENT
get_paint ( self , style_row_id , draw_type ) : NEW_LINE INDENT if style_row_id and draw_type : NEW_LINE INDENT return self . _get_paint ( style_row_id , draw_type ) NEW_LINE DEDENT return self . _get_paint ( style_row_id , draw_type ) NEW_LINE DEDENT
def def get_icon_bitmap ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _icon_bitmap NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _icon_bitmap NEW_LINE DEDENT DEDENT
get_icon_bitmap ( self ) : NEW_LINE INDENT if self . icon_bitmap is None : NEW_LINE INDENT self . icon_bitmap = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . icon_bitmap = [ ] NEW_LINE DEDENT return self . icon_bitmap NEW_LINE DEDENT
def def wrap_content_values ( self , content_values ) : NEW_LINE INDENT content_values = [ ] NEW_LINE for name in content_values : NEW_LINE INDENT content_values . append ( name ) NEW_LINE DEDENT return content_values NEW_LINE DEDENT
create_final_bitmap ( self , layers ) : NEW_LINE INDENT if len ( layers ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( layers ) == 1 : NEW_LINE INDENT return layers [ 0 ] NEW_LINE DEDENT if len ( layers ) == 2 : NEW_LINE INDENT return layers [ 1 ] NEW_LINE DEDENT return None NEW_LINE DEDENT
recycle_layered_bitmaps ( self , layered_bitmaps ) : NEW_LINE INDENT self . layered_bitmaps = layered_bitmaps NEW_LINE return self . layered_bitmaps NEW_LINE DEDENT
get_bitmap_for_layer_index ( self , layer_index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _bitmap_for_layer_index ( layer_index ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_canvas ( self ) : NEW_LINE INDENT canvas = self . canvas NEW_LINE if canvas is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return canvas NEW_LINE DEDENT DEDENT
static Bitmap createBitmap ( Bitmap bitmap ) { if ( bitmap == null ) { throw new IllegalArgumentException ( " Bitmap must not be null " ) ; } if ( bitmap == null ) { throw new IllegalArgumentException ( " Bitmap must not be null " ) ; } if ( bitmap == null ) { throw new IllegalArgumentException ( " Bitmap must not be null " ) ; } return bitmap ; }
get_style_mapping_from_table_name ( self , table_name ) : NEW_LINE INDENT return self . _get_style_mapping_from_table_name ( table_name ) NEW_LINE DEDENT
get_style_dao ( self ) : NEW_LINE INDENT style_dao = self . _get_style_dao ( ) NEW_LINE return style_dao NEW_LINE DEDENT
get_icon ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_icon ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_default_feature_styles ( self ) : NEW_LINE INDENT default_feature_styles = { } NEW_LINE default_feature_styles = { } NEW_LINE default_feature_styles . update ( self . default_feature_styles ) NEW_LINE return default_feature_styles NEW_LINE DEDENT
get_feature_table_default_styles ( self ) : NEW_LINE INDENT if self . feature_table_default_styles : NEW_LINE INDENT return self . feature_table_default_styles NEW_LINE DEDENT return None NEW_LINE DEDENT
getStyle ( self ) : NEW_LINE INDENT if self . feature_table : NEW_LINE INDENT return self . feature_table . getStyle ( ) NEW_LINE DEDENT elif self . geometry : NEW_LINE INDENT return self . geometry . getStyle ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_feature_table_default_icons ( self ) : NEW_LINE INDENT if self . feature_table_default_icons is not None : NEW_LINE INDENT return self . feature_table_default_icons NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
icon ( self , feature_table , geometry_type ) : NEW_LINE INDENT icon = self . _get_icon ( feature_table , geometry_type ) NEW_LINE if icon : NEW_LINE INDENT return icon NEW_LINE DEDENT return None NEW_LINE DEDENT
get_feature_styles ( self ) : NEW_LINE INDENT feature_styles = [ ] NEW_LINE for row in self . table . rows : NEW_LINE INDENT feature_styles . append ( row . getStyleSheet ( ) . getStyleSheet ( ) . getStyleSheet ( ) . getStyleSheet ( ) . getStyleSheet ( ) ) NEW_LINE DEDENT return feature_styles NEW_LINE DEDENT
get_feature_styles ( self ) : NEW_LINE INDENT feature_styles = { } NEW_LINE for feature in self . feature_table : NEW_LINE INDENT feature_styles [ feature . id ] = [ ] NEW_LINE DEDENT return feature_styles NEW_LINE DEDENT
get_styles ( self ) : NEW_LINE INDENT styles = { } NEW_LINE for row in self . feature_rows : NEW_LINE INDENT styles [ row . name ] = row . style NEW_LINE DEDENT return styles NEW_LINE DEDENT
get_icons ( self ) : NEW_LINE INDENT icons = [ ] NEW_LINE for row in self . feature_rows : NEW_LINE INDENT icons . append ( row . get_icons ( ) ) NEW_LINE DEDENT return icons NEW_LINE DEDENT
get_styles_for_feature_id ( self , feature_id ) : NEW_LINE INDENT feature_id = self . _get_feature_id ( feature_id ) NEW_LINE style = self . _get_style ( feature_id ) NEW_LINE if style : NEW_LINE INDENT return style NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_icons_for_feature_id ( self , feature_id ) : NEW_LINE INDENT icon = self . _get_icon ( feature_id ) NEW_LINE if icon is not None : NEW_LINE INDENT return icon NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
set_feature_table_default_styles ( self ) : NEW_LINE INDENT if self . feature_table_default_styles : NEW_LINE INDENT self . feature_table_default_styles = [ ] NEW_LINE DEDENT DEDENT
set_feature_table_default_styles ( self , feature_table_default_styles ) : NEW_LINE INDENT self . _feature_table_default_styles = feature_table_default_styles NEW_LINE DEDENT
set_feature_table_default_icons ( self ) : NEW_LINE INDENT self . _feature_table_default_icons = [ ] NEW_LINE self . _feature_table_default_icons . extend ( self . _default_icons ) NEW_LINE DEDENT
set_feature_styles ( self ) : NEW_LINE INDENT self . _feature_styles = { } NEW_LINE self . _feature_styles . clear ( ) NEW_LINE self . _feature_styles = { } NEW_LINE DEDENT
set_feature_styles ( self , feature_table , feature_id ) : NEW_LINE INDENT self . _feature_table = feature_table NEW_LINE self . _feature_id = feature_id NEW_LINE DEDENT
set_styles ( self ) : NEW_LINE INDENT self . styles = { } NEW_LINE for row in self . rows : NEW_LINE INDENT self . styles [ row . name ] = row . style NEW_LINE DEDENT DEDENT
set_styles ( self ) : NEW_LINE INDENT self . _styles = { } NEW_LINE self . _styles . update ( self . _styles ) NEW_LINE DEDENT
set_style ( self , style ) : NEW_LINE INDENT self . style = style NEW_LINE DEDENT
set_default_style ( self , style ) : NEW_LINE INDENT if style is None : NEW_LINE INDENT style = self . default_style NEW_LINE DEDENT return style NEW_LINE DEDENT
set_default_style ( self , style ) : NEW_LINE INDENT if style is None : NEW_LINE INDENT style = self . default_style NEW_LINE DEDENT return style NEW_LINE DEDENT
set_icons ( self ) : NEW_LINE INDENT self . icons = [ ] NEW_LINE for row in self . rows : NEW_LINE INDENT self . icons . append ( row . get_icon ( ) ) NEW_LINE DEDENT DEDENT
def def set_icons ( self ) : NEW_LINE INDENT self . icons = { } NEW_LINE for i in self . icons : NEW_LINE INDENT self . icons [ i ] = [ ] NEW_LINE DEDENT DEDENT
set_icon ( self , icon ) : NEW_LINE INDENT self . icon = icon NEW_LINE DEDENT
set_default_icon ( self ) : NEW_LINE INDENT if self . default_icon is not None : NEW_LINE INDENT self . default_icon = self . default_icon NEW_LINE DEDENT DEDENT
set_default_icon ( self , feature ) : NEW_LINE INDENT if self . _default_icon is not None : NEW_LINE INDENT self . _default_icon = self . _default_icon NEW_LINE DEDENT DEDENT
get_style_id ( self , style_id ) : NEW_LINE INDENT if style_id : NEW_LINE INDENT return style_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_icon_id ( self ) : NEW_LINE INDENT if self . icon_id is None : NEW_LINE INDENT return self . icon_id NEW_LINE DEDENT else : NEW_LINE INDENT return self . icon_id NEW_LINE DEDENT DEDENT
insert_style_mapping_row ( self , style_mapping_row ) : NEW_LINE INDENT self . style_mapping_row = style_mapping_row NEW_LINE self . style_mapping_row . append ( style_mapping_row ) NEW_LINE self . style_mapping_row = style_mapping_row NEW_LINE DEDENT
delete_feature_table_style ( self , feature_table_style ) : NEW_LINE INDENT feature_table_style = feature_table_style . copy ( ) NEW_LINE feature_table_style = feature_table_style . copy ( ) NEW_LINE feature_table_style . delete ( ) NEW_LINE DEDENT
delete_feature_table_icon ( self , geometry_type ) : NEW_LINE INDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT if geometry_type == ' geometry ' : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
delete_style_mappings ( self ) : NEW_LINE INDENT style_mappings = [ ] NEW_LINE for style in self . style_mappings : NEW_LINE INDENT style_mappings . append ( style ) NEW_LINE DEDENT return style_mappings NEW_LINE DEDENT
delete_geometry_type ( self , geometry_type ) : NEW_LINE INDENT if geometry_type is not None : NEW_LINE INDENT return self . delete_geometry_type ( geometry_type ) NEW_LINE DEDENT return self . delete_geometry_type ( geometry_type ) NEW_LINE DEDENT
delete_geometry_type ( self , geometry_type ) : NEW_LINE INDENT if geometry_type is not None : NEW_LINE INDENT return self . delete_geometry_type ( geometry_type ) NEW_LINE DEDENT return self . delete_geometry ( geometry_type ) NEW_LINE DEDENT
get_unique_style_row_ids ( self , table ) : NEW_LINE INDENT row_ids = [ ] NEW_LINE for row in table : NEW_LINE INDENT row_ids . append ( row . id ) NEW_LINE DEDENT return row_ids NEW_LINE DEDENT
get_unique_icon_row_ids ( self , table ) : NEW_LINE INDENT row_ids = [ ] NEW_LINE for row in table : NEW_LINE INDENT row_ids . append ( row . id ) NEW_LINE DEDENT return row_ids NEW_LINE DEDENT
get_style_row_ids ( self , style_row_ids ) : NEW_LINE INDENT if style_row_ids is None : NEW_LINE INDENT style_row_ids = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT style_row_ids = [ style_row_ids [ 0 ] ] NEW_LINE DEDENT return style_row_ids NEW_LINE DEDENT
get_icon_row_ids ( self ) : NEW_LINE INDENT icon_row_ids = [ ] NEW_LINE for row_id in self . icon_row_ids : NEW_LINE INDENT icon_row_ids . append ( row_id ) NEW_LINE DEDENT return icon_row_ids NEW_LINE DEDENT
get_image_bytes ( self ) : NEW_LINE INDENT image = self . image NEW_LINE if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return image . bytes NEW_LINE DEDENT DEDENT
flush ( self ) : NEW_LINE INDENT stream = self . stream NEW_LINE stream . flush ( ) NEW_LINE stream . flush ( ) NEW_LINE stream . flush ( ) NEW_LINE DEDENT
get_pixel_at_coordinate ( self , coordinate ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pixels [ coordinate ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
read_pixels ( image ) : NEW_LINE INDENT try : NEW_LINE INDENT pixels = image . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT for pixel in pixels : NEW_LINE INDENT try : NEW_LINE INDENT pixels = image . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT return pixels NEW_LINE DEDENT
draw_feature ( self , feature ) : NEW_LINE INDENT if isinstance ( feature , Feature ) : NEW_LINE INDENT return feature NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
draw_line_path ( canvas ) : NEW_LINE INDENT line_path = canvas . create_line_path ( ) NEW_LINE if line_path is not None : NEW_LINE INDENT line_path = line_path NEW_LINE DEDENT return line_path NEW_LINE DEDENT
draw_path ( self , canvas , path ) : NEW_LINE INDENT if path is None : NEW_LINE INDENT return NEW_LINE DEDENT canvas . draw_path ( path ) NEW_LINE DEDENT
add_linestring ( self , path , linestring ) : NEW_LINE INDENT if linestring is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( linestring , str ) : NEW_LINE INDENT linestring = [ linestring ] NEW_LINE DEDENT if isinstance ( linestring , str ) : NEW_LINE INDENT linestring = [ linestring ] NEW_LINE DEDENT return linestring NEW_LINE DEDENT
add_polygon ( self , polygon ) : NEW_LINE INDENT if polygon is None : NEW_LINE INDENT return None NEW_LINE DEDENT if polygon is not None : NEW_LINE INDENT return polygon NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_feature_row_cache ( self , table_name ) : NEW_LINE INDENT table = self . get_table ( table_name ) NEW_LINE if not table : NEW_LINE INDENT return None NEW_LINE DEDENT table = self . get_table ( table_name ) NEW_LINE if not table : NEW_LINE INDENT return None NEW_LINE DEDENT table = self . get_table ( table_name ) NEW_LINE if not table : NEW_LINE INDENT return None NEW_LINE DEDENT table = self . get_table ( table_name ) NEW_LINE if not table : NEW_LINE INDENT return None NEW_LINE DEDENT return table NEW_LINE DEDENT
remove_cached_feature_row ( self ) : NEW_LINE INDENT if self . _cached_feature_row is not None : NEW_LINE INDENT self . _cached_feature_row . remove ( self . _cached_feature_row ) NEW_LINE DEDENT DEDENT
resize_caches ( self ) : NEW_LINE INDENT if self . max_cache_size is not None : NEW_LINE INDENT self . max_cache_size = self . max_cache_size NEW_LINE self . max_cache_size = self . max_cache_size NEW_LINE DEDENT DEDENT
get_cached_table_styles ( self ) : NEW_LINE INDENT cached_table_styles = { } NEW_LINE if self . cached_table_styles : NEW_LINE INDENT cached_table_styles = self . cached_table_styles NEW_LINE DEDENT return cached_table_styles NEW_LINE DEDENT
get_cached_table_icons ( self ) : NEW_LINE INDENT if self . _cached_table_icons is not None : NEW_LINE INDENT return self . _cached_table_icons NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
static RTreeIndexTableDAO getRTreeIndexTableDAO ( ) { return new RTreeIndexTableDAO ( ) { @ Override public RTreeIndexTable getRTreeIndexTable ( ) { return new RTreeIndexTable ( ) ; } } ; }
set_width ( self , width ) : NEW_LINE INDENT self . width = width NEW_LINE DEDENT
set_height ( self , height ) : NEW_LINE INDENT self . height = height NEW_LINE DEDENT
def def get_scaled_width_height ( self , width , height ) : NEW_LINE INDENT return self . _get_scaled_width_height ( width , height ) NEW_LINE DEDENT
get_tile_density ( self ) : NEW_LINE INDENT if self . tile_density is None : NEW_LINE INDENT return self . tile_density NEW_LINE DEDENT return self . tile_density NEW_LINE DEDENT
read_blob_column_value ( self ) : NEW_LINE INDENT chunks = [ ] NEW_LINE for chunk in chunks : NEW_LINE INDENT chunks . append ( chunk ) NEW_LINE DEDENT for chunk in chunks : NEW_LINE INDENT chunks . append ( chunk ) NEW_LINE DEDENT return chunks NEW_LINE DEDENT
def def def read_table ( self , table ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_color ( self , color ) : NEW_LINE INDENT if color is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return color NEW_LINE DEDENT DEDENT
adjust_color_value ( self , color_value ) : NEW_LINE INDENT if color_value is not None : NEW_LINE INDENT return color_value NEW_LINE DEDENT elif color_value is not None : NEW_LINE INDENT return color_value NEW_LINE DEDENT return None NEW_LINE DEDENT
def create_color_from_hex ( self , hex_color ) : NEW_LINE INDENT if hex_color is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_color_from_hex ( hex_color ) NEW_LINE DEDENT return self . create_color_from_hex ( hex_color ) NEW_LINE DEDENT
get_geo_package_manager ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _geo_package_manager NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_progress ( self , progress ) : NEW_LINE INDENT self . progress = progress NEW_LINE DEDENT
index_feature_tables ( index_types ) : NEW_LINE INDENT feature_tables = { } NEW_LINE for index_type in index_types : NEW_LINE INDENT feature_tables [ index_type ] = index_types [ index_type ] NEW_LINE DEDENT return feature_tables NEW_LINE DEDENT
index ( self ) : NEW_LINE INDENT return self . _index ( ) NEW_LINE DEDENT
delete_feature_index ( self , index_type ) : NEW_LINE INDENT if isinstance ( index_type , six . string_types ) : NEW_LINE INDENT index_type = index_type . lower ( ) NEW_LINE DEDENT if isinstance ( index_type , six . string_types ) : NEW_LINE INDENT index_type = index_type . lower ( ) NEW_LINE DEDENT if isinstance ( index_type , six . string_types ) : NEW_LINE INDENT index_type = index_type . lower ( ) NEW_LINE DEDENT if isinstance ( index_type , six . string_types ) : NEW_LINE INDENT index_type = index_type . lower ( ) NEW_LINE DEDENT return index_type NEW_LINE DEDENT
delete_feature_row ( self , index_type ) : NEW_LINE INDENT if isinstance ( index_type , int ) : NEW_LINE INDENT return self . delete_feature_row ( index_type ) NEW_LINE DEDENT elif isinstance ( index_type , int ) : NEW_LINE INDENT return self . delete_feature_row ( index_type ) NEW_LINE DEDENT return self . delete_feature_row ( index_type ) NEW_LINE DEDENT
delete_feature_index ( self , geometry_id ) : NEW_LINE INDENT feature_index = self . _get_feature_index ( geometry_id ) NEW_LINE if feature_index : NEW_LINE INDENT feature_index . delete ( ) NEW_LINE DEDENT DEDENT
delete_feature_index ( self , geometry_id ) : NEW_LINE INDENT feature_index = self . _get_feature_index ( geometry_id ) NEW_LINE if feature_index : NEW_LINE INDENT feature_index . delete ( ) NEW_LINE DEDENT return feature_index NEW_LINE DEDENT
if the feature table is indexed ( ) { if ( featureTable . isIndexed ( ) ) { return featureTable ; } else { return null ; } }
get_indexed_types ( self ) : NEW_LINE INDENT return self . _get_indexed_types ( ) NEW_LINE DEDENT

def def def get_feature_feature_index_index_count ( self ) : NEW_LINE INDENT return self . feature_index_count ( ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def


get_internal_storage_file ( self , file_path ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_internal_storage_file ( file_path ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_internal_storage_patch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _internal_storage_patch NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _internal_storage_patch NEW_LINE DEDENT DEDENT
get_geometry_type ( self , geometry_type ) : NEW_LINE INDENT if geometry_type is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return geometry_type NEW_LINE DEDENT DEDENT
set_geometry_type ( self , geometry_type ) : NEW_LINE INDENT self . geometry_type = geometry_type NEW_LINE DEDENT
bounding_box ( url ) : NEW_LINE INDENT try : NEW_LINE INDENT bounding_box = urlparse . urlparse ( url ) . bounding_box NEW_LINE return bounding_box NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
replace_x_y_and_z ( self , x , y , z ) : NEW_LINE INDENT return self . replace_x_y_and_z ( x , y , z ) NEW_LINE DEDENT
get_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
bounding_box_coordinates ( self , url ) : NEW_LINE INDENT bounding_box_coordinates = [ ] NEW_LINE for x in url : NEW_LINE INDENT bounding_box_coordinates . append ( x ) NEW_LINE DEDENT bounding_box_coordinates = [ ] NEW_LINE for x in url : NEW_LINE INDENT bounding_box_coordinates . append ( x ) NEW_LINE DEDENT return bounding_box_coordinates NEW_LINE DEDENT
bounding_box ( self ) : NEW_LINE INDENT if self . bounding_box is not None : NEW_LINE INDENT return self . bounding_box NEW_LINE DEDENT return None NEW_LINE DEDENT
get_geometry ( self ) : NEW_LINE INDENT if self . geometry is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . geometry NEW_LINE DEDENT
index_feature_row ( self , feature_row ) : NEW_LINE INDENT if self . feature_row is None : NEW_LINE INDENT self . feature_row = feature_row NEW_LINE DEDENT else : NEW_LINE INDENT self . feature_row = feature_row NEW_LINE DEDENT return self . feature_row NEW_LINE DEDENT
update_least_indexed_time ( self , time ) : NEW_LINE INDENT try : NEW_LINE INDENT self . least_indexed_time = time NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . least_indexed_time = time NEW_LINE DEDENT DEDENT
delete_feature_table_index ( self , feature_table_index ) : NEW_LINE INDENT if feature_table_index is not None : NEW_LINE INDENT feature_table_index = feature_table_index NEW_LINE DEDENT return feature_table_index NEW_LINE DEDENT
delete_geometry ( self , geometry_id ) : NEW_LINE INDENT if geometry_id is None : NEW_LINE INDENT return NEW_LINE DEDENT self . delete_geometry ( geometry_id ) NEW_LINE self . delete_geometry ( geometry_id ) NEW_LINE DEDENT
is_indexed ( self , table_name ) : NEW_LINE INDENT if not table_name : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def def get_geometry_metadata ( self ) : NEW_LINE INDENT return self . _geometry_metadata NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def def def def def def def def def def def def def def def def def def def def def def def def public public public public public public public public public public public public public public public public public public public public static public static public static public static final public static GeometryMetadata getMetadata public static GeometryMetadata getMetadata public static GeometryMetadata getMetadata public static final public static GeometryMetadata getMetadata public static GeometryMetadata getMetadata
GeometryMetadata count ( BoundingBox boundingBox ) { GeometryMetadata count = null ; if ( boundingBox != null ) { count = GeometryMetadata . count ( boundingBox ) ; } return count ; }
get_bounding_box ( self ) : NEW_LINE INDENT if self . bounding_box is None : NEW_LINE INDENT return self . bounding_box NEW_LINE DEDENT return self . bounding_box NEW_LINE DEDENT
get_geometry_metadata ( self , cursor ) : NEW_LINE INDENT if cursor is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return cursor . get_geometry_metadata ( ) NEW_LINE DEDENT DEDENT
get_feature_row ( self , cursor ) : NEW_LINE INDENT if cursor is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return cursor . get_feature_row ( ) NEW_LINE DEDENT DEDENT
get_feature_row ( self ) : NEW_LINE INDENT feature_row = [ ] NEW_LINE for row in self . geometries : NEW_LINE INDENT feature_row . append ( row ) NEW_LINE DEDENT return feature_row NEW_LINE DEDENT
get_tile_tables ( self ) : NEW_LINE INDENT tile_tables = [ ] NEW_LINE for table in self . tile_tables : NEW_LINE INDENT tile_tables . append ( table ) NEW_LINE DEDENT return tile_tables NEW_LINE DEDENT
get_feature_tables ( self ) : NEW_LINE INDENT feature_tables = self . get_feature_tables ( ) NEW_LINE if feature_tables : NEW_LINE INDENT return feature_tables NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_bounding_box ( self ) : NEW_LINE INDENT if self . bounding_box is None : NEW_LINE INDENT self . bounding_box = self . bounding_box NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_unique_base_ids ( self ) : NEW_LINE INDENT base_ids = [ ] NEW_LINE for base_id in self . base_ids : NEW_LINE INDENT base_ids . append ( base_id ) NEW_LINE DEDENT for base_id in base_ids : NEW_LINE INDENT base_ids . append ( base_id ) NEW_LINE DEDENT return base_ids NEW_LINE DEDENT
def get_unique_related_ids ( self ) : NEW_LINE INDENT return self . _get_unique_related_ids ( ) NEW_LINE DEDENT
delete_user_mappings_by_base_id ( self , base_id ) : NEW_LINE INDENT mappings = self . _get_user_mappings_by_base_id ( base_id ) NEW_LINE mappings . delete ( ) NEW_LINE return mappings NEW_LINE DEDENT
delete_user_mappings_by_related_id ( self , related_id ) : NEW_LINE INDENT mappings = self . get_user_mappings_by_related_id ( related_id ) NEW_LINE if mappings : NEW_LINE INDENT mappings . delete ( ) NEW_LINE DEDENT return mappings NEW_LINE DEDENT
delete_user_mappings ( self , base_id , related_id ) : NEW_LINE INDENT user_mappings = self . _get_user_mappings ( base_id = base_id , related_id = related_id ) NEW_LINE user_mappings . delete ( ) NEW_LINE return user_mappings NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
GeoPackage getMetadata ( ) { if ( metadata == null ) { metadata = new GeoPackage ( ) ; } return metadata ; }
delete_database ( self , database ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _db . delete ( database ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _db . delete ( database ) NEW_LINE DEDENT DEDENT
rename_metadata ( self , metadata , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return name NEW_LINE DEDENT
rename ( self , name ) : NEW_LINE INDENT self . name = name NEW_LINE DEDENT
static List < GeoPackageMetadata > getGeoPackageMetadata ( ) { List < GeoPackageMetadata > metadata = new ArrayList < GeoPackageMetadata > ( ) ; metadata . add ( new GeoPackageMetadata ( ) ) ; metadata . add ( new GeoPackageMetadata ( ) ) ; metadata . add ( new GeoPackageMetadata ( ) ) ; return metadata ; }
get_metadata ( self , name ) : NEW_LINE INDENT metadata = { } NEW_LINE metadata [ ' name ' ] = name NEW_LINE metadata [ ' metadata ' ] = metadata [ ' metadata ' ] NEW_LINE metadata [ ' metadata ' ] = metadata [ ' metadata ' ] NEW_LINE return metadata NEW_LINE DEDENT
get_metadata ( self , id ) : NEW_LINE INDENT metadata = { } NEW_LINE metadata [ ' id ' ] = id NEW_LINE metadata [ ' metadata ' ] = metadata [ ' metadata ' ] NEW_LINE metadata [ ' metadata ' ] = metadata [ ' metadata ' ] NEW_LINE metadata [ ' metadata ' ] = metadata [ ' metadata ' ] NEW_LINE return metadata NEW_LINE DEDENT
get_metadata ( self ) : NEW_LINE INDENT if self . metadata is None : NEW_LINE INDENT self . metadata = { } NEW_LINE DEDENT return self . metadata NEW_LINE DEDENT
if the GeoPackage is external ( ) { return GeoPackage . isExternal ( ) ; }
get_external_metadata ( self ) : NEW_LINE INDENT metadata = self . get_metadata ( ) NEW_LINE if metadata : NEW_LINE INDENT return metadata NEW_LINE DEDENT else : NEW_LINE INDENT return metadata NEW_LINE DEDENT DEDENT
get_metadata ( self , name ) : NEW_LINE INDENT metadata = { } NEW_LINE metadata [ name ] = self . _metadata NEW_LINE metadata [ name ] = self . _metadata NEW_LINE return metadata NEW_LINE DEDENT
get_metadata ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return { } NEW_LINE DEDENT else : NEW_LINE INDENT return { } NEW_LINE DEDENT DEDENT
get_metadata ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return { } NEW_LINE DEDENT name = name . lower ( ) NEW_LINE if not name : NEW_LINE INDENT return { } NEW_LINE DEDENT return { } NEW_LINE DEDENT
GeoPackage getMetadata ( ) { if ( metadata == null ) { metadata = new GeoPackage ( ) ; } return metadata ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
attach_attributes ( self , tag , attributes ) : NEW_LINE INDENT if isinstance ( tag , dict ) : NEW_LINE INDENT for attr in attributes : NEW_LINE INDENT setattr ( self , attr , getattr ( tag , attr ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for attr in attributes : NEW_LINE INDENT setattr ( self , attr , None ) NEW_LINE DEDENT DEDENT DEDENT
void onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; inflater . inflate ( container , container , false ) ; }
inflate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self .LayoutInflater . inflate ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
append ( self , event ) : NEW_LINE INDENT if isinstance ( event , SMTPAppendEvent ) : NEW_LINE INDENT self . appendEvent ( event ) NEW_LINE DEDENT else : NEW_LINE INDENT self . appendEvent ( event ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static ClassLoader getClassLoader ( ) { if ( classloader == null ) { classloader = ClassLoader . getSystemClassLoader ( ) ; } return classloader ; }

def def def get_status_message ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_status_message ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _get_status_message ( ) NEW_LINE DEDENT DEDENT
static String convert ( String socketAddress ) { if ( socketAddress == null ) { return " " ; } return socketAddress ; }

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
RollingFileAppender newInstance ( ) { RollingFileAppender appender = new RollingFileAppender ( ) ; appender . init ( ) ; return appender ; }
add_property ( self , execution_context , property_name ) : NEW_LINE INDENT self . properties . add ( property_name ) NEW_LINE DEDENT
get ( self ) : NEW_LINE INDENT if not self . propertiesMap . containsKey ( self . key ) : NEW_LINE INDENT return self . propertiesMap . get ( self . key ) NEW_LINE DEDENT return self . propertiesMap . get ( self . key ) NEW_LINE DEDENT
def parse ( Node list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
def def _teopt ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _teopt ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _teopt ( ) NEW_LINE DEDENT DEDENT
format_MODIFIER ( self ) : NEW_LINE INDENT T = LITERAL | % C | % C | % C | % FORMAT_MODIFIER C | % C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C | % FORMAT_MODIFIER C
escape ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _escape ( ) NEW_LINE DEDENT except UnicodeEncodeError : NEW_LINE INDENT return self . _escape ( ) NEW_LINE DEDENT DEDENT
convert ( self , instance ) : NEW_LINE INDENT if isinstance ( instance , datetime . datetime ) : NEW_LINE INDENT return instance NEW_LINE DEDENT elif isinstance ( instance , datetime . date ) : NEW_LINE INDENT return instance NEW_LINE DEDENT elif isinstance ( instance , datetime . datetime ) : NEW_LINE INDENT return instance NEW_LINE DEDENT else : NEW_LINE INDENT return instance NEW_LINE DEDENT DEDENT
def def _instant def _instantiate_evaluator ( cls , name ) : NEW_LINE INDENT return cls . __new__ ( cls , name ) NEW_LINE DEDENT
parse_children ( self , children ) : NEW_LINE INDENT if len ( children ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( children ) == 1 : NEW_LINE INDENT return children [ 0 ] NEW_LINE DEDENT elif len ( children ) == 2 : NEW_LINE INDENT return children [ 1 ] NEW_LINE DEDENT elif len ( children ) == 3 : NEW_LINE INDENT return children [ 2 ] NEW_LINE DEDENT elif len ( children ) == 4 : NEW_LINE INDENT return children [ 3 ] NEW_LINE DEDENT else : NEW_LINE INDENT return children NEW_LINE DEDENT DEDENT
static LoggerBinder getLoggerBinder ( ) { if ( loggerBinder == null ) { loggerBinder = new LoggerBinder ( ) ; } return loggerBinder ; }
static LoggerContext newInstance ( LoggerContext context ) { if ( context == null ) { throw new NullPointerException ( " context must not be null " ) ; } LoggerContext selector = new LoggerContext ( ) ; selector . setContext ( context ) ; return selector ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_external_storage_path ( self , path ) : NEW_LINE INDENT if not path : NEW_LINE INDENT return None NEW_LINE DEDENT if path . startswith ( ' / ' ) : NEW_LINE INDENT return path NEW_LINE DEDENT return None NEW_LINE DEDENT
get_absolute_path ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . getcwd ( ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_absolute_path ( self , filename ) : NEW_LINE INDENT if not os . path . isabs ( filename ) : NEW_LINE INDENT return filename NEW_LINE DEDENT if os . path . isabs ( filename ) : NEW_LINE INDENT return filename NEW_LINE DEDENT else : NEW_LINE INDENT return filename NEW_LINE DEDENT DEDENT
is_event ( event ) : NEW_LINE INDENT if event is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
get_default_value ( self , key ) : NEW_LINE INDENT value = self . get_value ( key ) NEW_LINE if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
change_detection ( self , mask ) : NEW_LINE INDENT self . mask = mask NEW_LINE if self . mask is None : NEW_LINE INDENT self . mask = None NEW_LINE DEDENT else : NEW_LINE INDENT self . mask = self . mask . copy ( ) NEW_LINE DEDENT DEDENT
filter ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT elif len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT elif len ( filters ) == 3 : NEW_LINE INDENT return filters [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return filters [ 3 ] NEW_LINE DEDENT DEDENT
create_key_managers ( self ) : NEW_LINE INDENT key_managers = [ ] NEW_LINE for key_manager in self . key_managers . values ( ) : NEW_LINE INDENT key_manager . append ( key_manager ) NEW_LINE DEDENT return key_managers NEW_LINE DEDENT
static TrustManager [ ] createTrustManagers ( ) { return new TrustManager [ ] { new TrustManager ( ) , new TrustManager ( ) } ; }
static KeyStoreFactory createKeyStoreFactory ( ) { if ( keyStoreFactory == null ) { keyStoreFactory = new KeyStoreFactory ( ) ; } return keyStoreFactory ; }
static String getResourceLocation ( String location ) { if ( location == null ) { return null ; } if ( location . startsWith ( " / " ) ) { return location ; } if ( location . startsWith ( " / " ) ) { return location ; } return null ; }
static URL parse ( String resource ) throws MalformedURLException { if ( resource == null ) { throw new MalformedURLException ( ) ; } URL url = new URL ( resource ) ; return new URL ( url ) ; }
def _get_converters ( self ) : NEW_LINE INDENT return self . _converters . get_converters ( ) . values ( ) NEW_LINE DEDENT
stop ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _context . stop ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _context . stop ( ) NEW_LINE DEDENT DEDENT
print_context_status ( self , context_status ) : NEW_LINE INDENT if not context_status : NEW_LINE INDENT return NEW_LINE DEDENT context_status = context_status . copy ( ) NEW_LINE context_status . clear ( ) NEW_LINE context_status . append ( context_status ) NEW_LINE context_status . append ( context_status ) NEW_LINE context_status . append ( context_status ) NEW_LINE DEDENT
print_context_statuses ( self , context_statuses ) : NEW_LINE INDENT if not context_statuses : NEW_LINE INDENT return NEW_LINE DEDENT context_statuses = [ ] NEW_LINE for context_status in context_statuses : NEW_LINE INDENT context_statuses . append ( context_status ) NEW_LINE DEDENT return NEW_LINE DEDENT
print_context_status_data ( self ) : NEW_LINE INDENT if self . _context_status_data is None : NEW_LINE INDENT self . _context_status_data = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . _context_status_data . append ( self . _context_status_data ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
getLingerers ( self ) : NEW_LINE INDENT lingerers = self . getLingerers ( ) NEW_LINE if lingerers : NEW_LINE INDENT return lingerers NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
mark_component ( self , key ) : NEW_LINE INDENT if key in self . components : NEW_LINE INDENT return self . components [ key ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . components [ key ] NEW_LINE DEDENT DEDENT
parse ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse ( string ) NEW_LINE DEDENT DEDENT
rename ( self , src , target ) : NEW_LINE INDENT if not self . _rename ( src , target ) : NEW_LINE INDENT return self . _rename ( src , target ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _rename ( src , target ) NEW_LINE DEDENT DEDENT
check_file ( self , filename ) : NEW_LINE INDENT if filename . startswith ( ' / ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif filename . startswith ( ' / ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_android_system_property ( self ) : NEW_LINE INDENT return self . _get_android_system_property ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_all_values ( self ) : NEW_LINE INDENT if not self . is_valid ( ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return self . _get_all_values ( ) NEW_LINE DEDENT DEDENT
extract_caller_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _caller_data NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
currentClass ( self ) : NEW_LINE INDENT return self . _currentClass NEW_LINE DEDENT
add_status ( self , status ) : NEW_LINE INDENT self . status = status NEW_LINE DEDENT
install ( self ) : NEW_LINE INDENT if self . _onConsoleStatusListener is not None : NEW_LINE INDENT return self . _onConsoleStatusListener . install ( self ) NEW_LINE DEDENT self . _onConsoleStatusListener = None NEW_LINE DEDENT
static List < Action > getImplicitActions ( List < Action > actions ) { List < Action > implicitActions = new ArrayList < Action > ( ) ; for ( Action action : actions ) { implicitActions . add ( action ) ; } return implicitActions ; }
list_of_applicable_patterns ( self ) : NEW_LINE INDENT patterns = [ ] NEW_LINE for pattern in self . patterns : NEW_LINE INDENT patterns . append ( pattern ) NEW_LINE DEDENT return patterns NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_value ( self , key ) : NEW_LINE INDENT key = key . lower ( ) NEW_LINE value = self . _get_value ( key ) NEW_LINE if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT
static boolean getBoolean ( String key ) { if ( key == null ) { return false ; } if ( key . equals ( " " ) ) { return true ; } if ( key . equals ( " " ) ) { return false ; } return true ; }
convert_name ( name ) : NEW_LINE INDENT if isinstance ( name , basestring ) : NEW_LINE INDENT name = name . lower ( ) NEW_LINE DEDENT return name NEW_LINE DEDENT
get_method_descriptor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . method_descriptor NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_property_descriptor ( self , name ) : NEW_LINE INDENT if name . startswith ( ' set ' ) : NEW_LINE INDENT return getattr ( self , name ) NEW_LINE DEDENT return getattr ( self , name ) NEW_LINE DEDENT
requires ( self ) : NEW_LINE INDENT if not self . params : NEW_LINE INDENT self . params = [ ] NEW_LINE DEDENT return self . params NEW_LINE DEDENT
static OnConsoleStatusListener createOnConsoleStatusListener ( Context context ) { OnConsoleStatusListener listener = new OnConsoleStatusListener ( context ) ; listener . setContext ( context ) ; return listener ; }
set_property_definer ( self , property_definer ) : NEW_LINE INDENT self . _property_definer = property_definer NEW_LINE self . _property_definer = property_definer NEW_LINE DEDENT
get_context_name ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context : NEW_LINE INDENT return context . name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def get_level__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python__
shutdownHook ( cls ) : NEW_LINE INDENT def shutdownHook ( name ) : NEW_LINE INDENT return cls ( name ) NEW_LINE DEDENT def shutdownHook ( name ) : NEW_LINE INDENT return cls ( name ) NEW_LINE DEDENT return shutdownHook NEW_LINE DEDENT
parse_shutdown_hook_options ( self ) : NEW_LINE INDENT if self . shutdown_hook_options is not None : NEW_LINE INDENT return self . shutdown_hook_options NEW_LINE DEDENT return self . shutdown_hook_options NEW_LINE DEDENT
get_enabled_protocols ( self ) : NEW_LINE INDENT protocols = [ ] NEW_LINE for protocol in self . protocols : NEW_LINE INDENT protocols . append ( protocol ) NEW_LINE DEDENT return protocols NEW_LINE DEDENT
get_enabled_cipher_suites ( self ) : NEW_LINE INDENT return self . _enabled_cipher_suites NEW_LINE DEDENT
static String [ ] include ( String [ ] patterns ) { if ( patterns == null || patterns . length == 0 ) { return new String [ ] { " " } ; } else { return patterns ; } }
convert_scope ( scope ) : NEW_LINE INDENT if isinstance ( scope , Scope . Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , Scope . Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , Scope . Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , Scope . Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT elif isinstance ( scope , Scope . Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT DEDENT

addAppender ( appender ) : NEW_LINE INDENT if appender is not None : NEW_LINE INDENT appender . append ( appender ) NEW_LINE DEDENT else : NEW_LINE INDENT appender . append ( appender ) NEW_LINE DEDENT DEDENT
removeAppender ( self , appender ) : NEW_LINE INDENT if isinstance ( appender , list ) : NEW_LINE INDENT self . appenders . remove ( appender ) NEW_LINE DEDENT else : NEW_LINE INDENT self . appenders . remove ( appender ) NEW_LINE DEDENT DEDENT
removeAppender ( self , name ) : NEW_LINE INDENT appender = self . appenders . pop ( name ) NEW_LINE if appender : NEW_LINE INDENT self . appenders . remove ( appender ) NEW_LINE DEDENT DEDENT
void setLevelInt ( int levelInt ) { this . levelInt = levelInt ; }
def def get_all_appenders ( self ) : NEW_LINE INDENT logger = self . logger . getLogger ( ) NEW_LINE return self . logger . get_all_appenders ( ) NEW_LINE DEDENT
removeAppender ( self , appenders ) : NEW_LINE INDENT if appenders is not None : NEW_LINE INDENT for appender in appenders : NEW_LINE INDENT self . removeAppender ( appender ) NEW_LINE DEDENT DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_attached_turbo_filter ( self , logger , level ) : NEW_LINE INDENT logger . setLevel ( level ) NEW_LINE logger . setLevel ( level ) NEW_LINE logger . setLevel ( level ) NEW_LINE logger . setLevel ( level ) NEW_LINE logger . setLevel ( level ) NEW_LINE return logger NEW_LINE DEDENT
static void initialize ( ) { if ( ! initialized ) { throw new IllegalStateException ( " SLF4J is not initialized . " ) ; } initialized = true ; }

create_parent_directories ( self , path ) : NEW_LINE INDENT try : NEW_LINE INDENT parent_dir = os . path . dirname ( path ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT parent_dir = os . path . dirname ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT parent_dir = os . path . dirname ( path ) NEW_LINE DEDENT if parent_dir not in parent_dir : NEW_LINE INDENT parent_dir = os . path . dirname ( path ) NEW_LINE DEDENT return parent_dir NEW_LINE DEDENT
convert_level ( self , level ) : NEW_LINE INDENT if isinstance ( level , int ) : NEW_LINE INDENT return level NEW_LINE DEDENT else : NEW_LINE INDENT return level NEW_LINE DEDENT DEDENT
Level convert ( Level level ) { if ( level == null ) { throw new IllegalArgumentException ( " Level cannot be null . " ) ; } if ( level . getLevel ( ) == level . getLevel ( ) ) { throw new IllegalArgumentException ( " Level cannot be null . " ) ; } return level ; }
static int countOccurrences ( Class < ? > clazz ) { if ( clazz == null ) { return 0 ; } if ( clazz . getClassLoader ( ) != null ) { return clazz . getClassLoader ( ) . countOccurrences ( clazz . getClassLoader ( ) ) ; } return 0 ; }
search ( self , classloader ) : NEW_LINE INDENT if classloader is not None : NEW_LINE INDENT return self . _search ( classloader ) NEW_LINE DEDENT return self . _search ( classloader ) NEW_LINE DEDENT
static ClassLoader getClassLoader ( Object object ) { if ( object == null ) { return null ; } if ( object . getClass ( ) . getClassLoader ( ) != null ) { return object . getClass ( ) . getClassLoader ( ) ; } if ( object . getClass ( ) . getClassLoader ( ) != null ) { return object . getClass ( ) . getClassLoader ( ) ; } return null ; }
public public static ClassLoader getClassLoader ( Class < ? extends Class < ? > clazz ) { return clazz . getClassLoader ( ) ; }
static ClassLoader getClassLoader ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . getClassLoader ( ) != null ) { return clazz . getClassLoader ( ) ; } if ( clazz . getClassLoader ( ) != null ) { return clazz . getClassLoader ( ) ; } return null ; }
check_required_parameters ( self ) : NEW_LINE INDENT logger . debug ( " Checking if required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE logger . debug ( " Checking if all required parameters are set . . . . " ) NEW_LINE DEDENT
get_log_tag_string ( self ) : NEW_LINE INDENT return self . _log_tag_string NEW_LINE DEDENT
def add ( String name , String name , String value ) : NEW_LINE INDENT if ( name . equals ( name ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
def def get_separator_separator_position ( self ) : NEW_LINE INDENT return self . _separator_separator_separator_position . get_separator_position ( ) NEW_LINE DEDENT
def is_event ( self , event ) : NEW_LINE INDENT if event is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( event , dict ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( event , dict ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( event , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( event , dict ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def def get_client_thread_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _client_thread_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _client_thread_name NEW_LINE DEDENT DEDENT
exists ( self , a , b ) : NEW_LINE INDENT if a == b : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
start_appender ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . . . " ) NEW_LINE self . logger . info ( " Starting appender . .
append ( self , event ) : NEW_LINE INDENT if isinstance ( event , SMTPAppender ) : NEW_LINE INDENT self . append ( event ) NEW_LINE DEDENT else : NEW_LINE INDENT self . append ( event ) NEW_LINE DEDENT DEDENT


createConverter ( converterMap ) : NEW_LINE INDENT converter = converterMap . get ( " converter " ) NEW_LINE if converter : NEW_LINE INDENT return converter NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
createConverter ( compositeConverterMap ) : NEW_LINE INDENT if isinstance ( compositeConverterMap , CompositeConverterMap ) : NEW_LINE INDENT return compositeConverterMap NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static String getCompressionMode ( String fileNamePatternStr ) { if ( fileNamePatternStr . endsWith ( " . gz " ) ) { return " gzip " ; } if ( fileNamePatternStr . endsWith ( " . zip " ) ) { return " gzip " ; } if ( fileNamePatternStr . endsWith ( " . gz " ) ) { return " gzip " ; } return " gzip " ; }
read_configuration_from_file ( self , URL ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_configuration_from_file ( URL ) NEW_LINE DEDENT except FileNotFoundException : NEW_LINE INDENT pass NEW_LINE DEDENT return self . _read_configuration_from_file ( ) NEW_LINE DEDENT
read_configuration_from_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_configuration_from_file ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
configuraiton ( self ) : NEW_LINE INDENT configuraiton = self . configuraiton NEW_LINE return configuraiton NEW_LINE DEDENT
def def def def build ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python__ def def def def def build__python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def def _ def _build def _build def _build def _build def _get_config ( self ) : def _build def _build
read_configuration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _configuration NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _configuration NEW_LINE DEDENT DEDENT

static String getProperty ( String key ) { if ( key == null ) { return null ; } if ( key . equals ( CONTEXT_NAME ) ) { return " " ; } if ( key . equals ( CONTEXT ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } if ( key . equals ( CONTEXT_KEY ) ) { return " " ; } return " " ; }
set_context_name ( self , context_name ) : NEW_LINE INDENT if context_name is not None : NEW_LINE INDENT self . context_name = context_name NEW_LINE DEDENT else : NEW_LINE INDENT self . context_name = None NEW_LINE DEDENT DEDENT
static boolean isRegistered ( Context context ) { if ( context == null ) { return false ; } if ( context instanceof StatusManager ) { StatusManager statusManager = ( StatusManager ) context ; return statusManager . isRegistered ( ) ; } if ( context instanceof StatusManager ) { StatusManager statusManager = ( StatusManager ) context ; return statusManager . isRegistered ( ) ; } return false ; }
get_last_reset_time ( self ) : NEW_LINE INDENT if self . _last_reset_time is None : NEW_LINE INDENT self . _last_reset_time = time . time ( ) NEW_LINE DEDENT return self . _last_reset_time NEW_LINE DEDENT
def parse ( String pattern ) : NEW_LINE INDENT pattern = Pattern . compile ( pattern ) NEW_LINE pattern = Pattern . compile ( pattern ) NEW_LINE converter = Pattern . compile ( pattern ) NEW_LINE converter = Converter . parse ( pattern ) NEW_LINE return converter . convert ( ) NEW_LINE DEDENT
static Map < String , String > getDefaultConverterMap ( Context context ) { Map < String , String > defaultConverterMap = new HashMap < String , String > ( ) ; defaultConverterMap . putAll ( context . getDefaultConverterMap ( ) ) ; defaultConverterMap . putAll ( context . getDefaultConverterMap ( ) ) ; return defaultConverterMap ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _instant def _instantiate_appender ( cls , appender , name ) : NEW_LINE INDENT logger . info ( " Instantiates an appender of the given class and sets its name . " ) NEW_LINE logger . info ( " Instantiates an appender of the given class and sets its name . " ) NEW_LINE logger . info ( " Instantiates an appender of the given class and sets its name . " ) NEW_LINE return appender NEW_LINE DEDENT
parse_children ( self , children ) : NEW_LINE INDENT if len ( children ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( children ) == 1 : NEW_LINE INDENT return children [ 0 ] NEW_LINE DEDENT elif len ( children ) == 2 : NEW_LINE INDENT return children [ 1 ] NEW_LINE DEDENT elif len ( children ) == 3 : NEW_LINE INDENT return children [ 2 ] NEW_LINE DEDENT elif len ( children ) == 4 : NEW_LINE INDENT return children [ 3 ] NEW_LINE DEDENT else : NEW_LINE INDENT return children NEW_LINE DEDENT DEDENT
static Collection < Client > copy ( Collection < Client > clients ) { if ( clients . size ( ) == 0 ) { return Collections . emptyList ( ) ; } return clients . copy ( ) ; }
add_client ( self , client ) : NEW_LINE INDENT self . client = client NEW_LINE DEDENT
remove_client ( self , client ) : NEW_LINE INDENT self . _client = client NEW_LINE return self . _client NEW_LINE DEDENT
copy ( self ) : NEW_LINE INDENT if self . context is not None : NEW_LINE INDENT return self . context . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
public public static void checkNull ( String value ) { if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } } }
filter ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT elif len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT elif len ( filters ) == 3 : NEW_LINE INDENT return filters [ 2 ] NEW_LINE DEDENT elif len ( filters ) == 4 : NEW_LINE INDENT return filters [ 3 ] NEW_LINE DEDENT else : NEW_LINE INDENT return filters [ 4 ] NEW_LINE DEDENT DEDENT
is_android ( self ) : NEW_LINE INDENT return self . is_android ( ) NEW_LINE DEDENT

stemRegex ( stemRegex ) : NEW_LINE INDENT if not stemRegex : NEW_LINE INDENT return None NEW_LINE DEDENT return stemRegex NEW_LINE DEDENT
print_status_messages ( self ) : NEW_LINE INDENT status_messages = [ ] NEW_LINE for message in self . status_messages : NEW_LINE INDENT status_messages . append ( message ) NEW_LINE DEDENT return status_messages NEW_LINE DEDENT
def def def _get_integer_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( self . syslog . syslog . syslog . syslog . get_value ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_file ( self , file_path ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( file_path , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
removeExpiredLogs ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _db . delete_expired_logs ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _db . delete_expired_logs ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
clear_expired_logs ( self ) : NEW_LINE INDENT if self . expired_logs : NEW_LINE INDENT self . expired_logs = [ ] NEW_LINE self . expired_logs . clear ( ) NEW_LINE self . expired_logs . clear ( ) NEW_LINE DEDENT DEDENT
def def def main ( ) : NEW__python__
update_event ( self , event ) : NEW_LINE INDENT self . _event = event NEW_LINE self . _event . update ( ) NEW_LINE return self . _event NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def bind__python____python____python____python____python____python____python____python__ def def def def def def bind__python____python____python____python__ def def def def bind__python____python__
truncate ( self , event ) : NEW_LINE INDENT event = event . strip ( ) NEW_LINE if event . strip ( ) : NEW_LINE INDENT event . strip ( ) NEW_LINE DEDENT return event NEW_LINE DEDENT
def def def def def _get_reference_reference_mask ( self ) : NEW__python__ def _get_reference_mask ( self ) : NEW_LINE def _get_reference_mask ( self ) : NEW_LINE INDENT return self . _get_reference_mask ( ) NEW_LINE DEDENT def _get_reference_mask ( self ) : NEW_LINE INDENT return self . _get_reference_mask ( ) NEW_LINE DEDENT
def def merge ( self ) : NEW_LINE INDENT logger . info ( " Merges log event s properties " ) NEW_LINE logger . info ( " log event s properties " ) NEW_LINE DEDENT
insert_exception ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT raise exception NEW_LINE DEDENT elif isinstance ( exception , BaseException ) : NEW_LINE INDENT raise exception NEW_LINE DEDENT DEDENT
public static int countPrefixComponents ( String pattern ) { return this . pattern . length ( ) ; }
lying_status ( self ) : NEW_LINE INDENT if self . status is not None : NEW_LINE INDENT return self . status NEW_LINE DEDENT else : NEW_LINE INDENT return self . status NEW_LINE DEDENT DEDENT
void set ( PropertySetter setter ) { if ( setter == null ) { throw new IllegalArgumentException ( " Property setter cannot be null . " ) ; } if ( setter . getPropertyName ( ) == null ) { throw new IllegalArgumentException ( " Property setter cannot be null . " ) ; } if ( setter . getPropertyName ( ) == null ) { throw new IllegalArgumentException ( " Property setter cannot be null . " ) ; } }

get_copy ( self ) : NEW_LINE INDENT return self . copy ( ) NEW_LINE DEDENT
process_include ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _process_include ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_head_and_tail_tag ( self ) : NEW_LINE INDENT if self . head_tag and self . tail_tag : NEW_LINE INDENT self . head_tag = self . head_tag NEW_LINE self . tail_tag = self . tail_tag NEW_LINE DEDENT DEDENT
start_server ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . server . stop ( ) NEW_LINE DEDENT DEDENT
static boolean isTransient ( String error ) { if ( error == null ) { return false ; } if ( error . length ( ) == 0 ) { return true ; } return false ; }
def def set_default_hosts ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _set_default_hosts ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _set_default_hosts ( ) NEW_LINE DEDENT DEDENT
public public static void initialize ( final int index ) { if ( index == null ) { return ; } if ( index == null ) { throw new IllegalArgumentException ( ) ; } if ( index == null ) { throw new IllegalArgumentException ( ) ; } }
def _sync ( self ) : NEW_LINE INDENT if ( self . _sync . sync is_running . get ( ) : NEW_LINE INDENT return self . _sync . _sync ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _sync ( ) NEW_LINE DEDENT DEDENT
sync ( self ) : NEW_LINE INDENT if not self . _is_synced ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . _is_synced ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . _is_synced ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
void publishTask ( Task task ) { if ( task != null ) { if ( task . isPublished ( ) ) { task . publish ( ) ; } else { task . publish ( ) ; } } }
list_offline_indices ( self ) : NEW_LINE INDENT indices = [ ] NEW_LINE for index in self . offline_indices : NEW_LINE INDENT indices . append ( index ) NEW_LINE DEDENT return indices NEW_LINE DEDENT
read ( InputStream inputStream ) throws IOException { if ( inputStream == null ) { throw new IOException ( " InputStream is null " ) ; } else if ( inputStream . read ( ) == null ) { throw new IOException ( " InputStream is null " ) ; } return new String ( inputStream . read ( ) ) ; }
read ( InputStream inputStream ) : NEW_LINE INDENT try : NEW_LINE INDENT byte_array = bytearray ( inputStream . read ( ) ) NEW_LINE return byte_array NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
def def _ensure_content_consumed ( self ) : NEW_LINE INDENT if self . _content_consumed : NEW_LINE INDENT return self . _content_consumed NEW_LINE DEDENT else : NEW_LINE INDENT return self . _content_consumed NEW_LINE DEDENT DEDENT
get_hosts ( self ) : NEW_LINE INDENT hosts = [ ] NEW_LINE for host in self . hosts : NEW_LINE INDENT hosts . append ( host ) NEW_LINE DEDENT return hosts NEW_LINE DEDENT
search_place ( self , place ) : NEW_LINE INDENT if isinstance ( place , Place ) : NEW_LINE INDENT return place NEW_LINE DEDENT elif isinstance ( place , dict ) : NEW_LINE INDENT return place NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
start_iteration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . iteration . start ( ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT self . iteration . stop ( ) NEW_LINE DEDENT DEDENT
put ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache [ key ] = value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . cache [ key ] = value NEW_LINE DEDENT DEDENT
get_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( self . key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
finish ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT for thread in self . threads : NEW_LINE INDENT thread . finish ( ) NEW_LINE DEDENT DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
compare_version_strings ( self , version_strings ) : NEW_LINE INDENT version_strings = [ ] NEW_LINE for version_string in version_strings : NEW_LINE INDENT version_strings . append ( version_string ) NEW_LINE DEDENT return version_strings NEW_LINE DEDENT
write_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT self . write ( file ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT DEDENT
def def copies ( self , directory ) : NEW_LINE INDENT if isinstance ( directory , str ) : NEW_LINE INDENT return directory NEW_LINE DEDENT else : NEW_LINE INDENT return directory . copy ( ) NEW_LINE DEDENT DEDENT
static SimulatorProperties create ( ) { SimulatorProperties properties = new SimulatorProperties ( ) ; properties . add ( new SimulatorProperties ( ) ) ; properties . add ( new SimulatorProperties ( ) ) ; return properties ; }
get_static_field_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . static_field_value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
search_method_by_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return self . search_method ( name ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def

readPairContext ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context is not None : NEW_LINE INDENT return context NEW_LINE DEDENT else : NEW_LINE INDENT return context NEW_LINE DEDENT DEDENT
hex_value ( self , hex_value ) : NEW_LINE INDENT if hex_value is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif hex_value is not None : NEW_LINE INDENT return hex_value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
write ( self , buf ) : NEW_LINE INDENT if isinstance ( buf , bytes ) : NEW_LINE INDENT return buf NEW_LINE DEDENT elif isinstance ( buf , bytes ) : NEW_LINE INDENT return buf NEW_LINE DEDENT elif isinstance ( buf , bytes ) : NEW_LINE INDENT return buf NEW_LINE DEDENT DEDENT
output_json ( self , output_json ) : NEW_LINE INDENT if isinstance ( output_json , dict ) : NEW_LINE INDENT return output_json NEW_LINE DEDENT if isinstance ( output_json , dict ) : NEW_LINE INDENT return output_json NEW_LINE DEDENT DEDENT
write_out ( self , out ) : NEW_LINE INDENT if isinstance ( out , basestring ) : NEW_LINE INDENT out = json . dumps ( out ) NEW_LINE DEDENT else : NEW_LINE INDENT out = json . dumps ( out ) NEW_LINE DEDENT return out NEW_LINE DEDENT
skipContext ( context ) : NEW_LINE INDENT if context is None : NEW_LINE INDENT context = { } NEW_LINE DEDENT else : NEW_LINE INDENT context = { } NEW_LINE DEDENT return context NEW_LINE DEDENT
validate_number ( self , number ) : NEW_LINE INDENT if not isinstance ( number , int ) : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( number , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( number , float ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( number , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
read ( self , context ) : NEW_LINE INDENT if isinstance ( context , dict ) : NEW_LINE INDENT return context NEW_LINE DEDENT elif isinstance ( context , dict ) : NEW_LINE INDENT return context NEW_LINE DEDENT elif isinstance ( context , dict ) : NEW_LINE INDENT return context NEW_LINE DEDENT elif isinstance ( context , dict ) : NEW_LINE INDENT return context NEW_LINE DEDENT DEDENT
def def def expected ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def expected___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python__ def def def def _ def _get___python____python____python____python__ def def def _get_ def _get_expected def _get_quotes def _get_expected ( self ) : NEW def _get_expected ( self ) : NEW_LINE def _get_expected ( self ) : NEW_LINE def _get_expected ( self ) : NEW_LINE def _get_expected ( self ) : NEW_LINE
decode ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT data = json . loads ( data ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( data , six . string_types ) : NEW_LINE INDENT return data NEW_LINE DEDENT return data NEW_LINE DEDENT
send ( self , * args , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _send ( * args , ** kwargs ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
send_call ( self , * args , ** kwargs ) : NEW_LINE INDENT if args : NEW_LINE INDENT return self . send ( * args , ** kwargs ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . send ( * args , ** kwargs ) NEW_LINE DEDENT DEDENT
void send ( ) throws IOException { if ( this . queue . size ( ) > 0 ) { this . queue . add ( this . queue . poll ( ) ) ; } }
_resolves_file_system_location ( self , file_system_location ) : NEW_LINE INDENT if file_system_location is not None : NEW_LINE INDENT return file_system_location NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
update ( self ) : NEW_LINE INDENT if self . platform is not None : NEW_LINE INDENT return self . platform . update ( self ) NEW_LINE DEDENT return self . platform . update ( ) NEW_LINE DEDENT
refresh ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . view . refresh ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . view . refresh ( ) NEW_LINE DEDENT DEDENT
def def find_resource_history_view ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_resource_history_view ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
read_only_in_memory_editor ( self ) : NEW_LINE INDENT if self . memory_editor is not None : NEW_LINE INDENT return self . memory_editor . read_only_in_memory_editor ( ) NEW_LINE DEDENT DEDENT

prompt ( self , username , password ) : NEW_LINE INDENT if not username : NEW_LINE INDENT return None NEW_LINE DEDENT if not password : NEW_LINE INDENT return None NEW_LINE DEDENT username = username . strip ( ) NEW_LINE password = password . strip ( ) NEW_LINE if not password : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return password NEW_LINE DEDENT DEDENT
static Page createPage ( ) { Page page = new Page ( ) ; page . setName ( " page " ) ; page . setWidth ( "100 % " ) ; page . setHeight ( "100 % " ) ; page . setHeight ( "100 % " ) ; page . setHeight ( "100 % " ) ; page . setHeight ( "100 % " ) ; return page ; }
start_animation_thread ( self ) : NEW_LINE INDENT if self . animation_thread is None : NEW_LINE INDENT return NEW_LINE DEDENT self . animation_thread = self . animation_thread . start ( ) NEW_LINE DEDENT
keep_alive_form ( self ) : NEW_LINE INDENT if self . _keep_alive_form : NEW_LINE INDENT return self . _keep_alive_form NEW_LINE DEDENT return self . _keep_alive_form NEW_LINE DEDENT
def def def def _get_propertybehavior def _get_propertybehavior ( self ) : NEW_LINE INDENT return self . propertybehavior . _get_propertybehavior ( ) NEW_LINE DEDENT def _get_propertybehavior ( self ) : NEW_LINE INDENT return self . propertybehavior NEW_LINE DEDENT
set_owner ( self , activelock , owner ) : NEW_LINE INDENT if owner is not None : NEW_LINE INDENT self . owner = owner NEW_LINE DEDENT else : NEW_LINE INDENT self . owner = None NEW_LINE DEDENT DEDENT

parse_if_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return None NEW_LINE DEDENT if not header . startswith ( ' If ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT elif header . startswith ( ' If ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT elif header . startswith ( ' If ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT elif header . startswith ( ' If ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT elif header . startswith ( ' If ' ) : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
public public boolean matches ( ConditionTerm condition ) { if ( condition . getCondition ( ) != null ) { return condition . getCondition ( ) . getCondition ( ) == null ; } if ( condition . getCondition ( ) != null ) { return condition . getCondition ( ) . getCondition ( ) == null ; } return condition . getCondition ( ) == null ; }
get_reader ( self ) : NEW_LINE INDENT reader = self . reader NEW_LINE if reader : NEW_LINE INDENT return reader NEW_LINE DEDENT return None NEW_LINE DEDENT
find_dsl_file ( self ) : NEW_LINE INDENT if self . dsl_file is None : NEW_LINE INDENT self . dsl_file = self . dsl_file NEW_LINE DEDENT return self . dsl_file NEW_LINE DEDENT
load DSLMapping ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return DSLMapping . load ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_menu ( self ) : NEW_LINE INDENT menu = [ ] NEW_LINE for wizards in self . wizards . values ( ) : NEW_LINE INDENT menu . append ( wizards ) NEW_LINE DEDENT return menu NEW_LINE DEDENT

add_href ( self , href ) : NEW_LINE INDENT if not href : NEW_LINE INDENT return NEW_LINE DEDENT self . href = href NEW_LINE if not self . href : NEW_LINE INDENT return NEW_LINE DEDENT if self . href . startswith ( href ) : NEW_LINE INDENT self . href = href NEW_LINE DEDENT DEDENT
the given newHref before the given refHref in the set of hrefs . If newHref already exists it is not inserted .
remove_href ( self , hrefs ) : NEW_LINE INDENT if len ( hrefs ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( hrefs ) == 1 : NEW_LINE INDENT return hrefs [ 0 ] NEW_LINE DEDENT elif len ( hrefs ) == 2 : NEW_LINE INDENT return hrefs [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return hrefs [ 0 ] NEW_LINE DEDENT DEDENT
def get_editor ( self , response ) : NEW_LINE INDENT return self . _get_editor ( ) . get_editor ( ) NEW_LINE DEDENT
def first_href ( self , href ) : NEW_LINE INDENT if not href : NEW_LINE INDENT return None NEW_LINE DEDENT href = urlparse . urljoin ( self . url , href ) NEW_LINE if not href : NEW_LINE INDENT return None NEW_LINE DEDENT return urlparse . urljoin ( self . url , href ) NEW_LINE DEDENT
status_code ( self ) : NEW_LINE INDENT status_code = self . _status_code NEW_LINE status_code = self . _status_code NEW_LINE return status_code NEW_LINE DEDENT
get_stack_frame_context ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . stack_frame_context [ value ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
is_same_or_subtype ( self , first_class , second_class ) : NEW_LINE INDENT if isinstance ( first_class , Class ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( second_class , Class ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
compare_proposals ( self , proposals ) : NEW_LINE INDENT if isinstance ( proposals , list ) : NEW_LINE INDENT return proposals NEW_LINE DEDENT elif isinstance ( proposals , dict ) : NEW_LINE INDENT return proposals NEW_LINE DEDENT elif isinstance ( proposals , list ) : NEW_LINE INDENT return proposals NEW_LINE DEDENT elif isinstance ( proposals , dict ) : NEW_LINE INDENT return proposals NEW_LINE DEDENT elif isinstance ( proposals , dict ) : NEW_LINE INDENT return proposals NEW_LINE DEDENT else : NEW_LINE INDENT return proposals NEW_LINE DEDENT DEDENT
clone ( self , node ) : NEW_LINE INDENT clone = self . clone ( node ) NEW_LINE if clone . owner is not None : NEW_LINE INDENT clone . owner = clone . owner NEW_LINE DEDENT return clone NEW_LINE DEDENT
def _read ( self ) : NEW_LINE INDENT return self . stream . read ( ) NEW_LINE DEDENT
get_content_ assistance ( self ) : NEW_LINE INDENT content_ assistance = self . _get_content_ assistance ( ) NEW_LINE if content_ assistance is not None : NEW_LINE INDENT return content_ assistance NEW_LINE DEDENT DEDENT
public public public void add ( final Vertex vertex , final Vertex vertex ) { if ( vertex != null ) { if ( vertex . getVertex ( ) != null ) { if ( vertex . getVertex ( ) == null ) { throw new IllegalArgumentException ( ) ; } if ( vertex . getVertex ( ) != null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } } }
getPropertyValue ( self , propertyId = None ) : NEW_LINE INDENT if propertyId is None : NEW_LINE INDENT propertyId = self . getPropertyId ( ) NEW_LINE DEDENT if propertyId is None : NEW_LINE INDENT propertyId = self . getPropertyId ( ) NEW_LINE DEDENT return propertyId NEW_LINE DEDENT
remove ( self , vertex ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . remove ( vertex ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . connection . remove ( vertex ) NEW_LINE DEDENT DEDENT
set_location ( self , vertex , location ) : NEW_LINE INDENT if location is None : NEW_LINE INDENT return NEW_LINE DEDENT vertex . set_location ( location ) NEW_LINE DEDENT
def def set_property_value ( self , property_id , property_id ) : NEW_LINE INDENT if property_id is not None : NEW_LINE INDENT property_id = property_id NEW_LINE DEDENT else : NEW_LINE INDENT property_id = property_id NEW_LINE DEDENT return property_id NEW_LINE DEDENT
set_size ( self , vertex , newSize ) : NEW_LINE INDENT if newSize is not None : NEW_LINE INDENT self . size = newSize NEW_LINE DEDENT else : NEW_LINE INDENT self . size = vertex . size NEW_LINE DEDENT DEDENT

public public synchronized void add ( final LockEntry lockentry lockentry ) { if ( lockentry == null ) { throw new UnsupportedOperationException ( " Creates a new lockentry . " ) ; } else { throw new UnsupportedOperationException ( ) ; } } }

remove_vertex_from_graph ( self , graph ) : NEW_LINE INDENT vertex = self . _get_vertex_from_graph ( graph ) NEW_LINE if vertex is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return vertex NEW_LINE DEDENT DEDENT
plug_in_activation ( self ) : NEW_LINE INDENT if self . activation_method is not None : NEW_LINE INDENT self . activation_method ( ) NEW_LINE DEDENT self . activation_method ( ) NEW_LINE DEDENT
stop ( self ) : NEW_LINE INDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStarted ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStarted ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStarted ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self
static String getString ( String key ) { if ( key == null ) { return null ; } if ( key . length ( ) == 0 ) { return null ; } return key . substring ( 0 , key . length ( ) - 1 ) ; }
get_resource_bundle ( self ) : NEW_LINE INDENT return self . _resource_bundle NEW_LINE DEDENT
def default_colors ( self ) : NEW_LINE INDENT default_colors = [ ] NEW_LINE default_colors . extend ( self . default_colors ) NEW_LINE default_colors . extend ( self . default_colors ) NEW_LINE return default_colors NEW_LINE DEDENT
static boolean isSupportedDateFormat ( String dateFormat ) { if ( dateFormat == null ) { return false ; } if ( dateFormat . length ( ) == 0 ) { return true ; } if ( dateFormat . length ( ) == 1 ) { return true ; } return false ; }
static boolean isSupportedDateFormat ( String dateFormat ) { if ( dateFormat == null ) { return false ; } if ( dateFormat . length ( ) == 0 ) { return true ; } if ( dateFormat . length ( ) == 1 ) { return true ; } return false ; }
create_error_status ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_error_status ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _create_error_status ( ) NEW_LINE DEDENT DEDENT
log_errors ( self ) : NEW_LINE INDENT logger . info ( " Logging errors . . . " ) NEW_LINE logger . info ( " Logging errors . . . " ) NEW_LINE logger . info ( " " ) NEW_LINE logger . info ( " " ) NEW_LINE logger . info ( " " ) NEW_LINE logger . info ( " " ) NEW_LINE logger . info ( " " ) NEW_LINE DEDENT


def applyFont ( ) : NEW_LINE INDENT font = Font . getFont ( ) NEW_LINE if ( font != null ) : NEW_LINE INDENT font = font . getFont ( ) NEW_LINE DEDENT else : NEW_LINE INDENT font = getFont ( ) NEW_LINE DEDENT return font NEW_LINE DEDENT

static FieldEditor [ ] getFields ( ) { FieldEditor [ ] editors = new FieldEditor [ ] { new FieldEditor ( ) , new FieldEditor ( ) , new FieldEditor ( ) , new FieldEditor ( ) , new FieldEditor ( ) } ; return editors ; }
fire_property_change_event ( self , source , property_name , value ) : NEW_LINE INDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT if source . equals ( self . source ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_complete_rules ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_complete_rules ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static Context create ( Context context ) { if ( context == null ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } return new Context ( context ) ; }
sort_field ( self , field ) : NEW_LINE INDENT if isinstance ( field , str ) : NEW_LINE INDENT return field NEW_LINE DEDENT elif isinstance ( field , int ) : NEW_LINE INDENT return field NEW_LINE DEDENT else : NEW_LINE INDENT return field NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def def def def def def def def def def def def def def def def get_url
def def def get_url def def def public public public public public static URL def def public public public public static public static public static URL def def def public public public public static public static public static public static URL public static URL public static URL public static URL public static URL public static final String get ( String value ) { return this . _url public static final String value = null ; } public static final String url = null ; } public static final String url = null ; }
Node add ( String token ) { if ( token == null ) { throw new IllegalArgumentException ( ) ; } if ( token . equals ( " " ) ) { throw new IllegalArgumentException ( ) ; } else if ( token . equals ( " " ) ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } }
static Node getNode ( String token ) { if ( token == null ) { throw new IllegalArgumentException ( " Token cannot be null . " ) ; } if ( token . equals ( " " ) ) { throw new IllegalArgumentException ( " Token cannot be null . " ) ; } if ( token . equals ( " " ) ) { throw new IllegalArgumentException ( " Token cannot be null . " ) ; } if ( token . equals ( " " ) ) { throw new IllegalArgumentException ( " Token cannot be null . " ) ; } return getNode ( token ) ; }

add_condition ( self , resource , condition ) : NEW_LINE INDENT if not condition : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( resource , str ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
create_condition ( self , uri , state_token ) : NEW_LINE INDENT if self . state_token is None : NEW_LINE INDENT self . state_token = state_token NEW_LINE DEDENT else : NEW_LINE INDENT self . state_token = self . state_token NEW_LINE DEDENT return self . state_token NEW_LINE DEDENT
boolean contains ( String Precondition ) { if ( Precondition == null ) { return false ; } if ( Precondition . length ( ) == 0 ) { return true ; } if ( Precondition . length ( ) == 1 ) { return true ; } return false ; }
propstat ( self , propstat ) : NEW_LINE INDENT return self . _propstat ( propstat ) NEW_LINE DEDENT
status ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _status NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _status NEW_LINE DEDENT DEDENT
void setProp ( String propstat ) { if ( propstat == null ) { throw new IllegalArgumentException ( " propstat is null " ) ; } if ( propstat . length ( ) == 0 ) { throw new IllegalArgumentException ( " propstat is empty " ) ; } this . propstat = propstat ; }
get_last_line ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
get_last_line ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def create_sample_process_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_sample_process_file ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def create_sample_process_junit_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_sample_process_junit_file ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _create_sample_process ( ) NEW_LINE DEDENT DEDENT
get_version ( self , server ) : NEW_LINE INDENT if not self . is_installed ( server ) : NEW_LINE INDENT return None NEW_LINE DEDENT if self . is_installed ( server ) : NEW_LINE INDENT return self . version NEW_LINE DEDENT else : NEW_LINE INDENT return self . version NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
ensure_nodes_visited ( self , nodes ) : NEW_LINE INDENT if len ( nodes ) == 1 : NEW_LINE INDENT return nodes [ 0 ] NEW_LINE DEDENT if len ( nodes ) == 2 : NEW_LINE INDENT return nodes [ 1 ] NEW_LINE DEDENT if len ( nodes ) == 3 : NEW_LINE INDENT return nodes [ 0 ] NEW_LINE DEDENT return nodes [ 1 ] NEW_LINE DEDENT
static int hashCode ( Object object ) { if ( object == null ) { return 0 ; } if ( object . getClass ( ) . isArray ( ) ) { return object . hashCode ( ) ; } if ( object . getClass ( ) . isArray ( ) ) { return object . hashCode ( ) ; } return object . hashCode ( ) ; }
remove ( self , propertyupdate ) : NEW_LINE INDENT if self . editor is not None : NEW_LINE INDENT return self . editor . remove ( propertyupdate ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def def propertyupdate ( self ) : NEW_LINE INDENT editor = self . _get_editor ( ) NEW_LINE if editor is not None : NEW_LINE INDENT editor = self . _get_editor ( ) NEW_LINE if editor is None : NEW_LINE INDENT editor = self . _editor ( ) NEW_LINE DEDENT else : NEW_LINE INDENT editor = self . _editor ( ) NEW_LINE DEDENT return editor NEW_LINE DEDENT return editor NEW_LINE DEDENT
static ResourceLocator newResourceLocator ( String url , String label ) { return new ResourceLocator ( url , label ) ; }
create_reconciler ( self ) : NEW_LINE INDENT self . reconciler = { } NEW_LINE for partition in self . partitions : NEW_LINE INDENT self . reconciler [ partition ] = self . reconciler [ partition ] NEW_LINE DEDENT return self . reconciler NEW_LINE DEDENT
public static boolean isCompatible ( String receiver , String argument ) { if ( receiver == null || argument == null || argument . length ( ) == 0 ) { return false ; } if ( receiver == null || argument . length ( ) == 0 || argument . length ( ) == 0 ) { return false ; } return true ; }
public public boolean contains ( String ConditionTerm ) { if ( ConditionTerm == null ) { return false ; } if ( ConditionTerm == null ) { return false ; } else { return true ; } } }
static StateToken parse ( String header ) { if ( header == null ) { return null ; } if ( header . length ( ) == 0 ) { return null ; } if ( header . length ( ) == 1 ) { return null ; } if ( header . length ( ) == 2 ) { return new StateToken ( header ) ; } return new StateToken ( header ) ; }
static TextEditor createTextEditor ( ) { return new TextEditor ( ) { @ Override public void addText ( String text ) { if ( text == null ) { return ; } } @ Override public void addText ( String text ) { if ( text == null ) { return ; } } } ; }
def def delete ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT request = self . _request ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT request = self . _request ( ) NEW_LINE if request . method == ' DELETE ' : NEW_LINE INDENT return NEW_LINE DEDENT if request . method == ' GET ' : NEW_LINE INDENT self . _request ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def send_job_status_request ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _send_job_status ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

pull ( self , * args , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _pull ( * args , ** kwargs ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT self . _pull ( * args , ** kwargs ) NEW_LINE raise NEW_LINE DEDENT DEDENT
remove_element_at_position ( self , position ) : NEW_LINE INDENT return self . remove_element_at_position ( position ) NEW_LINE DEDENT
public public public void add ( String lockdiscovery ) { if ( lockdiscovery == null ) { return ; } synchronized ( lockdiscovery ) { if ( lockdiscovery == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
out the proposals whose content does not start with the given prefix .
void filter ( String text ) { if ( text == null ) { return ; } if ( text . length ( ) == 0 ) { return ; } if ( text . length ( ) == 0 ) { return ; } if ( text . length ( ) == 0 ) { return ; } if ( text . length ( ) == 1 ) { return ; } if ( text . length ( ) == 1 ) { return ; } if ( text . length ( ) == 2 ) { return ; } if ( text . length ( ) == 1 ) { return ; } if ( text . length ( ) == 2 ) { return ; } if ( text . length ( ) == 1 ) { return ; } if ( text . length ( ) == 2 ) { return ; } if ( text . length ( ) == 1 ) { return ; } if ( text . length ( ) == 2 ) { return ; } if ( text . length ( ) == 2 ) { return
def calculate_layout ( graph ) : NEW_LINE INDENT graph = graph . copy ( ) NEW_LINE graph . update ( ) NEW_LINE graph . update ( ) NEW_LINE return graph NEW_LINE DEDENT
paintAntialiasedVertex ( self , vertex ) : NEW_LINE INDENT if vertex . isAntialiased ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if vertex . isAntialiased ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if vertex . isAntialiased ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if vertex . isAntialiased ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_image_descriptor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . image_descriptor NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static Image getImage ( String name ) { if ( name == null || name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } return new Image ( name ) ; }
add_vertex ( self , vertex , depth ) : NEW_LINE INDENT if depth == 0 : NEW_LINE INDENT return vertex NEW_LINE DEDENT if depth == 1 : NEW_LINE INDENT return vertex NEW_LINE DEDENT if depth == 2 : NEW_LINE INDENT return vertex NEW_LINE DEDENT if depth == 3 : NEW_LINE INDENT return vertex NEW_LINE DEDENT return vertex NEW_LINE DEDENT
find_vertex_from_rows ( self , rows ) : NEW_LINE INDENT vertices = [ ] NEW_LINE for row in rows : NEW_LINE INDENT for vertex in row : NEW_LINE INDENT vertices . append ( vertex ) NEW_LINE DEDENT DEDENT return vertices NEW_LINE DEDENT
longest_row_width ( self ) : NEW_LINE INDENT longest_row_width = self . longest_row_width ( ) NEW_LINE return longest_row_width NEW_LINE DEDENT
def def def def def D def def def D def def def def D def def def def _ def dump def def def def D def def def def def _ def dump def dump def def def def def _ def dump def _D def def def _ def _D__python__ def def def _ def _get_vertices def _get_vertices_vertices ( self ) : def _get_vertices_vertices ( self ) : def _get_vertices ( self ) : def _
optimize ( self ) : NEW_LINE INDENT for row in self . rows : NEW_LINE INDENT if row [ 0 ] == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT
load_model ( self ) : NEW_LINE INDENT if self . model is None : NEW_LINE INDENT return None NEW_LINE DEDENT model = self . model NEW_LINE if self . model is not None : NEW_LINE INDENT self . model = self . model NEW_LINE DEDENT return model NEW_LINE DEDENT
def initialize ( self ) : NEW_LINE INDENT zoommanager = ZoomManager . getInstance ( ) NEW_LINE zoommanager . initialize ( ) NEW_LINE zoommanager . initialize ( ) NEW_LINE DEDENT
draw_graph ( self , graph ) : NEW_LINE INDENT self . _draw_graph ( graph ) NEW_LINE self . _draw_graph ( ) NEW_LINE DEDENT
findBreakpoint ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _findBreakpoint ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

is_dav_compliant ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . server . is_dav_compliant NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
copy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

extract_status_response_from_multi_status_reponse ( self ) : NEW_LINE INDENT status_response = self . _get_status_response_from_multi_status_reponse ( ) NEW_LINE return status_response NEW_LINE DEDENT
def read ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _input_stream . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return self . _input_stream . read ( ) NEW_LINE DEDENT DEDENT
get_active_locks ( self , resource ) : NEW_LINE INDENT if not self . lock_discovery : NEW_LINE INDENT return [ ] NEW_LINE DEDENT lock = self . lock_discovery . get ( resource ) NEW_LINE if lock is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if not lock : NEW_LINE INDENT return [ ] NEW_LINE DEDENT lock = self . lock_discovery . get ( resource ) NEW_LINE if not lock : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return [ lock ] NEW_LINE DEDENT
get_property_status ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return self . _get_property_status ( name ) NEW_LINE DEDENT
def get_header ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . headers . get ( self . header_name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . headers . get ( self . header_name ) NEW_LINE DEDENT DEDENT
lock ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . resource . lock ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . resource . lock ( ) NEW_LINE DEDENT DEDENT
move ( self , resource , destination , overwrite = False ) : NEW_LINE INDENT if not overwrite : NEW_LINE INDENT return NEW_LINE DEDENT if resource . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if resource . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if destination . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if destination . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if destination . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if destination . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if destination . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
void answer ( String version ) { if ( version != null && version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } if ( version . length ( ) > 0 ) { return ; } }
refresh ( self ) : NEW_LINE INDENT lock_token = self . lock_token NEW_LINE if lock_token is not None : NEW_LINE INDENT lock_token = self . lock_token NEW_LINE DEDENT else : NEW_LINE INDENT lock_token = self . lock_token NEW_LINE DEDENT return lock_token NEW_LINE DEDENT
remove_properties ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT self . properties . remove ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . properties . remove ( name ) NEW_LINE DEDENT DEDENT
remove_property ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE return name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_properties ( self , resource , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT properties = { } NEW_LINE DEDENT else : NEW_LINE INDENT properties = properties . copy ( ) NEW_LINE DEDENT return properties NEW_LINE DEDENT
set_property ( self , property , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT value = None NEW_LINE DEDENT if value is None : NEW_LINE INDENT value = None NEW_LINE DEDENT else : NEW_LINE INDENT value = str ( value ) NEW_LINE DEDENT if value is None : NEW_LINE INDENT value = None NEW_LINE DEDENT return value NEW_LINE DEDENT
unlock ( self , lock_token ) : NEW_LINE INDENT if lock_token : NEW_LINE INDENT return self . _unlock ( lock_token ) NEW_LINE DEDENT return self . _unlock ( lock_token ) NEW_LINE DEDENT
set_version ( self , version ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _set_version ( version ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void sendVersionControl ( ) { if ( ! versionControl . isVersionControl ( ) ) { throw new IllegalArgumentException ( " The receiver is not a version - controlled resource . " ) ; } }
delete_resource ( self , resource ) : NEW_LINE INDENT if resource is None : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT self . _delete_resource ( resource ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _delete_resource ( resource ) NEW_LINE raise NEW_LINE DEDENT DEDENT
void checkStatus ( int code ) throws WebDAVException { if ( code == HttpStatus . SC_OK ) { throw new WebDAVException ( HttpStatus . SC_OK ) ; } if ( code == HttpStatus . SC_NOT_FOUND ) { throw new WebDAVException ( HttpStatus . SC_NOT_FOUND ) ; } }
get_resource_property ( self , name ) : NEW_LINE INDENT resource = self . get_resource ( name ) NEW_LINE if resource is None : NEW_LINE INDENT return None NEW_LINE DEDENT return resource NEW_LINE DEDENT
write_body ( self , body ) : NEW_LINE INDENT if self . _output_stream is not None : NEW_LINE INDENT self . _output_stream . write ( body ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _output_stream . write ( body ) NEW_LINE DEDENT DEDENT
the given byte array to its equivalent hexadecimal string .
convert_hexadecimal_string ( int array ) : NEW_LINE INDENT if isinstance ( array , int ) : NEW_LINE INDENT return array NEW_LINE DEDENT if isinstance ( array , int ) : NEW_LINE INDENT return convert_hexadecimal_string ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return convert_hexadecimal_string ( array ) NEW_LINE DEDENT DEDENT
propfind ( self , propfind ) : NEW_LINE INDENT if self . propfind is not None : NEW_LINE INDENT return self . propfind NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
propfind ( self , propfind ) : NEW_LINE INDENT if self . propfind is not None : NEW_LINE INDENT return self . propfind NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_editor ( self , propfind ) : NEW_LINE INDENT if self . propfind is not None : NEW_LINE INDENT return self . propfind . create_editor ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . propfind . create_editor ( ) NEW_LINE DEDENT DEDENT
static void strip ( String word ) { if ( word . length ( ) == 0 ) { return ; } if ( word . length ( ) == 1 ) { return ; } if ( word . length ( ) == 2 ) { return ; } if ( word . length ( ) == 3 ) { return ; } if ( word . length ( ) == 4 ) { return ; } if ( word . length ( ) == 5 ) { return ; } if ( word . length ( ) == 6 ) { return ; } if ( word . length ( ) == 7 ) { return ; } if ( word . length ( ) == 8 ) { return ; } if ( word . length ( ) == 9 ) { return ; } if ( word . length ( ) == 10 ) { return ; } if ( word . length ( ) == 9 ) { return ; } if ( word . length ( ) == 10 ) { return ; } if ( word . length ( ) ==
update_outline_page ( self , outline_page ) : NEW_LINE INDENT self . _outline_page = outline_page NEW_LINE self . _outline_page . update ( ) NEW_LINE self . _outline_page . update ( ) NEW_LINE DEDENT
write ( self , output_stream ) : NEW_LINE INDENT if self . _output_stream is None : NEW_LINE INDENT self . _output_stream = output_stream NEW_LINE DEDENT else : NEW_LINE INDENT self . _output_stream = output_stream NEW_LINE DEDENT DEDENT
def def def step def def def public public public public public public public public public void setStepOver ( final public void setStepOver ( final public void setStepOver ( final String name , String name , String name , String name ) { def stepOver ( self ) : NEW_LINE INDENT if ( stepOver != null ) { return NEW_LINE DEDENT def stepOver ( self ) : NEW_LINE INDENT self . stepOver = stepOver ( ) NEW_LINE DEDENT DEDENT
parse_errors ( self ) : NEW_LINE INDENT errors = [ ] NEW_LINE for error in self . errors : NEW_LINE INDENT errors . append ( parse_error ( error ) ) NEW_LINE DEDENT return errors NEW_LINE DEDENT
next_white_space ( self , s ) : NEW_LINE INDENT if len ( s ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( s ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return s [ 0 ] NEW_LINE DEDENT DEDENT
add_resource ( self , resource ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _add_resource ( resource ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

estimate ( self , key ) : NEW_LINE INDENT if not key : NEW_LINE INDENT return - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return key NEW_LINE DEDENT DEDENT
def get_content_length ( self ) : NEW_LINE INDENT if self . content_length is not None : NEW_LINE INDENT return self . content_length NEW_LINE DEDENT else : NEW_LINE INDENT return self . content_length NEW_LINE DEDENT DEDENT
MAX_FORWARDS ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( key ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
overwrite ( self , key , value ) : NEW_LINE INDENT if not value : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def get_boolean_value ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_value ( key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static int getTimeout ( int value ) { if ( value < 0 ) { return - 1 ; } if ( value > Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } if ( value > Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } if ( value > Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } return value ; }

set_timeout ( self , timeout ) : NEW_LINE INDENT self . timeout = timeout NEW_LINE DEDENT
read ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) NEW_LINE reader . readLine ( ) NEW_LINE return reader . readLine ( ) NEW_LINE DEDENT except IOError as e : NEW_LINE INDENT raise IOError ( e ) NEW_LINE DEDENT DEDENT
parse_file ( self , file ) : NEW_LINE INDENT line = file . readline ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
get_object_metadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _object_metadata NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
strip_metadata ( self , text ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _strip_metadata ( text ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_token ( self , token ) : NEW_LINE INDENT if isinstance ( token , str ) : NEW_LINE INDENT self . token = token NEW_LINE DEDENT else : NEW_LINE INDENT self . token = token NEW_LINE DEDENT DEDENT
tokenize ( text ) : NEW_LINE INDENT if not isinstance ( text , str ) : NEW_LINE INDENT raise ValueError ( " The given text must be a string . " ) NEW_LINE DEDENT if len ( text ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( text ) == 1 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def __call__ ( self , * args , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . method ( * args , ** kwargs ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT return self . method ( * args , ** kwargs ) NEW_LINE DEDENT
def def generate ( self , parent , child ) : NEW_LINE INDENT if isinstance ( parent , Text ) : NEW_LINE INDENT return self . _generate ( parent , child ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _generate ( parent , child ) NEW_LINE DEDENT DEDENT
print_ DSLTree ( self ) : NEW_LINE INDENT if not self . out : NEW_LINE INDENT self . out = StringIO . StringIO ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . out . write ( self . out . getvalue ( ) ) NEW_LINE self . out . close ( ) NEW_LINE DEDENT DEDENT
print_children ( self , node ) : NEW_LINE INDENT if isinstance ( node , Node ) : NEW_LINE INDENT print_children ( self , node ) NEW_LINE DEDENT else : NEW_LINE INDENT print_children ( self , node ) NEW_LINE DEDENT DEDENT
print_tabs ( self , tabs ) : NEW_LINE INDENT if len ( tabs ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( tabs ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( tabs ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( tabs ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( tabs ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT return ' ' NEW_LINE DEDENT
read_json_value ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT value = json . loads ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT
get_image_descriptor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . image_descriptor NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
send_request ( self , request ) : NEW_LINE INDENT response = self . _send_request ( request ) NEW_LINE if response : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
def def def def get_request__python____python____python____python____python____python____python____python____python____python____python__ def def def def get_request__python____python____python____python____python____python____python____python__ def def def def def _get_request def _get_request__python__ def _get_request def _get_request_request_header_value ( self , field ) : NEW def _get_header_request_header_value ( self , field ) : NEW_LINE def _get_request_header_value ( self , field ) : NEW_LINE def _get_request_header_value ( self , field ) : NEW_LINE INDENT return self . _get_request_header_value ( field ) NEW_LINE DEDENT def _get_request_header_value ( self , field ) : NEW_LINE INDENT return self . _get_request_header_value
create_rule_launcher ( self ) : NEW_LINE INDENT if self . rule_launcher is None : NEW_LINE INDENT self . rule_launcher = self . create_rule_launcher ( ) NEW_LINE DEDENT return self . rule_launcher NEW_LINE DEDENT
create_sample_rule_file ( self ) : NEW_LINE INDENT if self . rule_file is None : NEW_LINE INDENT self . rule_file = self . _create_sample_rule_file ( ) NEW_LINE DEDENT return self . rule_file NEW_LINE DEDENT
create_sample_rule_flow ( self ) : NEW_LINE INDENT if self . _rule_flow is None : NEW_LINE INDENT self . _rule_flow = self . _create_sample_rule_flow ( ) NEW_LINE DEDENT return self . _rule_flow NEW_LINE DEDENT
create_launcher_file ( self ) : NEW_LINE INDENT launcher_file = self . _create_launcher_file ( ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW_LINE launcher_file . write ( self . _create_launcher_file ( ) ) NEW launcher_file . write ( self . _create_launcher_file ( ) ) NEW launcher_file . write ( self . _create_launcher
get_installable_units ( self ) : NEW_LINE INDENT installable_units = self . _get_installable_units ( ) NEW_LINE if not installable_units : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return installable_units NEW_LINE DEDENT
write ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , str ) : NEW_LINE INDENT return self . write ( stream ) NEW_LINE DEDENT return self . write ( stream ) NEW_LINE DEDENT
def getFieldExtractor ( self ) : NEW_LINE INDENT fieldName = self . fieldExtractor . getFieldName ( ) NEW_LINE if self . fieldExtractor is not None : NEW_LINE INDENT return self . getFieldExtractor ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . getFieldExtractor ( ) NEW_LINE DEDENT DEDENT
def def evaluator_string ( self ) : NEW_LINE INDENT return self . _evaluator_string ( ) NEW_LINE DEDENT

add_resource_properties ( self , resource_properties ) : NEW_LINE INDENT if resource_properties is None : NEW_LINE INDENT resource_properties = { } NEW_LINE DEDENT else : NEW_LINE INDENT resource_properties = { } NEW_LINE DEDENT resource_properties . update ( resource_properties ) NEW_LINE return resource_properties NEW_LINE DEDENT
create_version_control_configuration ( self ) : NEW_LINE INDENT if self . version_control : NEW_LINE INDENT return self . version_control NEW_LINE DEDENT else : NEW_LINE INDENT return self . version_control NEW_LINE DEDENT DEDENT
bind_to_resource ( self , resource , source_locator ) : NEW_LINE INDENT if source_locator is not None : NEW_LINE INDENT return self . _bind_to_resource ( resource , source_locator ) NEW_LINE DEDENT self . _bind_to_resource ( resource , source_locator ) NEW_LINE DEDENT
get_member_locator ( self , name ) : NEW_LINE INDENT if self . _member_locator is None : NEW_LINE INDENT self . _member_locator = self . _member_locator NEW_LINE DEDENT return self . _member_locator NEW_LINE DEDENT
vertices for optimal presentation ( ) : NEW_LINE INDENT vertices = [ ] NEW_LINE for vertex in vertices : NEW_LINE INDENT vertices . append ( vertex ) NEW_LINE DEDENT return vertices NEW_LINE DEDENT

boolean isValid ( ) { if ( ! isValid ( ) ) { return false ; } return true ; }
static EntityTag createEntityTag ( EntityTag entityTag ) { if ( entityTag == null ) { throw new IllegalArgumentException ( " EntityTag cannot be null . " ) ; } if ( entityTag . getHash ( ) == null ) { throw new IllegalArgumentException ( " EntityTag cannot be null . " ) ; } if ( entityTag . getHash ( ) == null ) { throw new IllegalArgumentException ( " EntityTag cannot be null . " ) ; } return entityTag ; }
def get_vertex_name ( self ) : NEW_LINE INDENT return self . vertex_name NEW_LINE DEDENT
validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _validate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _validate ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
validate ( self ) : NEW_LINE INDENT if self . is_valid ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
scan ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' r ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT return file . read ( ) NEW_LINE DEDENT
def store ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _store ( filename ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _store ( filename ) NEW_LINE DEDENT DEDENT

clear ( self ) : NEW_LINE INDENT if self . passwords : NEW_LINE INDENT self . passwords . clear ( ) NEW_LINE DEDENT DEDENT
static String getPublicId ( String key ) { if ( key == null ) { throw new IllegalArgumentException ( " Key cannot be null " ) ; } return key ; }
whether a given OTP is of correct length and only contains printable characters as per the recommendation .
Evaluation get ( String source ) { if ( source == null || source . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( source . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( source . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( source . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( source . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( source . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } return Evaluation . get ( source ) ; }
static Evaluation createEvaluation ( final String source , final String target ) { final Evaluation result = new Evaluation ( ) ; result . setSource ( source ) ; result . setTarget ( target ) ; result . setTarget ( target ) ; return result ; }
clear ( self ) : NEW_LINE INDENT self . _cached = { } NEW_LINE self . _cached = { } NEW_LINE DEDENT
static boolean isJavaLanguage ( String language ) { if ( language == null ) { return false ; } if ( language . length ( ) == 0 ) { return true ; } if ( language . length ( ) == 1 ) { return true ; } if ( language . length ( ) == 2 ) { return true ; } if ( language . length ( ) == 3 ) { return true ; } return false ; }
static String getPackageName ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } return clazz . getPackage ( ) . getName ( ) ; }
static String getPackageName ( Class < ? > clazz ) { String packageName = clazz . getPackage ( ) . getName ( ) ; if ( packageName == null ) { packageName = " " ; } return packageName ; }
static String getClassName ( String className , boolean fullyQualified ) { if ( className == null ) { return null ; } if ( fullyQualified ) { return className ; } if ( className . length ( ) > 0 ) { return className . substring ( 0 , className . length ( ) - 1 ) ; } return className ; }
static Class < ? > findClass ( Class < ? > clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( " Class is null . " ) ; } return clazz ; }
public static boolean isMoreSpecific ( Class [ ] classes , Class [ ] classes ) { return classes . length > 0 ; }
static Method getMethod ( String methodName , Object [ ] actualArgs ) { if ( methodName == null || methodName . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( actualArgs == null || actualArgs . length == 0 ) { throw new IllegalArgumentException ( ) ; } if ( methodName . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( actualArgs . length == 0 ) { throw new IllegalArgumentException ( ) ; } if ( actualArgs . length == 0 ) { throw new IllegalArgumentException ( ) ; } if ( actualArgs . length == 0 ) { throw new IllegalArgumentException ( ) ; } return new Method ( methodName , actualArgs ) ; }
checkAccessAndExistence ( self ) : NEW_LINE INDENT if self . checkAccessAndExistence ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
getPropertyDescriptors ( cls ) : NEW_LINE INDENT return cls . getPropertyDescriptors ( ) NEW_LINE DEDENT
static PropertyDescriptor getPropertyDescriptor ( String name ) { PropertyDescriptor descriptor = null ; if ( name != null ) { descriptor = new PropertyDescriptor ( name ) ; } else { descriptor = new PropertyDescriptor ( ) ; } return descriptor ; }
find_method_by_name ( cls , name ) : NEW_LINE INDENT return cls . find_method_by_name ( name ) NEW_LINE DEDENT
read_character ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reader . read ( ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
apply ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT else : NEW_LINE INDENT return collection NEW_LINE DEDENT DEDENT
boolean apply ( Collection < ? > collection ) { if ( collection . isEmpty ( ) ) { return false ; } if ( collection . size ( ) == 0 ) { return true ; } return false ; }
def _eval def _eval ( self , object ) : NEW_LINE INDENT if isinstance ( object , long integer ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , long integer ) : NEW_LINE INDENT return object . longValue ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
eval ( self , object ) : NEW_LINE INDENT if isinstance ( object , float ) : NEW_LINE INDENT return self . _eval ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _eval ( object ) NEW_LINE DEDENT DEDENT

_eval_BigDecimal ( self , object ) : NEW_LINE INDENT try : NEW_LINE INDENT return BigDecimal . valueOf ( object ) NEW_LINE DEDENT except : NEW_LINE INDENT return BigDecimal . valueOf ( object ) NEW_LINE DEDENT except : NEW_LINE INDENT return BigDecimal . ZERO NEW_LINE DEDENT DEDENT
trim ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return self . _trim ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _trim ( object ) NEW_LINE DEDENT DEDENT
numeric_type ( self , object ) : NEW_LINE INDENT if isinstance ( object , NumericTypes ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return self . numeric_type ( object ) NEW_LINE DEDENT DEDENT
convert_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return self . convert_array ( array ) NEW_LINE DEDENT DEDENT
convert_integer ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
static NumericTypes constant ( int type ) { if ( type == 0 ) { return null ; } return new NumericTypes ( type ) ; }
static NumericTypes valueOf ( String type ) { if ( type == null ) { throw new IllegalArgumentException ( ) ; } return new NumericTypes ( type ) ; }
static Number newNumber ( int value ) { if ( value == 0 ) { return null ; } else { return new Number ( value ) ; } }
public public public void push ( ) { if ( this . node != null ) { return ; } if ( node != null ) { if ( node != null ) { if ( node != null ) { if ( node != null ) { node . push ( node ) ; } } } } } }
_create_getter ( self , getter ) : NEW_LINE INDENT self . getter = getter NEW_LINE return self NEW_LINE DEDENT
_create_setter ( self , setter ) : NEW_LINE INDENT self . setter = setter NEW_LINE return self NEW_LINE DEDENT
close ( self , node ) : NEW_LINE INDENT if isinstance ( node , TreeNode ) : NEW_LINE INDENT self . _close ( node ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _close ( node ) NEW_LINE DEDENT DEDENT
def init ( self ) : NEW_LINE INDENT if self . parameters . isEmpty ( ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return self . parameters NEW_LINE DEDENT DEDENT
escape ( self , escape_sequence ) : NEW_LINE INDENT if escape_sequence is not None : NEW_LINE INDENT return escape_sequence NEW_LINE DEDENT else : NEW_LINE INDENT return self . _escape ( escape_sequence ) NEW_LINE DEDENT DEDENT
def def _get_root def _get_root ( self ) : NEW_LINE INDENT return self . _get_root_root_object ( ) NEW_LINE DEDENT
extract_value ( self , root , context ) : NEW_LINE INDENT if isinstance ( root , OGNLExpression ) : NEW_LINE INDENT return root NEW_LINE DEDENT elif isinstance ( root , OGNLExpression ) : NEW_LINE INDENT return root NEW_LINE DEDENT elif isinstance ( root , OGNLExpression ) : NEW_LINE INDENT return root NEW_LINE DEDENT DEDENT
def pre_compile def pre_compile ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pre_compile ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . pre_compile ( ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def _eval def def def def def def def def def insert def def def def def _ _eval def def def def _eval def def def def _eval def def def _eval def def def def _eval def def _
check_constant_expression ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , ConstantExpression ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def get_default_watch_service_identifier ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _watch_service_identifier NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
startTimeout ( self , startTimeout ) : NEW_LINE INDENT if startTimeout is not None : NEW_LINE INDENT return startTimeout NEW_LINE DEDENT if startTimeout is not None : NEW_LINE INDENT return startTimeout NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static SourcePositionMapper getSourcePositionMapper ( ) { SourcePositionMapper sourcePositionMapper = new SourcePositionMapper ( ) ; sourcePositionMapper . setSourcePositionMapper ( sourcePositionMapper ) ; return sourcePositionMapper ; }
reload_app ( self ) : NEW_LINE INDENT app = self . app NEW_LINE if app is not None : NEW_LINE INDENT app . reload ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . app = None NEW_LINE DEDENT DEDENT
def def get_preconfigured_archiver ( self ) : NEW_LINE INDENT archiver = self . _get_archiver ( ) NEW_LINE if archiver : NEW_LINE INDENT return archiver NEW_LINE DEDENT else : NEW_LINE INDENT return archiver NEW_LINE DEDENT DEDENT
public public static void checkDuplicateFile ( String filename ) throws IOException { if ( filename != null && filename . length ( ) > 0 ) { if ( filename . length ( ) > 0 ) { throw new DuplicateFileException ( filename ) ; } else if ( filename . length ( ) > 0 ) { throw new DuplicateFileException ( filename ) ; } } }
read_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( file , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return file . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
configure ( self ) : NEW_LINE INDENT project = self . project NEW_LINE if project is None : NEW_LINE INDENT return NEW_LINE DEDENT task = self . task NEW_LINE if task is None : NEW_LINE INDENT return NEW_LINE DEDENT task . configure ( ) NEW_LINE DEDENT
static void setSystemProperty ( String property , String value ) { if ( property == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } }
static void setSystemProperty ( String property , String value ) { if ( property == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Property cannot be null . " ) ; } }
void createFolder ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name cannot be null " ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( " name cannot be empty " ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( " name cannot be empty " ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( " name cannot be empty " ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( " name cannot be empty " ) ; } }
def def change_directory ( self , directory ) : NEW_LINE INDENT if os . path . isdir ( directory ) : NEW_LINE INDENT if os . path . isdir ( directory ) : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT elif os . path . isdir ( directory ) : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT DEDENT DEDENT
def def change_state ( self , file = None , folder = None , folder = None ) : NEW_LINE INDENT if file is not None : NEW_LINE INDENT if folder is not None : NEW_LINE INDENT file = self . _get_file ( file ) NEW_LINE DEDENT if folder is not None : NEW_LINE INDENT folder = self . _get_folder ( folder ) NEW_LINE DEDENT if file is not None : NEW_LINE INDENT file = self . _get_file ( file ) NEW_LINE DEDENT if folder is not None : NEW_LINE INDENT folder = self . _get_folder ( folder ) NEW_LINE DEDENT if file is not None : NEW_LINE INDENT file = self . _get_file ( file ) NEW_LINE DEDENT if folder is not None : NEW_LINE INDENT folder = self . _get_folder ( folder ) NEW_LINE DEDENT if folder : NEW_LINE INDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public static Folder getSelectedFolder ( ) { if ( selectedFolder != null ) { return selectedFolder ; } else if ( selectedFolder != null ) { return selectedFolder ; } else { return null ; } } }
create_new_folder ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT name = ' ' NEW_LINE DEDENT else : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE DEDENT return self . _create_folder ( name ) NEW_LINE DEDENT
boolean isValid ( ) { if ( ! isSelectionValid ( ) ) { return false ; } return true ; }
void start ( ) throws InterruptedException { while ( ! Thread . interrupted ( ) ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { throw new InterruptedException ( ) ; } } }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def end__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def def def ___python____python____python____python__ def def def def def def H__python____python____python____python____python____python__ def def def def def def def def def end__python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python__ def def def def _
def def _get_edge_edges ( self ) : NEW_LINE INDENT return self . _get_edges ( ) NEW_LINE return self . _get_edges ( ) NEW_LINE DEDENT
crop_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is None : NEW_LINE INDENT return None NEW_LINE DEDENT rectangle = rectangle . crop ( rectangle ) NEW_LINE return rectangle NEW_LINE DEDENT
crop_rectangle ( self , image_space , image_width , image_height ) : NEW_LINE INDENT if image_space is None : NEW_LINE INDENT return None NEW_LINE DEDENT cropping_rectangle = self . _crop_rectangle ( image_space , image_width , image_height ) NEW_LINE if cropping_rectangle is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return cropping_rectangle NEW_LINE DEDENT DEDENT
media_factory ( self ) : NEW_LINE INDENT if self . media_factory is not None : NEW_LINE INDENT return self . media_factory NEW_LINE DEDENT else : NEW_LINE INDENT return self . media_factory NEW_LINE DEDENT DEDENT
static SpanWatcher createSpanWatcher ( Changeable changeable ) { SpanWatcher spanWatcher = new SpanWatcher ( ) ; spanWatcher . setChangeable ( changeable ) ; return spanWatcher ; }
get_spinner_view ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _spinner_view NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static SpinnerEntryView createSpinnerEntryView ( Context context ) { SpinnerEntryView view = new SpinnerEntryView ( context ) ; view . setContext ( context ) ; return view ; }
static String convertSpannedTextToHtml ( String spannedText ) { if ( spannedText == null ) { return null ; } if ( spannedText . length ( ) == 0 ) { return " " ; } return spannedText ; }
convert_spanned_text ( text ) : NEW_LINE INDENT if isinstance ( text , basestring ) : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT return text NEW_LINE DEDENT
create_file ( self , file_name ) : NEW_LINE INDENT if file_name is None : NEW_LINE INDENT return self . _create_file ( file_name ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_file ( file_name ) NEW_LINE DEDENT DEDENT
get_local_file_path ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_local_file_path ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_namespace_name ( self , prefix = None ) : NEW_LINE INDENT if prefix is None : NEW_LINE INDENT prefix = self . get_prefix ( ) NEW_LINE DEDENT if prefix is None : NEW_LINE INDENT prefix = self . get_prefix ( ) NEW_LINE DEDENT if prefix is None : NEW_LINE INDENT prefix = self . get_prefix ( ) NEW_LINE DEDENT return prefix NEW_LINE DEDENT
def get_local_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _local_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_attribute ( self , name , value ) : NEW_LINE INDENT self . set_attribute ( name , value ) NEW_LINE DEDENT
def def set ( self , value ) : NEW_LINE INDENT if isinstance ( value , basestring ) : NEW_LINE INDENT value = value . strip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT value = value . strip ( ) NEW_LINE DEDENT if isinstance ( value , basestring ) : NEW_LINE INDENT value = value . strip ( ) NEW_LINE DEDENT if isinstance ( value , basestring ) : NEW_LINE INDENT value = value . strip ( ) NEW_LINE DEDENT return value NEW_LINE DEDENT
get_font_name ( self ) : NEW_LINE INDENT font_name = self . _get_font_name ( ) NEW_LINE if font_name : NEW_LINE INDENT return font_name NEW_LINE DEDENT DEDENT
get_font_name ( self ) : NEW_LINE INDENT font_name = self . _get_font_name ( ) NEW_LINE if font_name : NEW_LINE INDENT return font_name NEW_LINE DEDENT DEDENT
def def def def def def create ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def new___python____python____python____python____python____python____python____python____python__ def def def def def def def new___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def new___python____python____python____python____python____python____python____python__ def def def def def def def new___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def ____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ____python____python____python__
write_bytes ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytearray ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT else : NEW_LINE INDENT return bytes NEW_LINE DEDENT DEDENT
static byte [ ] toBytes ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
write ( self , input_stream ) : NEW_LINE INDENT if isinstance ( input_stream , bytes ) : NEW_LINE INDENT return self . _write ( input_stream ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _write ( input_stream ) NEW_LINE DEDENT DEDENT
write ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , bytes ) : NEW_LINE INDENT self . _write ( stream ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _write ( stream ) NEW_LINE DEDENT DEDENT
byte [ ] get_curent_contents ( byte [ ] stream ) { byte [ ] result = new byte [ stream . length ] ; for ( int i = 0 ; i < stream . length ; i ++ ) { result [ i ] = stream . get ( i ) ; } return result ; }
def def def def def def def def def def def _ def set_text_text_text_size def set_text_size def set_text_size def set_text_size_size ( self ) : NEW_LINE INDENT return self . _text_size_size ( ) : NEW_LINE DEDENT def set_text_size_size ( self ) : NEW_LINE INDENT return self . _text_size = self . _text_size NEW_LINE DEDENT
static String convertForwardSlash ( String forwardSlash ) { return forwardSlash . trim ( ) ; }
cropping_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is None : NEW_LINE INDENT return None NEW_LINE DEDENT rectangle = rectangle . copy ( ) NEW_LINE rectangle . setBounds ( rectangle . getBounds ( ) ) NEW_LINE return rectangle NEW_LINE DEDENT
crop_image ( self , image ) : NEW_LINE INDENT if self . cropping_rectangle is None : NEW_LINE INDENT self . cropping_rectangle = image NEW_LINE DEDENT else : NEW_LINE INDENT self . cropping_rectangle = image NEW_LINE DEDENT return self . cropping_rectangle NEW_LINE DEDENT
scale ( self , rectangle ) : NEW_LINE INDENT self . rectangle = rectangle NEW_LINE return self . rectangle NEW_LINE DEDENT
reset_document_locator ( self ) : NEW_LINE INDENT self . _document_locator = None NEW_LINE self . _document_locator = None NEW_LINE DEDENT
static String validate ( String value ) { if ( value == null ) { return null ; } return value ; }
add_element_type ( self , element_type ) : NEW_LINE INDENT if isinstance ( element_type , schema . Schema ) : NEW_LINE INDENT return element_type NEW_LINE DEDENT elif isinstance ( element_type , schema . Schema ) : NEW_LINE INDENT return element_type NEW_LINE DEDENT elif isinstance ( element_type , schema . Schema ) : NEW_LINE INDENT return element_type NEW_LINE DEDENT else : NEW_LINE INDENT return element_type NEW_LINE DEDENT DEDENT
add_default_attribute ( self , element , default = None ) : NEW_LINE INDENT if default is None : NEW_LINE INDENT default = self . default NEW_LINE DEDENT else : NEW_LINE INDENT default = self . default NEW_LINE DEDENT if default is not None : NEW_LINE INDENT return default NEW_LINE DEDENT return self . add_default_attribute ( element , default ) NEW_LINE DEDENT
natural_parent ( self , element ) : NEW_LINE INDENT if isinstance ( element , tuple ) : NEW_LINE INDENT return element [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
get_element_type ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE return name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
apply_paragraph_effects ( self , paragraphs ) : NEW_LINE INDENT if len ( paragraphs ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( paragraphs ) == 1 : NEW_LINE INDENT return paragraphs [ 0 ] NEW_LINE DEDENT if len ( paragraphs ) == 1 : NEW_LINE INDENT return paragraphs [ 0 ] NEW_LINE DEDENT if len ( paragraphs ) == 1 : NEW_LINE INDENT return paragraphs [ 0 ] NEW_LINE DEDENT if len ( paragraphs ) == 2 : NEW_LINE INDENT return paragraphs [ 1 ] NEW_LINE DEDENT return paragraphs [ 0 ] NEW_LINE DEDENT
remove ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if value is not None : NEW_LINE INDENT self . selection . remove ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . selection . clear ( ) NEW_LINE DEDENT DEDENT
validate_domain ( self , domain ) : NEW_LINE INDENT if domain is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( domain , six . string_types ) : NEW_LINE INDENT domain = domain . lower ( ) NEW_LINE DEDENT if isinstance ( domain , six . string_types ) : NEW_LINE INDENT domain = domain . lower ( ) NEW_LINE DEDENT return domain NEW_LINE DEDENT
add ( self , undo ) : NEW_LINE INDENT self . undo . add ( undo ) NEW_LINE DEDENT
last_undone ( self ) : NEW_LINE INDENT if self . _last_undone : NEW_LINE INDENT return self . _last_undone NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static String replaceAll ( String s , String s1 , String s2 ) { return replaceAll ( s , s1 , s2 ) ; }
get_thread_status ( self ) : NEW_LINE INDENT if self . thread_status is None : NEW_LINE INDENT self . thread_status = { } NEW_LINE DEDENT return self . thread_status NEW_LINE DEDENT
decode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _decode ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
disable_bitmap ( self ) : NEW_LINE INDENT if self . is_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
decodeBitmap ( self , bitmap ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _decodeBitmap ( bitmap ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_fonts ( self ) : NEW_LINE INDENT fonts = [ ] NEW_LINE for font in self . fonts : NEW_LINE INDENT fonts . append ( font ) NEW_LINE DEDENT return fonts NEW_LINE DEDENT
get_fonts ( self ) : NEW_LINE INDENT fonts = [ ] NEW_LINE for font in self . fonts : NEW_LINE INDENT fonts . append ( font ) NEW_LINE DEDENT return fonts NEW_LINE DEDENT
get_fonts ( self ) : NEW_LINE INDENT fonts = [ ] NEW_LINE for font in self . fonts : NEW_LINE INDENT fonts . append ( font ) NEW_LINE DEDENT return fonts NEW_LINE DEDENT
set_instance_variables ( self , instance_variables ) : NEW_LINE INDENT self . instance_variables = instance_variables NEW_LINE DEDENT
def def def def _get_buffer ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python____python__ def def def def def def def get___python____python____python____python__ def def def def _ def _read__python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def def def get___python__ def _
public InputStream getInputStream ( String publicid ) { if ( publicid != null ) { return new ByteArrayInputStream ( publicid . getBytes ( ) ) ; } else if ( systemid != null ) { return new ByteArrayInputStream ( systemid . getBytes ( ) ) ; } else { return null ; } }
def def char [ def def def def char [ def def def def char [ def def def char [ def def def char [ def def _ def def _ def def def def char [ def def _ def _ def char [ def def _ def _ def def def _ def char [ def def _ def _ def def def _ def char [ def def _ def _ def _
def def semicolon ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _semicolon ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _semicolon ( ) NEW_LINE DEDENT DEDENT
create_schema ( self ) : NEW_LINE INDENT if self . schema is not None : NEW_LINE INDENT return self . schema NEW_LINE DEDENT return self . schema NEW_LINE DEDENT
next_element ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
pop_stack ( self , stack ) : NEW_LINE INDENT if not stack : NEW_LINE INDENT return None NEW_LINE DEDENT return stack . pop ( ) NEW_LINE DEDENT
restart ( self ) : NEW_LINE INDENT if self . stack is not None : NEW_LINE INDENT self . stack . pop ( ) NEW_LINE DEDENT return self . stack NEW_LINE DEDENT
get_prefix ( self , prefix ) : NEW_LINE INDENT if prefix is None : NEW_LINE INDENT prefix = self . prefix NEW_LINE DEDENT return prefix NEW_LINE DEDENT
is_foreign_name ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static String trimQuotes ( String str ) { if ( str == null ) { return " " ; } if ( str . length ( ) == 0 ) { return " " ; } if ( str . length ( ) == 1 ) { return str . substring ( 0 , 1 ) ; } if ( str . length ( ) == 2 ) { return str . substring ( 0 , 1 ) ; } return str . substring ( 0 , 1 ) ; }
static String splitQuotes ( String phrase ) { if ( phrase == null ) { return " " ; } else { return phrase . split ( " " ) ; } }

_canonicalize_case ( self , case ) : NEW_LINE INDENT return self . _canonicalize ( case ) NEW_LINE DEDENT
restore_instance_state ( self ) : NEW_LINE INDENT if self . _instance_state is not None : NEW_LINE INDENT self . _instance_state = self . _instance_state . copy ( ) NEW_LINE DEDENT DEDENT
cleanup ( self ) : NEW_LINE INDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isDestroyed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT self . cleanup ( ) NEW_LINE DEDENT
process_result ( self , result ) : NEW_LINE INDENT if not result : NEW_LINE INDENT return NEW_LINE DEDENT result = self . _process_result ( result ) NEW_LINE if not result : NEW_LINE INDENT return NEW_LINE DEDENT return result NEW_LINE DEDENT
process_result ( self , result ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return NEW_LINE DEDENT self . closed = True NEW_LINE self . result = result NEW_LINE DEDENT
def def _setup_base_matrix_matrix ( self , image ) : NEW_LINE INDENT self . _base_matrix = self . _base_matrix ( ) NEW_LINE self . _base_matrix = self . _base_matrix ( ) NEW_LINE DEDENT
set_size ( self , size ) : NEW_LINE INDENT self . _size = size NEW_LINE if self . _size > 0 : NEW_LINE INDENT self . _size = self . _size NEW_LINE DEDENT DEDENT
check_effect_exists ( self , effect ) : NEW_LINE INDENT if isinstance ( effect , RTEditText ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
removeSpan ( ParagraphSpanProcessor paragraph , ParagraphSpanProcessor paragraphSpanProcessor ) : NEW_LINE INDENT if paragraphSpanProcessor != null : NEW_LINE INDENT paragraphSpanProcessor . removeSpan ( paragraphSpanProcessor ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpanProcessor ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpanProcessor ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan ( paragraphSpan ) NEW_LINE paragraphSpanProcessor . removeSpan
def url_query_part ( self , query_part ) : NEW_LINE INDENT if query_part is None : NEW_LINE INDENT query_part = ' ? ' NEW_LINE DEDENT else : NEW_LINE INDENT query_part = urlencode ( query_part ) NEW_LINE DEDENT return urlencode ( { ' query ' : query_part , ' query _ part ' : query_part } ) NEW_LINE DEDENT
decodes_url ( self , url ) : NEW_LINE INDENT url = urlparse . urlparse ( url ) NEW_LINE url = urlparse . urlunparse ( url ) NEW_LINE url = urlparse . urlunparse ( url ) NEW_LINE url = urlparse . urlunparse ( url ) NEW_LINE url = urlparse . urlunparse ( url ) NEW_LINE return url NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
rotate ( self , * args , ** kwargs ) : NEW_LINE INDENT self . _rotate ( * args , ** kwargs ) NEW_LINE return self . _rotate ( * args , ** kwargs ) NEW_LINE DEDENT
def def def set_output_destination ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . output_destination = self . output_destination NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . output_destination = None NEW_LINE DEDENT else : NEW_LINE INDENT self . output_destination = self . output_destination NEW_LINE DEDENT DEDENT
def write_raw_character ( self , raw_character ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . write_raw_character ( raw_character ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def write_raw_string ( self , raw_string ) : NEW_LINE INDENT if not raw_string : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT raw_string = raw_string . encode ( ' utf - 8' ) NEW_LINE DEDENT except UnicodeEncodeError : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
is_html_boolean ( self , attribute ) : NEW_LINE INDENT if isinstance ( attribute , basestring ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( attribute , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( attribute , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( attribute , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static String escape ( String data ) { if ( data == null ) { return " " ; } if ( data . length ( ) == 0 ) { return " " ; } if ( data . length ( ) == 1 ) { return data . charAt ( 0 ) ; } if ( data . length ( ) == 2 ) { return data . charAt ( 1 ) ; } return data . charAt ( 0 ) ; }
def def list_namespaces ( self ) : NEW_LINE INDENT out = [ ] NEW_LINE for namespace in self . _namespaces . values ( ) : NEW_LINE INDENT out . append ( namespace ) NEW_LINE DEDENT return out NEW_LINE DEDENT
def def _get_element_or_attribute_name ( self , name ) : NEW_LINE INDENT if name is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _element_or_attribute_name ( name ) NEW_LINE DEDENT
create_stream ( self , stream ) : NEW_LINE INDENT if not stream . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not stream . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not stream . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not stream . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not stream . exists ( ) : NEW_LINE INDENT return NEW_LINE DEDENT stream . create ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
complete_snapshot ( self ) : NEW_LINE INDENT snapshot = self . snapshot NEW_LINE if snapshot is not None : NEW_LINE INDENT return snapshot NEW_LINE DEDENT if snapshot is None : NEW_LINE INDENT return None NEW_LINE DEDENT if snapshot is not None : NEW_LINE INDENT return snapshot NEW_LINE DEDENT DEDENT
def def def def def GetShard def def def def GetShard def def def def GetShard def def def def def GetShard def def def def def GetShard def def def def GetShard def def def def GetShard def def def def GetShard def def def GetShard def def def def GetShard def def def def GetShard def def def def GetShard def def _
get_records ( self , request ) : NEW_LINE INDENT records = [ ] NEW_LINE for record in request : NEW_LINE INDENT records . append ( record ) NEW_LINE DEDENT return records NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public static void increaseResourceUsageDuration ( ) throws IOException { if ( resourceUsageException != null ) { throw new IOException ( ) ; } if ( resourceUsageException != null ) { throw new IOException ( ) ; } }
public static boolean isReadable ( String bucket ) { if ( bucket == null ) { return false ; } if ( bucket . isEmpty ( ) ) { return true ; } if ( bucket . length ( ) == 0 ) { return false ; } return true ; }
load_stores ( self ) : NEW_LINE INDENT stores = [ ] NEW_LINE for store in self . stores . values ( ) : NEW_LINE INDENT stores . append ( store ) NEW_LINE DEDENT return stores NEW_LINE DEDENT
wildcardExpanderHandler ( self ) : NEW_LINE INDENT return self . _wildcardExpanderHandler NEW_LINE DEDENT
replace ( self , string , substring ) : NEW_LINE INDENT return self . replace ( string , substring ) NEW_LINE DEDENT
delete_character ( String str ) : NEW_LINE INDENT if not str : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if str . length ( ) == 6 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
add_lint_report ( self , lint_report ) : NEW_LINE INDENT if lint_report is None : NEW_LINE INDENT lint_report = lint_report NEW_LINE DEDENT else : NEW_LINE INDENT lint_report = lint_report NEW_LINE DEDENT return lint_report NEW_LINE DEDENT
def def def def def def add def def def public public public public static public static void add def def def def def _ public static public static public static public static public static void add def def def def _ public static public static public static final public static final public static void add
create_default_field ( self , field ) : NEW_LINE INDENT if field is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_default_field ( field ) NEW_LINE DEDENT DEDENT
auto_detection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _auto_detection ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public static Map < String , String > postProcessors ( Map < String , String > postProcessors ) { if ( postProcessors == null ) { return null ; } return postProcessors ; }
compile ( template ) : NEW_LINE INDENT if isinstance ( template , Template ) : NEW_LINE INDENT return template NEW_LINE DEDENT else : NEW_LINE INDENT return template NEW_LINE DEDENT DEDENT
void set ( String newValue ) { if ( newValue == null ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } }
void cachePeriodChanged ( String oldValue , String newValue ) { if ( oldValue == null ) { return ; } if ( newValue == null ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } if ( newValue . equals ( oldValue ) ) { return ; } }
dispatch_request ( self , request ) : NEW_LINE INDENT if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT if request is not None : NEW_LINE INDENT return request NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static final String suffix ( String suffix ) { if ( suffix == null ) { suffix = " " ; } return suffix ; }
def def def def def def def def def def def def def def def def def def def def def def public public public public public public public public public public public
def redirect_to_output_stream ( self ) : NEW_LINE INDENT if self . redirect_to_output_stream is not None : NEW_LINE INDENT self . redirect_to_output_stream ( self . redirect_to_output_stream ) NEW_LINE DEDENT DEDENT
replace_wildcard ( self , resource , wildcard ) : NEW_LINE INDENT if wildcard : NEW_LINE INDENT return self . _replace_wildcard ( resource , wildcard ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _replace_wildcard ( resource , wildcard ) NEW_LINE DEDENT DEDENT
expand_resources ( self , resources ) : NEW_LINE INDENT for resource in resources : NEW_LINE INDENT self . expand_resources ( resource ) NEW_LINE DEDENT return self . expand_resources ( resources ) NEW_LINE DEDENT

create ( servletContext ) : NEW_LINE INDENT servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW_LINE servletContext . setAttribute ( " servletContext " , servletContext ) NEW servletContext . setAttribute ( " servletContext " , servletContext

perform_processing ( self ) : NEW_LINE INDENT self . logger . info ( " Performing processing . . . " ) NEW_LINE self . logger . info ( " Performing processing . . . " ) NEW_LINE self . logger . info ( " Performing processing . . . " ) NEW_LINE self . logger . info ( " Performing processing . . . " ) NEW_LINE self . logger . info ( " Performing processing . . . " ) NEW_LINE self . logger . info ( " Performing processing . . . " ) NEW_LINE DEDENT
setFactory ( self , factory ) : NEW_LINE INDENT self . factory = factory NEW_LINE DEDENT

merge_model ( self , model ) : NEW_LINE INDENT if isinstance ( model , Model ) : NEW_LINE INDENT return self . merge_model ( model ) NEW_LINE DEDENT return self . merge_model ( model ) NEW_LINE DEDENT
static void show ( final Locator locator , final String locatorName ) { final String locatorName = locator . getName ( ) ; if ( locatorName == null ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } final String locatorName = locator . getName ( ) ; if ( locatorName == null ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } if ( locatorName . length ( ) == 0 ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } if ( locatorName . length ( ) == 0 ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } if ( locatorName . length ( ) == 0 ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } if ( locatorName . length ( ) == 0 ) { throw new IllegalArgumentException ( " locatorName is null " ) ; } }
apply_resource_post_processor ( self , resource_post_processor ) : NEW_LINE INDENT self . resource_post_processor = resource_post_processor NEW_LINE return self . resource_post_processor NEW_LINE DEDENT
synchronized void injectProcessor ( Processor processor ) { if ( processor == null ) { throw new IllegalArgumentException ( " processor is null " ) ; } if ( ! processor . isInjected ( ) ) { throw new IllegalArgumentException ( " processor is not injected " ) ; } if ( ! processor . isInjected ( ) ) { throw new IllegalArgumentException ( " processor is not injected " ) ; } if ( processor . isInjected ( ) ) { throw new IllegalArgumentException ( " processor is injected " ) ; } }

split_options ( self , options ) : NEW_LINE INDENT if len ( options ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( options ) == 1 : NEW_LINE INDENT return [ options [ 0 ] ] NEW_LINE DEDENT elif len ( options ) == 2 : NEW_LINE INDENT return [ options [ 1 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ options [ 0 ] ] NEW_LINE DEDENT DEDENT
static void loadProperties ( InputStream stream ) throws IOException { if ( stream == null ) { throw new IOException ( " stream is null " ) ; } if ( stream . read ( ) == - 1 ) { throw new IOException ( " stream is null " ) ; } if ( stream . read ( ) == - 1 ) { throw new IOException ( " stream is null " ) ; } }
parse_raw_properties ( self , raw_properties ) : NEW_LINE INDENT if raw_properties is None : NEW_LINE INDENT raw_properties = { } NEW_LINE DEDENT else : NEW_LINE INDENT raw_properties = raw_properties . copy ( ) NEW_LINE DEDENT return raw_properties NEW_LINE DEDENT
static Manager create ( String wroManagerFactory ) { if ( wroManagerFactory == null ) { throw new NullPointerException ( " wroManagerFactory " ) ; } if ( wroManagerFactory . length ( ) == 0 ) { throw new IllegalArgumentException ( " wroManagerFactory " ) ; } return new Manager ( wroManagerFactory ) ; }
get_digest ( self , groups ) : NEW_LINE INDENT return self . _get_digest ( groups ) NEW_LINE DEDENT
is_target_group ( self , group ) : NEW_LINE INDENT return group in self . target_groups NEW_LINE DEDENT
update_classpath ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . classpath . update ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . classpath . update ( ) NEW_LINE DEDENT DEDENT
parse_xml_definition ( self ) : NEW_LINE INDENT if self . xml_definition_file_name : NEW_LINE INDENT return self . xml_definition_file_name NEW_LINE DEDENT else : NEW_LINE INDENT return self . xml_definition_file_name NEW_LINE DEDENT DEDENT
inner factory based on provided configuration ( ) { if ( configuration == null ) { configuration = new HashMap < > ( ) ; } else { configuration . put ( " configuration " , configuration ) ; } return this ; }
apply_transformers ( self , transformers ) : NEW_LINE INDENT if isinstance ( transformers , list ) : NEW_LINE INDENT return transformers NEW_LINE DEDENT elif isinstance ( transformers , dict ) : NEW_LINE INDENT return transformers NEW_LINE DEDENT elif isinstance ( transformers , list ) : NEW_LINE INDENT return transformers NEW_LINE DEDENT else : NEW_LINE INDENT return transformers NEW_LINE DEDENT DEDENT
static HandlebarsJs init ( HandlebarsJs template ) { if ( template == null ) { throw new IllegalArgumentException ( " template is null " ) ; } return new HandlebarsJs ( template ) ; }
merge ( self , resources ) : NEW_LINE INDENT preProcessors = [ ] NEW_LINE for resource in resources : NEW_LINE INDENT preProcessors . append ( self . _merge ( resource ) ) NEW_LINE DEDENT return preProcessors NEW_LINE DEDENT
merge_resources ( self , resources ) : NEW_LINE INDENT preProcessors = [ ] NEW_LINE for resource in resources : NEW_LINE INDENT preProcessors . extend ( self . _merge_resources ( resource ) ) NEW_LINE DEDENT return preProcessors NEW_LINE DEDENT
run_preprocessors ( self ) : NEW_LINE INDENT preprocessors = [ ] NEW_LINE for processor in self . preprocessors : NEW_LINE INDENT preprocessors . append ( processor ) NEW_LINE DEDENT return preprocessors NEW_LINE DEDENT
preprocessors ( self ) : NEW_LINE INDENT preprocessors = [ ] NEW_LINE for preprocessors in self . preprocessors : NEW_LINE INDENT preprocessors . append ( preprocessors ) NEW_LINE DEDENT return preprocessors NEW_LINE DEDENT
preProcessor ( self , processor ) : NEW_LINE INDENT if isinstance ( processor , Processor ) : NEW_LINE INDENT return processor NEW_LINE DEDENT else : NEW_LINE INDENT return self . _preProcessor ( processor ) NEW_LINE DEDENT DEDENT
void setFallbackStorageFile ( File fallbackStorageFile ) { if ( fallbackStorageFile == null ) { throw new IllegalArgumentException ( " fallbackStorageFile cannot be null . " ) ; } this . fallbackStorageFile = fallbackStorageFile ; }
get_fields ( self , object ) : NEW_LINE INDENT if isinstance ( object , Class ) : NEW_LINE INDENT return object . getFields ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static String url ( String url ) { if ( url == null ) { return " " ; } if ( url . startsWith ( " / " ) ) { url = url . substring ( 1 ) ; } return url ; }
def def def def def def def def def def concat__python____python____python____python____python____python____python____python__ def def def def def concat__python____python____python____python____python____python____python____python__ def def def def def def concat__python____python____python____python____python____python____python__ def def def def def def concat__python____python____python____python____python____python____python__ def def def def def def concat__python____python____python____python____python____python____python__ def def def def def concat__python____python____python____python____python____python__ def def def def concat__python____python____python____python____python____python____python__ def def def def concat__python____python____python____python____python____python____python____python__ def def def def concat__python____python____python____python____python____python____python____python____python__ def def def def concat__python____python____python____python____python____python____python____python__ def def def def concat__python____python____python____python____python____python____python____python____python__
def def def add_model_ transformer ( self ) : NEW_LINE INDENT return self . model_transformers . add ( self . model_transformer . transformer ) NEW_LINE DEDENT
def def _write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _write ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
set_aggregated_folder_path ( self , aggregatedFolderPath ) : NEW_LINE INDENT if not aggregatedFolderPath : NEW_LINE INDENT return NEW_LINE DEDENT aggregatedFolderPath = aggregatedFolderPath . replace ( ' / ' , ' / ' ) NEW_LINE aggregatedFolderPath = aggregatedFolderPath . replace ( ' \\ ' , ' / ' ) NEW_LINE return aggregatedFolderPath NEW_LINE DEDENT
extract_variables_map ( self ) : NEW_LINE INDENT map = { } NEW_LINE for key in self . variables : NEW_LINE INDENT map [ key ] = self . variables [ key ] NEW_LINE DEDENT for key in self . variables : NEW_LINE INDENT map [ key ] = self . variables [ key ] NEW_LINE DEDENT return map NEW_LINE DEDENT
replace_variables ( self , variables ) : NEW_LINE INDENT if isinstance ( variables , dict ) : NEW_LINE INDENT return variables NEW_LINE DEDENT else : NEW_LINE INDENT return variables NEW_LINE DEDENT DEDENT
replace_variables ( self , variables ) : NEW_LINE INDENT if not variables : NEW_LINE INDENT return NEW_LINE DEDENT variables = { } NEW_LINE for key , value in variables . items ( ) : NEW_LINE INDENT variables [ key ] = value NEW_LINE DEDENT return NEW_LINE DEDENT

static boolean isUsage ( Processor processor ) { if ( processor != null ) { return processor . isUsage ( ) ; } else { return false ; } }
get_filtered_content ( self ) : NEW_LINE INDENT filtered_content = self . _get_filtered_content ( ) NEW_LINE if not filtered_content : NEW_LINE INDENT return None NEW_LINE DEDENT return filtered_content NEW_LINE DEDENT
decorate ( self , processor ) : NEW_LINE INDENT self . _processors . add ( processor ) NEW_LINE return self NEW_LINE DEDENT
_decorate ( self , processor ) : NEW_LINE INDENT self . _processors . add ( processor ) NEW_LINE self . _processors . remove ( processor ) NEW_LINE DEDENT
static void requireMandatoryFields ( List < String > mandatoryFields ) { if ( mandatoryFields . isEmpty ( ) ) { return ; } for ( String field : mandatoryFields ) { if ( ! mandatoryFields . contains ( field ) ) { return ; } } }
persist ( self , resource ) : NEW_LINE INDENT if resource is not None : NEW_LINE INDENT return self . store . save ( resource ) NEW_LINE DEDENT return self . store . save ( resource ) NEW_LINE DEDENT
def def def _get_css def _get_css_css_import ( self ) : NEW_LINE INDENT return self . _get_css_import_function ( ) NEW_LINE DEDENT def _get_css_function ( self ) : NEW_LINE INDENT return self . _get_css_function ( ) NEW_LINE DEDENT
deserialize_json ( self , json ) : NEW_LINE INDENT if not json : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
def def minimize ( self ) : NEW_LINE INDENT if self . debug : NEW_LINE INDENT return self . _minimize ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _minimize ( ) NEW_LINE DEDENT DEDENT
find_imported_resources ( self , resource ) : NEW_LINE INDENT return self . find_imported_resources ( resource ) NEW_LINE DEDENT
absolute_url ( self , url ) : NEW_LINE INDENT if url . startswith ( ' http : / / ' ) : NEW_LINE INDENT return url NEW_LINE DEDENT if url . startswith ( ' https : / / ' ) : NEW_LINE INDENT return url NEW_LINE DEDENT DEDENT
def create_list ( self , items ) : NEW_LINE INDENT items = [ ] NEW_LINE for item in items : NEW_LINE INDENT items . append ( item ) NEW_LINE DEDENT return items NEW_LINE DEDENT
def get_aliases ( self ) : NEW_LINE INDENT aliases = [ ] NEW_LINE aliases = [ ] NEW_LINE for alias in self . aliases : NEW_LINE INDENT aliases . append ( aliases ) NEW_LINE DEDENT return aliases NEW_LINE DEDENT
static void initializeContext ( Context context ) { if ( context == null ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } if ( context == this ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } if ( context == this ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } if ( context == this ) { throw new IllegalArgumentException ( " context cannot be null " ) ; } }
eval ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _eval ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _eval ( ) NEW_LINE DEDENT DEDENT
def def _eval ( self , script ) : NEW_LINE INDENT if isinstance ( script , basestring ) : NEW_LINE INDENT return self . _eval ( script ) NEW_LINE DEDENT return self . _eval ( script ) NEW_LINE DEDENT
process_uri ( self , uri ) : NEW_LINE INDENT if not uri : NEW_LINE INDENT return NEW_LINE DEDENT uri = urlparse . urlparse ( uri ) NEW_LINE if not uri . scheme : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' http ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' https ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' ftp ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' ftp ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' ftp ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' ftp ' ) : NEW_LINE INDENT return NEW_LINE DEDENT if not uri . scheme . startswith ( ' ftp ' ) : NEW
static boolean isProxy ( String url ) { if ( url == null ) { return false ; } if ( url . startsWith ( " / " ) ) { return true ; } if ( url . startsWith ( " / " ) ) { return true ; } return false ; }
void invoke ( final Handler handler ) { if ( handler == null ) { return ; } final String url = handler . getUrl ( ) ; if ( url == null ) { return ; } final String authorizationKey = handler . getAuthorizationKey ( ) ; if ( authorizationKey == null ) { return ; } final String authorizationKey = authorizationKey . trim ( ) ; if ( authorizationKey . length ( ) == 0 ) { return ; } final String authorizationKey = authorizationKey . trim ( ) ; if ( authorizationKey . length ( ) == 0 ) { return ; } final String authorizationKey = authorizationKey . trim ( ) ; if ( authorizationKey . length ( ) == 0 ) { return ; } final String authorizationKey = authorizationKey . trim ( ) ; if ( authorizationKey . length ( ) == 0 ) { return ; } final String authorization = authorizationKey . trim ( ) ; if ( authorizationKey . length ( ) == 0 ) { return ; } final String
static boolean isVersion ( String version ) { if ( version == null ) { return false ; } if ( version . length ( ) == 0 ) { return false ; } if ( version . length ( ) == 1 ) { return true ; } return false ; }
static String getDestinationFolder ( String resource ) { String destinationFolder = null ; if ( resource != null && resource . length ( ) > 0 ) { destinationFolder = resource . substring ( 0 , resource . length ( ) - 1 ) ; } else { destinationFolder = null ; } return destinationFolder ; }
process_group ( self , group ) : NEW_LINE INDENT group = self . _process_group ( group ) NEW_LINE self . _process_group ( group ) NEW_LINE return group NEW_LINE DEDENT
check_uri ( self , uri ) : NEW_LINE INDENT if uri is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return uri NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
locate ( self , contextFolder ) : NEW_LINE INDENT contextFolder = self . contextFolder NEW_LINE if not contextFolder . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not contextFolder . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if contextFolder . exists ( ) : NEW_LINE INDENT return contextFolder NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_pool ( self ) : NEW_LINE INDENT pool = self . pool NEW_LINE if not pool : NEW_LINE INDENT return NEW_LINE DEDENT pool = self . pool NEW_LINE if not pool : NEW_LINE INDENT return NEW_LINE DEDENT self . pool = pool NEW_LINE DEDENT

def def def _get_handle def _get_handle def _get_handle ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_handle_handle_handle_handle ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
remove_prefix ( self , prefix ) : NEW_LINE INDENT if not prefix : NEW_LINE INDENT return NEW_LINE DEDENT if prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT if prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT if prefix . startswith ( self . prefix ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
isMinimizeEnabled ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT

decoration ( self ) : NEW_LINE INDENT def decoration ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT return decoration ( self ) NEW_LINE DEDENT
add_ruby_require ( self , ruby_require ) : NEW_LINE INDENT self . require ( ruby_require ) NEW_LINE self . require ( ruby_require ) NEW_LINE DEDENT
static String transform ( String sass ) { return sass . replaceAll ( " \n " , " " ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
increment_resource_counter ( self ) : NEW_LINE INDENT if self . resource_counter is not None : NEW_LINE INDENT self . resource_counter = self . resource_counter NEW_LINE DEDENT DEDENT
lock ( self ) : NEW_LINE INDENT lock = self . lock ( ) NEW_LINE if lock is None : NEW_LINE INDENT return None NEW_LINE DEDENT return lock NEW_LINE DEDENT
run_shell_command ( self , sourceFilePath ) : NEW_LINE INDENT if self . shell_command is not None : NEW_LINE INDENT return self . shell_command NEW_LINE DEDENT if self . shell_command is not None : NEW_LINE INDENT return self . shell_command NEW_LINE DEDENT return self . shell_command NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def parse
get_data ( self ) : NEW_LINE INDENT data = [ ] NEW_LINE for task in self . tasks : NEW_LINE INDENT data . append ( task . get_data ( ) ) NEW_LINE DEDENT return data NEW_LINE DEDENT
def def public public public static void compile ( final String command ) { final String command = null ; if ( command == null ) { return ; } public static void compile ( ) { if ( command == null ) { return ; } public static void compile ( ) { if ( command == null ) { return ; } else { return ; } } } }
parseHeaders ( self , headersMap ) : NEW_LINE INDENT headers = { } NEW_LINE for key , value in headersMap . items ( ) : NEW_LINE INDENT headers [ key ] = value NEW_LINE DEDENT return headers NEW_LINE DEDENT
disable_cache ( self ) : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE self . cache . clear ( ) NEW_LINE DEDENT
get_path_info ( self , location ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_path_info ( location ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_servlet_path ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _servletPath NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
verify_request_uri ( self , requestURI ) : NEW_LINE INDENT if requestURI . startswith ( " / " ) : NEW_LINE INDENT return True NEW_LINE DEDENT if requestURI . endswith ( " / " ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
load_regexp ( self , regexp ) : NEW_LINE INDENT if not regexp : NEW_LINE INDENT return None NEW_LINE DEDENT regexp = re . compile ( regexp ) NEW_LINE if not regexp : NEW_LINE INDENT return None NEW_LINE DEDENT return regexp NEW_LINE DEDENT
copy ( reader , writer ) : NEW_LINE INDENT reader . close ( ) NEW_LINE writer . close ( ) NEW_LINE DEDENT
create_temp_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT temp_file = tempfile . NamedTemporaryFile ( ) NEW_LINE temp_file . close ( ) NEW_LINE return temp_file NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
trim_image_url ( self , image_url ) : NEW_LINE INDENT if image_url is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( image_url , unicode ) : NEW_LINE INDENT image_url = image_url . encode ( ' utf - 8' ) NEW_LINE DEDENT if isinstance ( image_url , str ) : NEW_LINE INDENT image_url = image_url . encode ( ' utf - 8' ) NEW_LINE DEDENT return image_url NEW_LINE DEDENT
def def def def def def def _set def _get_attribute_name ( self ) : def _get_attribute ( self , name ) : NEW_LINE INDENT return self . _get_attribute ( ) NEW_LINE DEDENT def _get_attribute ( self , name ) : NEW_LINE INDENT return self . _get_attribute ( name ) NEW_LINE DEDENT
def def def def def def def def def def def def public public public public public public public static public static public static public static String generateDataUri public static String generateDataUri ( String dataUri , String dataUri , String dataUri ) { String dataUri = null ; if ( dataUri == null ) { return dataUri ; } public static final String dataUri = null ; }

associate ( self , context ) : NEW_LINE INDENT self . context = context NEW_LINE if self . context is None : NEW_LINE INDENT self . context = { } NEW_LINE DEDENT DEDENT
remove_context ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context is not None : NEW_LINE INDENT self . context = context NEW_LINE DEDENT DEDENT
void check ( ) { if ( changeListener != null ) { if ( changeListener . hasChanged ( ) ) { if ( changeListener . hasChanged ( ) ) { changeListener . changed ( ) ; } } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_resource_changed ( self , resource ) : NEW_LINE INDENT if resource is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
update ( self , groupName ) : NEW_LINE INDENT try : NEW_LINE INDENT hash = hashlib . sha256 ( groupName ) . hexdigest ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT hash = hashlib . sha256 ( groupName ) . hexdigest ( ) NEW_LINE DEDENT try : NEW_LINE INDENT return hash . hexdigest ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return hash . hexdigest ( ) NEW_LINE DEDENT DEDENT
check_group_resource ( self , group ) : NEW_LINE INDENT if not group : NEW_LINE INDENT return False NEW_LINE DEDENT if not group . resource : NEW_LINE INDENT return False NEW_LINE DEDENT if not group . resource : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
runShellCommand ( self , sourceFilePath ) : NEW_LINE INDENT sourceFilePath = os . path . expanduser ( sourceFilePath ) NEW_LINE if os . path . isfile ( sourceFilePath ) : NEW_LINE INDENT return True NEW_LINE DEDENT if os . path . isfile ( sourceFilePath ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static Base64 encode ( Base64 object ) { if ( object == null ) { throw new IllegalArgumentException ( " object cannot be null . " ) ; } if ( object instanceof Base64 ) { return ( ( Base64 ) object ) . encode ( ) ; } return object . encode ( ) ; }
initialize_map ( self , map ) : NEW_LINE INDENT self . map = map NEW_LINE DEDENT
parse_group_ref ( self , group ) : NEW_LINE INDENT group_ref = self . _parse_group_ref ( group ) NEW_LINE if group_ref : NEW_LINE INDENT return group_ref NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_group ( self , group_name ) : NEW_LINE INDENT group = self . get_group ( group_name ) NEW_LINE if group is None : NEW_LINE INDENT return group NEW_LINE DEDENT group = self . get_group ( group_name ) NEW_LINE return group NEW_LINE DEDENT
create_resource ( self , resourceElement ) : NEW_LINE INDENT if resourceElement . tagName == ' group - ref ' : NEW_LINE INDENT return self . create_group_ref ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_group_ref ( ) NEW_LINE DEDENT DEDENT
get_resources ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) . replace ( ' - ' , ' ' ) .
void log ( long start , long stop ) { if ( start < 0 ) { return ; } if ( stop < 0 ) { return ; } if ( stop < 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return ; } if ( start > 0 ) { return ; } if ( stop > 0 ) { return
stop_timer ( self , name ) : NEW_LINE INDENT if not self . _timer : NEW_LINE INDENT self . _timer = None NEW_LINE DEDENT else : NEW_LINE INDENT self . _timer = None NEW_LINE DEDENT return self . _timer NEW_LINE DEDENT
get_timer ( self , name ) : NEW_LINE INDENT timer = self . get_timer ( name ) NEW_LINE if timer : NEW_LINE INDENT return timer NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_timer ( self , thread_name ) : NEW_LINE INDENT timer = self . get_timer ( thread_name ) NEW_LINE if timer is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return timer NEW_LINE DEDENT DEDENT
static void printStatistics ( Statistics statistics ) { for ( int i = 0 ; i < statistics . size ( ) ; i ++ ) { for ( int j = 0 ; j < statistics . size ( ) ; j ++ ) { for ( int i = 0 ; i < statistics . size ( ) ; i ++ ) { for ( int j = 0 ; j < statistics . size ( ) ; j ++ ) { for ( int j = 0 ; j < statistics . size ( ) ; j ++ ) { System . out . print ( statistics . get ( j ) ) ; } } } } } }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_counter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . counter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
process_finished_jobs ( self ) : NEW_LINE INDENT if not self . _finished_jobs : NEW_LINE INDENT self . _finished_jobs = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _finished_jobs = True NEW_LINE DEDENT return self . _finished_jobs NEW_LINE DEDENT
update_counter ( self , counter , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif value > 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif value > 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif value < 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
default_implementation ( self ) : NEW_LINE INDENT return self . _default_implementation NEW_LINE DEDENT
add_object_to_taxonomy ( self , taxonomy ) : NEW_LINE INDENT self . taxonomy . add_object_to_taxonomy ( taxonomy ) NEW_LINE DEDENT

validate_saturation ( saturation , taxonomies ) : NEW_LINE INDENT if saturation is None : NEW_LINE INDENT return NEW_LINE DEDENT if taxonomies is None : NEW_LINE INDENT return NEW_LINE DEDENT if taxonomies . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if taxonomies . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if taxonomies . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
check_consistency ( self , ontology ) : NEW_LINE INDENT if not ontology : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
complete ( self ) : NEW_LINE INDENT if not self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_done ( )
compute_instance_taxonomy ( self ) : NEW_LINE INDENT return self . compute_instance_taxonomy ( ) NEW_LINE DEDENT
public public public public static boolean isEnt public static boolean isEntailed ( ) { if ( ontology . isEntailed ( ) ) { return true ; } else if ( ontology . isEntailed ( ) { return true ; } else { return false ; } }
void execute ( Stage stage ) { if ( stage == null ) { throw new IllegalArgumentException ( " stage is null " ) ; } if ( ! stage . isFinished ( ) ) { throw new IllegalArgumentException ( " stage is not finished " ) ; } if ( stage . isFinished ( ) ) { throw new IllegalArgumentException ( " stage is not finished " ) ; } if ( stage . isFinished ( ) ) { throw new IllegalArgumentException ( " stage is not finished " ) ; } }
void invalidate ( Stage stage ) { if ( stage == null ) { return ; } if ( stage . isDone ( ) ) { throw new IllegalArgumentException ( " Invalid stage " + stage ) ; } if ( stage . isDone ( ) ) { throw new IllegalArgumentException ( " Invalid stage " + stage ) ; } }
Collection < Individual > getAllIndividuals ( ) { Collection < Individual > allIndividuals = new ArrayList < Individual > ( ) ; for ( int i = 0 ; i < allIndividuals . size ( ) ; i ++ ) { if ( allIndividuals . get ( i ) != null ) { allIndividuals . add ( allIndividuals . get ( i ) ) ; } } return allIndividuals ; }
Collection < Individual > getAllIndividuals ( ) { Collection < Individual > allIndividuals = new ArrayList < Individual > ( ) ; for ( int i = 0 ; i < allIndividuals . size ( ) ; i ++ ) { if ( allIndividuals . get ( i ) != null ) { allIndividuals . add ( allIndividuals . get ( i ) ) ; } } return allIndividuals ; }
static void warn ( String message ) { if ( message == null ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } if ( message . startsWith ( " WARN " ) ) { return ; } return ; }
remove_element ( self , element ) : NEW_LINE INDENT return self . remove_element ( element ) NEW_LINE DEDENT
remove_element ( self , element ) : NEW_LINE INDENT if not self . is_element ( element ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_element ( element ) : NEW_LINE INDENT self . remove_element ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
find_element_at_position ( self , position ) : NEW_LINE INDENT if self . is_element_at_position ( position ) : NEW_LINE INDENT return self . element_at_position ( position ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static boolean contains ( Object object ) { if ( object == null ) { return false ; } if ( object . getClass ( ) . isArray ( ) ) { return true ; } return false ; }
add ( self , data ) : NEW_LINE INDENT self . data . append ( data ) NEW_LINE return self NEW_LINE DEDENT
verify_occurrence_numbers ( self , occurrence_numbers ) : NEW_LINE INDENT if occurrence_numbers is None : NEW_LINE INDENT return False NEW_LINE DEDENT elif occurrence_numbers : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
void addTimers ( Timers timers ) { if ( timers != null ) { for ( Timers t : timers ) { t . add ( timers ) ; } } }
def def add_values ( self , timer , values ) : NEW_LINE INDENT if not isinstance ( values , list ) : NEW_LINE INDENT values = [ values ] NEW_LINE DEDENT else : NEW_LINE INDENT values = [ values ] NEW_LINE DEDENT return values NEW_LINE DEDENT
void add ( String key , String value ) { if ( key == null || value == null ) { throw new IllegalArgumentException ( ) ; } if ( key . equals ( value ) ) { throw new IllegalArgumentException ( ) ; } else if ( key . equals ( value ) ) { throw new IllegalArgumentException ( ) ; } }
remove_entry ( self , entry ) : NEW_LINE INDENT if isinstance ( entry , dict ) : NEW_LINE INDENT self . _remove_entry ( entry ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _remove_entry ( entry ) NEW_LINE DEDENT DEDENT
static Map < String , String > capacity ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , " value " ) ; map . put ( " key " , " value " ) ; return map ; }
_decrease_capacity ( self ) : NEW_LINE INDENT if self . capacity is not None : NEW_LINE INDENT self . capacity = self . capacity NEW_LINE DEDENT return self . capacity NEW_LINE DEDENT
void run ( ) { while ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { throw new InterruptedException ( ) ; } Thread . currentThread ( ) . interrupt ( ) ; } }
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; } }
static List < InstanceNode > getAllInstanceNodes ( ) { List < InstanceNode > nodes = new ArrayList < InstanceNode > ( ) ; for ( InstanceNode node : nodes ) { nodes . add ( node ) ; } return nodes ; }
remove_entries_from_set ( self , set ) : NEW_LINE INDENT if set is None : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( set ) == 3 : NEW_LINE INDENT return NEW
combine_hash_codes ( self , hash_codes ) : NEW_LINE INDENT self . hash_codes = hash_codes NEW_LINE return self . hash_codes NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def copy ( InputStream inputStream , InputStream stream ) throws IOException { byte [ ] bytes = new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; }

write_serialized_taxonomy ( self , taxonomy ) : NEW_LINE INDENT self . _write_taxonomy ( taxonomy ) NEW_LINE self . _write_taxonomy ( taxonomy ) NEW_LINE DEDENT
submit ( self , input ) : NEW_LINE INDENT if self . buffer is not None : NEW_LINE INDENT self . buffer . append ( input ) NEW_LINE DEDENT else : NEW_LINE INDENT self . buffer . append ( input ) NEW_LINE DEDENT DEDENT
static void print ( Object obj ) { if ( obj instanceof ELKObject ) { ELKObject obj = ( ELKObject ) obj ; if ( obj . getClass ( ) . isArray ( ) ) { obj . getClass ( ) . isArray ( ) ; } else { obj . getClass ( ) . isArray ( ) ; } } }
delete_query ( self , query ) : NEW_LINE INDENT if query is None : NEW_LINE INDENT return NEW_LINE DEDENT if not self . index . exists ( query ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . index . exists ( query ) : NEW_LINE INDENT return NEW_LINE DEDENT self . index . delete ( query ) NEW_LINE DEDENT
void addDirectSuperClassNode ( DirectSuperClassNode node ) { if ( node != null ) { node . addDirectSuperClassNode ( node ) ; } else { node . addDirectSuperClassNode ( node ) ; } }
check_arguments ( self , arguments ) : NEW_LINE INDENT if len ( arguments ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( arguments ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( arguments ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( arguments ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
read ( self , condition ) : NEW_LINE INDENT if not condition : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _read ( condition ) NEW_LINE DEDENT DEDENT
order_map ( self , sets ) : NEW_LINE INDENT if len ( sets ) == 1 : NEW_LINE INDENT return sets [ 0 ] NEW_LINE DEDENT elif len ( sets ) == 2 : NEW_LINE INDENT return sets [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return sets NEW_LINE DEDENT DEDENT
insert ( self , slice , element ) : NEW_LINE INDENT if isinstance ( element , slice ) : NEW_LINE INDENT return self . insert ( slice , element ) NEW_LINE DEDENT elif isinstance ( element , slice ) : NEW_LINE INDENT return self . insert ( slice , element ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . insert ( slice , element ) NEW_LINE DEDENT DEDENT
remove_object_from_slice ( self , slice ) : NEW_LINE INDENT if slice is None : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
addCounter ( self , argument ) : NEW_LINE INDENT self . counters . add ( argument ) NEW_LINE DEDENT
get_total_memory_usage ( self ) : NEW_LINE INDENT return self . _total_memory_usage NEW_LINE DEDENT
_get_configuration_options ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _configuration_options NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _configuration_options NEW_LINE DEDENT DEDENT
shut_down_reasoner ( self , reasoner_id ) : NEW_LINE INDENT reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE reasoner_id = reasoner_id NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def add_padding ( self , array , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( values ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( values ) == 1 : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT DEDENT DEDENT
create_string ( self , length ) : NEW_LINE INDENT if length == 0 : NEW_LINE INDENT return " " NEW_LINE DEDENT elif length == 1 : NEW_LINE INDENT return " " NEW_LINE DEDENT elif length == 2 : NEW_LINE INDENT return " " NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
add_values ( self , counter , values ) : NEW_LINE INDENT if values is None : NEW_LINE INDENT values = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT values = values . copy ( ) NEW_LINE DEDENT return values NEW_LINE DEDENT
convert_to_xhtml ( self , object ) : NEW_LINE INDENT return self . _convert_to_xhtml ( object ) NEW_LINE DEDENT
get_input_parameters ( self ) : NEW_LINE INDENT return self . _input_parameters NEW_LINE DEDENT
BeanWrapper get ( String path ) { if ( path == null ) { return null ; } if ( path . startsWith ( " / " ) ) { return new BeanWrapper ( path . substring ( 1 ) ) ; } else { return new BeanWrapper ( path ) ; } }
def _get_action_input_parameters ( self ) : NEW_LINE INDENT return self . _get_action_input_parameters ( ) NEW_LINE return self . _get_action_input_parameters ( ) NEW_LINE DEDENT
static boolean isScalar ( Class < ? > class ) { if ( class . isInstance ( this ) ) { return true ; } if ( class . isInstance ( this ) ) { return true ; } return false ; }
def def get_link_type ( self ) : NEW_LINE INDENT return self . _get_link_type ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _get_hreflang ( self , hreflang ) : NEW_LINE INDENT return self . _get_hreflang ( ) NEW_LINE DEDENT
rev ( self ) : NEW_LINE INDENT return self . rev ( ) NEW_LINE DEDENT
add_extension_params ( self , extension_params ) : NEW_LINE INDENT if extension_params is None : NEW_LINE INDENT extension_params = { } NEW_LINE DEDENT else : NEW_LINE INDENT extension_params = { } NEW_LINE DEDENT extension_params . update ( extension_params ) NEW_LINE return extension_params NEW_LINE DEDENT
def def def public public public public public static void remove_template_variables public static void remove_template_template_variables_variables_variables ( ) { if ( template_variables
retrieve_rels ( self , affordance ) : NEW_LINE INDENT rels = [ ] NEW_LINE for rel in self . rels : NEW_LINE INDENT rels . append ( rel ) NEW_LINE DEDENT return rels NEW_LINE DEDENT
List < revs > getAllRevs ( ) { List < revs > revs = new ArrayList < revs > ( ) ; for ( int i = 0 ; i < revs . size ( ) ; i ++ ) { revs . add ( revs . get ( i ) ) ; } return revs ; }
affordance ( affordance ) : NEW_LINE INDENT if affordance is not None : NEW_LINE INDENT return affordance NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def format_parameter_value ( self , parameter ) : NEW_LINE INDENT return self . _format_parameter_value ( parameter ) NEW_LINE DEDENT
def _get_request_body_input ( self ) : NEW_LINE INDENT if self . _request_body_input is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _request_body_input NEW_LINE DEDENT
static boolean isPropertyIncluded ( String propertyName ) { if ( propertyName == null ) { return false ; } if ( propertyName . startsWith ( " @ " ) ) { return true ; } return false ; }
def public public public boolean include ( String value ) { if ( value == null ) { return false ; } if ( value == null ) { return false ; } else { return true ; } } }
_get_input_parameters ( self ) : NEW_LINE INDENT return self . _get_input_parameters ( ) NEW_LINE DEDENT
get_default_value ( self ) : NEW_LINE INDENT return self . request . headers . get ( self . request . method , self . request . headers . get ( self . request . method ) ) NEW_LINE DEDENT
get_request_parameter_name ( self ) : NEW_LINE INDENT request_parameter_name = self . request_parameter_name NEW_LINE return request_parameter_name NEW_LINE DEDENT
get_exposed_property ( self , name ) : NEW_LINE INDENT return self . _get_exposed_property ( name ) NEW_LINE DEDENT
get_vocab ( self , bean ) : NEW_LINE INDENT vocab = [ ] NEW_LINE for item in self . vocab : NEW_LINE INDENT vocab . append ( item ) NEW_LINE DEDENT return vocab NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void add_method_filter ( HttpServletRequest request , HttpServletResponse response ) { if ( request . getMethod ( ) . equals ( " POST " ) ) { request .setRequestMethod ( " POST " ) ; } else { request .setRequestMethod ( request . getMethod ( ) ) ; } }
def submit ( self ) : NEW_LINE INDENT self . _submit = True NEW_LINE self . _reset = True NEW_LINE DEDENT
def def def def def public public public public public public static public static < def def def def def def _ public static public static public static public static < public public public static public static public static public static public static < public static public static public static final public static void select ( ) { if ( ! public static public static public static final public static final public static void select ( ) { public static final String value =

def def def def uri__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def uri__python____python____python____python____python____python____python__ def def def def def def uri__python____python____python____python____python__ def def def def def uri__python____python____python____python____python____python____python__ def def def def def def def def uri__python____python____python____python____python____python__ def def def def def def def def uri__python____python____python____python____python____python__ def def def def def def def uri__python____python____python____python____python__ def def def def def uri__python____python____python____python____python__ def def def def def get_template ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def uri__python____python____python____python____python__ def def def def uri__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def _
strip ( self , action descriptors ) : NEW_LINE INDENT if len ( action descriptors ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( action descriptors )
get_first_child ( self , name = None ) : NEW_LINE INDENT if name is None : NEW_LINE INDENT name = self . name NEW_LINE DEDENT else : NEW_LINE INDENT name = self . name NEW_LINE DEDENT return self . _get_first_child ( name ) NEW_LINE DEDENT
get_first_child ( self , rel = None ) : NEW_LINE INDENT if rel is None : NEW_LINE INDENT rel = self . get_rel ( ) NEW_LINE DEDENT else : NEW_LINE INDENT rel = self . get_rel ( ) NEW_LINE DEDENT if rel is None : NEW_LINE INDENT rel = self . get_rel ( ) NEW_LINE DEDENT return rel NEW_LINE DEDENT
def def _get_children ( self , uber node ) : NEW_LINE INDENT if isinstance ( node , Node ) : NEW_LINE INDENT return [ node ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ node ] NEW_LINE DEDENT DEDENT
PersistentHashMap < String , String > getPairedHashMap ( ) { return new PersistentHashMap < String , String > ( ) ; }
PersistentTreeMap < K , V > getPairedTreeMap ( ) { return new PersistentTreeMap < K , V > ( ) ; }
PersistentTreeMap create ( ) { if ( comparator == null ) { return new PersistentTreeMap ( ) ; } return new PersistentTreeMap ( comparator ) ; }
Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , Map < String , String > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
last_key ( self , map ) : NEW_LINE INDENT if not map : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return map . last ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
factoryMethods ( self ) : NEW_LINE INDENT factoryMethods = [ ] NEW_LINE for method in self . factoryMethods : NEW_LINE INDENT factoryMethods . append ( method ) NEW_LINE DEDENT return factoryMethods NEW_LINE DEDENT
def _get_linked_list_model ( self ) : NEW_LINE INDENT return self . _get_linked_list_model ( ) NEW_LINE DEDENT
def def _get_number_of_items_to_drop ( self ) : NEW_LINE INDENT return len ( self . items ) NEW_LINE DEDENT
collect ( self , transformation ) : NEW_LINE INDENT if isinstance ( transformation , Transformation ) : NEW_LINE INDENT return self . collect ( transformation ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static Map . Entry factory ( Map . Entry entry ) { if ( entry == null ) { throw new IllegalArgumentException ( " Entry cannot be null " ) ; } return new Map . Entry ( entry ) ; }
public static boolean isManaged ( ) { if ( ! isManaged ( ) ) { return false ; } else { return true ; } }
preventDuplicateRuntimeTypes ( self ) : NEW_LINE INDENT if self . runtime is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
get_item_by_index ( self , index ) : NEW_LINE INDENT item = self . get_item ( index ) NEW_LINE if item is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return item NEW_LINE DEDENT DEDENT
def def def insert ( self , Vecsicle , Vecsicle ) : NEW_LINE INDENT item = Vecsicle . add ( Vecsicle ) NEW_LINE if item != null : NEW_LINE INDENT item = Vecsicle . add ( item ) NEW_LINE if item == null : NEW_LINE INDENT item = Vecsicle . add ( Vecsicle ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT item = Vecsicle . add ( item ) NEW_LINE DEDENT return item NEW_LINE DEDENT
add_item ( PersistentVector , PersistentVector . Item item ) : NEW_LINE INDENT if isinstance ( item , PersistentVector . Item ) : NEW_LINE INDENT return item . add_item ( item ) NEW_LINE DEDENT return item . add_item ( item ) NEW_LINE DEDENT
MutableSet copyOf ( MutableSet input ) { if ( input == null ) { throw new IllegalArgumentException ( " input is null " ) ; } if ( input . size ( ) == 0 ) { throw new IllegalArgumentException ( " input is empty " ) ; } if ( input . size ( ) == 0 ) { throw new IllegalArgumentException ( " input is empty " ) ; } return input ; }
MutableVector < String > getAll ( ) { return new MutableVector < String > ( ) ; }
PersistentHashSet < String > get ( ) { return new PersistentHashSet < String > ( ) ; }
static PersistentVector newPersistentVector ( List < PersistentVector > items ) { if ( items == null ) { throw new IllegalArgumentException ( ) ; } return new PersistentVector ( items . size ( ) ) ; }
public public static void transform ( final List < String > array ) { if ( array . size ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } else if ( array . size ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
static StringBuilder create ( int length ) { StringBuilder stringBuilder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { stringBuilder . append ( ' ' ) ; } return stringBuilder ; }
String toString ( ) { if ( this == null ) { return " " ; } return this . getClass ( ) . getSimpleName ( ) ; }
a LazyRef from the given initialization function .
synchronized void run ( ) { if ( this . method == null ) { return ; } this . method = this . method . clone ( ) ; this . method . setAccessible ( true ) ; }
insert ( self , index , item ) : NEW_LINE INDENT if index < 0 : NEW_LINE INDENT raise ValueError ( " index must be greater than zero . " ) NEW_LINE DEDENT if item < 0 : NEW_LINE INDENT raise ValueError ( " item must be greater than zero . " ) NEW_LINE DEDENT if item < 0 : NEW_LINE INDENT raise ValueError ( " item must be greater than zero . " ) NEW_LINE DEDENT return self . _insert ( index , item ) NEW_LINE DEDENT
def def public public static final Array < Integer > newArray ( int n ) { return new Array < Integer > ( n ) { @ Override public int [ ] newArray ( int n ) { return new int [ n ] ; } } }
suspend ( self , transaction ) : NEW_LINE INDENT if not transaction : NEW_LINE INDENT return False NEW_LINE DEDENT self . transaction = transaction NEW_LINE self . transaction . suspend ( ) NEW_LINE DEDENT
void dissociate ( ) { if ( wrappedTransaction != null ) { wrappedTransaction . dissociate ( ) ; } else { wrappedTransaction . dissociate ( ) ; } }

read_directory ( self , filename ) : NEW_LINE INDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise IOError ( " Directory % s does not exist . " % filename ) NEW_LINE DEDENT if not os . path . exists ( filename ) : NEW_LINE INDENT raise IOError ( " Directory % s does not exist . " % filename ) NEW_LINE DEDENT DEDENT
def create_absract_class ( self ) : NEW_LINE INDENT return self . __class__ NEW_LINE DEDENT
declared methods from one class to another class I have a class with a few declared methods in it. I want to copy declared methods from one class to another class. I tried to copy declared methods from one class to another class but it didn't work. I tried to copy declared methods from one class to another class but it didn't work.
copy_methods ( self ) : NEW_LINE INDENT return self . copy_methods ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_sbb_entity ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _sbb_entity = self . _sbb_entity NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _sbb_entity = self . _sbb_entity NEW_LINE DEDENT DEDENT
boolean isNotificationEnabled ( String name ) { if ( name == null ) { return false ; } return true ; }
get_ra_entity_link_names ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_ra_entity_link_names ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT

uninstall_service ( self ) : NEW_LINE INDENT if self . service is not None : NEW_LINE INDENT self . service . uninstall ( ) NEW_LINE DEDENT DEDENT
get_entity_link_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_entity_link_name ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
List < String > getNames ( ) { List < String > names = new ArrayList < String > ( ) ; names . add ( sbbID ) ; names . add ( sbbID ) ; names . add ( sbbID ) ; return names ; }
void resetUsageParameters ( ) { if ( this . usageParameters != null ) { this . usageParameters . clear ( ) ; this . usageParameters . addAll ( this . usageParameters ) ; } }
get_profile_ids ( self ) : NEW_LINE INDENT profile_ids = self . profile_ids NEW_LINE if profile_ids is not None : NEW_LINE INDENT return profile_ids NEW_LINE DEDENT else : NEW_LINE INDENT return self . profile_ids NEW_LINE DEDENT DEDENT
get_profile_table_activity ( self ) : NEW_LINE INDENT profile_table_activity = self . get_profile_table_activity ( ) NEW_LINE if profile_table_activity : NEW_LINE INDENT return profile_table_activity NEW_LINE DEDENT DEDENT
ProfileID getProfileID ( String profile ) { if ( profile == null ) { return null ; } ProfileID profileID = new ProfileID ( profile ) ; return profileID . getProfileID ( profile ) ; }
display_result ( self , operation ) : NEW_LINE INDENT result = self . _display_result ( operation ) NEW_LINE if result is not None : NEW_LINE INDENT return result NEW_LINE DEDENT return self . _display_result ( operation ) NEW_LINE DEDENT
default_implementation ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if event . is_fire_event ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif event . is_fire_event ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif event . is_fire_event ( ) : NEW_LINE INDENT return NEW_LINE DEDENT elif event . is_fire_event ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT

unbind ( self ) : NEW_LINE INDENT if self . activity_context_id is not None : NEW_LINE INDENT self . activity_context_id = self . activity_context_id NEW_LINE DEDENT else : NEW_LINE INDENT self . activity_context_id = None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_bindings ( self ) : NEW_LINE INDENT return self . bindings . get ( self . key , { } ) NEW_LINE DEDENT
def def handle ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT event = self . _get_event ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT return event NEW_LINE DEDENT
static TraceLevel getLevel ( TraceLevel level ) { if ( level == null ) { return null ; } if ( level == Level . SEVERE ) { return Level . SEVERE ; } if ( level == Level . FINEST ) { return Level . FINEST ; } if ( level == Level . SEVERE ) { return Level . SEVERE ; } return Level . FINEST ; }
extract ( self , jar_file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _extract ( jar_file ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def def P__python____python____python____python____python____python____python____python____python____python__ def def def def def P__python____python____python____python____python____python____python____python__ def def def def def def P__python____python____python____python____python____python____python__ def def def def def def P__python____python____python____python____python____python____python____python__ def def def def def def def def P__python____python____python____python____python__ def def def def def def P__python____python____python____python____python____python__ def def def def def def P__python____python____python____python____python____python__ def def def def P__python____python____python____python____python____python__ def def def def P__python____python____python____python____python____python____python____python__ def def def def P__python____python____python____python____python____python____python__ def def def def P__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def _
put ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache . put ( key , value ) NEW_LINE DEDENT except : NEW_LINE INDENT self . cache . put ( key , value ) NEW_LINE DEDENT DEDENT

detach_entity ( self , entity ) : NEW_LINE INDENT if isinstance ( entity , Entity ) : NEW_LINE INDENT return entity . detach ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
public public static boolean is_entity_attached_at_at_least_one_sbb_entity ( ) { return this . sbb_entities . size ( ) > 0 ; }
get_all_sbb_entities ( self ) : NEW_LINE INDENT return self . _get_all_sbb_entities ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def Det__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def Det__python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python__ def def def def def Det__python____python____python____python____python____python____python____python__ def def def def def def def def def def Det__python____python____python____python__ def def def def def def Det__python____python____python__ def def def def def Det__python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python__ def def def def def Det__python____python____python____python____python__ def def def def def Det__python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python__ def def def def def _
static boolean isTimerAttached ( int timerId ) { if ( timerId < 0 ) { return false ; } if ( timerId > 0 ) { return true ; } return false ; }
get_timers ( self ) : NEW_LINE INDENT timers = [ ] NEW_LINE for timer in self . timers : NEW_LINE INDENT timers . append ( timer ) NEW_LINE DEDENT return timers NEW_LINE DEDENT
add_name ( self , name ) : NEW_LINE INDENT if name is None : NEW_LINE INDENT name = self . name NEW_LINE DEDENT else : NEW_LINE INDENT name = self . name NEW_LINE DEDENT return name NEW_LINE DEDENT
remove_name ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT return name NEW_LINE DEDENT
def verify_name_bound_name_boundaries ( self ) : NEW_LINE INDENT if len ( self . name_boundaries ) > 0 : NEW_LINE INDENT return self . name_boundaries [ 0 ] NEW_LINE DEDENT DEDENT
def def get_names ( self ) : NEW_LINE INDENT names = self . _get_names ( ) NEW_LINE if len ( names ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return names NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def get_ aci__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python__ def def def def def def def def get_ aci__python____python____python____python____python____python____python__ def def def def def def get_ aci__python____python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python__ def def def
copy_attributes ( self , aci_attributes ) : NEW_LINE INDENT if isinstance ( aci_attributes , dict ) : NEW_LINE INDENT aci_attributes = aci_attributes . copy ( ) NEW_LINE DEDENT if isinstance ( aci_attributes , dict ) : NEW_LINE INDENT aci_attributes = aci_attributes NEW_LINE DEDENT return aci_attributes NEW_LINE DEDENT
static NotificationInfo getNotificationInfo ( ) { if ( notificationInfo == null ) { notificationInfo = new NotificationInfo ( ) ; } return notificationInfo ; }
void sendNotification ( String notification ) { if ( notification == null ) { return ; } if ( notification . length ( ) == 0 ) { return ; } if ( notification . length ( ) == 0 ) { return ; } if ( notification . length ( ) == 0 ) { return ; } if ( notification . length ( ) == 1 ) { return ; } if ( notification . length ( ) == 2 ) { return ; } if ( notification . length ( ) == 1 ) { return ; } if ( notification . length ( ) == 2 ) { return ; } if ( notification . length ( ) == 1 ) { return ; } if ( notification . length ( ) == 2 ) { return ; } if ( notification . length ( ) == 1 ) { return ; } if ( notification . length ( ) == 2 ) { return ; } if ( notification . length ( ) == 1 ) { return ; } if ( notification . length ( ) == 2 ) { return
a remote DU to a local folder .

install ( self ) : NEW_LINE INDENT if self . is_deployable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_deployable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
uninstall ( self ) : NEW_LINE INDENT if self . is_deployable ( ) : NEW_LINE INDENT return self . uninstall ( ) NEW_LINE DEDENT return self . uninstall ( ) NEW_LINE DEDENT
undeploy ( self ) : NEW_LINE INDENT if not self . is_installed ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . is_installed ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_installed ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_installed ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_installed ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
show_status ( self ) : NEW_LINE INDENT status = self . _get_status ( ) NEW_LINE if status is not None : NEW_LINE INDENT return status NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_status ( ) NEW_LINE DEDENT DEDENT
static void log ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return ; } if ( message . length ( ) == 4 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return ; } if ( message . length ( ) == 4 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return ; } if ( message . length ( ) == 4 ) { return
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_component_ids ( self ) : NEW_LINE INDENT return self . _get_component_ids ( ) NEW_LINE DEDENT
a set containing sbb entity ids in the factory cache data .
generic ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
static void exposeInfo ( String name ) { if ( name == null || name . length ( ) == 0 ) return ; if ( name . length ( ) == 0 ) return ; if ( name . length ( ) == 0 ) return ; if ( name . length ( ) == 1 ) return ; if ( name . length ( ) == 2 ) return ; if ( name . length ( ) == 3 ) return ; if ( name . length ( ) == 4 ) return ; if ( name . length ( ) == 5 ) return ; if ( name . length ( ) == 6 ) return ; if ( name . length ( ) == 7 ) return ; if ( name . length ( ) == 8 ) return ; if ( name . length ( ) == 9 ) return ; if ( name . length ( ) == 0 ) return ; if ( name . length ( ) == 1 ) return ; if ( name . length ( ) == 2 ) return ; if ( name . length
check_profile ( self , profile ) : NEW_LINE INDENT if profile is None : NEW_LINE INDENT return False NEW_LINE DEDENT if profile == self : NEW_LINE INDENT return True NEW_LINE DEDENT if profile == self : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
remove ( self , profile_table ) : NEW_LINE INDENT profile_table . delete ( ) NEW_LINE profile_table . delete ( ) NEW_LINE profile_table . delete ( ) NEW_LINE DEDENT
update_config_properties ( self , config_properties ) : NEW_LINE INDENT config_properties = config_properties . copy ( ) NEW_LINE config_properties . update ( config_properties ) NEW_LINE return config_properties NEW_LINE DEDENT

stop ( self ) : NEW_LINE INDENT if self . container is not None : NEW_LINE INDENT self . container . stop ( ) NEW_LINE DEDENT DEDENT
activate_ra_entity ( self , ra_entity ) : NEW_LINE INDENT ra_entity . activate ( ) NEW_LINE return ra_entity NEW_LINE DEDENT
deactivates ( self ) : NEW_LINE INDENT if self . is_active ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_active ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_active ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_active ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
stop ( self ) : NEW_LINE INDENT if self . processEnded : NEW_LINE INDENT return self . processEnded NEW_LINE DEDENT self . processEnded = True NEW_LINE return self . processEnded NEW_LINE DEDENT
_unconfigure_entity ( self , entity ) : NEW_LINE INDENT self . _entity = entity NEW_LINE if self . _entity is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _entity . _unconfigure_entity ( entity ) NEW_LINE DEDENT
get_ra_interface ( self , entity , ra_type ) : NEW_LINE INDENT ra_type = ra_type . lower ( ) NEW_LINE ra_type = ra_type . lower ( ) NEW_LINE return ra_type NEW_LINE DEDENT

def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def
def notify ( self , entity ) : NEW_LINE INDENT if not self . _notify : NEW_LINE INDENT return NEW_LINE DEDENT self . _notify ( entity ) NEW_LINE self . _notify ( entity ) NEW_LINE self . _notify ( ) NEW_LINE DEDENT
update_ra_configuration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . ra_configuration . update ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . ra_configuration . update ( ) NEW_LINE DEDENT DEDENT
merge ( self , new_properties ) : NEW_LINE INDENT if new_properties is not None : NEW_LINE INDENT return self . _merge ( new_properties ) NEW_LINE DEDENT DEDENT
stop ( self , ra ) : NEW_LINE INDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . isStopped ( ra ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
deactivation ( ra ) : NEW_LINE INDENT if not ra . isActive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if not ra . isActive ( ) : NEW_LINE INDENT return NEW_LINE DEDENT ra . deactivate ( ) NEW_LINE DEDENT
_unconfigure_ra ( self ) : NEW_LINE INDENT if self . ra is None : NEW_LINE INDENT return NEW_LINE DEDENT self . ra = self . ra NEW_LINE DEDENT
_unset_context ( self , ra ) : NEW_LINE INDENT self . _context = { } NEW_LINE self . _context . clear ( ) NEW_LINE DEDENT
def def set_context ( self ) : NEW_LINE INDENT return self . _get_context ( ) NEW_LINE DEDENT
build_profile_attribute_map ( self ) : NEW_LINE INDENT profile_attr_map = { } NEW_LINE profile_attr_map . update ( self . profile_attr_map ) NEW_LINE profile_attr_map . update ( self . profile_attr_map ) NEW_LINE return profile_attr_map NEW_LINE DEDENT
resume_event_context ( event_context ) : NEW_LINE INDENT if event_context is None : NEW_LINE INDENT return NEW_LINE DEDENT event_context = event_context . copy ( ) NEW_LINE event_context . resume ( ) NEW_LINE return event_context NEW_LINE DEDENT
static Set < ActivityContextHandle > getAllActivityContextHandles ( ) { Set < ActivityContextHandle > allActivityContextHandles = new HashSet < ActivityContextHandle > ( ) ; for ( int i = 0 ; i < activityContextHandles . size ( ) ; i ++ ) { allActivityContextHandles . add ( activityContextHandles . get ( i ) ) ; } return allActivityContextHandles ; }
remove ( mbean ) : NEW_LINE INDENT if not mbean : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( mbean , dict
get_object_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_object_name ( name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
_decorate_abstract_class ( self ) : NEW_LINE INDENT if self . abstract_class : NEW_LINE INDENT return self . abstract_class NEW_LINE DEDENT return self NEW_LINE DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT return None NEW_LINE DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT if event is not None : NEW_LINE INDENT return event NEW_LINE DEDENT return None NEW_LINE DEDENT
get_profile ( self , profile_id ) : NEW_LINE INDENT profile = self . _get_profile ( profile_id ) NEW_LINE if profile is None : NEW_LINE INDENT return None NEW_LINE DEDENT return profile NEW_LINE DEDENT
def USAGE_PARAMS ( self ) : NEW_LINE INDENT if self . PARAMS : NEW_LINE INDENT return self . PARAMS NEW_LINE DEDENT else : NEW_LINE INDENT return self . PARAMS NEW_LINE DEDENT DEDENT
get_abstract_methods ( self ) : NEW_LINE INDENT abstract_methods = [ ] NEW_LINE for abstract_method in self . abstract_methods : NEW_LINE INDENT abstract_methods . append ( abstract_method ) NEW_LINE DEDENT return abstract_methods NEW_LINE DEDENT
get_all_methods ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _methods NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_object_pool ( self ) : NEW_LINE INDENT pool = self . _create_object_pool ( ) NEW_LINE if pool is not None : NEW_LINE INDENT return pool NEW_LINE DEDENT pool = self . _create_object_pool ( ) NEW_LINE return pool NEW_LINE DEDENT
remove_object_pool ( self ) : NEW_LINE INDENT if self . transaction_manager is not None : NEW_LINE INDENT self . transaction_manager . remove_object_pool ( self ) NEW_LINE DEDENT DEDENT
static void internal ( final String methodName ) { if ( methodName == null ) { throw new IllegalArgumentException ( " methodName must not be null " ) ; } if ( methodName . startsWith ( " _ " ) ) { throw new IllegalArgumentException ( " methodName must start with _ " ) ; } if ( methodName . startsWith ( " _ " ) ) { throw new IllegalArgumentException ( " methodName must start with _ " ) ; } if ( methodName . startsWith ( " _ " ) ) { throw new IllegalArgumentException ( " methodName must start with _ " ) ; } }
def alarm ( self , alarmLevel ) : NEW_LINE INDENT if alarmLevel is not None : NEW_LINE INDENT return self . _alarm ( alarmLevel ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _alarm ( ) NEW_LINE DEDENT DEDENT
static void staticMethod ( Method method ) { if ( method == null ) { throw new IllegalArgumentException ( " Method cannot be null . " ) ; } if ( method . isStatic ( ) ) { throw new IllegalArgumentException ( " Method must be static . " ) ; } if ( method . isPublic ( ) ) { throw new IllegalArgumentException ( " Method must be public . " ) ; } }
def def get_event_type_descriptor ( self ) : NEW_LINE INDENT return self . _event_type_descriptor NEW_LINE DEDENT
deciding_file ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return NEW_LINE DEDENT file = open ( filename , ' rb ' ) NEW_LINE if not file : NEW_LINE INDENT return NEW_LINE DEDENT file . seek ( 0 ) NEW_LINE file . close ( ) NEW_LINE return NEW_LINE DEDENT
parse ( self , file ) : NEW_LINE INDENT self . _parse ( file ) NEW_LINE return self . _parse ( file ) NEW_LINE DEDENT
deploy_fun ( self ) : NEW_LINE INDENT self . _deploy_fun ( ) NEW_LINE self . _deploy_fun ( ) NEW_LINE self . _deploy_fun ( ) NEW_LINE self . _deploy_fun ( ) NEW_LINE DEDENT
undeploy ( self ) : NEW_LINE INDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_running ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
get_deployer_status ( self ) : NEW_LINE INDENT status = self . _get_status ( ) NEW_LINE if status : NEW_LINE INDENT return status NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
execute ( self , commit ) : NEW_LINE INDENT if commit is not None : NEW_LINE INDENT self . commit ( commit ) NEW_LINE DEDENT DEDENT
run ( self , commit ) : NEW_LINE INDENT self . commit ( commit ) NEW_LINE self . commit ( commit ) NEW_LINE self . commit ( commit ) NEW_LINE DEDENT
rollback ( self ) : NEW_LINE INDENT self . _rollback ( ) NEW_LINE DEDENT
schedule_actions ( self ) : NEW_LINE INDENT if self . is_commit ( ) : NEW_LINE INDENT return self . _schedule_actions ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _schedule_actions ( ) NEW_LINE DEDENT DEDENT
execute_before_commit ( self , commit ) : NEW_LINE INDENT if commit . is_commit ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if commit . is_commit ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if commit . is_commit ( ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
setTraceLevel ( self , traceLevel ) : NEW_LINE INDENT if traceLevel is None : NEW_LINE INDENT traceLevel = self . traceLevel NEW_LINE DEDENT return traceLevel NEW_LINE DEDENT
_call_multiple_times ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) > 1 : NEW_LINE INDENT self . _call_multiple_times ( * args , ** kwargs ) NEW_LINE DEDENT return self . _call_multiple_times ( * args , ** kwargs ) NEW_LINE DEDENT
remove_replicated_data ( self ) : NEW_LINE INDENT if self . replicated_data is not None : NEW_LINE INDENT self . replicated_data = self . replicated_data NEW_LINE DEDENT DEDENT

static < T > T [ ] getUsageParameters ( ) { T [ ] usageParameters = new T [ ] { } ; for ( int i = 0 ; i < usageParameters . length ; i ++ ) { usageParameters [ i ] = usageParameters [ i ] ; } return usageParameters ; }
def def get_object_pool ( self , sbb , service ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_object_pool ( sbb , service ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_object_pool ( ) NEW_LINE DEDENT DEDENT
create_object_pool ( self , service , sbb ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_object_pool ( service , sbb ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . error ( e . getMessage ( ) , e ) NEW_LINE DEDENT DEDENT
def execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _execute ( ) NEW_LINE DEDENT DEDENT
start_activity ( self ) : NEW_LINE INDENT if self . transaction_management : NEW_LINE INDENT return self . transaction_management . start_activity ( ) NEW_LINE DEDENT return self . transaction_management . start_activity ( ) NEW_LINE DEDENT
activity ( self ) : NEW_LINE INDENT if self . transaction_management : NEW_LINE INDENT return self . transaction_management . activity ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . transaction_management . activity ( ) NEW_LINE DEDENT DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if isinstance ( event , Event ) : NEW_LINE INDENT return event NEW_LINE DEDENT else : NEW_LINE INDENT return self . _fire_event ( event ) NEW_LINE DEDENT DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if isinstance ( event , Event ) : NEW_LINE INDENT self . event = event NEW_LINE DEDENT else : NEW_LINE INDENT self . event = event NEW_LINE DEDENT DEDENT
static Class < ? > getLocalObjectClass ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isPrimitive ( ) ) { return clazz ; } if ( clazz . isArray ( ) ) { return clazz . getComponent ( 0 ) ; } return clazz ; }
name ( self , name ) : NEW_LINE INDENT if name is not None : NEW_LINE INDENT return name NEW_LINE DEDENT elif name is not None : NEW_LINE INDENT return name NEW_LINE DEDENT elif name is not None : NEW_LINE INDENT return name NEW_LINE DEDENT else : NEW_LINE INDENT return name NEW_LINE DEDENT DEDENT
convert_optArg ( self , optArg ) : NEW_LINE INDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT if isinstance ( optArg , str ) : NEW_LINE INDENT return optArg NEW_LINE DEDENT return optArg NEW_LINE DEDENT
set_profile ( self , profile_identifier ) : NEW_LINE INDENT self . profile_identifier = profile_identifier NEW_LINE self . profile = profile_identifier NEW_LINE DEDENT
DeployableUnitsCard deployableUnitsCard ( ) { DeployableUnitsCard deployableUnitsCard = super . deployableUnitsCard ( ) ; if ( deployableUnitsCard == null ) { return deployableUnitsCard ; } return deployableUnitsCard ; }
boolean contains ( SBB local object ) { if ( localObject == null ) { throw new IllegalArgumentException ( " SBB local object is null . " ) ; } if ( localObject == null ) { throw new IllegalArgumentException ( " SBB local object is null . " ) ; } if ( localObject == null ) { throw new IllegalArgumentException ( " SBB local object is null . " ) ; } if ( localObject == null ) { throw new IllegalArgumentException ( " SBB local object is null . " ) ; } return localObject . contains ( localObject ) ; }
boolean isMember ( SBB localObject , SBB localObject ) { if ( localObject == null ) { return false ; } if ( localObject == null ) { return false ; } if ( localObject == null ) { return false ; } return true ; }
remove ( SBB entity ) : NEW_LINE INDENT if isinstance ( entity , SBBLocalObject ) : NEW_LINE INDENT return SBBLocalObject . remove ( entity ) NEW_LINE DEDENT return SBBLocalObject . remove ( entity ) NEW_LINE DEDENT
static Level getLevel ( Level level ) { if ( level == null ) { return null ; } if ( level == Level . SEVERE ) { return null ; } if ( level == Level . OFF ) { return null ; } return level ; }

clear ( self ) : NEW_LINE INDENT self . cache = { } NEW_LINE self . cache . clear ( ) NEW_LINE DEDENT
add_call_to_profile ( self , profile ) : NEW_LINE INDENT try : NEW_LINE INDENT self . profile . add_call ( profile ) NEW_LINE DEDENT except : NEW_LINE INDENT self . profile . add_call ( profile ) NEW_LINE DEDENT DEDENT
get_profile_object ( self , profile_name ) : NEW_LINE INDENT if profile_name is None : NEW_LINE INDENT return None NEW_LINE DEDENT profile_name = profile_name . strip ( ) NEW_LINE profile_name = profile_name . strip ( ) NEW_LINE profile_name = profile_name . strip ( ) NEW_LINE profile_name = profile_name . strip ( ) NEW_LINE profile_name = profile_name . strip ( ) NEW_LINE return profile_name NEW_LINE DEDENT
def def add_transaction ( self , profile ) : NEW_LINE INDENT profile = profile . get_profile ( ) NEW_LINE profile = profile . get_profile ( ) NEW_LINE if profile . get_profile ( ) : NEW_LINE INDENT profile = profile . get_profile ( ) NEW_LINE if profile . get_profile ( ) : NEW_LINE INDENT profile = profile . get_profile ( ) NEW_LINE DEDENT else : NEW_LINE INDENT profile = profile . get_profile ( ) NEW_LINE DEDENT return profile . get_profile ( ) NEW_LINE DEDENT DEDENT
void setValue ( String value ) { if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } if ( value . length ( ) == 0 ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } }
static Class < ? extends ActivityContext > getContextInterfaceClass ( ) { Class < ? extends ActivityContext > contextInterfaceClass = new Class < ? extends ActivityContext > ( ) ; contextInterfaceClass . setAccessible ( true ) ; return contextInterfaceClass ; }
static void add ( Class < ? extends ActivityContextInterface > asbtract , ActivityContextInterface activityContextInterface ) { if ( activityContextInterface == null ) { throw new NullPointerException ( " ActivityContextInterface is null " ) ; } else { throw new NullPointerException ( " ActivityContextInterface is null " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

release ( self ) : NEW_LINE INDENT if self . name_bindings is not None : NEW_LINE INDENT self . name_bindings . release ( self . name_bindings ) NEW_LINE DEDENT DEDENT

attach_timer ( self , timer ) : NEW_LINE INDENT if not timer : NEW_LINE INDENT return NEW_LINE DEDENT timer . attach_timer ( timer ) NEW_LINE DEDENT
void endEvent ( Activity context ) { if ( context == null ) { return ; } if ( context . getApplicationContext ( ) == null ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } if ( context . getApplicationContext ( ) . isDestroyed ( ) ) { return ; } }
void attach ( Entity entity ) { if ( entity instanceof sbb ) { ( ( sbb ) entity ) . detach ( ) ; } }
detach_sbb_entity ( self ) : NEW_LINE INDENT if self . _sbb_entity is not None : NEW_LINE INDENT self . _sbb_entity = self . _sbb_entity NEW_LINE DEDENT DEDENT
get_ordered_copy ( self ) : NEW_LINE INDENT return self . _ordered_copy NEW_LINE DEDENT
static void endActivity ( Context context ) { if ( context == null ) { return ; } if ( context instanceof Activity ) { ( ( Activity ) context ) . finish ( ) ; } }
def adder ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . adder ( cls . __name__ , cls ) NEW_LINE DEDENT except : NEW_LINE INDENT return cls . __name__ NEW_LINE DEDENT DEDENT
get_external_dependencies ( self ) : NEW_LINE INDENT external_dependencies = [ ] NEW_LINE for d in self : NEW_LINE INDENT external_dependencies . extend ( d . get_external_dependencies ( ) ) NEW_LINE DEDENT return external_dependencies NEW_LINE DEDENT
check_dependencies ( self , dependencies ) : NEW_LINE INDENT if not dependencies : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( dependencies ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
boolean containsComponent ( String component ) { if ( component == null ) { return false ; } if ( component . length ( ) == 0 ) { return false ; } return true ; }

get_uninstall_actions ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _uninstall_actions NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_components ( self , components ) : NEW_LINE INDENT if isinstance ( components , list ) : NEW_LINE INDENT for component in components : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT for component in component : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW_LINE INDENT if isinstance ( component , list ) : NEW
unregister ( self , profile ) : NEW_LINE INDENT if not self . profile : NEW_LINE INDENT return NEW_LINE DEDENT self . profile = profile NEW_LINE if not self . profile : NEW_LINE INDENT return NEW_LINE DEDENT self . profile . unregister ( ) NEW_LINE DEDENT
def def def def get_profile_name ( self , profile_name , profile_table_name ) : NEW_LINE def get_profile_name ( self , profile_name ) : NEW_LINE INDENT return self . _get_profile_name ( profile_name ) NEW_LINE def get_profile_name ( self ) : NEW_LINE INDENT return self . _get_profile_name ( profile_name ) NEW_LINE DEDENT def get_profile_name ( self ) : NEW_LINE INDENT return self . _get_profile_name ( profile_name ) NEW_LINE DEDENT
move ( self , object ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transaction . suspend ( ) NEW_LINE self . transaction . resume ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . transaction . resume ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
set_cmp_setter ( self , cmp_setter ) : NEW_LINE INDENT self . cmp_setter = cmp_setter NEW_LINE if self . cmp_setter : NEW_LINE INDENT self . cmp_setter = self . cmp_setter NEW_LINE DEDENT DEDENT
cmp_setter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cmp_setter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . cmp_setter NEW_LINE DEDENT DEDENT
_get_cmp_getter ( self ) : NEW_LINE INDENT return self . _cmp_getter NEW_LINE DEDENT
cmp_getter ( self ) : NEW_LINE INDENT return self . cmp_getter ( ) NEW_LINE DEDENT
execute_management_method ( self ) : NEW_LINE INDENT if self . management_method is not None : NEW_LINE INDENT return self . management_method . execute_management_method ( self ) NEW_LINE DEDENT DEDENT
execute_management_method ( self ) : NEW_LINE INDENT if self . management_method is not None : NEW_LINE INDENT self . management_method = self . management_method NEW_LINE DEDENT DEDENT
delete ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT return path NEW_LINE DEDENT
static < T > T defaultConstructor ( Class < T > clazz ) { if ( clazz == null ) { throw new NullPointerException ( ) ; } return clazz . newInstance ( ) ; }
create_default_usage_parameter ( getter , setter ) : NEW_LINE INDENT if getter is None : NEW_LINE INDENT return setter NEW_LINE DEDENT if setter is None : NEW_LINE INDENT return getter NEW_LINE DEDENT if setter is None : NEW_LINE INDENT return getter NEW_LINE DEDENT return setter NEW_LINE DEDENT
retrive_entity ( self , entity ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . retrive_entity ( entity ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
fire_event ( self , event ) : NEW_LINE INDENT if isinstance ( event , fire_event ) : NEW_LINE INDENT return event NEW_LINE DEDENT elif isinstance ( event , fire_event ) : NEW_LINE INDENT return event NEW_LINE DEDENT return None NEW_LINE DEDENT
narrow ( self , context ) : NEW_LINE INDENT return self . _context . narrow ( context ) NEW_LINE DEDENT

public public public public public public Object getObject ( String key , String key ) throws Exception { if ( key != null ) { throw new IllegalArgumentException ( " Attempt to instantiate a non - serializable object into the NonSerializableFactory . NonSerializableFactory namespace . NonSerializableFactory . NonSerializableFactory ( ) . create ( NonSerializableFactory . NonSerializableFactory ( ) ) ; } else if ( key == null ) { throw new IllegalArgumentException ( " The key cannot be null . " ) ; } return null ; }
public static void bind ( final Object target , final Object target ) throws NamingException { if ( target == null ) { throw new IllegalArgumentException ( " Target object is null " ) ; } else { throw new IllegalArgumentException ( " Target object cannot be null " ) ; } }
_decorate_sbb ( self , sbbClass ) : NEW_LINE INDENT sbbClass = self . _decorate_sbb ( sbbClass ) NEW_LINE if sbbClass is None : NEW_LINE INDENT return None NEW_LINE DEDENT return sbbClass NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python____python__ def def def def def def def def _set__python____python____python____python__ def def def def def _set__python____python____python____python____python____python__ def def def def def def _set def _get_field_value_value ( self ) : NEW__python__ def _get_field_value ( self ) : NEW__python__ def _get_field_value ( self ) : NEW def _get_value ( self ) : NEW__python____python____python__ def _
get_data_field_value ( self ) : NEW_LINE INDENT return self . _get_data_field_value ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
initialize_state ( self ) : NEW_LINE INDENT self . _state = { } NEW_LINE self . _state . update ( ) NEW_LINE DEDENT
remove_object ( self , object ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pool . remove ( object ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . pool . remove ( object ) NEW_LINE DEDENT DEDENT
get_local_representation ( self , profile_object ) : NEW_LINE INDENT if profile_object is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return profile_object . get_local_representation ( ) NEW_LINE DEDENT DEDENT
def fire ( self ) : NEW_LINE INDENT if self . profile is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . profile is not None : NEW_LINE INDENT self . profile = self . profile NEW_LINE DEDENT if self . profile is not None : NEW_LINE INDENT self . profile = self . profile NEW_LINE DEDENT DEDENT
get_profile ( self ) : NEW_LINE INDENT profile = self . profile NEW_LINE if profile is None : NEW_LINE INDENT return None NEW_LINE DEDENT return profile NEW_LINE DEDENT
static Class < ? > createClass ( String name , Class < ? > ... interfaces ) throws ClassNotFoundException { Class < ? > clazz = null ; try { clazz = Class . forName ( name ) ; } catch ( ClassNotFoundException e ) { throw new ClassNotFoundException ( name , e ) ; } return clazz ; }
def def create_absract_link ( self ) : NEW_LINE INDENT if self . absract_class is not None : NEW_LINE INDENT self . absract_class = self . absract_class NEW_LINE DEDENT DEDENT

void addMemberValues ( Annotation annotation ) { if ( annotation == null ) { throw new IllegalArgumentException ( " annotation cannot be null " ) ; } if ( annotation . annotationType ( ) != null ) { throw new IllegalArgumentException ( " annotation cannot be null " ) ; } if ( annotation . annotationType ( ) != null ) { throw new IllegalArgumentException ( " annotation cannot be null " ) ; } if ( annotation . annotationType ( ) != null ) { throw new IllegalArgumentException ( " annotation cannot be null " ) ; } }
get_ aci ( self ) : NEW_LINE INDENT aci = self . _get_ aci ( ) NEW_LINE if aci : NEW_LINE INDENT return aci NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
the component javassist class pool .
void add ( DeployableUnit component ) { if ( component == null ) { throw new IllegalArgumentException ( " component cannot be null . " ) ; } if ( component instanceof DeployableUnit ) { DeployableUnit deployableUnit = ( DeployableUnit ) component ; } else { throw new IllegalArgumentException ( " component cannot be null . " ) ; } }
undeploy ( self , component ) : NEW_LINE INDENT if self . undeployed : NEW_LINE INDENT self . undeployed = True NEW_LINE DEDENT else : NEW_LINE INDENT self . undeployed = False NEW_LINE DEDENT DEDENT
def start_activity ( self ) : NEW_LINE INDENT return self . start_activity ( ) NEW_LINE DEDENT
Class < ? > getInterface ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } Class < ? > interface = clazz . getSuperclass ( ) ; if ( interface == null ) { return null ; } return interface ; }
methods ( self ) : NEW_LINE INDENT return self . _methods ( ) NEW_LINE DEDENT
InputSource parse ( String systemId ) throws SAXException { InputSource input = new InputSource ( new StringReader ( systemId ) ) ; input . setSystemId ( systemId ) ; return input ; }
static boolean isTracerName ( String tracerName ) { if ( tracerName == null ) { return false ; } if ( tracerName . length ( ) == 0 ) { return true ; } if ( tracerName . length ( ) == 1 ) { return true ; } return false ; }
createPLOs ( self ) : NEW_LINE INDENT return self . _createPLOs ( ) NEW_LINE DEDENT
check_dependencies ( self , component ) : NEW_LINE INDENT if isinstance ( component , DUComponent ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
unpack ( self , directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT else : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT DEDENT
get_entity_manager ( self ) : NEW_LINE INDENT return self . _get_entity_manager ( ) NEW_LINE DEDENT
start ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . container . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . container . stop ( ) NEW_LINE DEDENT DEDENT
public static void init ( ) { if ( SecurityManger . class . getClassLoader ( ) != null ) { if ( SecurityManger . class . getClassLoader ( ) == null ) { throw new IllegalArgumentException ( " SecurityManger class loader is not initialized " ) ; } else { throw new IllegalArgumentException ( " SecurityManger class loader is not initialized " ) ; } } }
static void embed ( Class < ? extends AccessController > accessController ) { if ( accessController == null ) { throw new IllegalArgumentException ( " AccessController cannot be null . " ) ; } if ( accessController . isInterface ( ) ) { throw new IllegalArgumentException ( " AccessController does not have an interface . " ) ; } if ( accessController . isInterface ( ) ) { throw new IllegalArgumentException ( " AccessController does not have an interface . " ) ; } }
create_object ( self ) : NEW_LINE INDENT transaction = self . _get_transaction ( ) NEW_LINE if transaction is None : NEW_LINE INDENT return NEW_LINE DEDENT transaction . begin ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . begin ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . begin ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE transaction . commit ( ) NEW_LINE DEDENT
the Activity TTL ( Activity TTL ) { if ( TTL == null ) { TTL = new ActivityTTL ( ) ; TTL = new ActivityTTL ( ) ; TTL = new ActivityTTL ( ) ; TTL = new ActivityTTL ( ) ; TTL = new ActivityTTL ( ) ; TTL . add ( TTL ) ; TTL . add ( TTL ) ; TTL . add ( TTL ) ; } return TTL ; }
static boolean isClassLoaded ( Class < ? > class ) { if ( class == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } return true ; }
public void retrieveLocalObject ( ) { if ( localObject == null ) { return ; } if ( localObject == null ) { return ; } if ( localObject == null ) { return ; } localObject = localObject . getLocalObject ( ) ; if ( localObject == null ) { return ; } localObject = localObject . getLocalObject ( ) ; if ( localObject == null ) { return ; } }
static List < LoggingMXBean > getLoggers ( String name ) { List < LoggingMXBean > loggers = new ArrayList < LoggingMXBean > ( ) ; loggers . add ( new LoggingMXBean ( name ) ) ; loggers . add ( new LoggingMXBean ( name ) ) ; loggers . add ( new LoggingMXBean ( name ) ) ; loggers . add ( new LoggingMXBean ( name ) ) ; return loggers ; }
set_logger_level ( logger_level ) : NEW_LINE INDENT logger_level = logger_level . lower ( ) NEW_LINE logger . setLevel ( logger_level ) NEW_LINE logger . setLevel ( logger_level ) NEW_LINE DEDENT
remove_ loggers ( self , branch ) : NEW_LINE INDENT logger = self . loggers [ branch ] NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE return logger NEW_LINE DEDENT
add_logger ( logger ) : NEW_LINE INDENT logger = getLogger ( logger ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE logger . setLevel ( logger . getLevel ( ) ) NEW_LINE DEDENT
def addSocketHandler ( logger , SocketHandler socketHandler ) : NEW_LINE INDENT logger . addHandler ( socketHandler ) NEW_LINE logger . setLevel ( socketHandler . getLevel ( ) ) NEW_LINE DEDENT
removeHandler ( logger , handler ) : NEW_LINE INDENT logger . debug ( " Removing handler % s " , handler ) NEW_LINE logger . debug ( " Removing handler % s " , handler ) NEW_LINE logger . debug ( " Removing handler % s " , handler ) NEW_LINE DEDENT
static String getLoggerName ( ) { if ( loggerName == null ) { loggerName = log4j . getLoggerName ( ) ; loggerName = log4j . getLoggerName ( ) ; } return loggerName ; }
sync ( self ) : NEW_LINE INDENT logger = self . logger NEW_LINE logger . setLevel ( self . level ) NEW_LINE logger . setLevel ( self . level ) NEW_LINE logger . setLevel ( self . level ) NEW_LINE DEDENT
log4j_level ( self ) : NEW_LINE INDENT log4j_level = self . log4j_level NEW_LINE return self . log4j_level NEW_LINE DEDENT
def def _get_flags ( self ) : NEW_LINE INDENT return self . _get_flags ( ) NEW_LINE DEDENT
def def def public public static void internaly
check_tracer_name ( self , tracer_name ) : NEW_LINE INDENT if not tracer_name : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( tracer_name , str ) : NEW_LINE INDENT tracer_name = tracer_name . lower ( ) NEW_LINE DEDENT return True NEW_LINE DEDENT
write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . output . write ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . output . write ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
read_current_object ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _current_object NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _current_object NEW_LINE DEDENT DEDENT

static List < Dependency > getDependencies ( final Domain domain ) { final List < Dependency > dependencies = new ArrayList < Dependency > ( ) ; dependencies . addAll ( domain . getDependencies ( ) ) ; dependencies . addAll ( domain . getDependencies ( ) ) ; dependencies . addAll ( domain . getDependencies ( ) ) ; return dependencies ; }



register ( self , object ) : NEW_LINE INDENT profile = self . _get_profile ( object ) NEW_LINE if profile : NEW_LINE INDENT profile . register ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT profile . register ( object ) NEW_LINE DEDENT DEDENT
resume ( self ) : NEW_LINE INDENT if self . tx is None : NEW_LINE INDENT return NEW_LINE DEDENT self . tx = self . tx . copy ( ) NEW_LINE self . tx . resume ( ) NEW_LINE DEDENT
get_sbbs ( self ) : NEW_LINE INDENT sbbs = [ ] NEW_LINE for sbbs in self . service . get_sbbs ( ) : NEW_LINE INDENT sbbs . append ( sbbs ) NEW_LINE DEDENT return sbbs NEW_LINE DEDENT
get_ra_entity_links ( self , sbbs ) : NEW_LINE INDENT ra_entity_links = [ ] NEW_LINE for sbbs in sbbs : NEW_LINE INDENT ra_entity_links . append ( sbbs . get_ra_entity_links ( ) ) NEW_LINE DEDENT return ra_entity_links NEW_LINE DEDENT
the SLEE container .
shutdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _shutdown ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _shutdown ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
static void ensureSLEELifecycle ( final SLEELifecycle lifecycle ) { if ( lifecycle == null ) { return ; } if ( lifecycle instanceof SLEELifecycle ) { final SLEELifecycle lifecycle = ( SLEELifecycle ) lifecycle ; } if ( lifecycle instanceof SLEELifecycle ) { final SLEELifecycle lifecycle = ( SLEELifecycle ) lifecycle ; } if ( lifecycle instanceof SLEELifecycle ) { final SLEELifecycle lifecycle = ( SLEELifecycle ) lifecycle ; } if ( lifecycle instanceof SLEELifecycle ) { final SLEELifecycle lifecycle = ( SLEELifecycle ) lifecycle ; } if ( lifecycle instanceof SLEELifecycle ) { final SLEELifecycle lifecycle = ( SLEELifecycle ) lifecycle ; } }
_get_usage_parameter_getter ( self ) : NEW_LINE INDENT getter = self . _get_usage_parameter_getter ( ) NEW_LINE if getter is not None : NEW_LINE INDENT return getter NEW_LINE DEDENT DEDENT
update_column ( self , column_name ) : NEW_LINE INDENT if column_name not in self . columns : NEW_LINE INDENT self . columns . add ( column_name ) NEW_LINE DEDENT else : NEW_LINE INDENT self . columns . add ( column_name ) NEW_LINE DEDENT DEDENT
static PolyJDBC getInstance ( ) { if ( instance == null ) { instance = new PolyJDBC ( ) ; } return instance ; }
insert ( String name , Object value ) : NEW_LINE INDENT if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } else { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } }
run ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _run ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _run ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
parse_region_request_string ( self , region_request_string ) : NEW_LINE INDENT if region_request_string is None : NEW_LINE INDENT return None NEW_LINE DEDENT if region_request_string is not None : NEW_LINE INDENT return region_request_string NEW_LINE DEDENT if region_request_string is not None : NEW_LINE INDENT return region_request_string NEW_LINE DEDENT return None NEW_LINE DEDENT

def _get_region_region ( self ) : NEW_LINE INDENT region = self . _get_region ( ) NEW_LINE region = self . _get_region ( ) NEW_LINE if region == null : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return region NEW_LINE DEDENT return region NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def get_hints ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _hints NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _hints NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
render ( self , profile , format ) : NEW_LINE INDENT if not profile : NEW_LINE INDENT return NEW_LINE DEDENT if not format : NEW_LINE INDENT return NEW_LINE DEDENT renderings = self . _render ( profile , format ) NEW_LINE if not renderings : NEW_LINE INDENT return NEW_LINE DEDENT renderings = self . _render ( renderings ) NEW_LINE return renderings NEW_LINE DEDENT
add_renderings ( self , renderings ) : NEW_LINE INDENT if not renderings : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( renderings , list ) : NEW_LINE INDENT renderings = [ renderings ] NEW_LINE DEDENT else : NEW_LINE INDENT renderings = [ renderings ] NEW_LINE DEDENT return renderings NEW_LINE DEDENT
consolidate_limits ( self , limits ) : NEW_LINE INDENT if len ( limits ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( limits ) == 1 : NEW_LINE INDENT return limits [ 0 ] NEW_LINE DEDENT if len ( limits ) == 2 : NEW_LINE INDENT return limits [ 1 ] NEW_LINE DEDENT return limits [ 0 ] NEW_LINE DEDENT
merge_profiles ( self , profiles ) : NEW_LINE INDENT if len ( profiles ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( profiles ) == 1 : NEW_LINE INDENT return profiles [ 0 ] NEW_LINE DEDENT if len ( profiles ) == 2 : NEW_LINE INDENT return profiles [ 1 ] NEW_LINE DEDENT return profiles [ 0 ] NEW_LINE DEDENT
parse_rotation_string ( self , rotation_string ) : NEW_LINE INDENT rotation_string = rotation_string . strip ( ) NEW_LINE rotation_string = rotation_string . strip ( ) NEW_LINE rotation_string = rotation_string . strip ( ) NEW_LINE rotation_string = rotation_string . strip ( ) NEW_LINE return rotation_string NEW_LINE DEDENT
parse_size_request_string ( self , request_string ) : NEW_LINE INDENT if request_string is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( request_string , str ) : NEW_LINE INDENT return request_string NEW_LINE DEDENT elif isinstance ( request_string , unicode ) : NEW_LINE INDENT return request_string NEW_LINE DEDENT else : NEW_LINE INDENT return request_string NEW_LINE DEDENT DEDENT

get_current_android_page_dump_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_current_android_page_dump_file ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def def click__python____python____python____python____python____python____python____python__ def def def def click__python____python____python____python____python____python____python____python__ def def def def def def def click__python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def public static void click__python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def ___python____python____python____python__ def def def _
handlePopBox ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _handlePopBox ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT return self . _handlePopBox ( ) NEW_LINE DEDENT DEDENT
dump ( self ) : NEW_LINE INDENT tmp = tempfile . mkdtemp ( ) NEW_LINE try : NEW_LINE INDENT os . makedirs ( tmp ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT shutil . rmtree ( tmp ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
pull_dump_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT dump_file = open ( filename , ' r ' ) . read ( ) NEW_LINE dump_file . close ( ) NEW_LINE return dump_file NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_crash_log ( self ) : NEW_LINE INDENT crash_log = self . _get_crash_log ( ) NEW_LINE if crash_log : NEW_LINE INDENT return crash_log NEW_LINE DEDENT return crash_log NEW_LINE DEDENT
convert_tabs ( self , tabs ) : NEW_LINE INDENT if isinstance ( tabs , str ) : NEW_LINE INDENT return tabs NEW_LINE DEDENT elif isinstance ( tabs , str ) : NEW_LINE INDENT return tabs NEW_LINE DEDENT elif isinstance ( tabs , list ) : NEW_LINE INDENT return tabs NEW_LINE DEDENT elif isinstance ( tabs , tuple ) : NEW_LINE INDENT return tabs NEW_LINE DEDENT else : NEW_LINE INDENT return tabs NEW_LINE DEDENT DEDENT
def def get_spaces ( self , line ) : NEW_LINE INDENT if len ( line . strip ( line ) > 0 ) { return line . trim ( ) NEW_LINE DEDENT
parse_html_tags ( self , html_tags ) : NEW_LINE INDENT if isinstance ( html_tags , collections . Iterable ) : NEW_LINE INDENT return [ parse_html_tags ( html_tags ) ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ parse_html_tags ( html_tags ) ] NEW_LINE DEDENT DEDENT
convert_markdown_to_html ( self , markdown ) : NEW_LINE INDENT html = self . _convert_markdown_to_html ( markdown ) NEW_LINE if not html : NEW_LINE INDENT return NEW_LINE DEDENT html = self . _convert_markdown_to_html ( html ) NEW_LINE html = self . _convert_markdown_to_html ( html ) NEW_LINE if not html : NEW_LINE INDENT return NEW_LINE DEDENT return html NEW_LINE DEDENT
escape_special_characters ( self , special_characters ) : NEW_LINE INDENT if special_characters : NEW_LINE INDENT return self . escape_special_characters ( special_characters ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . escape_special_characters ( special_characters ) NEW_LINE DEDENT DEDENT
def
clear ( self ) : NEW_LINE INDENT self . _cache . clear ( ) NEW_LINE self . _cache . clear ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
generate_class_code ( self ) : NEW_LINE INDENT class_code = self . _generate_class_code ( ) NEW_LINE if class_code is not None : NEW_LINE INDENT return class_code NEW_LINE DEDENT return class_code NEW_LINE DEDENT
void write ( byte [ ] bvs ) throws IOException { if ( bvs == null ) { throw new IOException ( ) ; } if ( bvs . length == 0 ) { throw new IOException ( ) ; } if ( bvs . length == 1 ) { throw new IOException ( ) ; } if ( bvs . length == 2 ) { throw new IOException ( ) ; } }
append_bits ( self , bit_string ) : NEW_LINE INDENT if len ( bit_string ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( bit_string ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( bit_string ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( bit_string ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( bit_string ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
void load ( InputStream r0 , InputStream r1 ) throws IOException { if ( r0 == null || r1 == null ) { throw new IOException ( ) ; } if ( r0 == null ) { throw new IOException ( ) ; } if ( r1 == null ) { throw new IOException ( ) ; } if ( r0 == null ) { throw new IOException ( ) ; } if ( r1 == null ) { throw new IOException ( ) ; } if ( r0 == null ) { throw new IOException ( ) ; } if ( r1 == null ) { throw new IOException ( ) ; } }
Deserialize ( self , object ) : NEW_LINE INDENT if isinstance ( object , type ) : NEW_LINE INDENT return Deserialize ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return Deserialize ( object ) NEW_LINE DEDENT DEDENT
get_filter_list ( self , filters ) : NEW_LINE INDENT filter_list = [ ] NEW_LINE for filter in filters : NEW_LINE INDENT filter_list . append ( filter ) NEW_LINE DEDENT return filter_list NEW_LINE DEDENT
run ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT if len ( args ) > 1 : NEW_LINE INDENT raise ValueError ( " Too many tests to run . " ) NEW_LINE DEDENT DEDENT

def def get_system_information ( self ) : NEW_LINE INDENT return self . _system_information NEW_LINE DEDENT


def def createAnnotationData ( self ) : NEW
static Annotation [ ] getAnnotation ( Class < ? > clazz ) { Annotation [ ] annotation = null ; if ( clazz != null ) { annotation = clazz . getAnnotation ( Annotation . class ) ; } if ( annotation == null ) { annotation = new Annotation [ ] { } ; } return annotation ; }
findAnnotation ( self , clazz ) : NEW_LINE INDENT return self . findAnnotation ( clazz ) NEW_LINE DEDENT
refactored ( self ) : NEW_LINE INDENT return self . _refactored ( ) NEW_LINE DEDENT
def def default_value ( self ) : NEW_LINE INDENT return self . _get_default_value ( ) NEW_LINE DEDENT
def def from_map ( self , map ) : NEW_LINE INDENT map = { } NEW_LINE for key , value in map . items ( ) : NEW_LINE INDENT map [ key ] = value NEW_LINE DEDENT return map NEW_LINE DEDENT
fromMap ( self , map ) : NEW_LINE INDENT if isinstance ( map , java . util . Map ) : NEW_LINE INDENT return self . fromMap ( map ) NEW_LINE DEDENT return self . fromMap ( map ) NEW_LINE DEDENT
create ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . __class__ ( ) NEW_LINE DEDENT DEDENT
toMap ( self , object ) : NEW_LINE INDENT if isinstance ( object , dict ) : NEW_LINE INDENT object = object . copy ( ) NEW_LINE object . update ( object ) NEW_LINE DEDENT return object NEW_LINE DEDENT
convert ( self , object ) : NEW_LINE INDENT if isinstance ( object , core . TypeType ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return self . _convert ( object ) NEW_LINE DEDENT DEDENT
Map < String , String > getValues ( Annotation annotation ) { Map < String , String > values = new HashMap < String , String > ( ) ; values . put ( annotation . getKey ( ) , annotation . getValue ( ) ) ; values . put ( annotation . getKey ( ) , annotation . getValue ( ) ) ; return values ; }
create_validator ( self ) : NEW_LINE INDENT if self . meta_data is not None : NEW_LINE INDENT self . meta_data = self . meta_data NEW_LINE DEDENT return self NEW_LINE DEDENT
def _get_validators ( self ) : NEW_LINE INDENT return self . _get_validators ( ) . values ( ) NEW_LINE DEDENT
get_validator ( self ) : NEW_LINE INDENT validator = self . registry . get ( ' validator ' ) NEW_LINE if validator is not None : NEW_LINE INDENT return validator NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
validate ( validator ) : NEW_LINE INDENT if isinstance ( validator , BeanWrapperImpl ) : NEW_LINE INDENT return validator . validate ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return validator NEW_LINE DEDENT DEDENT
void removeProperty ( String propertyName ) { if ( propertyName == null || propertyName . length ( ) == 0 ) { throw new IllegalArgumentException ( " Property name cannot be null or empty . " ) ; } if ( propertyName . length ( ) == 0 ) { throw new IllegalArgumentException ( " Property name cannot be empty . " ) ; } }
utc_time ( self ) : NEW_LINE INDENT utc_time = datetime . datetime . utcfromtimestamp ( self . utc_time ) NEW_LINE if self . utc_time is None : NEW_LINE INDENT return utc_time NEW_LINE DEDENT return utc_time NEW_LINE DEDENT
get_cache_size ( self ) : NEW_LINE INDENT cache_size = self . cache . size ( ) NEW_LINE if cache_size is None : NEW_LINE INDENT return self . cache . size ( ) NEW_LINE DEDENT return cache_size NEW_LINE DEDENT
hash ( self ) : NEW_LINE INDENT return self . _hash ( ) NEW_LINE DEDENT

def def Op Opens the database . Opens ( self ) : NEW_LINE INDENT try : NEW_LINE def op ( self ) : NEW_LINE INDENT return self . __class__ ( self . __class__ . __class__ . __name__ , self . __class__ . __class__ . __name__ , self . __class__ . __name__ , self . __class__ . __name__ , self . __class__ . __name__ ) NEW_LINE DEDENT
put ( self , key , value ) : NEW_LINE INDENT if not self . is_batch_mode ( ) : NEW_LINE INDENT self . put ( key , value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . put ( key , value ) NEW_LINE DEDENT DEDENT
remove_keys ( self , keys ) : NEW_LINE INDENT if keys is None : NEW_LINE INDENT return NEW_LINE DEDENT for key in keys : NEW_LINE INDENT if key not in self . keys : NEW_LINE INDENT self . keys . remove ( key ) NEW_LINE DEDENT DEDENT DEDENT
search_location ( self , location ) : NEW_LINE INDENT if not location : NEW_LINE INDENT return None NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return None NEW_LINE DEDENT location = location . strip ( ) NEW_LINE if not location : NEW_LINE INDENT return None NEW_LINE DEDENT return location NEW_LINE DEDENT
sort_keys ( self , keys ) : NEW_LINE INDENT if not isinstance ( keys , list ) : NEW_LINE INDENT keys = [ keys ] NEW_LINE DEDENT for key in keys : NEW_LINE INDENT if key not in self . _keys : NEW_LINE INDENT self . _keys . append ( key ) NEW_LINE DEDENT DEDENT return self . _keys NEW_LINE DEDENT
close_database ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
reduce_int_arrays ( self ) : NEW_LINE INDENT return self . reduce_int_arrays ( ) NEW_LINE DEDENT
_call_site ( self ) : NEW_LINE INDENT if self . _call_site is not None : NEW_LINE INDENT return self . _call_site NEW_LINE DEDENT else : NEW_LINE INDENT return self . _call_site NEW_LINE DEDENT DEDENT
calculate_variance ( self ) : NEW_LINE INDENT return self . _variance NEW_LINE DEDENT
def def _get_loss ( self ) : NEW__python__ def def def _ public public public public static final public static final void set_loss ( final double value ) { if ( value == def def def def _ def def def _ def _ public static public static final public static final public static final public static final void setLoss def def def def _
invoke_method ( self , Object arg ) : NEW_LINE INDENT if isinstance ( arg , list ) : NEW_LINE INDENT return self . invoke_method ( arg ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . invoke_method ( arg ) NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; } }
generate_work_dir ( self ) : NEW_LINE INDENT if self . _work_dir is None : NEW_LINE INDENT self . _work_dir = tempfile . mkdtemp ( ) NEW_LINE DEDENT return self . _work_dir NEW_LINE DEDENT
match_expression ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , collections . Iterable ) : NEW_LINE INDENT return expression NEW_LINE DEDENT return expression NEW_LINE DEDENT
convert_values ( self , values ) : NEW_LINE INDENT if isinstance ( values , basestring ) : NEW_LINE INDENT return values NEW_LINE DEDENT elif isinstance ( values , tuple ) : NEW_LINE INDENT return values NEW_LINE DEDENT else : NEW_LINE INDENT return values NEW_LINE DEDENT DEDENT
createCriteria ( self ) : NEW_LINE INDENT criteria = { } NEW_LINE criteria = { } NEW_LINE criteria . put ( " name " , self . name ) NEW_LINE return criteria NEW_LINE DEDENT
def convert ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return json . loads ( json . dumps ( self . _json ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _json NEW_LINE DEDENT DEDENT
add_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return self . add_array ( array ) NEW_LINE DEDENT return self . add_array ( array ) NEW_LINE DEDENT
max ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return max ( self , array ) NEW_LINE DEDENT DEDENT
sort ( self ) : NEW_LINE INDENT if self . sort_order is not None : NEW_LINE INDENT self . sort_order = self . sort_order NEW_LINE DEDENT return self NEW_LINE DEDENT
sort_last ( self ) : NEW_LINE INDENT if self . sort_last : NEW_LINE INDENT return self . sort_last NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def get_last_item ( self , list ) : NEW_LINE INDENT if len ( list ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT DEDENT
least ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
min ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
min ( self , object , property ) : NEW_LINE INDENT return self . _min ( object , property ) NEW_LINE DEDENT
process_maps ( self , maps ) : NEW_LINE INDENT if isinstance ( maps , dict ) : NEW_LINE INDENT return self . process_maps ( maps ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_maps ( maps ) NEW_LINE DEDENT DEDENT
process_maps ( self , maps ) : NEW_LINE INDENT if isinstance ( maps , dict ) : NEW_LINE INDENT return self . process_maps ( maps ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_maps ( maps ) NEW_LINE DEDENT DEDENT
fromMap ( cls , map ) : NEW_LINE INDENT if isinstance ( map , cls ) : NEW_LINE INDENT return cls . fromMap ( map ) NEW_LINE DEDENT return cls . fromMap ( map ) NEW_LINE DEDENT
get_value ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self [ key ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self [ key ] NEW_LINE DEDENT DEDENT
get_tool_tip ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _tool_tip NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def encode ( byte [ ] bytes ) : NEW_LINE INDENT if len ( bytes ) == 1 : NEW_LINE INDENT return bytes [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return bytes [ 0 ] NEW_LINE DEDENT DEDENT
worker ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _worker ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
process ( self , queue ) : NEW_LINE INDENT self . queue = queue NEW_LINE if self . queue . size ( ) == 0 : NEW_LINE INDENT self . queue . clear ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
put_character_at_index ( self , index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . put_character_at_index ( index ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . put_character_at_index ( index ) NEW_LINE DEDENT DEDENT
def def get_slice ( self , slice ) : NEW_LINE INDENT return self . _slice ( slice ) NEW_LINE DEDENT
chars_in_another_string ( self , chars ) : NEW_LINE INDENT if isinstance ( chars , basestring ) : NEW_LINE INDENT return chars NEW_LINE DEDENT elif isinstance ( chars , str ) : NEW_LINE INDENT return chars NEW_LINE DEDENT elif isinstance ( chars , unicode ) : NEW_LINE INDENT return chars NEW_LINE DEDENT else : NEW_LINE INDENT return chars NEW_LINE DEDENT DEDENT
add_char ( self , char ) : NEW_LINE INDENT if isinstance ( char , str ) : NEW_LINE INDENT self . char = char NEW_LINE DEDENT else : NEW_LINE INDENT self . char = char NEW_LINE DEDENT return self . char NEW_LINE DEDENT
def _convert_strings_to_strings ( self ) : NEW_LINE INDENT return self . _convert_to_strings ( self . _convert_to_strings ( ) ) NEW_LINE DEDENT
static String trim ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } return string . trim ( ) ; }
split_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT else : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT DEDENT
split_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
split ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT DEDENT
convert_chars ( chars ) : NEW_LINE INDENT if isinstance ( chars , str ) : NEW_LINE INDENT return chars NEW_LINE DEDENT elif isinstance ( chars , unicode ) : NEW_LINE INDENT return chars NEW_LINE DEDENT return chars NEW_LINE DEDENT
camelCase ( self , camelCase ) : NEW_LINE INDENT if camelCase : NEW_LINE INDENT return camelCase NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
is_inside ( self , string ) : NEW_LINE INDENT if isinstance ( string , basestring ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
print_number ( self , number ) : NEW_LINE INDENT if number is None : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' . join ( [ str ( x ) for x in number ] ) NEW_LINE DEDENT DEDENT
static Sort create ( List < Sort > sorts ) { Sort sort = new Sort ( ) ; sort . addAll ( sorts ) ; sort . addAll ( Arrays . asList ( sorts ) ) ; return sort ; }
sort ( self ) : NEW_LINE INDENT if not self . fields : NEW_LINE INDENT self . fields = [ ] NEW_LINE DEDENT return self . fields NEW_LINE DEDENT
__init__ ( self , comparator ) : NEW_LINE INDENT self . comparator = comparator NEW_LINE DEDENT
create_child_comparators ( self , child_list ) : NEW_LINE INDENT if isinstance ( child_list , list ) : NEW_LINE INDENT children = child_list NEW_LINE DEDENT else : NEW_LINE INDENT children = [ ] NEW_LINE DEDENT for child in children : NEW_LINE INDENT children . append ( create_child_comparator ( child ) ) NEW_LINE DEDENT return children NEW_LINE DEDENT
def def _get_universal_methods ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _universal_methods NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
check_two_values ( self , values ) : NEW_LINE INDENT if len ( values ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
boolean equals ( Object [ ] arrays ) { if ( arrays == null ) { return false ; } if ( arrays . length == 0 ) { return true ; } if ( arrays . length == 1 ) { return true ; } return false ; }
overflow_protection ( self ) : NEW_LINE INDENT if self . overflow_protection : NEW_LINE INDENT return self . overflow_protection NEW_LINE DEDENT return self . overflow_protection NEW_LINE DEDENT
nearest_power ( self , power ) : NEW_LINE INDENT if power == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif power == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif power == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
sort ( self ) : NEW_LINE INDENT if not self . isSorted ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . isSorted ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
sort ( self ) : NEW_LINE INDENT self . _sort ( ) NEW_LINE self . _sort ( ) NEW_LINE DEDENT
def def def def def def def Inject public static final public static Map < Map < String getFieldName ( final Map < String key , Object > map , Object value ) { return new HashMap < String , Object > ( ) { public Map < String , Object > map = new HashMap < String , Object > ( ) { @ Override public Map < String , Object > map = new HashMap < String , Object > ( ) { return new HashMap < String , Object > ( ) ; } public Map < String , Object > map = new HashMap < String , Object > ( ) { @ Override public Map < String , Object > map = new HashMap < String , Object > ( ) { return new HashMap < String , Object > ( ) ; } } }
convert_object ( self , object ) : NEW_LINE INDENT if isinstance ( object , list ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , dict ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
load_keys ( self , keys ) : NEW_LINE INDENT if not keys : NEW_LINE INDENT return NEW_LINE DEDENT keys = [ ] NEW_LINE for key in keys : NEW_LINE INDENT keys . append ( key ) NEW_LINE DEDENT return keys NEW_LINE DEDENT
clone ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT for item in list : NEW_LINE INDENT self . _clone ( item ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT self . _clone ( list ) NEW_LINE DEDENT DEDENT
check_string ( self , field ) : NEW_LINE INDENT if isinstance ( field , basestring ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( field , basestring ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
static boolean isString ( Class < ? > clazz ) { return clazz . getName ( ) . equals ( " string " ) ; }
static boolean hasField ( Class < ? > class , String field ) { return hasField ( class , field ) ; }
default_sort ( self ) : NEW_LINE INDENT return self . _default_sort NEW_LINE DEDENT
def def get_first_sortable_fields ( self ) : NEW_LINE INDENT sortable_fields = [ ] NEW_LINE sortable_fields = [ ] NEW_LINE for field in self . sortable_fields : NEW_LINE INDENT sortable_fields . append ( field ) NEW_LINE sortable_fields . append ( sortable_fields [ 0 ] ) NEW_LINE DEDENT return sortable_fields NEW_LINE DEDENT
def def sort_cache_by_type ( self ) : NEW_LINE INDENT return self . cache_by_type . get ( self . cache_type ) NEW_LINE DEDENT
compare_time ( self , time ) : NEW_LINE INDENT if not time : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
sort ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , tuple ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
sort_list ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , tuple ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
sort_map_entries ( self ) : NEW_LINE INDENT self . sort_map_entries ( ) NEW_LINE return self . sort_map_entries NEW_LINE DEDENT
sort_map_values ( self ) : NEW_LINE INDENT self . sort_map_values ( ) NEW_LINE return self NEW_LINE DEDENT
sort_map_keys ( self , keys ) : NEW_LINE INDENT for key in keys : NEW_LINE INDENT if key not in self . keys : NEW_LINE INDENT self . keys . add ( key ) NEW_LINE DEDENT DEDENT DEDENT
sort_array ( self , array ) : NEW_LINE INDENT if isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , list ) : NEW_LINE INDENT return array NEW_LINE DEDENT elif isinstance ( array , dict ) : NEW_LINE INDENT return array NEW_LINE DEDENT else : NEW_LINE INDENT return array NEW_LINE DEDENT DEDENT
create_comparator ( self ) : NEW_LINE INDENT comparator = self . comparator NEW_LINE if comparator is None : NEW_LINE INDENT comparator = self . comparator NEW_LINE DEDENT return comparator NEW_LINE DEDENT
create_comparator ( self ) : NEW_LINE INDENT comparator = self . comparator NEW_LINE if comparator is None : NEW_LINE INDENT return None NEW_LINE DEDENT return comparator NEW_LINE DEDENT
get_value ( self ) : NEW_LINE INDENT return self . cache . get ( self . key ) NEW_LINE DEDENT
get_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
def def overflow ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _overflow ( ) NEW_LINE DEDENT except OverflowError : NEW_LINE INDENT return self . _overflow ( ) NEW_LINE DEDENT DEDENT
def _evict ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT size = self . _size NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT size = self . _size NEW_LINE DEDENT if size > 0 : NEW_LINE INDENT self . _evict ( ) NEW_LINE DEDENT DEDENT

def def get_http_post_handler ( self ) : NEW_LINE INDENT return self . _http_post_handler . get_http_post_handler ( ) NEW_LINE DEDENT
stop ( self ) : NEW_LINE INDENT if self . interrupted : NEW_LINE INDENT self . interrupted = True NEW_LINE DEDENT else : NEW_LINE INDENT self . interrupted = False NEW_LINE DEDENT DEDENT
main ( self ) : NEW_LINE INDENT if self . batch_writer : NEW_LINE INDENT self . batch_writer . run ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . batch_writer . run ( ) NEW_LINE DEDENT DEDENT

def def public public public static void start ( ) throws IOException { if ( health
def start ( self ) : NEW_LINE INDENT self . writer . start ( ) NEW_LINE self . writer . flush ( ) NEW_LINE DEDENT
get_item_by_key ( self , key ) : NEW_LINE INDENT item = self . get_item_by_key ( key ) NEW_LINE if item : NEW_LINE INDENT return item NEW_LINE DEDENT return None NEW_LINE DEDENT
main_criteria_plan ( self ) : NEW_LINE INDENT name = self . name NEW_LINE if name is not None : NEW_LINE INDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' _ ' , ' ' ) NEW_LINE DEDENT return name NEW_LINE DEDENT
filter_group ( self , group ) : NEW_LINE INDENT if not self . filter_group ( group ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . filter_group ( group ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . filter_group ( group ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
static void recieveTickFromClock ( final Clock clock ) { if ( clock == null ) { return ; } final long tick = clock . tick ( ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick ) ; if ( tick < 0 ) { return ; } final long tick = clock . tick ( tick
flush ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _flush ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _flush ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
close_log_stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . log_stream . close ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write ( self , data ) : NEW_LINE INDENT self . logger . debug ( " Writes % s " , data ) NEW_LINE self . logger . debug ( " Writes % s " , data ) NEW_LINE DEDENT
write_actual_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_actual_data ( data ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT self . _write_actual_data ( data ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void put ( String key , String value ) { if ( key == null ) { throw new IllegalArgumentException ( " key is null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value is null " ) ; } if ( key == null ) { throw new IllegalArgumentException ( " key is null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value is null " ) ; } if ( key == null ) { throw new IllegalArgumentException ( " key is null " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " value is null " ) ; } }
byte [ ] getBytes ( String key ) { if ( key == null ) { throw new IllegalArgumentException ( " key is null " ) ; } if ( key . length ( ) == 0 ) { throw new IllegalArgumentException ( " key is empty " ) ; } if ( key . length ( ) == 0 ) { throw new IllegalArgumentException ( " key is empty " ) ; } if ( key . length ( ) == 0 ) { throw new IllegalArgumentException ( " key is empty " ) ; } return new byte [ 0 ] ; }
read_meta_data ( self , properties_file ) : NEW_LINE INDENT try : NEW_LINE INDENT meta_data = json . loads ( properties_file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT meta_data = { } NEW_LINE DEDENT return meta_data NEW_LINE DEDENT
extract_meta_data ( self , data ) : NEW_LINE INDENT if isinstance ( data , str ) : NEW_LINE INDENT data = data . decode ( ' utf - 8' ) NEW_LINE DEDENT return data NEW_LINE DEDENT
meta - data from annotation .
extract_base_validator_meta_data ( self ) : NEW_LINE INDENT data = self . get_base_validator_meta_data ( ) NEW_LINE if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
extract_meta_data ( self , annotationData ) : NEW_LINE INDENT if self . _meta_data is not None : NEW_LINE INDENT return self . _meta_data NEW_LINE DEDENT if self . _meta_data is None : NEW_LINE INDENT return self . _meta_data NEW_LINE DEDENT return self . _meta_data NEW_LINE DEDENT
ValidatorMetaData convertAnnotationData ( AnnotationData annotationData ) { if ( annotationData != null ) { return new ValidatorMetaData ( annotationData ) ; } return new ValidatorMetaData ( ) ; }
split ( self , string ) : NEW_LINE INDENT parts = [ ] NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT parts . append ( string [ i ] ) NEW_LINE DEDENT return parts NEW_LINE DEDENT
split ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT else : NEW_LINE INDENT return string . split ( " " ) NEW_LINE DEDENT DEDENT
split ( self , string , delimiters = None ) : NEW_LINE INDENT if delimiters is None : NEW_LINE INDENT delimiters = [ ] NEW_LINE DEDENT if delimiters is None : NEW_LINE INDENT delimiters = [ ] NEW_LINE DEDENT for delimiter in delimiters : NEW_LINE INDENT if delimiter in delimiters : NEW_LINE INDENT delimiters . append ( delimiter ) NEW_LINE DEDENT else : NEW_LINE INDENT delimiters . append ( delimiter ) NEW_LINE DEDENT DEDENT return delimiters NEW_LINE DEDENT
remove_chars_from_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
split ( self , string , delimiters = None ) : NEW_LINE INDENT if delimiters is None : NEW_LINE INDENT delimiters = [ ] NEW_LINE DEDENT if len ( delimiters ) == 0 : NEW_LINE INDENT delimiters = [ ] NEW_LINE DEDENT if len ( delimiters ) == 1 : NEW_LINE INDENT delimiters . append ( delimiters [ 0 ] ) NEW_LINE DEDENT if len ( delimiters ) == 2 : NEW_LINE INDENT delimiters . append ( delimiters [ 1 ] ) NEW_LINE DEDENT if len ( delimiters ) == 3 : NEW_LINE INDENT delimiters . append ( delimiters [ 2 ] ) NEW_LINE DEDENT if len ( delimiters ) == 4 : NEW_LINE INDENT delimiters . append ( delimiters [ 3 ] ) NEW_LINE DEDENT return " " . join ( delimiters ) NEW_LINE DEDENT
parse_double ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_double ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_double ( ) NEW_LINE DEDENT DEDENT
parse_int_within_range ( self , range ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_int_within_range ( range ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_range ( self , range ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_range ( range ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_range ( range ) NEW_LINE DEDENT DEDENT
walk ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return self . walk ( list ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . walk ( list ) NEW_LINE DEDENT DEDENT
static Map < String , String > getFields ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; Map < String , String > fields = new HashMap < String , String > ( ) ; fields . putAll ( map ) ; return map ; }
loads_nested_properties ( self , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT return { } NEW_LINE DEDENT for property in properties : NEW_LINE INDENT properties [ property . name ] = property . value NEW_LINE DEDENT DEDENT

set_static_value ( self , value ) : NEW_LINE INDENT self . static_value = value NEW_LINE DEDENT
walk_fanout ( self ) : NEW_LINE INDENT return self . _walk_fanout ( ) NEW_LINE DEDENT
static void forgive ( final String path ) { if ( path == null ) { throw new IllegalArgumentException ( " path is null " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " path is null " ) ; } }
def def get_int_property ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties [ ' int ' ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _properties [ ' int ' ] NEW_LINE DEDENT DEDENT
init ( self , detailMessage , summaryMessage ) : NEW_LINE INDENT self . detailMessage = detailMessage NEW_LINE self . summaryMessage = summaryMessage NEW_LINE return self NEW_LINE DEDENT

create_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _message = message NEW_LINE DEDENT except TypeError : NEW_LINE INDENT self . _message = message NEW_LINE DEDENT return self NEW_LINE DEDENT
def def _convert_keys_to_values ( self , keys , values ) : NEW_LINE INDENT if isinstance ( keys , dict ) : NEW_LINE INDENT for key in keys : NEW_LINE INDENT if isinstance ( values , dict ) : NEW_LINE INDENT for value in values : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT return value NEW_LINE
get_subject ( self ) : NEW_LINE INDENT subject = self . subject NEW_LINE if subject is None : NEW_LINE INDENT return None NEW_LINE DEDENT return subject NEW_LINE DEDENT
a text representation of a JSON data structure .
send_request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _send_request ( request ) NEW_LINE DEDENT DEDENT
delete ( self , database ) : NEW_LINE INDENT self . _db . delete ( database ) NEW_LINE self . _db . commit ( ) NEW_LINE DEDENT
create_database ( self , database ) : NEW_LINE INDENT if not database : NEW_LINE INDENT return NEW_LINE DEDENT database = self . _create_database ( database ) NEW_LINE if not database : NEW_LINE INDENT return NEW_LINE DEDENT self . _db = database NEW_LINE DEDENT
def def request_uuid ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _request ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _request ( ) NEW_LINE DEDENT DEDENT
static List < String > listResources ( ) { List < String > list = new ArrayList < String > ( ) ; for ( String resource : getResources ( ) ) { List < String > list = new ArrayList < String > ( ) ; list . add ( resource ) ; } return list ; }
static void triggerReplicationRequest ( ReplicationRequest request ) { if ( request != null ) { if ( request . isReplicationRequest ( ) ) { request . setReplicationRequest ( request ) ; } else { request . setReplicationRequest ( request ) ; } } }
def scalar_values ( self ) : NEW_LINE INDENT return self . _get_scalar_values ( ) NEW_LINE DEDENT
reverse ( self , direction ) : NEW_LINE INDENT if direction is None : NEW_LINE INDENT return self . reverse ( ) NEW_LINE DEDENT return self . reverse ( direction ) NEW_LINE DEDENT
static void synchronizeDesignDocuments ( ) { for ( int i = 0 ; i < designDocuments . size ( ) ; i ++ ) { for ( int i = 0 ; i < designDocuments . size ( ) ; i ++ ) { for ( int i = 0 ; i < designDocuments . size ( ) ; i ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { for ( int j = 0 ; j < designDocuments . size ( ) ; j ++ ) { if ( j < designDocuments . size ( )
get_design_document ( self ) : NEW_LINE INDENT design_document = self . get_design_document ( ) NEW_LINE if design_document : NEW_LINE INDENT return design_document NEW_LINE DEDENT return None NEW_LINE DEDENT
get_design_documents ( self ) : NEW_LINE INDENT design_documents = [ ] NEW_LINE for design in self . design_documents : NEW_LINE INDENT design_documents . append ( design ) NEW_LINE DEDENT return design_documents NEW_LINE DEDENT
get_design_document ( self ) : NEW_LINE INDENT design_document = self . get_design_document ( ) NEW_LINE if design_document : NEW_LINE INDENT return design_document NEW_LINE DEDENT DEDENT
add_document ( self , document ) : NEW_LINE INDENT if self . _document is None : NEW_LINE INDENT self . _document = document NEW_LINE DEDENT else : NEW_LINE INDENT self . _document = self . _document NEW_LINE DEDENT DEDENT
find_document ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_document ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static List < Document > findAll ( ) { List < Document > documents = new ArrayList < Document > ( ) ; for ( int i = 0 ; i < documents . size ( ) ; i ++ ) { Document doc = documents . get ( i ) ; if ( doc != null ) { documents . add ( doc ) ; } } return documents ; }
remove ( self , replicator ) : NEW_LINE INDENT if self . replicator : NEW_LINE INDENT self . replicator . remove ( replicator ) NEW_LINE self . replicator = None NEW_LINE DEDENT DEDENT

find_documents ( self ) : NEW_LINE INDENT return self . _find_documents ( ) NEW_LINE DEDENT
exists ( self , document ) : NEW_LINE INDENT if not self . exists ( document ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
bulk_create ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request . method = ' POST ' NEW_LINE request . path = self . path NEW_LINE request . params = self . params NEW_LINE request . params = self . params NEW_LINE return request NEW_LINE DEDENT
save ( self ) : NEW_LINE INDENT self . _save ( ) NEW_LINE self . _save ( ) NEW_LINE DEDENT
save_attachment ( self , attachment ) : NEW_LINE INDENT if attachment is not None : NEW_LINE INDENT attachment . save ( ) NEW_LINE DEDENT return attachment NEW_LINE DEDENT
def def post ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request . method = ' POST ' NEW_LINE request . method = ' POST ' NEW_LINE request . headers = { } NEW_LINE request . headers [ ' Content - Type ' ] = ' application / x - www - form - urlencoded ' NEW_LINE request . method = ' POST ' NEW_LINE request . headers [ ' Content - Type ' ] = ' application / x - www - form - urlencoded ' NEW_LINE request . method = ' POST ' NEW_LINE request . headers [ ' Content - Type ' ] = ' application / x - www - form - urlencoded ' NEW_LINE return request NEW_LINE DEDENT
delete ( self ) : NEW_LINE INDENT request = self . request NEW_LINE request . method = ' DELETE ' NEW_LINE request . url = self . url NEW_LINE request . headers = self . headers NEW_LINE request . body = self . body NEW_LINE request . headers = self . headers NEW_LINE request . body = self . body NEW_LINE return request NEW_LINE DEDENT
void validate ( ) throws IOException { if ( status != HttpStatus . SC_OK ) { throw new IOException ( status ) ; } if ( status != HttpStatus . SC_OK ) { throw new IOException ( status ) ; } }
def def def def request ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def set___python____python____python____python____python__ def def def def def ___python____python____python__ def def def def _set__python____python____python____python____python__ def def def def def def _set def _get_request def _get_request def _get_request_request def _get_request_request_request ( self ) : NEW def _get_request ( self ) : NEW_LINE def _get_request_request_entity ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_request ( ) NEW_LINE def _get_request ( self ) : NEW_LINE INDENT return self . _get_request ( self .
add_in_line_attachment ( self ) : NEW_LINE INDENT if self . in_line_attachment : NEW_LINE INDENT self . in_line_attachment . append ( self . in_line_attachment ) NEW_LINE DEDENT DEDENT
def def change_notifications ( self ) : NEW_LINE INDENT notifications = self . get_notifications ( ) NEW_LINE if notifications : NEW_LINE INDENT for notification in notifications : NEW_LINE INDENT notification . update ( ) NEW_LINE DEDENT DEDENT return notifications NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
convert_double_to_text_description ( self , value ) : NEW_LINE INDENT if isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
void releaseLocks ( ) throws IOException { synchronized ( locks ) { if ( locks . size ( ) == 0 ) { locks . clear ( ) ; } else { locks . put ( locks . size ( ) - 1 , locks . size ( ) ) ; } } }
write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) NEW_LINE self . getOutputStream ( ) . flush ( ) ; self . getOutputStream ( )
def def merge ( self ) : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT

get_namespace_id ( self , namespace_name ) : NEW_LINE INDENT namespace_id = None NEW_LINE if namespace_name is not None : NEW_LINE INDENT namespace_id = namespace_name NEW_LINE DEDENT if namespace_id is not None : NEW_LINE INDENT return namespace_id NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_query_request ( self ) : NEW_LINE INDENT return self . _request . query_request ( ) . query_request ( ) NEW_LINE DEDENT
def def def def def def def def__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def__python____python____python____python__ def def def def def def def ___python____python____python____python__ def def def def def__python____python____python____python__ def def def def def def__python____python____python____python____python__ def def def def def def def__python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def__python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def def def _
the verb we should apply based on the HTTP method being requested .
get_subject_access_review ( self ) : NEW_LINE INDENT return self . subject_access_review NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_exception ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
initialize ( self , service ) : NEW_LINE INDENT self . service = service NEW_LINE self . service . initialize ( ) NEW_LINE DEDENT
_remove_unused_method ( self , method ) : NEW_LINE INDENT if not self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if not self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_used : NEW_LINE INDENT return NEW_LINE DEDENT if self . is
static List < BucketPoint > bucketPoints ( long start , long end ) { List < BucketPoint > bucketPoints = new ArrayList < BucketPoint > ( ) ; bucketPoints . add ( new BucketPoint ( start , end ) ) ; bucketPoints . add ( new BucketPoint ( end , start ) ) ; return bucketPoints ; }
def def set_status_code ( self , response ) : NEW_LINE INDENT try : NEW_LINE INDENT status = response . getStatus ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT status = response . getStatus ( ) NEW_LINE DEDENT return status NEW_LINE DEDENT
public static List < String > get ( ) throws IOException { List < String > keys = new ArrayList < > ( ) ; for ( int i = 0 ; i < keys . size ( ) ; i ++ ) { keys . add ( keys . get ( i ) ) ; } return new ArrayList < > ( keys ) ; }
step ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _step ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
send_msg ( msg ) : NEW_LINE INDENT try : NEW_LINE INDENT msg . send ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
sene_one_way_msg ( self , msg ) : NEW_LINE INDENT msg = msg . copy ( ) NEW_LINE msg . update ( ) NEW_LINE msg . update ( ) NEW_LINE msg . update ( ) NEW_LINE return msg NEW_LINE DEDENT
send_delay_msg ( self , msg ) : NEW_LINE INDENT try : NEW_LINE INDENT self . send_message ( msg ) NEW_LINE DEDENT except : NEW_LINE INDENT self . send_message ( msg ) NEW_LINE DEDENT DEDENT
def test ( ) : def test ( self ) : NEW_LINE INDENT for ( int i = 0 , count = 0 ; i < KEYS . length ; i ++ ) { if ( i < KEYS . length : NEW_LINE INDENT for ( int i = 0 ; i < KEYS . length ; i ++ ) { if ( i < KEYS . length - 1 ) { return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT return NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_file ( self , file ) : NEW_LINE INDENT if not file : NEW_LINE INDENT return NEW_LINE DEDENT file = zipfile . ZipFile ( file ) NEW_LINE try : NEW_LINE INDENT file . write ( file . read ( ) ) NEW_LINE DEDENT except zipfile . ZipException : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
replace_contents ( self , file , text ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _replace_contents ( file , text ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _replace_contents ( file , text ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def generate_product ( self ) : NEW_LINE INDENT for piece in self . pieces : NEW_LINE INDENT product = self . get_product ( piece ) NEW_LINE if product is not None : NEW_LINE INDENT return product NEW_LINE DEDENT DEDENT return product NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def fetch_content ( self ) : NEW_LINE INDENT content = self . _fetch_content ( ) NEW_LINE if not content : NEW_LINE INDENT return None NEW_LINE DEDENT return content NEW_LINE DEDENT

def generate_file ( filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( filename , ' w ' ) . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_new_directory ( self , parent_directory ) : NEW_LINE INDENT if parent_directory is None : NEW_LINE INDENT return NEW_LINE DEDENT new_directory = os . path . join ( parent_directory , parent_directory ) NEW_LINE if not os . path . isdir ( new_directory ) : NEW_LINE INDENT os . makedirs ( new_directory ) NEW_LINE DEDENT DEDENT
def def build ( self ) : NEW_LINE INDENT return self . builder . build ( ) NEW_LINE DEDENT

static void suppressRenderer ( final RendererGroup group ) { if ( group == null ) { throw new IllegalArgumentException ( " No renderer group specified . " ) ; } else { throw new IllegalArgumentException ( " No renderer specified . " ) ; } }
prepare_template ( self , template ) : NEW_LINE INDENT self . template = template NEW_LINE self . variables = { } NEW_LINE self . variables . clear ( ) NEW_LINE self . variables . putAll ( self . variables ) NEW_LINE DEDENT
add_domain_object ( self , domain_object ) : NEW_LINE INDENT self . domain_object = domain_object NEW_LINE DEDENT
set_property ( self , property , value ) : NEW_LINE INDENT self . _property = property NEW_LINE self . _value = value NEW_LINE DEDENT

create ( self , directory ) : NEW_LINE INDENT if not self . name : NEW_LINE INDENT return None NEW_LINE DEDENT self . name = self . name . replace ( ' _ ' , ' - ' ) NEW_LINE self . name = self . name . replace ( ' _ ' , ' - ' ) NEW_LINE DEDENT
static byte [ ] copy ( InputStream inputStream , OutputStream outputStream ) throws IOException { byte [ ] bytes = IOUtils . toByteArray ( inputStream ) ; if ( bytes != null ) { outputStream . write ( bytes ) ; outputStream . flush ( ) ; } return bytes ; }
parse_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_file ( file ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse ( self , reader ) : NEW_LINE INDENT if isinstance ( reader , str ) : NEW_LINE INDENT return reader . read ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return reader . read ( ) NEW_LINE DEDENT DEDENT
get_elements_under_parent ( self , parent ) : NEW_LINE INDENT if parent is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_nodes ( self , parent ) : NEW_LINE INDENT nodes = [ ] NEW_LINE for node in self . nodes : NEW_LINE INDENT nodes . append ( node ) NEW_LINE DEDENT return nodes NEW_LINE DEDENT
def first_child_element ( self , name ) : NEW_LINE INDENT return self . _first_child_element ( name ) NEW_LINE DEDENT
def get_elements_by_tag ( self , tag ) : NEW_LINE INDENT return self . _elements_by_tag ( tag ) NEW_LINE DEDENT
validate_xml_document ( self ) : NEW_LINE INDENT if self . _xml_document is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . _xml_document is not None : NEW_LINE INDENT self . _xml_document = self . _xml_document NEW_LINE DEDENT return NEW_LINE DEDENT
static SIPArchive fromDirectory ( Directory tree ) { if ( tree . isDirectory ( ) ) { return new SIPArchive ( tree ) ; } else { return new SIPArchive ( tree ) ; } }
def def def set_content ( self , content ) : NEW_LINE INDENT self . content = content NEW_LINE DEDENT def set_content ( self , content ) : NEW_LINE INDENT self . content = content NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
process_zip ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . extractall ( ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE zip = zipfile . ZipFile ( self . filename ) NEW_LINE zip . close ( ) NEW_LINE DEDENT except zipfile .
transform Chinese characters ( self , characters ) : NEW_LINE INDENT if not isinstance ( characters , unicode ) : NEW_LINE INDENT characters = [ characters ] NEW_LINE DEDENT return characters NEW_LINE DEDENT
setSignature ( self , signature , server ) : NEW_LINE INDENT self . signature = signature NEW_LINE self . server = server NEW_LINE DEDENT
remove_white_space ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _remove_white_space ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
sign ( self , request ) : NEW_LINE INDENT if request . method == ' POST ' : NEW_LINE INDENT return self . sign ( request ) NEW_LINE DEDENT elif request . method == ' GET ' : NEW_LINE INDENT return self . sign ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . sign ( request ) NEW_LINE DEDENT DEDENT
def def set_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . recorder . set_data ( data ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . recorder . set_data ( data ) NEW_LINE DEDENT DEDENT
def def multi_upload ( self ) : NEW_LINE INDENT if self . _multi_upload : NEW_LINE INDENT return self . _multi_upload ( ) NEW_LINE DEDENT return self . _multi_upload ( ) NEW_LINE DEDENT
toggle_favorite_action ( self ) : NEW_LINE INDENT if self . favorite_action is not None : NEW_LINE INDENT self . favorite_action . setChecked ( self . favorite_action . isChecked ( ) ) NEW_LINE DEDENT DEDENT
set_state ( self , state ) : NEW_LINE INDENT if self . state != state : NEW_LINE INDENT self . state = state NEW_LINE DEDENT else : NEW_LINE INDENT self . state = state NEW_LINE DEDENT DEDENT
static boolean isExpired ( final SSPToken token ) { if ( token == null ) { return false ; } if ( token . isExpired ( ) ) { return true ; } return false ; }
get_notification_id ( self , id ) : NEW_LINE INDENT notification_id = self . get_notification_id ( id ) NEW_LINE if notification_id : NEW_LINE INDENT return notification_id NEW_LINE DEDENT return None NEW_LINE DEDENT
get_addressees ( self ) : NEW_LINE INDENT addressees = self . get_addressees ( ) NEW_LINE if addressees : NEW_LINE INDENT return addressees NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_addressee ( self ) : NEW_LINE INDENT addressee = self . get_addressee ( ) NEW_LINE if addressee : NEW_LINE INDENT return addressee NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_events ( self ) : NEW_LINE INDENT events = [ ] NEW_LINE for event in self . events : NEW_LINE INDENT events . append ( event ) NEW_LINE DEDENT return events NEW_LINE DEDENT
get_event ( self , event ) : NEW_LINE INDENT event = self . get_event ( event ) NEW_LINE if event : NEW_LINE INDENT return event NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
JpaEntry findById ( String id ) { JpaEntry entry = new JpaEntry ( ) ; entry . setId ( id ) ; if ( entry . getId ( ) == null ) { entry . setId ( id ) ; } return entry ; }
get_authentication_token ( self ) : NEW_LINE INDENT if self . authentication_token is None : NEW_LINE INDENT self . authentication_token = self . _get_authentication_token ( ) NEW_LINE DEDENT return self . authentication_token NEW_LINE DEDENT
get_total_notifications ( self ) : NEW_LINE INDENT notifications = [ ] NEW_LINE for notification in self . get_notifications ( ) : NEW_LINE INDENT notifications . append ( notification ) NEW_LINE DEDENT return notifications NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def handle_error ( self , msg ) : NEW_LINE INDENT try : NEW_LINE INDENT self . logger . error ( msg ) NEW_LINE DEDENT except : NEW_LINE INDENT self . logger . error ( msg ) NEW_LINE DEDENT DEDENT
static NotificationResponse createNotificationResponse ( ) { NotificationResponse response = new NotificationResponse ( ) ; response . setStatus ( NotificationResponse . Status . OK ) ; response . setStatus ( NotificationResponse . Status . OK ) ; response . setStatus ( NotificationResponse . Status . OK ) ; return response ; }

def get_actions ( self ) : NEW_LINE INDENT if self . is_enabled ( ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def def convert_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_url ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _convert_url ( url ) NEW_LINE DEDENT DEDENT
static String getCategoryName ( String categoryName ) { if ( categoryName == null ) { return " " ; } if ( categoryName . equals ( " " ) ) { return " " ; } if ( categoryName . equals ( " " ) ) { return " " ; } return categoryName ; }
get_source_value ( self ) : NEW_LINE INDENT if self . source_value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . source_value NEW_LINE DEDENT
toggle_read_action ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _read_action = True NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _read_action = False NEW_LINE DEDENT return self . _read_action NEW_LINE DEDENT
deserialize ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return json . loads ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_school_id ( self ) : NEW_LINE INDENT schoolId = self . request . get ( ' schoolId ' ) NEW_LINE if schoolId is not None : NEW_LINE INDENT return schoolId NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_person_lookup_response ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT response = self . _get_person_lookup_response ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT response = self . _get_person_lookup_response ( ) NEW_LINE DEDENT return response NEW_LINE DEDENT
def hideAction ( self ) : NEW_LINE INDENT if self . _hide_action : NEW_LINE INDENT return self . _hide_action NEW_LINE DEDENT else : NEW_LINE INDENT return self . _hide_action NEW_LINE DEDENT DEDENT
get_attributes ( self ) : NEW_LINE INDENT return self . _attributes NEW_LINE DEDENT
normalize ( point ) : NEW_LINE INDENT if isinstance ( point , float ) : NEW_LINE INDENT return point NEW_LINE DEDENT else : NEW_LINE INDENT return point NEW_LINE DEDENT DEDENT
is_contained ( self , boxA , boxB ) : NEW_LINE INDENT if isinstance ( boxA , Box ) : NEW_LINE INDENT return boxA . is_contained ( boxB ) NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
find_closest_point ( self , triangle , point ) : NEW_LINE INDENT if point is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return point NEW_LINE DEDENT DEDENT
public public static boolean isSigned ( int p0 , int p0 , int p1 , int p2 , int p1 , int p0 , int p2 , int p1 , int p2 , int p3 , int p3 , int p4 , int p4 , int p5 , int p6 , int p6 , int p7 , int p8 , int p9 , int p9 , int p10 ) { if ( p1 - p0 < 0 ) { return false ; } if ( p0 < 0 ) { return false ; } if ( p1 < 0 ) { return false ; } if ( p1 < 0 ) { return true ; } if ( p2 < 0 ) { return false ; } if ( p1 < 0 ) { return true ; } if ( p2 <
def def set_Se3_F64 ( self , transform ) : NEW_LINE INDENT try : NEW_LINE INDENT self . transform = transform NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT self . transform = self . transform NEW_LINE DEDENT DEDENT
def def _set_Euler_angles ( self , angles ) : NEW_LINE INDENT if angles is None : NEW_LINE INDENT angles = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT angles = np . array ( angles ) NEW_LINE DEDENT return angles NEW_LINE DEDENT
convert_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return rectangle NEW_LINE DEDENT DEDENT
convert_polygon ( polygon ) : NEW_LINE INDENT if isinstance ( polygon , Polygon ) : NEW_LINE INDENT return polygon NEW_LINE DEDENT elif isinstance ( polygon , Polygon ) : NEW_LINE INDENT return polygon NEW_LINE DEDENT else : NEW_LINE INDENT return polygon NEW_LINE DEDENT DEDENT
minimum_area ( self ) : NEW_LINE INDENT return self . bounding_rectangle ( ) NEW_LINE DEDENT
def def boundingRect ( self , quadrilateral ) : NEW_LINE INDENT return self . boundingRect ( quadrilateral ) NEW_LINE DEDENT
compute_center_average_point ( self ) : NEW_LINE INDENT if self . center is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . center NEW_LINE DEDENT DEDENT
average_vertexes ( self , vertexes ) : NEW_LINE INDENT if len ( vertexes ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return self . _average_vertexes ( vertexes ) NEW_LINE DEDENT DEDENT
convex_hull ( self , points ) : NEW_LINE INDENT if len ( points ) == 1 : NEW_LINE INDENT return points [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return points [ 0 ] NEW_LINE DEDENT DEDENT
remove_node_from_polygon ( self , polygon ) : NEW_LINE INDENT if isinstance ( polygon , Polygon ) : NEW_LINE INDENT return polygon . remove_node ( polygon ) NEW_LINE DEDENT else : NEW_LINE INDENT return polygon . remove_node ( polygon ) NEW_LINE DEDENT DEDENT
compute_distance ( self , model , target ) : NEW_LINE INDENT return self . _compute_distance ( model , target ) NEW_LINE DEDENT
static double area ( Polygon polygon ) { if ( polygon . isEmpty ( ) ) { return 0 ; } else { return polygon . area ( ) ; } }
is_inside_quadrilateral ( self , point ) : NEW_LINE INDENT if isinstance ( point , Quadrilateral ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
is_inside_triangle ( self , point ) : NEW_LINE INDENT if isinstance ( point , Triangle ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
find_point_intersection ( self , lines ) : NEW_LINE INDENT if len ( lines ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( lines ) == 1 : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT return None NEW_LINE DEDENT

find_point_intersection ( self , lines ) : NEW_LINE INDENT if len ( lines ) == 1 : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT elif len ( lines ) == 2 : NEW_LINE INDENT return lines [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT DEDENT
static double findIntersection ( Line segment , Line segment ) { if ( segment == null ) { return Double . NaN ; } if ( segment == null ) { return Double . NaN ; } else { return segment . intersection ( segment ) ; } }
area ( self , polygons ) : NEW_LINE INDENT if len ( polygons ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( polygons ) == 1 : NEW_LINE INDENT return polygons [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return polygons [ 0 ] NEW_LINE DEDENT DEDENT
static boolean containsPoint ( Point point ) { if ( point == null ) { return false ; } if ( point . isWithin ( ellipse ) ) { return true ; } return false ; }
area ( self , rectangles ) : NEW_LINE INDENT if len ( rectangles ) == 1 : NEW_LINE INDENT return rectangles [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return rectangles [ 0 ] NEW_LINE DEDENT DEDENT
negative ( self , index ) : NEW_LINE INDENT if index < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index > 0 : NEW_LINE INDENT return self NEW_LINE DEDENT elif index < 0 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
extract_quaternions_from_rotation_matrix ( self , rotation_matrix ) : NEW_LINE INDENT if rotation_matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return rotation_matrix NEW_LINE DEDENT DEDENT
static RotationMatrix createRotationMatrix ( int x , int y ) { RotationMatrix rotationMatrix = new RotationMatrix ( x , y ) ; return rotationMatrix ; }
def def set_rotation_matrix ( self , matrix ) : NEW_LINE INDENT self . _rotation_matrix = matrix NEW_LINE return self . _rotation_matrix NEW_LINE DEDENT
def _create_rotation_matrix ( self , x , y ) : NEW_LINE INDENT rotation_matrix = np . zeros_like ( x , dtype = np . float ) NEW_LINE rotation_matrix = np . zeros_like ( y , dtype = np . float ) NEW_LINE rotation_matrix . shape = ( x , y ) NEW_LINE rotation_matrix . shape = ( x , y ) NEW_LINE rotation_matrix . shape = ( x , y ) NEW_LINE rotation_matrix . shape = ( x , y ) NEW_LINE return rotation_matrix NEW_LINE DEDENT
static RotationMatrix createRotationMatrix ( ) { RotationMatrix rotationMatrix = new RotationMatrix ( ) ; rotationMatrix . setRotationMatrix ( createRotationMatrix ( ) ) ; return rotationMatrix ; }
def def set_rotation_matrix ( self , matrix ) : NEW_LINE INDENT if self . rotation_matrix is not None : NEW_LINE INDENT return self . rotation_matrix NEW_LINE DEDENT return self . rotation_matrix NEW_LINE DEDENT
static RotationMatrix createRotationMatrix ( ) { RotationMatrix rotationMatrix = new RotationMatrix ( ) ; rotationMatrix . setRotationMatrix ( rotationMatrix ) ; return rotationMatrix ; }
static RotationMatrix createRotationMatrix ( int axis ) { RotationMatrix rotationMatrix = new RotationMatrix ( ) ; rotationMatrix . axis = axis ; return rotationMatrix ; }
def def def def def slope ( self ) : def def def def def def _ def slope ( self ) : def def def def def _ def slope ( self ) : def def def def def __ def def def def __ def def def def def _ _set def _get_slope ( self ) : NEW__python__ def def def def _ def _get_ slope ( self ) : def _get_ slope ( self ) : def _get_s
convert ( self , theta ) : NEW_LINE INDENT if theta is None : NEW_LINE INDENT raise ValueError ( " The value of theta used to generate the motion is assumed to be one . " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " The value of theta used to generate the motion is assumed to be one . " ) NEW_LINE DEDENT DEDENT
_interpolate_transforms ( self , transforms ) : NEW_LINE INDENT if transforms is None : NEW_LINE INDENT return NEW_LINE DEDENT transforms = transforms . copy ( ) NEW_LINE for transform in transforms : NEW_LINE INDENT transforms [ transform ] = transforms [ transform ] NEW_LINE DEDENT return transforms NEW_LINE DEDENT
interpolate ( self , first , second ) : NEW_LINE INDENT return self . interpolate ( first , second ) NEW_LINE DEDENT
fit_plane ( plane ) : NEW_LINE INDENT if plane is not None : NEW_LINE INDENT return plane NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
fit_plane ( plane ) : NEW_LINE INDENT if plane is not None : NEW_LINE INDENT return plane NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
length ( self ) : NEW_LINE INDENT return self . length ( ) NEW_LINE DEDENT
is_inside_polygon ( self , polygon , point ) : NEW_LINE INDENT if isinstance ( polygon , Polygon ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( polygon , Polygon ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
convert ( self , matrix ) : NEW_LINE INDENT if isinstance ( matrix , np . ndarray ) : NEW_LINE INDENT return matrix NEW_LINE DEDENT else : NEW_LINE INDENT return matrix NEW_LINE DEDENT DEDENT
_convert_conic ( self , conic ) : NEW_LINE INDENT if conic is not None : NEW_LINE INDENT return conic NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
convertConicToParabola ( self , conic ) : NEW_LINE INDENT if isinstance ( conic , parabola ) : NEW_LINE INDENT return conic NEW_LINE DEDENT elif isinstance ( conic , parabola ) : NEW_LINE INDENT return conic NEW_LINE DEDENT else : NEW_LINE INDENT return conic NEW_LINE DEDENT DEDENT
convert_parabola ( parabola ) : NEW_LINE INDENT parabola = parabola . strip ( ) NEW_LINE if parabola : NEW_LINE INDENT return parabola NEW_LINE DEDENT else : NEW_LINE INDENT return parabola NEW_LINE DEDENT DEDENT
each element by v by v .
static GeoTuple3D_F64 convert ( GeoTuple3D_F64 x , GeoTuple3D_F64 y , GeoTuple3D_F64 z ) { return new GeoTuple3D_F64 ( x , y , z ) ; }
GeoTuple3D_F64 ( ) { return new GeoTuple3D_F64 ( ) ; }
def _get_rotation ( self , axis = 0 ) : NEW_LINE INDENT if ( axis is not None ) : NEW_LINE INDENT return self . _rotation . _rotation ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _rotation ( ) NEW_LINE DEDENT DEDENT
distance ( self , angle ) : NEW_LINE INDENT return self . _distance ( angle , self . _radius ) NEW_LINE DEDENT

is_inside_plane ( self , T ) : NEW_LINE INDENT return self . is_inside_plane ( T ) NEW_LINE DEDENT

linear_interpolation ( self ) : NEW_LINE INDENT if self . interpolation is not None : NEW_LINE INDENT return self . interpolation NEW_LINE DEDENT else : NEW_LINE INDENT return self . interpolation NEW_LINE DEDENT DEDENT
def get_quaternion ( self ) : NEW_LINE INDENT Q = self . _get_quaternion ( ) NEW_LINE if not Q : NEW_LINE INDENT return None NEW_LINE DEDENT return Q NEW_LINE DEDENT
def convex_hull ( convex_hull ) : NEW_LINE INDENT if convex_hull is not None : NEW_LINE INDENT return convex_hull NEW_LINE DEDENT else : NEW_LINE INDENT return convex_hull NEW_LINE DEDENT DEDENT
transform ( self , transform ) : NEW_LINE INDENT if transform is None : NEW_LINE INDENT return self NEW_LINE DEDENT if transform is not None : NEW_LINE INDENT return transform NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def convert_matrix_to_homogeneous_matrix ( self , matrix ) : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE matrix = np . asarray ( matrix ) NEW_LINE matrix = np . asarray ( matrix ) NEW_LINE return matrix NEW_LINE DEDENT
convert_matrix ( self , matrix ) : NEW_LINE INDENT matrix = np . atleast_3d ( matrix ) NEW_LINE matrix = np . atleast_3d ( matrix ) NEW_LINE return matrix NEW_LINE DEDENT
static SE3 createSE3 ( ) { SE3SE3SE3SE3 = new SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3SE3SE3 ( ) ; SE3SE3SE3SE3 = new SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE3SE
_get_diff ( self , transforms , tolerance ) : NEW_LINE INDENT return self . _diff ( transforms , tolerance ) NEW_LINE DEDENT
convert_coordinates ( latitude , longitude ) : NEW_LINE INDENT latitude , longitude = latitude , longitude NEW_LINE latitude , longitude = longitude NEW_LINE latitude , longitude = latitude , longitude NEW_LINE return latitude , longitude NEW_LINE DEDENT
intersects ( self , points ) : NEW_LINE INDENT if len ( points ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( points ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( points ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
radius_square ( self , points ) : NEW_LINE INDENT if len ( points ) == 3 : NEW_LINE INDENT return self . radius_square ( points ) NEW_LINE DEDENT return self . radius_square ( points ) NEW_LINE DEDENT
minimizes_distance ( self , lines ) : NEW_LINE INDENT if len ( lines ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( lines ) == 1 : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT if len ( lines ) == 2 : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT DEDENT
find_closest_point ( self , point , line ) : NEW_LINE INDENT if not line : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return line . find_closest_point ( point ) NEW_LINE DEDENT DEDENT
find_closest_point ( plane , origin ) : NEW_LINE INDENT return plane . find_closest_point ( origin ) NEW_LINE DEDENT
find_closest_point ( self , point ) : NEW_LINE INDENT point = self . _find_closest_point ( point ) NEW_LINE if not point : NEW_LINE INDENT return None NEW_LINE DEDENT return point NEW_LINE DEDENT
closest_point ( self , point ) : NEW_LINE INDENT return self . _closest_point ( point ) NEW_LINE DEDENT
a 2D special euclidean transform to the point and stores the results in another variable .
transform ( self , points ) : NEW_LINE INDENT if isinstance ( points , np . ndarray ) : NEW_LINE INDENT return self . transform ( points ) NEW_LINE DEDENT return self . transform ( points ) NEW_LINE DEDENT
is_within_tolerance ( self , tolerance ) : NEW_LINE INDENT self . tolerance = tolerance NEW_LINE return self . tolerance NEW_LINE DEDENT
def get_angle ( self ) : NEW_LINE INDENT return self . _get_angle ( ) NEW_LINE DEDENT
convert_polar_form_to_parametric ( self , polar_form ) : NEW_LINE INDENT if self . polar_form is not None : NEW_LINE INDENT return self . polar_form NEW_LINE DEDENT elif self . polar_form is not None : NEW_LINE INDENT return self . polar_form NEW_LINE DEDENT DEDENT
polar ( line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
def def public public public static final public static final void convert ( final int src , final int src , final int src , final int start , final int start , final int start , final int direction , final int direction ) { if ( src . b - src . a < src . b - src . a ) { throw new IllegalArgumentException ( ) ; } else if ( src . b - src . a < src . b - src . a ) { throw new IllegalArgumentException ( ) ; } else if ( src . b - src . a < src . b - src . a ) { throw new IllegalArgumentException ( ) ; } else if ( src . b - src . a < src . b - src . a ) { throw new IllegalArgumentException
def convert_line_segment ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
static LineSegment convertLineSegment ( LineSegment lineSegment ) { if ( lineSegment == null ) { throw new IllegalArgumentException ( " Line segment cannot be null . " ) ; } if ( lineSegment == null ) { throw new IllegalArgumentException ( " Line segment cannot be null . " ) ; } return lineSegment ; }
static void convertLine ( String line , Point a , Point b ) { if ( a == null || b == null ) { throw new IllegalArgumentException ( ) ; } if ( a . equals ( b ) ) { throw new IllegalArgumentException ( ) ; } if ( a . equals ( b ) ) { throw new IllegalArgumentException ( ) ; } }
polar_line ( line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE if line . strip ( ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE DEDENT return line NEW_LINE DEDENT
parse_line ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
convert_line ( line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE line = line . strip ( ) NEW_LINE return line NEW_LINE DEDENT
def def convert_plane ( plane , normal form ) : NEW_LINE INDENT plane = plane . normal ( ) NEW_LINE return plane . normalize ( ) NEW_LINE DEDENT
def def convert ( tangent form , tangent form ) : NEW_LINE INDENT plane = tangent ( form ) NEW_LINE plane = tangent ( form ) NEW_LINE plane = plane . tangent ( ) NEW_LINE plane = plane . tangent ( ) NEW_LINE plane = plane . tangent ( ) NEW_LINE return plane NEW_LINE DEDENT
transform ( self , x , y , z ) : NEW_LINE INDENT return self . transform ( x , y , z ) NEW_LINE DEDENT
convert_point ( self , point ) : NEW_LINE INDENT if isinstance ( point , Point ) : NEW_LINE INDENT return point NEW_LINE DEDENT elif isinstance ( point , Point ) : NEW_LINE INDENT return point NEW_LINE DEDENT else : NEW_LINE INDENT return point NEW_LINE DEDENT DEDENT
transform ( self , plane , x , y , z , axis ) : NEW_LINE INDENT return self . transform ( plane , x , y , z , axis ) NEW_LINE DEDENT
check_geo_tuple ( self ) : NEW_LINE INDENT if self . GeoTuple is not None : NEW_LINE INDENT return self . GeoTuple NEW_LINE DEDENT else : NEW_LINE INDENT return self . GeoTuple NEW_LINE DEDENT DEDENT
copy ( self ) : NEW_LINE INDENT return self . _copy ( ) NEW_LINE DEDENT
square ( self ) : NEW_LINE INDENT norm = self . norm ( ) NEW_LINE if norm is None : NEW_LINE INDENT return self NEW_LINE DEDENT return norm NEW_LINE DEDENT
public static double value ( double value ) { double value = 0.0 ; if ( value == 0.0 ) { return 0.0 ; } else if ( value == 0.0 ) { return value ; } return value ; }
is_uncountable ( self , parameters ) : NEW_LINE INDENT return self . _is_uncountable ( parameters ) NEW_LINE DEDENT
if they are equivalent up to a scale factor .
center ( self , cube ) : NEW_LINE INDENT return self . _center ( cube ) NEW_LINE DEDENT
static boolean isIntersection ( Line line ) { if ( line == null ) { return false ; } else { return line . isIntersection ( ) ; } }
static boolean homogenous ( Point3D point3D ) { if ( point3D == null ) { return false ; } if ( point3D == null ) { return false ; } if ( point3D == null ) { return false ; } return true ; }
homogenous_point ( self , point ) : NEW_LINE INDENT if self . w is None : NEW_LINE INDENT self . w = point NEW_LINE DEDENT else : NEW_LINE INDENT self . w = self . w NEW_LINE DEDENT return point NEW_LINE DEDENT
convert_point ( self , point ) : NEW_LINE INDENT if isinstance ( point , Point ) : NEW_LINE INDENT return point NEW_LINE DEDENT else : NEW_LINE INDENT return point NEW_LINE DEDENT DEDENT
set_vector ( self , a , b ) : NEW_LINE INDENT self . _set_vector ( a , b ) NEW_LINE self . _set_vector ( a , b ) NEW_LINE DEDENT
test_sign_difference ( self , two_vectors ) : NEW_LINE INDENT if len ( two_vectors ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
set_rectangle ( self , rectangle ) : NEW_LINE INDENT self . rectangle = rectangle NEW_LINE DEDENT
def def _convert_to_quadratic_quadratic ( self , rotated ) : NEW_LINE INDENT return self . _convert_to_quadratic ( rotated ) NEW_LINE DEDENT
public static void computePoint ( double t ) { if ( t < 0 ) { throw new IllegalArgumentException ( ) ; } if ( t < 0 ) { throw new IllegalArgumentException ( ) ; } if ( t < 0 ) { throw new IllegalArgumentException ( ) ; } if ( t < 0 ) { throw new IllegalArgumentException ( ) ; } }
def def def def def def def def __ public static final public static final double value ( double t ) { if ( t == def def def def def def def _ public static public static public static public static final public static final public static final double value ( double t ) { if ( t == public static final public static final public static final double value ( double t ) { if ( t ==
tangent ( self , ellipse ) : NEW_LINE INDENT if ellipse is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return ellipse . tangent ( ) NEW_LINE DEDENT DEDENT
tangent_point ( self , tangent_point ) : NEW_LINE INDENT if tangent_point is not None : NEW_LINE INDENT return tangent_point NEW_LINE DEDENT return tangent_point NEW_LINE DEDENT
get_ corners ( self ) : NEW_LINE INDENT corners = [ ] NEW_LINE for corner in self . corners : NEW_LINE INDENT corners . append ( corner ) NEW_LINE DEDENT return corners NEW_LINE DEDENT
distance ( self , line ) : NEW_LINE INDENT return self . _distance ( line ) NEW_LINE DEDENT
distance ( self , point ) : NEW_LINE INDENT return self . distance ( point ) NEW_LINE DEDENT
distance ( self , point ) : NEW_LINE INDENT return self . distance ( point ) NEW_LINE DEDENT
distance ( self , point ) : NEW_LINE INDENT return self . distance ( point ) NEW_LINE DEDENT
static double distance ( double point ) { if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point < 0 ) { return 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0 ) { return 1 ; } if ( point < 0 ) { return - 1 ; } if ( point > 0
distance ( self , x , y ) : NEW_LINE INDENT return self . distance ( x , y ) NEW_LINE DEDENT
distance_squared ( self , line_segments ) : NEW_LINE INDENT line_segments = line_segments . split ( ) NEW_LINE if len ( line_segments ) == 1 : NEW_LINE INDENT return line_segments [ 0 ] NEW_LINE DEDENT return line_segments [ 0 ] NEW_LINE DEDENT
distance ( self , point ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _distance ( point ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
double getEuclideanDistance ( Point point ) { if ( point == null ) { throw new IllegalArgumentException ( " point is null " ) ; } double distance = Math . sqrt ( point . distance ( point ) ) ; if ( distance < 0 ) { throw new IllegalArgumentException ( " distance < 0" ) ; } return distance ; }
distance ( self , point ) : NEW_LINE INDENT if isinstance ( point , Polygon ) : NEW_LINE INDENT return self . _distance ( point ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _distance ( point ) NEW_LINE DEDENT DEDENT
euclidean_distance ( self , point ) : NEW_LINE INDENT if isinstance ( point , Polygon ) : NEW_LINE INDENT return self . distance ( point ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . distance ( point ) NEW_LINE DEDENT DEDENT
distance ( self , line , origin ) : NEW_LINE INDENT if origin is None : NEW_LINE INDENT origin = self . origin NEW_LINE DEDENT return self . distance ( line , origin ) NEW_LINE DEDENT
distance ( ellipse , point ) : NEW_LINE INDENT if isinstance ( ellipse , Point ) : NEW_LINE INDENT return ellipse . distance ( point ) NEW_LINE DEDENT return ellipse . distance ( point ) NEW_LINE DEDENT
double distance ( Point p ) { if ( p == null ) { return 0 ; } else { return Math . sqrt ( p . distance ( p ) ) ; } }
def next_transform ( self ) : NEW_LINE INDENT return self . _next_transform ( ) NEW_LINE DEDENT
static Point closestPoint ( Point p ) { if ( p == null ) { throw new IllegalArgumentException ( " point is null " ) ; } Point closestPoint = new Point ( p ) ; return closestPoint ; }
static double closest ( Point point ) { if ( point == null ) { throw new IllegalArgumentException ( " Point is null " ) ; } if ( point == null ) { throw new IllegalArgumentException ( " Point is null " ) ; } else { return point ; } }

random_vector ( self , axis = 0 ) : NEW_LINE INDENT if axis == 0 : NEW_LINE INDENT return np . random . random ( ) NEW_LINE DEDENT return np . random . random ( ) NEW_LINE DEDENT
def perpendicular ( self , vector ) : NEW_LINE INDENT return self . _select ( vector ) NEW_LINE if self . _select ( vector ) : NEW_LINE INDENT return self . _select ( vector ) NEW_LINE DEDENT DEDENT
check_equality ( self , vectors , tolerance ) : NEW_LINE INDENT if isinstance ( vectors , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( vectors , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
rescale_vector ( vector , normal ) : NEW_LINE INDENT if normal is None : NEW_LINE INDENT return vector NEW_LINE DEDENT else : NEW_LINE INDENT return vector NEW_LINE DEDENT DEDENT
create_matrix_from_column_vectors ( self , column_vectors ) : NEW_LINE INDENT new_matrix = np . zeros_like ( column_vectors ) NEW_LINE new_matrix . shape = column_vectors . shape NEW_LINE new_matrix . shape = column_vectors . shape NEW_LINE new_matrix . shape = column_vectors . shape NEW_LINE new_matrix . shape = column_vectors . shape NEW_LINE return new_matrix NEW_LINE DEDENT
convert_matrix_to_vectors ( self , matrix ) : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE if matrix . ndim == 0 : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE DEDENT else : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE DEDENT return matrix NEW_LINE DEDENT
euclidean_distance ( self , point ) : NEW_LINE INDENT distance = self . distance ( point ) NEW_LINE if distance is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT return distance NEW_LINE DEDENT
find_point_distance ( ellipse , point_distance ) : NEW_LINE INDENT if ellipse is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return ellipse . distance ( point_distance ) NEW_LINE DEDENT DEDENT
convert_quaternion_to_quaternion ( quaternion ) : NEW_LINE INDENT quaternion = Quaternion . from_quaternion ( quaternion ) NEW_LINE return quaternion . to_quaternion ( quaternion ) NEW_LINE DEDENT
area ( self , * args , ** kwargs ) : NEW_LINE INDENT return self . _area ( * args , ** kwargs ) NEW_LINE DEDENT
area ( self , triangles ) : NEW_LINE INDENT if len ( triangles ) == 1 : NEW_LINE INDENT return triangles [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return triangles [ 0 ] NEW_LINE DEDENT DEDENT
area ( self ) : NEW_LINE INDENT return self . area ( ) NEW_LINE DEDENT
static double mean ( double [ ] array ) { double [ ] mean = new double [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { mean [ i ] = array [ i ] ; } return mean [ array . length - 1 ] ; }
def def def def def public public public public public static final public static final void put ( double [ public static final double [ public static final double [ public static final double [ ] [ ] [ ] [ ] [ ] [ ] points , final double [ ] [ ] points , final double [ ] [ ] points , final double [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] , final double [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] , final double [ ] [ ] [ ] [ ] [ ]
_mean_covariance_matrix ( self , points ) : NEW_LINE INDENT return self . _mean_covariance_matrix ( points ) NEW_LINE DEDENT
is_convex ( polugon ) : NEW_LINE INDENT return polugon . is_convex ( ) NEW_LINE DEDENT
scalarMultiplication ( self , scalar ) : NEW_LINE INDENT if scalar is not None : NEW_LINE INDENT return scalar * self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
absolute_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT
euclidean_distance ( self , points ) : NEW_LINE INDENT if len ( points ) == 0 : NEW_LINE INDENT return 0.0 NEW_LINE DEDENT else : NEW_LINE INDENT return distance ( points [ 0 ] , points [ 1 ] ) NEW_LINE DEDENT DEDENT
euclidean_distance ( self , points ) : NEW_LINE INDENT if len ( points ) == 0 : NEW_LINE INDENT return 0.0 NEW_LINE DEDENT else : NEW_LINE INDENT return euclidean_distance ( points [ 0 ] , points [ 1 ] ) NEW_LINE DEDENT DEDENT
generate_points ( self , plane ) : NEW_LINE INDENT return self . _generate_points ( plane ) NEW_LINE DEDENT
random_points ( self ) : NEW_LINE INDENT random_points = [ ] NEW_LINE for i in range ( self . num_points ) : NEW_LINE INDENT random_points . append ( np . random . randn ( self . num_points ) ) NEW_LINE DEDENT return random_points NEW_LINE DEDENT
random_points ( self ) : NEW_LINE INDENT random_points = [ ] NEW_LINE for i in range ( self . num_points ) : NEW_LINE INDENT random_points . append ( random_points [ i ] ) NEW_LINE DEDENT return random_points NEW_LINE DEDENT
mean ( self , points ) : NEW_LINE INDENT if len ( points ) == 0 : NEW_LINE INDENT return 0.0 NEW_LINE DEDENT else : NEW_LINE INDENT return np . mean ( self , points ) NEW_LINE DEDENT DEDENT
mean ( self , element , num ) : NEW_LINE INDENT return self . _mean ( element , num ) NEW_LINE DEDENT
def def _discard_cached_principal ( self ) : NEW_LINE INDENT if self . _cached_principal is not None : NEW_LINE INDENT return self . _cached_principal NEW_LINE DEDENT DEDENT
def def def def def def def _dis__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def _dis__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
Set < String > get ( String string ) { Set < String > result = new HashSet < String > ( ) ; result . add ( string ) ; result . add ( string ) ; result . add ( string ) ; return result ; }
get_features ( self ) : NEW_LINE INDENT features = [ ] NEW_LINE for feature in self . get_features ( ) : NEW_LINE INDENT features . append ( feature ) NEW_LINE DEDENT return features NEW_LINE DEDENT
get_features ( self ) : NEW_LINE INDENT features = self . configDropins . get_features ( ) NEW_LINE if not features : NEW_LINE INDENT return None NEW_LINE DEDENT return features NEW_LINE DEDENT

parse_features ( self ) : NEW_LINE INDENT features = { } NEW_LINE for node in self . include_nodes : NEW_LINE INDENT features [ node ] = self . parse_features ( node ) NEW_LINE DEDENT return features NEW_LINE DEDENT
trim ( self , node ) : NEW_LINE INDENT if node . getNodeType ( ) != Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT if node . getNodeType ( ) == Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT if node . getNodeType ( ) == Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT if node . getNodeType ( ) == Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT if node . getNodeType ( ) == Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT if node . getNodeType ( ) == Node . ELEMENT_NODE : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
download_json ( self , product_id ) : NEW_LINE INDENT product = self . _get_product ( product_id ) NEW_LINE if product : NEW_LINE INDENT json = self . _download_json ( product_id ) NEW_LINE return json NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_features ( self ) : NEW_LINE INDENT product_json = self . _get_product_json ( ) NEW_LINE if product_json is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return product_json NEW_LINE DEDENT
isFeatureInstalled ( self , featuresToInstall ) : NEW_LINE INDENT featuresToInstall = { } NEW_LINE if isinstance ( featuresToInstall , list ) : NEW_LINE INDENT featuresToInstall = [ featuresToInstall ] NEW_LINE DEDENT if isinstance ( featuresToInstall , dict ) : NEW_LINE INDENT featuresToInstall = [ featuresToInstall ] NEW_LINE DEDENT return featuresToInstall NEW_LINE DEDENT
boolean contains ( String target ) { if ( target == null || target . length ( ) == 0 ) { return false ; } if ( target . length ( ) == 0 ) { return false ; } return true ; }
next_product_version ( self ) : NEW_LINE INDENT product_version = self . product_version NEW_LINE if not product_version : NEW_LINE INDENT return None NEW_LINE DEDENT return product_version NEW_LINE DEDENT
static String getBundleSymbolicName ( String bundleSymbolicName ) { if ( bundleSymbolicName == null || bundleSymbolicName . length ( ) == 0 ) { return bundleSymbolicName ; } return bundleSymbolicName ; }
get_install_map_jar ( self ) : NEW_LINE INDENT return self . _get_install_map_jar ( ) NEW_LINE DEDENT
replace ( self , file1 , file2 ) : NEW_LINE INDENT if file1 == file2 : NEW_LINE INDENT return True NEW_LINE DEDENT elif file2 == file1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
extract_version ( fileName ) : NEW_LINE INDENT try : NEW_LINE INDENT version = os . path . basename ( fileName ) NEW_LINE DEDENT except : NEW_LINE INDENT version = ' ' NEW_LINE DEDENT return version NEW_LINE DEDENT
compare_version_strings ( self , version_strings ) : NEW_LINE INDENT version_strings = [ ] NEW_LINE for version_string in version_strings : NEW_LINE INDENT version_strings . append ( version_string ) NEW_LINE DEDENT return version_strings NEW_LINE DEDENT
productInfo ( self ) : NEW_LINE INDENT if self . productInfo is None : NEW_LINE INDENT self . productInfo = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . productInfo = { } NEW_LINE DEDENT return self . productInfo NEW_LINE DEDENT
static boolean isSpringBootUberJar ( String artifact ) { if ( artifact == null ) { return false ; } if ( artifact . endsWith ( " . jar " ) ) { return true ; } return false ; }
static boolean exists ( String key ) { if ( key == null ) { return false ; } if ( key . startsWith ( " _ " ) ) { return true ; } return false ; }
public public public static void displayImage ( String image ) { if ( ! headless ) { return ; } if ( ! headless ) { return ; } if ( ! headless ) { return ; } if ( ! headless ) { return ; } if ( ! headless ) { return ; } if ( ! headless ) { return ; } if ( headless ) { return ; } else { return ; } } }
moveBackToCenter ( self , recipe ) : NEW_LINE INDENT if not self . recipe : NEW_LINE INDENT self . recipe = recipe NEW_LINE DEDENT else : NEW_LINE INDENT self . recipe = self . recipe NEW_LINE DEDENT return self . recipe NEW_LINE DEDENT
check_two_objects ( self , two_objects ) : NEW_LINE INDENT return self . check_two_objects ( two_objects ) NEW_LINE DEDENT
load_int_from_string ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return int . from_string ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return int . from_string ( string ) NEW_LINE DEDENT DEDENT
run_deep_dag ( self ) : NEW_LINE INDENT self . run_deep_dag ( ) NEW_LINE self . run_deep_dag ( ) NEW_LINE DEDENT
static void captureImage ( String image ) { if ( image == null ) { throw new IllegalArgumentException ( " image is null " ) ; } if ( image . length ( ) == 0 ) { throw new IllegalArgumentException ( " image is empty " ) ; } if ( image . length ( ) == 0 ) { throw new IllegalArgumentException ( " image is empty " ) ; } if ( image . length ( ) == 0 ) { throw new IllegalArgumentException ( " image is empty " ) ; } if ( image . length ( ) == 0 ) { throw new IllegalArgumentException ( " image is empty " ) ; } }
copy ( self , target ) : NEW_LINE INDENT if self . target is not None : NEW_LINE INDENT return self . target . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
distance ( self , cell , goal ) : NEW_LINE INDENT return self . distance ( cell , goal ) NEW_LINE DEDENT
print ( format_string ) : NEW_LINE INDENT if format_string : NEW_LINE INDENT print ( format_string ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ) NEW_LINE DEDENT DEDENT
static String format ( Locale locale , String formatString , Object ... arguments ) { if ( locale == null ) { locale = Locale . getDefault ( ) ; } if ( formatString == null ) { formatString = Locale . getDefault ( ) ; } return formatString . format ( locale , formatString , arguments ) ; }
makeAFishyDecision ( self ) : NEW_LINE INDENT if self . numberOfFish == 0 : NEW_LINE INDENT self . numberOfFish = 1 NEW_LINE DEDENT elif self . numberOfFish == 1 : NEW_LINE INDENT self . numberOfFish = 2 NEW_LINE DEDENT elif self . numberOfFish == 2 : NEW_LINE INDENT self . numberOfFish = 3 NEW_LINE DEDENT elif self . numberOfFish == 3 : NEW_LINE INDENT self . numberOfFish = 4 NEW_LINE DEDENT DEDENT
def def screen ( self ) : NEW_LINE INDENT return self . _screen ( ) NEW_LINE DEDENT
random_uniform ( self ) : NEW_LINE INDENT return self . _random_uniform ( ) NEW_LINE DEDENT
random_real_number ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return np . random . random ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return np . random . random ( ) NEW_LINE DEDENT DEDENT
random_int ( self ) : NEW_LINE INDENT return self . _random_int ( ) NEW_LINE DEDENT
random_integer ( self ) : NEW_LINE INDENT if self . discrete_distribution is not None : NEW_LINE INDENT return self . discrete_distribution . random ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . discrete_distribution . random ( ) NEW_LINE DEDENT DEDENT
def test ( self ) : NEW_LINE INDENT self . assertEqual ( self . _test , True ) NEW_LINE self . assertEqual ( self . _test , True ) NEW_LINE DEDENT
capitalize ( word ) : NEW_LINE INDENT if len ( word ) == 0 : NEW_LINE INDENT return " " NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
uncapitalize ( self , word ) : NEW_LINE INDENT return self . _uncapitalize ( word ) NEW_LINE DEDENT
fix_path ( self , path ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fix_path ( path ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def get_expiration_date ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . token . expiration_date NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return self . token . expiration_date NEW_LINE DEDENT
extract_ accesstoken ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . accesstoken NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
fill_permissions ( self ) : NEW_LINE INDENT self . _permissions = [ ] NEW_LINE self . _permissions . extend ( self . _permissions ) NEW_LINE self . _permissions . extend ( self . _permissions ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_job_detail ( self , parameters ) : NEW_LINE INDENT job_detail = JobDetail ( ** parameters ) NEW_LINE job_detail . set_name ( self . name ) NEW_LINE job_detail . set_description ( self . description ) NEW_LINE return job_detail NEW_LINE DEDENT
static Trigger create ( Annotation annotation ) { if ( annotation == null ) { return null ; } if ( annotation . annotationType ( ) . equals ( Trigger . class ) ) { return create ( annotation ) ; } return create ( annotation ) ; }
set_count ( self , count , intervals ) : NEW_LINE INDENT self . count = count NEW_LINE self . intervals = intervals NEW_LINE DEDENT
set_start_end_times ( self , start , end ) : NEW_LINE INDENT self . start_end_times = start NEW_LINE self . end_times = end NEW_LINE DEDENT
send ( self , queue ) : NEW_LINE INDENT thread = threading . currentThread ( ) NEW_LINE if thread . isAlive ( ) : NEW_LINE INDENT thread . start ( ) NEW_LINE DEDENT else : NEW_LINE INDENT thread . join ( ) NEW_LINE DEDENT DEDENT
write_message_body ( self , message_body ) : NEW_LINE INDENT if isinstance ( message_body , str ) : NEW_LINE INDENT return message_body NEW_LINE DEDENT elif isinstance ( message_body , str ) : NEW_LINE INDENT return message_body NEW_LINE DEDENT elif isinstance ( message_body , str ) : NEW_LINE INDENT return message_body NEW_LINE DEDENT else : NEW_LINE INDENT return message_body NEW_LINE DEDENT DEDENT
startJobManager ( ) : NEW_LINE INDENT jobManager = JobManager . getInstance ( ) NEW_LINE jobManager . start ( ) NEW_LINE return jobManager NEW_LINE DEDENT

static Map < String , String > getFields ( Class < ? > class ) { Map < String , String > fields = new HashMap < String , String > ( ) ; for ( Field field : class . getDeclaredFields ( ) ) { fields . put ( field . getName ( ) , field . getName ( ) ) ; } return fields ; }
def def parse_response ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT return exception NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return json . loads ( exception ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return exception NEW_LINE DEDENT DEDENT DEDENT
static void configureEncryptor ( Encryptor encryptor ) { if ( encryptor == null ) { throw new IllegalArgumentException ( " encryptor is null " ) ; } if ( encryptor . encrypt ( ) == null ) { throw new IllegalArgumentException ( " encryptor is null " ) ; } }
static void set userAgent ( String userAgent , String remoteAddr ) { if ( userAgent == null ) { userAgent = " " ; } if ( remoteAddr == null ) { userAgent = " " ; } if ( userAgent . equals ( " " ) ) { userAgent = " " ; } if ( userAgent . equals ( " " ) ) { userAgent = " " ; } if ( userAgent . equals ( " " ) ) { userAgent = " " ; } }
static String generateTokenString ( String tokenString ) { if ( tokenString == null ) { return " " ; } if ( tokenString . length ( ) == 0 ) { return " " ; } return tokenString . substring ( 0 , tokenString . length ( ) - 1 ) ; }
send_mail ( self , item ) : NEW_LINE INDENT if not item : NEW_LINE INDENT return NEW_LINE DEDENT mail = [ ] NEW_LINE mail . append ( item ) NEW_LINE mail . append ( item ) NEW_LINE mail . append ( item ) NEW_LINE mail . append ( item ) NEW_LINE DEDENT
strong_password ( self , old_password , new_password ) : NEW_LINE INDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password : NEW_LINE INDENT return None NEW_LINE DEDENT if old_password == new_password
changePassword ( self , password ) : NEW_LINE INDENT self . password = password NEW_LINE return self . password NEW_LINE DEDENT
static UserEntry getUserEntry ( String accountName ) { if ( accountName == null ) { throw new IllegalArgumentException ( " accountName is null " ) ; } if ( accountName . equals ( " " ) ) { throw new IllegalArgumentException ( " accountName is null " ) ; } if ( accountName . equals ( " " ) ) { throw new IllegalArgumentException ( " accountName is null " ) ; } if ( accountName . equals ( " " ) ) { throw new IllegalArgumentException ( " accountName is null " ) ; } return new UserEntry ( accountName ) ; }
static String hash ( String accountName , String salt ) { if ( accountName == null ) { throw new IllegalArgumentException ( " accountName is null . " ) ; } if ( salt == null ) { throw new IllegalArgumentException ( " salt is null . " ) ; } if ( salt . length ( ) == 0 ) { throw new IllegalArgumentException ( " salt is null . " ) ; } return salt ; }
def def validate_account_name ( self , account_name ) : NEW_LINE INDENT if account_name . startswith ( account_name ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
void verifyPassword ( String oldPassword , String newPassword ) { if ( oldPassword == null || newPassword == null || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 || newPassword . length ( ) == 0 ) ; }
GET ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT args = list ( args ) NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT DEDENT
commit ( self ) : NEW_LINE INDENT if self . transaction is not None : NEW_LINE INDENT self . transaction . commit ( ) NEW_LINE DEDENT DEDENT
rollback ( self ) : NEW_LINE INDENT if self . transaction is None : NEW_LINE INDENT self . transaction = None NEW_LINE DEDENT elif self . transaction is not None : NEW_LINE INDENT self . transaction . rollback ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_permission_code ( roleOid , permissionOid ) : NEW_LINE INDENT if permissionOid is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return permissionOid . code NEW_LINE DEDENT DEDENT
static String merge ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } return value ; }
parse ( self , format ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . parser . parse ( format ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT return self . parser . parse ( format ) NEW_LINE DEDENT DEDENT
get_current_response ( self ) : NEW_LINE INDENT response = None NEW_LINE try : NEW_LINE INDENT response = self . response NEW_LINE DEDENT except Exception : NEW_LINE INDENT response = self . response NEW_LINE DEDENT if response is None : NEW_LINE INDENT response = self . response NEW_LINE DEDENT else : NEW_LINE INDENT response = self . response NEW_LINE DEDENT return response NEW_LINE DEDENT
def def def def def generate___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def generate___python____python____python____python____python____python____python____python__ def def def def generate___python____python____python____python____python____python____python____python____python__ def def def def def def generate___python____python____python____python____python__ def def def def generate___python____python____python____python____python____python____python__ def def def def def def generate___python____python____python____python____python____python____python__ def def def def def generate___python____python____python____python____python____python____python__ def def def def def generate___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python__
not_equals_operator ( operator ) : NEW_LINE INDENT if operator == ' ! ' : NEW_LINE INDENT operator = ' ! = ' NEW_LINE DEDENT return operator NEW_LINE DEDENT
def def less ( self , operator ) : NEW_LINE INDENT if operator == ' < ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' > ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' < ' : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
operator ( self , operator ) : NEW_LINE INDENT if operator == ' < ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' > ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' = ' : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def greater ( self , operator ) : NEW_LINE INDENT if operator == ' > ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' < ' : NEW_LINE INDENT return self NEW_LINE DEDENT elif operator == ' > ' : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def def operator ( self , operator ) : NEW_LINE INDENT operator = operator NEW_LINE operator = operator NEW_LINE if operator == ' > ' and operator == ' < ' : NEW_LINE INDENT operator = operator NEW_LINE DEDENT elif operator == ' > ' : NEW_LINE INDENT operator = operator NEW_LINE DEDENT return operator NEW_LINE DEDENT
contains ( self , operator ) : NEW_LINE INDENT if operator in self . operators : NEW_LINE INDENT return self . operators [ operator ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . operators [ operator ] NEW_LINE DEDENT DEDENT
in_list ( self , list ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return list NEW_LINE DEDENT elif isinstance ( list , tuple ) : NEW_LINE INDENT return list NEW_LINE DEDENT else : NEW_LINE INDENT return list NEW_LINE DEDENT DEDENT
update_namespaces ( self , namespaces ) : NEW_LINE INDENT for namespace in namespaces : NEW_LINE INDENT self . update_namespaces ( namespace ) NEW_LINE DEDENT DEDENT
def add ( self , representation ) : NEW_LINE INDENT if isinstance ( representation , str ) : NEW_LINE INDENT return self . _add ( representation ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _add ( representation ) NEW_LINE DEDENT DEDENT
rel_to ( self , representation ) : NEW_LINE INDENT if isinstance ( representation , str ) : NEW_LINE INDENT return self . rel_to ( representation ) NEW_LINE DEDENT if isinstance ( representation , str ) : NEW_LINE INDENT return self . rel_to ( representation ) NEW_LINE DEDENT return self . rel_to ( representation ) NEW_LINE DEDENT
replace ( self , resource , new_type , new_value ) : NEW_LINE INDENT if new_type is not None : NEW_LINE INDENT return self . _replace ( resource , new_type , new_value ) NEW_LINE DEDENT return self . _replace ( resource , new_value ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
boolean isValid ( byte [ ] bytes ) { if ( bytes == null ) { return false ; } if ( bytes . length == 0 ) { return true ; } if ( bytes . length == 1 ) { return true ; } return false ; }
static String getEncoding ( String encoding ) { if ( encoding == null ) { encoding = " UTF - 8" ; } if ( encoding . equals ( " UTF - 8" ) ) { encoding = " UTF - 8" ; } return encoding ; }
def def def def def def def def def def def def def def def def
move_file ( self , path ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( path , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT file = None NEW_LINE DEDENT if file is not None : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT else : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT DEDENT
public public static void update ( String path , String name ) throws IOException { if ( ! Files . exists ( Paths . get ( path ) ) || ! Files . exists ( Paths . get ( path ) ) || ! Files . exists ( Paths . get ( path ) ) || ! Files . exists ( Paths . get ( path ) ) || ! Files . exists ( Paths . get ( path ) ) || ! Files . exists ( Paths . get ( path ) ) ) ; }
basename ( self ) : NEW_LINE INDENT basename = self . basename ( ) NEW_LINE if basename is None : NEW_LINE INDENT basename = self . basename ( ) NEW_LINE DEDENT return basename NEW_LINE DEDENT

static String getName ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . getPackage ( ) != null ) { return clazz . getPackage ( ) . getName ( ) ; } else { return clazz . getName ( ) ; } }
static List < Class < ? > > getSuperTypes ( Class < ? > class ) { if ( class . getSuperclass ( ) != null ) { return super . getSuperTypes ( class ) ; } if ( class . getSuperclass ( ) != null ) { return super . getSuperTypes ( class ) ; } return null ; }
verify_password ( password ) : NEW_LINE INDENT hashed_password = hashlib . md5 ( password ) . hexdigest ( ) NEW_LINE if hashed_password : NEW_LINE INDENT return hashed_password NEW_LINE DEDENT else : NEW_LINE INDENT return hashed_password NEW_LINE DEDENT DEDENT
read_next_line ( self ) : NEW_LINE INDENT line = self . input . readline ( ) NEW_LINE if not line : NEW_LINE INDENT return line NEW_LINE DEDENT charset = self . charset NEW_LINE line = self . input . readline ( ) NEW_LINE if not line : NEW_LINE INDENT return line NEW_LINE DEDENT line = self . input . readline ( ) NEW_LINE if not line : NEW_LINE INDENT return line NEW_LINE DEDENT return line NEW_LINE DEDENT
write ( self , byte ) : NEW_LINE INDENT try : NEW_LINE INDENT self . buffer . append ( byte ) NEW_LINE DEDENT except : NEW_LINE INDENT self . buffer . append ( byte ) NEW_LINE DEDENT DEDENT
write ( self , data ) : NEW_LINE INDENT self . buffer . append ( data ) NEW_LINE DEDENT
copy ( self , array ) : NEW_LINE INDENT if len ( array ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if len ( array ) == 1 : NEW_LINE INDENT return array [ 0 ] NEW_LINE DEDENT return self NEW_LINE DEDENT
def def reduce ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
subtract ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _subtract ( value ) NEW_LINE DEDENT DEDENT
def reduce ( self , value ) : NEW_LINE INDENT result = [ ] NEW_LINE result = [ ] NEW_LINE for i in range ( 0 , len ( value ) : NEW_LINE INDENT result . append ( value ) NEW_LINE result . append ( value ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def divide ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _divide ( value ) NEW_LINE DEDENT DEDENT
maximum ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return len ( values ) NEW_LINE DEDENT DEDENT
minimum ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return min ( values ) NEW_LINE DEDENT DEDENT
_check_condition_checking_parameters ( self ) : NEW_LINE INDENT if self . condition_checking_parameters is not None : NEW_LINE INDENT return self . condition_checking_parameters NEW_LINE DEDENT return self . condition_checking_parameters NEW_LINE DEDENT
def getLocationforecastLTS ( latitude , longitude , altitude ) : NEW_LINE INDENT try : NEW_LINE INDENT return LocationforecastLTS ( latitude , longitude , altitude ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def get_sunrise_sunrise ( latitude , longitude , latitude , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_sunrise ( latitude , longitude , latitude , date ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
def get_sunrise ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_sunrise ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_sunrise ( ) NEW_LINE DEDENT DEDENT
get_point_forecasts ( self ) : NEW_LINE INDENT forecasts = [ ] NEW_LINE for forecast in self . forecasts : NEW_LINE INDENT forecasts . append ( forecast ) NEW_LINE DEDENT for forecast in forecasts : NEW_LINE INDENT forecasts . append ( forecast ) NEW_LINE DEDENT return forecasts NEW_LINE DEDENT
get_most_accurate_forecast ( self , date ) : NEW_LINE INDENT try : NEW_LINE INDENT forecast = self . _forecast ( date ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT forecast = None NEW_LINE DEDENT if forecast is None : NEW_LINE INDENT forecast = self . _forecast ( date ) NEW_LINE DEDENT return forecast NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def get_location ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_location ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _get_location ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
find_beaufort_level ( self , point_forecast ) : NEW_LINE INDENT return self . find_beaufort_level ( point_forecast ) NEW_LINE DEDENT

is_shining ( self , time ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . sun . is_shining ( time ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
PointForecast getMatchingPointForecast ( PointForecast pointForecast ) { if ( pointForecast == null ) { return null ; } PointForecast pointForecast = pointForecast . getPointForecast ( ) ; return pointForecast ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


update_changelog ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . commit ( ) NEW_LINE self . connection . rollback ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE self . connection . commit ( ) NEW_LINE
execute ( self , script ) : NEW_LINE INDENT if isinstance ( script , ScriptEngine ) : NEW_LINE INDENT return self . execute ( script ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . execute ( script ) NEW_LINE DEDENT DEDENT
lookup ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_object ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_object ( ) NEW_LINE DEDENT DEDENT
ReferencedObject createReferencedObject ( ) { return new ReferencedObject ( ) ; }
create_referenced_object ( self ) : NEW_LINE INDENT return self . _create_referenced_object ( ) NEW_LINE DEDENT
decrypt ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . decrypt ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_string_substitution_enabled ( self ) : NEW_LINE INDENT if self . string_substitution_enabled : NEW_LINE INDENT return True NEW_LINE DEDENT if self . string_substitution_enabled : NEW_LINE INDENT return True NEW_LINE DEDENT if self . string_substitution_enabled : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT

decode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . decoder NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . decoder NEW_LINE DEDENT DEDENT
List < AdvertisedServiceImplementation > getAdvertisedServiceImplementations ( ) { List < AdvertisedServiceImplementation > advertisedServiceImplementations = new ArrayList < AdvertisedServiceImplementation > ( ) ; for ( int i = 0 ; i < advertisedServiceImplementations . size ( ) ; i ++ ) { advertisedServiceImplementations . add ( getAdvertisedServiceImplementation ( i ) ) ; } return advertisedServiceImplementations ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _get_remote_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _remote_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _remote_data NEW_LINE DEDENT DEDENT
size ( self ) : NEW_LINE INDENT return self . _size NEW_LINE DEDENT
static ReferencedData wrap ( ReferencedData data ) { if ( data == null ) { throw new IllegalArgumentException ( " data is null " ) ; } return data ; }
get_components ( self , name ) : NEW_LINE INDENT components = [ ] NEW_LINE for i in range ( len ( name ) ) : NEW_LINE INDENT components . append ( name [ i ] ) NEW_LINE DEDENT return components NEW_LINE DEDENT
get_name ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE name = name . strip ( ) NEW_LINE return name NEW_LINE DEDENT
def def color ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _color ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _color ( ) NEW_LINE DEDENT DEDENT
match_regular_expression ( self , regular_expression ) : NEW_LINE INDENT if regular_expression is not None : NEW_LINE INDENT return regular_expression NEW_LINE DEDENT elif regular_expression is not None : NEW_LINE INDENT return regular_expression NEW_LINE DEDENT DEDENT
def cfindloop ( self ) : NEW_LINE INDENT cfindloop = [ ] NEW_LINE while True : NEW_LINE INDENT cfindloop . append ( self ) NEW_LINE DEDENT return cfindloop NEW_LINE DEDENT
set_subexpression ( self , subexpression ) : NEW_LINE INDENT if subexpression is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( subexpression , str ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def crevdissect - determine backref shortest - first subexpression matches The retry memory stores the offset of the trial midpoint from begin + 1 to begin + 1 , and the offset of the next subexpression in the retry memory stores the offset of the trial midpoint from begin + 1 and the offset of the next subexpression in the retry memory .
_determine_backref_subexpression ( self , subexpression ) : NEW_LINE INDENT if subexpression is not None : NEW_LINE INDENT return subexpression NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
copy_out_ arcs ( self , state ) : NEW_LINE INDENT if isinstance ( state , State ) : NEW_LINE INDENT state = state . clone ( ) NEW_LINE DEDENT return state NEW_LINE DEDENT
optimize ( self , subtree ) : NEW_LINE INDENT if subtree : NEW_LINE INDENT return subtree NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
mark ( self , tree ) : NEW_LINE INDENT if tree is not None : NEW_LINE INDENT return mark ( tree ) NEW_LINE DEDENT elif tree is not None : NEW_LINE INDENT return mark ( tree ) NEW_LINE DEDENT else : NEW_LINE INDENT return mark ( ) NEW_LINE DEDENT DEDENT
nfanode ( nfatree ) : NEW_LINE INDENT if len ( nfatree ) == 1 : NEW_LINE INDENT return nfanode ( nfatree [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return nfanode ( nfatree [ 0 ] ) NEW_LINE DEDENT DEDENT
parse ( self ) : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT
deltraverse ( self ) : NEW_LINE INDENT if self . state is None : NEW_LINE INDENT self . state = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . state = self . state . copy ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
def def generate_arithmetic_ arcs ( self ) : NEW_LINE INDENT arcs = [ ] NEW_LINE for i in range ( 0 , len ( self . arcs ) ) : NEW_LINE INDENT arcs . append ( self . arcs [ i ] ) NEW_LINE DEDENT return arcs NEW_LINE DEDENT
generateArcs ( self ) : NEW_LINE INDENT arcs = [ ] NEW_LINE for word in self . words : NEW_LINE INDENT arcs . append ( word ) NEW_LINE DEDENT for word in self . words : NEW_LINE INDENT arcs . append ( word ) NEW_LINE DEDENT return arcs NEW_LINE DEDENT
scannum ( self , number ) : NEW_LINE INDENT if number is None : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT number = int ( number ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT number = int ( number ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return number NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
bracket_handle ( self , bracket ) : NEW_LINE INDENT if isinstance ( bracket , functools . partial ) : NEW_LINE INDENT return bracket NEW_LINE DEDENT elif isinstance ( bracket , functools . partial ) : NEW_LINE INDENT return bracket NEW_LINE DEDENT elif isinstance ( bracket , functools . partial ) : NEW_LINE INDENT return bracket NEW_LINE DEDENT return bracket NEW_LINE DEDENT
scanplain ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _scanplain ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
allocate_ lookahead_constraint ( self ) : NEW_LINE INDENT if self . lookahead_constraint is not None : NEW_LINE INDENT return self . lookahead_constraint NEW_LINE DEDENT if self . lookahead_constraint is not None : NEW_LINE INDENT return self . lookahead_constraint NEW_LINE DEDENT return None NEW_LINE DEDENT
fill ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT elif len ( args ) == 3 : NEW_LINE INDENT return args [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return args [ 3 ] NEW_LINE DEDENT DEDENT
fill ( self , arcs ) : NEW_LINE INDENT if len ( arcs ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( arcs ) == 1 : NEW_LINE INDENT return arcs [ 0 ] NEW_LINE DEDENT if len ( arcs ) == 2 : NEW_LINE INDENT return arcs [ 1 ] NEW_LINE DEDENT return arcs [ 0 ] NEW_LINE DEDENT
color ( self , color ) : NEW_LINE INDENT if color is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return color NEW_LINE DEDENT DEDENT
allocate_color ( self , color ) : NEW_LINE INDENT if color is None : NEW_LINE INDENT color = self . color NEW_LINE DEDENT else : NEW_LINE INDENT color = color NEW_LINE DEDENT return color NEW_LINE DEDENT
add_arc ( self , color , range ) : NEW_LINE INDENT self . add_arc ( color , range ) NEW_LINE return self NEW_LINE DEDENT
promote_subcolors ( self ) : NEW_LINE INDENT if self . subcolors is not None : NEW_LINE INDENT self . subcolors = self . subcolors NEW_LINE DEDENT DEDENT
add_colorchain ( self , colorchain ) : NEW_LINE INDENT self . colorchain = colorchain NEW_LINE self . colorchain . append ( colorchain ) NEW_LINE DEDENT
uncolorchain ( self ) : NEW_LINE INDENT if self . colorchain is not None : NEW_LINE INDENT self . colorchain . delete ( self . colorchain ) NEW_LINE DEDENT DEDENT
def dumpcolors ( self ) : NEW_LINE INDENT if self . debug : NEW_LINE INDENT print ( " dumpcolors - debugging output " ) NEW_LINE print ( self . dumpcolors ( ) ) NEW_LINE DEDENT DEDENT
set_lexstart ( self , lexical_stuff ) : NEW_LINE INDENT self . lexical_stuff = lexical_stuff NEW_LINE self . lexical_stuff = lexical_stuff NEW_LINE DEDENT
def def _implement__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def _implement__python____python____python____python____python____python____python____python____python__ def def def def prefixes__python____python____python____python____python____python____python____python____python__ def def def def def def prefixes__python____python____python____python__ def def def prefixes__python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def prefix__python____python____python____python____python____python____python__ def def def ___python____python____python____python____python__ def def def ___python____python____python____python____python____python__ def def def def ___python____python____python____python__ def def _
lexnest ( string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return lexnest ( string ) NEW_LINE DEDENT else : NEW_LINE INDENT return lexnest ( string ) NEW_LINE DEDENT DEDENT
def get_color ( self , codepoint ) : NEW_LINE INDENT if codepoint is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( codepoint , unicode ) : NEW_LINE INDENT return codepoint NEW_LINE DEDENT elif isinstance ( codepoint , unicode ) : NEW_LINE INDENT return codepoint NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def create_dFA ( self ) : NEW_LINE INDENT if not self . match : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . match NEW_LINE DEDENT DEDENT
get_last_point ( self ) : NEW_LINE INDENT if self . last_point is None : NEW_LINE INDENT self . last_point = self . last_point NEW_LINE DEDENT return self . last_point NEW_LINE DEDENT
process_single_character ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _process_single_character ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
UnicodeSet create ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name is null " ) ; } return new UnicodeSet ( name ) ; }
sort ( self , list ) : NEW_LINE INDENT if len ( list ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
dump ( self , tree ) : NEW_LINE INDENT if tree is not None : NEW_LINE INDENT tree . dump ( ) NEW_LINE DEDENT return tree NEW_LINE DEDENT
new_states ( self ) : NEW_LINE INDENT states = [ ] NEW_LINE for state in self . states . values ( ) : NEW_LINE INDENT states . append ( state ) NEW_LINE DEDENT for state in self . states . values ( ) : NEW_LINE INDENT states . append ( state ) NEW_LINE DEDENT return states NEW_LINE DEDENT
moveouts ( self ) : NEW_LINE INDENT if self . state is not None : NEW_LINE INDENT self . state . moveouts ( self . state ) NEW_LINE DEDENT return self NEW_LINE DEDENT
move ( self ) : NEW_LINE INDENT if self . arcs : NEW_LINE INDENT self . arcs = self . arcs . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . arcs = [ ] NEW_LINE DEDENT return self NEW_LINE DEDENT
copy ( self ) : NEW_LINE INDENT if self . arcs : NEW_LINE INDENT self . arcs = self . arcs . copy ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
copy_out_ arcs ( self ) : NEW_LINE INDENT if self . out_ arcs : NEW_LINE INDENT return self . out_ arcs NEW_LINE DEDENT DEDENT
def release ( self ) : NEW_LINE INDENT if self . arcs : NEW_LINE INDENT self . arcs = self . arcs [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT self . arcs = [ ] NEW_LINE DEDENT return self NEW_LINE DEDENT
UnwireState ( self , state ) : NEW_LINE INDENT self . _state = state NEW_LINE return self . _state NEW_LINE DEDENT
allocate_arc ( self ) : NEW_LINE INDENT if self . arc is not None : NEW_LINE INDENT self . arc = self . arc NEW_LINE DEDENT else : NEW_LINE INDENT self . arc = None NEW_LINE DEDENT DEDENT
duptraverse ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
fill ( self , * args , ** kwargs ) : NEW_LINE INDENT if args : NEW_LINE INDENT return self . fill ( * args , ** kwargs ) NEW_LINE DEDENT return self . fill ( * args , ** kwargs ) NEW_LINE DEDENT
dumpnfa ( self , nfa ) : NEW_LINE INDENT if isinstance ( nfa , str ) : NEW_LINE INDENT nfa = nfa . encode ( ' utf - 8' ) NEW_LINE DEDENT else : NEW_LINE INDENT nfa = nfa . encode ( ' utf - 8' ) NEW_LINE DEDENT return nfa NEW_LINE DEDENT
dumpstate ( self , state ) : NEW_LINE INDENT if state is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( state , NFAState ) : NEW_LINE INDENT return state NEW_LINE DEDENT
- dump out - arcs in human - readable form out = [ ] NEW_LINE out = [ ] NEW_LINE for i in range ( len ( out ) ) : NEW_LINE INDENT out . append ( out [ i ] ) NEW_LINE DEDENT return out NEW_LINE DEDENT
- dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs - dump remaining outarcs in reverse order dumprarcs - dump remaining outarcs recursively in reverse order dumprarcs
dump_outarc ( self , outarc ) : NEW_LINE INDENT outarc = self . _dump_outarc ( outarc ) NEW_LINE outarc = self . _dump_outarc ( outarc ) NEW_LINE return outarc NEW_LINE DEDENT
optimize ( self ) : NEW_LINE INDENT if self . _optimization : NEW_LINE INDENT return self . _optimization NEW_LINE DEDENT else : NEW_LINE INDENT return self . _optimization NEW_LINE DEDENT DEDENT
analyze ( self ) : NEW_LINE INDENT return self . _analyze ( ) NEW_LINE DEDENT
def def def lands def def def def combine def def def def ___python__ def def def def ___python____python____python____python__ def def def def ___python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python__ def def def get___python____python____python____python____python____python__ def def def ___python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python__ def def def get___python____python____python____python__ def def _
clean ( self ) : NEW_LINE INDENT self . _clean ( ) NEW_LINE self . _clean ( ) NEW_LINE self . _clean ( ) NEW_LINE DEDENT
markreachable ( self ) : NEW_LINE INDENT if self . reachable : NEW_LINE INDENT self . reachable = True NEW_LINE DEDENT return self NEW_LINE DEDENT
markcanreach ( self , states ) : NEW_LINE INDENT self . states = states NEW_LINE for state in states : NEW_LINE INDENT self . states . add ( state ) NEW_LINE DEDENT DEDENT
get rid of EMPTY arcs ( self ) : NEW_LINE INDENT if self . arcs is None : NEW_LINE INDENT self . arcs = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . arcs = [ ] NEW_LINE DEDENT DEDENT
unempty ( self ) : NEW_LINE INDENT if self . is_empty ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
read_rule_parameters ( self ) : NEW_LINE INDENT rule_parameters = [ ] NEW_LINE for line in self . rule_parameters : NEW_LINE INDENT rule_parameters . append ( line . strip ( ) ) NEW_LINE DEDENT return rule_parameters NEW_LINE DEDENT
static List < RuleInterpreterPlugin > getRuleInterpreterPlugins ( ) { List < RuleInterpreterPlugin > plugins = new ArrayList < RuleInterpreterPlugin > ( ) ; plugins . add ( new RuleInterpreterPlugin ( ) ) ; plugins . add ( new RuleInterpreterPlugin ( ) ) ; plugins . add ( new RuleInterpreterPlugin ( ) ) ; return plugins ; }
get_plugins ( self ) : NEW_LINE INDENT plugins = [ ] NEW_LINE for plugin in self . plugins : NEW_LINE INDENT plugins . append ( plugin ) NEW_LINE DEDENT return plugins NEW_LINE DEDENT
selection_rules ( self , rules ) : NEW_LINE INDENT if len ( rules ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( rules ) == 1 : NEW_LINE INDENT return [ rules [ 0 ] ] NEW_LINE DEDENT if len ( rules ) == 2 : NEW_LINE INDENT return [ rules [ 1 ] ] NEW_LINE DEDENT if len ( rules ) == 3 : NEW_LINE INDENT return [ rules [ 2 ] ] NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
run_tasks ( self , arguments ) : NEW_LINE INDENT tasks = [ ] NEW_LINE for arg in arguments : NEW_LINE INDENT tasks . append ( RunTask ( arg ) ) NEW_LINE DEDENT return tasks NEW_LINE DEDENT
extract_error_message ( self , exception ) : NEW_LINE INDENT if isinstance ( exception , Exception ) : NEW_LINE INDENT return exception . getMessage ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return exception . getMessage ( ) NEW_LINE DEDENT DEDENT
def def get_standard def def def def get_options ( self ) : def get_options ( self ) : def get_defaults ( self ) : NEW_LINE INDENT return self . _get_defaults ( ) NEW_LINE DEDENT def get_defaults ( self ) : NEW_LINE INDENT return self . _get_defaults ( ) NEW_LINE DEDENT
def def get_task_options ( self ) : NEW_LINE INDENT task_options = [ ] NEW_LINE for task in self . tasks : NEW_LINE INDENT task_options = self . task_options . copy ( ) NEW_LINE task_options . append ( task . name ) NEW_LINE task_options . append ( task . name ) NEW_LINE DEDENT return task_options NEW_LINE DEDENT
get_supported_tasks_names ( self ) : NEW_LINE INDENT return self . _get_supported_tasks_names ( ) NEW_LINE DEDENT
execute_task ( self , command ) : NEW_LINE INDENT task = self . _parse_command ( command ) NEW_LINE if task : NEW_LINE INDENT return task NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
parse_command_line ( self , command_line ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_command_line ( command_line ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute_task ( self , task ) : NEW_LINE INDENT try : NEW_LINE INDENT task . execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT return task NEW_LINE DEDENT
read_plugin_properties ( self ) : NEW_LINE INDENT if not self . plugin_properties : NEW_LINE INDENT self . plugin_properties = { } NEW_LINE DEDENT return self . plugin_properties NEW_LINE DEDENT
usage ( self ) : NEW_LINE INDENT self . print_usage_info ( ) NEW_LINE self . print_usage_info ( ) NEW_LINE DEDENT
static JQASSISTANT_HOME directory ( ) { JQASSISTANT_HOME = new JQASSISTANT_HOME ( ) ; return JQASSISTANT_HOME ; }
def def def def createClassLoader__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def load__python____python____python____python____python____python____python____python__ def def def def load__python____python____python____python__ def def def def load__python____python____python____python____python____python__ def def def def def load__python____python____python____python____python__ def def def def def load__python____python____python____python____python__ def def def def def load__python____python____python____python____python__ def def def def def load__python____python____python____python____python____python__ def def def def def def load__python____python____python____python____python____python__ def def def def load__python____python____python____python____python____python__ def def def def load__python____python____python____python____python____python__ def def def load__python____python____python____python____python____python__ def def def load__python____python____python____python____python__ def def def load__python____python____python____python____python____python__ def def def load__python____python____python____python____python____python__ def def def def _
public public static final BoundingBox getBoundingBox boundingBox ( ) { return new BoundingBox ( ) { @ Override public boolean isValid ( ) { return true ; } } }

reverse ( self , target , params = None ) : NEW_LINE INDENT if params is None : NEW_LINE INDENT params = { } NEW_LINE DEDENT return self . _reverse ( target , params ) NEW_LINE DEDENT
add_path_pattern ( self , path_pattern ) : NEW_LINE INDENT if path_pattern is None : NEW_LINE INDENT return NEW_LINE DEDENT if path_pattern not in self . path_patterns : NEW_LINE INDENT self . path_patterns . add ( path_pattern ) NEW_LINE return NEW_LINE DEDENT self . path_patterns . add ( path_pattern ) NEW_LINE DEDENT
get_number_of_routes ( self ) : NEW_LINE INDENT routes = [ ] NEW_LINE for route in self . router . routes : NEW_LINE INDENT routes . append ( route ) NEW_LINE DEDENT return len ( routes ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
check_route ( self , route ) : NEW_LINE INDENT if not route : NEW_LINE INDENT return False NEW_LINE DEDENT if not route : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
static Criterion getCriterion ( Object value ) { if ( value == null ) { return null ; } if ( value . equals ( null ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " null " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return null ; } if ( value . equals ( " " ) ) { return

public public public public static int compare ( Folders , Folders ) { return Folders . size ( ) - Folders . size ( ) ; }
def Compairs ( self ) : NEW_LINE INDENT entries = self . _entries . values ( ) NEW_LINE entries . sort ( ) NEW_LINE entries . reverse ( ) NEW_LINE return entries NEW_LINE DEDENT
compareBookmark ( Bookmark bookmark , url ) : NEW_LINE INDENT if ( bookmark != null ) { return bookmark . compareTo ( url ) NEW_LINE DEDENT return bookmark . compareTo ( url ) NEW_LINE DEDENT
last_modified_time ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . last_modified_time NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_source_files ( self , page ) : NEW_LINE INDENT if not page : NEW_LINE INDENT return [ ] NEW_LINE DEDENT files = [ ] NEW_LINE for file in page . files : NEW_LINE INDENT files . append ( file ) NEW_LINE DEDENT return files NEW_LINE DEDENT
def def def def def public public public public public static IAS public public public public public public public public public public public public public public public public public public static public static public static void start public static void start public static void start public static void start public static void start public static void start public static void start public static void main ( String [ public static final String [ public static final String [ ] args args = new String [ ] { } public static final String [ ] args = new String [ ] { } public static final String [ ] args = new String [ ] { } public static final String [ ] { return null ; } }
parse_basic_authentication_header ( self , header ) : NEW_LINE INDENT if header is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( header , dict ) : NEW_LINE INDENT return header NEW_LINE DEDENT if isinstance ( header , dict ) : NEW_LINE INDENT return header NEW_LINE DEDENT return None NEW_LINE DEDENT
static ProtectedFunctionMapper getInstance ( Class < ? > clazz ) { if ( clazz != null ) { return clazz . newInstance ( ) ; } return new ProtectedFunctionMapper ( clazz ) ; }
static void store ( String prefix , String name ) { if ( prefix == null ) { throw new IllegalArgumentException ( " prefix must not be null " ) ; } if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } }
static Method getInstance ( Class < ? > class ) { if ( class == null ) { throw new IllegalArgumentException ( " Class is null . " ) ; } return class . getMethod ( " getInstance " ) ; }
static String resolve ( String prefix , String localName ) { if ( prefix == null || localName == null || localName . length ( ) == 0 || prefix . length ( ) == 0 || localName . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 || prefix . length ( ) == 0 ) { return null ; }
static XMLString fromString ( String xmlString ) { if ( xmlString != null ) { return new XMLString ( xmlString ) ; } return new XMLString ( ) ; }
static Variable resolve ( Context context ) { if ( context == null ) { return null ; } Variable variable = context . getVariable ( ) ; if ( variable == null ) { return null ; } return variable . resolve ( context ) ; }
parse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
process_include_directive ( self , path ) : NEW_LINE INDENT if self . include_directive is not None : NEW_LINE INDENT return self . include_directive . process_include_directive ( self . include_directive , path ) NEW_LINE DEDENT return None NEW_LINE DEDENT
extract_tag_file_directive ( self , name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT return name NEW_LINE DEDENT
parse ( self , path ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parser . parse ( path ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def create_compiler_object ( self ) : NEW_LINE INDENT return self . _create_compiler_object ( ) NEW_LINE DEDENT
get_resource_stream ( self , context ) : NEW_LINE INDENT if self . _resource_stream is None : NEW_LINE INDENT self . _resource_stream = self . _resource_stream NEW_LINE DEDENT else : NEW_LINE INDENT self . _resource_stream = self . _resource_stream NEW_LINE DEDENT DEDENT
last_modified_timestamp ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _last_modified_timestamp NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
bootclassloader ( self ) : NEW_LINE INDENT if self . bootclassloader is not None : NEW_LINE INDENT return self . bootclassloader NEW_LINE DEDENT return self . bootclassloader NEW_LINE DEDENT
_delegate ( self ) : NEW_LINE INDENT if self . _delegate is None : NEW_LINE INDENT self . _delegate = self . _delegate ( ) NEW_LINE DEDENT return self . _delegate NEW_LINE DEDENT
get_cycle ( self ) : NEW_LINE INDENT if self . cycle is not None : NEW_LINE INDENT return self . cycle NEW_LINE DEDENT else : NEW_LINE INDENT return self . cycle NEW_LINE DEDENT DEDENT

from a full data set to a paginated data set I'm trying to Paginate from a data set to a paginated data set. I'm not sure if this is the correct way to do it. I'm not sure if this is the correct way to do it. I'm not sure if this is the correct way to do it.
def convert_string_to_meta_key ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
def def fill_requirements ( self ) : NEW_LINE INDENT requirements = [ ] NEW_LINE for requirement in self . requirements : NEW_LINE INDENT requirements . append ( requirement ) NEW_LINE DEDENT return requirements NEW_LINE DEDENT
parse_tag_file ( self , tag_file_path ) : NEW_LINE INDENT tag_file_path = os . path . abspath ( tag_file_path ) NEW_LINE if tag_file_path . startswith ( tag_file_path ) : NEW_LINE INDENT return tag_file_path NEW_LINE DEDENT return tag_file_path NEW_LINE DEDENT
parse ( String path ) : NEW_LINE INDENT try : NEW_LINE INDENT return parse ( path ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_digest ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return self . digest NEW_LINE DEDENT return self . digest NEW_LINE DEDENT
get_size ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return self . size NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def validate_channel_name ( channel_name ) : NEW_LINE INDENT if channel_name is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif channel_name is not None : NEW_LINE INDENT return channel_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def public public public public static final public static final void append ( XZBlock xz public static public static final public static final public static final void append ( XZBlock xz public static final public static final public static final void append ( XZBlock xz public static final String toString ( final XZBlock , final XZBlock xzBlock ) { if ( xzBlock != null ) { if ( xzBlock != null ) { if ( xzBlock != null ) { throw new IllegalArgumentException ( " XZBlock is not a valid XZBlock . " ) ; } } } }
public static Block getBlock ( int position ) { return new Block ( ) { @ Override public Block getBlock ( ) { return new Block ( position ) ; } } }
get_all_relevant_maven_artifacts ( self ) : NEW_LINE INDENT all_relevant_maven_artifacts = [ ] NEW_LINE for artifact in self . get_all_relevant_maven_artifacts ( ) : NEW_LINE INDENT all_relevant_maven_artifacts . append ( artifact ) NEW_LINE DEDENT DEDENT
update ( self , opts ) : NEW_LINE INDENT if len ( opts ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( opts ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( opts ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( opts ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( opts ) == 4 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( opts ) == 5 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( opts ) == 6 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def get_prices ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . prices NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . prices NEW_LINE DEDENT DEDENT
def _calc_prices ( long rep , long rep0 , long rep1 , long rep2 , long rep3 , long rep4 , long rep5 , long rep6 , long rep7 , long rep7 , long rep8 , long rep9 , long rep8 , long rep9 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep9 , long rep8 , long rep9 , long rep8 , long rep9 , long rep9 , long rep8 , long rep9 , long rep
_calc_price ( self , literal , rep0 ) : NEW_LINE INDENT if literal : NEW_LINE INDENT return self . _calc_price ( literal , rep0 ) NEW_LINE DEDENT return self . _calc_price ( literal , rep0 ) NEW_LINE DEDENT
def get_expected_byte ( byte [ ] bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return byte [ 0 ] NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return None NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def _get_invalid_byte def _get_invalid_bytes ( self , byte [ ] bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_invalid_bytes ( bytes ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT


static JspServletWrapper newJspServletWrapper ( ) { JspServletWrapper jspServletWrapper = new JspServletWrapper ( ) ; JspServletWrapper jspServletWrapper = new JspServletWrapper ( ) ; jspServletWrapper . setJspServlet ( jspServletWrapper ) ; return jspServletWrapper ; }
def get_parent_class_loader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . parent_class_loader NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . parent_class_loader NEW_LINE DEDENT DEDENT
save_bytecode ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT bytecode = cls . bytecode NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT bytecode = cls . bytecode NEW_LINE DEDENT else : NEW_LINE INDENT bytecode = cls . bytecode NEW_LINE DEDENT return bytecode NEW_LINE DEDENT
get_time ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _time NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save_class_to_disk ( cls ) : NEW_LINE INDENT try : NEW_LINE INDENT bytecode = cls . bytecode NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT bytecode = cls . bytecode NEW_LINE DEDENT return bytecode NEW_LINE DEDENT
check_dependencies ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _check_dependencies ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _check_dependencies ( ) NEW_LINE DEDENT DEDENT
initialize_classpath ( self ) : NEW_LINE INDENT self . _classpath = { } NEW_LINE self . _classpath . clear ( ) NEW_LINE self . _classpath . putAll ( self . _classpath ) NEW_LINE DEDENT
void run ( ) { while ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { break ; } } }
void run ( ) { while ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { break ; } } }
recompile ( self ) : NEW_LINE INDENT if not self . compiled : NEW_LINE INDENT self . compiled = True NEW_LINE DEDENT else : NEW_LINE INDENT self . compiled = False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
deploy_group_cache_map ( self , group_cache_map ) : NEW_LINE INDENT if group_cache_map is None : NEW_LINE INDENT return NEW_LINE DEDENT group_cache_map = group_cache_map . copy ( ) NEW_LINE group_cache_map . clear ( ) NEW_LINE group_cache_map . add ( group_cache_map ) NEW_LINE return group_cache_map NEW_LINE DEDENT
def _get_deploy_auth_service_methods ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT

main ( ) : NEW_LINE INDENT parser = Parser ( ) NEW_LINE try : NEW_LINE INDENT parser . parse ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT return parser NEW_LINE DEDENT
Attributes for a reader provided for external use ( ) { if ( reader == null ) { throw new IllegalArgumentException ( " No reader provided for external use " ) ; } if ( reader == null ) { throw new IllegalArgumentException ( " No reader provided for external use " ) ; } return reader ; }
def send ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _send ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
public public static List < String [ ] include_prelude_config_files ( ) { return new ArrayList < String > ( ) { @ Override public List < String > list ( ) { return new ArrayList < String > ( ) ; } } }
static boolean parseJspAttributeAndBody ( JspAttributeAndBody body ) { if ( body == null ) { return false ; } if ( body instanceof JspAttributeAndBody ) { return true ; } if ( body instanceof JspAttributeAndBody ) { return true ; } if ( body instanceof JspAttributeAndBody ) { return true ; } return false ; }
add_attribute ( self , name , value ) : NEW_LINE INDENT if name in self . attribute_names : NEW_LINE INDENT self . attribute_names . add ( name ) NEW_LINE DEDENT self . attribute_names . add ( value ) NEW_LINE DEDENT
add_child_node ( self , node ) : NEW_LINE INDENT self . node . append ( node ) NEW_LINE DEDENT
Iterator < String > getAttributeNames ( ) { Iterator < String > iterator = new Iterator < String > ( ) ; while ( iterator . hasNext ( ) ) { if ( iterator . next ( ) == null ) { iterator . remove ( ) ; } } return iterator ; }
Iterator < Iterator < ? > > getChildren ( ) { Iterator < Iterator < ? > > children = this . children ; if ( children . hasNext ( ) ) { return children . next ( ) ; } else if ( children . hasNext ( ) ) { return children . next ( ) ; } else { return children ; } }
Iterator < Node > getChildren ( ) { if ( children == null ) { return new Iterator < Node > ( ) ; } Iterator < Node > children = children . iterator ( ) ; if ( children . hasNext ( ) ) { return children . next ( ) ; } return children ; }
create_instance ( self , classifier , extension ) : NEW_LINE INDENT self . classifier = classifier NEW_LINE self . extension = extension NEW_LINE return self NEW_LINE DEDENT
get_variable_name ( self , variable_name ) : NEW_LINE INDENT if isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT elif isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
capture_thread ( self , thread_id ) : NEW_LINE INDENT self . thread_id = thread_id NEW_LINE self . thread_name = thread_id NEW_LINE self . thread_name = thread_name NEW_LINE self . thread_name = thread_name NEW_LINE self . thread_name = thread_name NEW_LINE DEDENT
capture ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . output NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

write_field ( self , field_name , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_name , str ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT

def add ( self , element ) : NEW_LINE INDENT if not self . children : NEW_LINE INDENT self . children . append ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT self . append ( element ) NEW_LINE DEDENT DEDENT
add ( self , element ) : NEW_LINE INDENT if isinstance ( element , Element ) : NEW_LINE INDENT element . appendChild ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT element . appendChild ( element ) NEW_LINE DEDENT DEDENT
void write ( BodyJspWriter bodyJspWriter ) throws IOException { if ( bodyJspWriter != null ) { bodyJspWriter . write ( bodyJspWriter ) ; } else { bodyJspWriter . write ( bodyJspWriter ) ; } }
def def set_writer ( self , writer ) : NEW_LINE INDENT self . writer = writer NEW_LINE self . writer = writer NEW_LINE DEDENT
public public static ByteBuffer buffer ( ) { if ( buffer == null ) { return null ; } else { return buffer . copy ( ) ; } }
static List < FunctionMapper > getFunctionMappers ( ) { List < FunctionMapper > mappers = new ArrayList < FunctionMapper > ( ) ; mappers . add ( new FunctionMapper ( ) ) ; mappers . add ( new FunctionMapper ( ) ) ; mappers . add ( new FunctionMapper ( ) ) ; return mappers ; }
find_first ( parent , key ) : NEW_LINE INDENT if key in parent : NEW_LINE INDENT return parent [ key ] NEW_LINE DEDENT else : NEW_LINE INDENT return parent [ key ] NEW_LINE DEDENT DEDENT
register_model ( self , model ) : NEW_LINE INDENT self . model = model NEW_LINE DEDENT
stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _stream NEW_LINE DEDENT DEDENT
def def monitor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _monitor . monitor ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
test_channel_deploy_keys ( self , request ) : NEW_LINE INDENT if request . is_authenticated ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif request . is_authenticated ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
void close ( ) throws IOException { if ( writer != null ) { writer . close ( ) ; writer = null ; } }
parse_channel_data ( self ) : NEW_LINE INDENT if isinstance ( self , ChannelData ) : NEW_LINE INDENT return self . parse_channel_data ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
Compresses for LZMA2 ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static Map < String , String > extractMetaData ( Map < String , String > provided , Map < String , String > extracted ) { Map < String , String > metaData = new HashMap < > ( ) ; metaData . putAll ( provided ) ; metaData . putAll ( extracted ) ; metaData . putAll ( extracted ) ; return metaData ; }
def get_request_exception_request_attribute_value ( self ) : NEW_LINE INDENT if ( self . request . request . getAttribute ( ) != null ) { return self . request . getAttribute ( ) NEW_LINE DEDENT
check_checksum ( self , artifact ) : NEW_LINE INDENT if isinstance ( artifact , Artifact ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
finish ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . stream . close ( ) NEW_LINE DEDENT DEDENT
def def def get_exception ( self ) : NEW_LINE INDENT if self . pageContext is not None : NEW_LINE INDENT return self . pageContext . get_exception ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
an EL expression .
static String prefix ( String prefix ) { if ( prefix == null || prefix . length ( ) == 0 ) { return prefix ; } return prefix ; }
static boolean isXML ( String file ) { if ( file == null ) { return false ; } if ( file . length ( ) == 0 ) { return false ; } if ( file . length ( ) == 1 ) { return true ; } return false ; }
parse_tag_file ( self , tag_file ) : NEW_LINE INDENT self . tag_file = tag_file NEW_LINE return self . tag_file NEW_LINE DEDENT
load_tagfile ( self , tagfile ) : NEW_LINE INDENT self . tagfile = tagfile NEW_LINE return self . tagfile NEW_LINE DEDENT
static java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? extends java . lang . Class < ? > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
def _get_glassFish ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _glassFish NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _glassFish NEW_LINE DEDENT DEDENT
def resolve ( cls def resolve ( self ) : NEW_LINE INDENT return self . getClasses ( ) NEW_LINE DEDENT
static List < String > getAllJsps ( ) { List < String > jsps = new ArrayList < String > ( ) ; for ( int i = 0 ; i < jsps . size ( ) ; i ++ ) { jsps . add ( jsps . get ( i ) ) ; } return jsps ; }
static String findWebInfDir ( final String docbase ) { if ( docbase == null ) { throw new IllegalArgumentException ( " No docbase specified . " ) ; } if ( docbase . length ( ) == 0 ) { throw new IllegalArgumentException ( " No docbase specified . " ) ; } return docbase ; }
start ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT yield self NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void normalizes ( byte [ ] bytes ) { if ( bytes . length == 0 ) return ; if ( bytes . length == 0 ) return ; if ( bytes . length == 0 ) return ; if ( bytes . length == 1 ) return ; if ( bytes . length == 1 ) return ; if ( bytes . length == 2 ) return ; if ( bytes . length == 2 ) return ; if ( bytes . length == 3 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 2 ) return ; if ( bytes . length == 3 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 3 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 4 ) return ; if ( bytes . length == 4 ) return ; if
search_stream ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , str ) : NEW_LINE INDENT return stream NEW_LINE DEDENT elif isinstance ( stream , str ) : NEW_LINE INDENT return stream NEW_LINE DEDENT elif isinstance ( stream , str ) : NEW_LINE INDENT return stream NEW_LINE DEDENT else : NEW_LINE INDENT return stream NEW_LINE DEDENT DEDENT
static boolean isWhiteSpace ( String s ) { if ( s == null ) { return false ; } if ( s . startsWith ( " " ) ) { return true ; } return false ; }
skip ( self , string ) : NEW_LINE INDENT if not self . match ( string ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . match ( string ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
skip ( self , string ) : NEW_LINE INDENT if not self . match ( string ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . match ( string ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
void skip ( int endTag ) throws IOException { if ( endTag < 0 ) { throw new IOException ( " Negative end tag " ) ; } if ( endTag > 0 ) { throw new IOException ( " Negative end tag " ) ; } }
parse ( self , token ) : NEW_LINE INDENT if isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT elif isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT elif isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT elif isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT elif isinstance ( token , str ) : NEW_LINE INDENT return token NEW_LINE DEDENT else : NEW_LINE INDENT return token NEW_LINE DEDENT DEDENT
pop ( self ) : NEW_LINE INDENT if self . current is not None : NEW_LINE INDENT return self . current . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . current NEW_LINE DEDENT DEDENT
unclassified_version ( self ) : NEW_LINE INDENT if not self : NEW_LINE INDENT return self NEW_LINE DEDENT self = self . copy ( ) NEW_LINE return self NEW_LINE DEDENT
filter_aspect_lists ( self , aspect_lists ) : NEW_LINE INDENT if isinstance ( aspect_lists , list ) : NEW_LINE INDENT return aspect_lists NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
get_aspect_ids ( self ) : NEW_LINE INDENT aspect_ids = [ ] NEW_LINE for aspect in self . aspect_ids : NEW_LINE INDENT aspect_ids . append ( aspect . id ) NEW_LINE DEDENT return aspect_ids NEW_LINE DEDENT
def _get_prefix_url ( self ) : NEW_LINE INDENT prefix = self . _get_prefix ( ) NEW_LINE if prefix : NEW_LINE INDENT return prefix NEW_LINE DEDENT else : NEW_LINE INDENT return prefix NEW_LINE DEDENT DEDENT
def _get_path_prefix_url ( self ) : NEW_LINE INDENT return self . _get_path_prefix_url ( ) NEW_LINE DEDENT
def def def PWC ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _PWC ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _PWC ( ) NEW_LINE DEDENT DEDENT
def create ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create ( node ) NEW_LINE DEDENT DEDENT
merge ( self , binding ) : NEW_LINE INDENT result = [ ] NEW_LINE result . append ( binding ) NEW_LINE result . append ( binding ) NEW_LINE result . append ( binding ) NEW_LINE return result NEW_LINE DEDENT
initialize ( self ) : NEW_LINE INDENT if self . current_state is not None : NEW_LINE INDENT return self . current_state NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_available_aspects ( self ) : NEW_LINE INDENT return self . _get_available_aspects ( ) NEW_LINE DEDENT
def def get_unqualified_version ( self , file_path ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . path . getmtime ( file_path ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT return None NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
invoke_tag_plugin ( self , tag_plugin ) : NEW_LINE INDENT if tag_plugin is not None : NEW_LINE INDENT return tag_plugin . invoke_plugin ( tag_plugin ) NEW_LINE DEDENT return tag_plugin NEW_LINE DEDENT
def def copy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . put ( self . array , self . array ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . cache . put ( self . array , self . array ) NEW_LINE DEDENT DEDENT
static byte [ ] getByteArray ( ) { byte [ ] array = new byte [ 0 ] ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = array [ i ] ; } return array ; }
aether result list to AetherResult object ( ) { List < AetherResult > resultList = new ArrayList < AetherResult > ( ) ; resultList . add ( new AetherResult ( ) ) ; return resultList ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
validate ( self ) : NEW_LINE INDENT if self . tagLibraryValidator is not None : NEW_LINE INDENT return self . tagLibraryValidator . validate ( self ) NEW_LINE DEDENT return self . tagLibraryValidator . validate ( self ) NEW_LINE DEDENT

def def def def def def convert ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def get_ def _ _get_xml ( self ) : NEW def get_xml_encoding ( self ) : NEW def get_xml_encoding ( self ) : NEW_LINE def get_encoding ( self ) : NEW_LINE INDENT return self . _get_xml_encoding ( ) NEW_LINE def get_encoding ( self ) : NEW_LINE INDENT return self . _
def _getDocumentScanner ( self ) : NEW_LINE INDENT return self . _getDocumentScanner ( ) NEW_LINE DEDENT
public static Convenience function Convenience function used in all XML scanners ( ) { return new Convenience ( ) ; }
get_real_path ( self ) : NEW_LINE INDENT context = self . context NEW_LINE if context is None : NEW_LINE INDENT return None NEW_LINE DEDENT real_path = self . get_real_path ( context ) NEW_LINE if real_path is None : NEW_LINE INDENT return None NEW_LINE DEDENT return real_path NEW_LINE DEDENT
url ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _url NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _url NEW_LINE DEDENT DEDENT
InputStream getResourceAsStream ( String path ) throws IOException { if ( path == null ) { return null ; } if ( path . startsWith ( " / " ) ) { return new FileInputStream ( new File ( path ) ) ; } if ( path . startsWith ( " / " ) ) { return new FileInputStream ( new File ( path ) ) ; } return null ; }
get_resource_paths ( self ) : NEW_LINE INDENT context = self . context NEW_LINE resource_paths = [ ] NEW_LINE for path in self . resource_paths : NEW_LINE INDENT resource_paths . append ( os . path . abspath ( path ) ) NEW_LINE DEDENT return resource_paths NEW_LINE DEDENT
log ( self , message , exception = None ) : NEW_LINE INDENT if exception is None : NEW_LINE INDENT exception = { } NEW_LINE DEDENT else : NEW_LINE INDENT exception = { } NEW_LINE DEDENT logger . info ( " Log : { } " . format ( message , exception ) ) NEW_LINE logger . error ( " Log : { } " . format ( exception ) ) NEW_LINE logger . error ( " Log : { } " . format ( exception ) ) NEW_LINE DEDENT
def addFilter ( final String name , final String name , final String description , final String class_name , final String class_name , final String description , final String class_name ) : NEW_LINE INDENT if ( class_name != null && class_name != null && ! class_name . isEmpty ( ) : NEW_LINE INDENT class_name = class_name . trim ( ) NEW_LINE DEDENT else : NEW_LINE INDENT class_name = class_name . trim ( ) NEW_LINE class_name = class_name . trim ( ) NEW_LINE class_name = class_name . trim ( ) NEW_LINE class_name = class_name . trim ( ) NEW_LINE DEDENT return class_name NEW_LINE DEDENT
def get_window_size ( self ) : NEW_LINE INDENT return self . _window_size NEW_LINE DEDENT
get_memory_usage ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _memory_usage NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_preset_dictionary ( self , preset_dictionary ) : NEW_LINE INDENT self . set_preset_dictionary ( preset_dictionary ) NEW_LINE DEDENT
def def def def def public public public void move ( final public void move ( ) throws IOException e public void move ( ) throws IOException { if ( buffer . size > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) > 0 ) { buffer . clear ( ) ; buffer . clear ( ) ; buffer . clear ( ) ; }
def def public public public public public public void write ( byte [ public void write ( byte [ public void write ( byte [ public void write ( byte [ [ ] buffer , byte [ ] buffer , int index , byte [ ] buffer ) { public void write ( byte [ ] buffer , int index , byte [ ] buffer ) { if ( buffer . length > 0 ) { if ( buffer . length > 0 ) { throw new IllegalArgumentException ( ) ; } } else if ( buffer . length > 0 ) { throw new IllegalArgumentException ( ) ; } } else if ( buffer . length > 0 ) { throw new IllegalArgumentException ( ) ; } } }
def flush ( self ) : NEW_LINE INDENT self . _flush ( ) NEW_LINE self . _flush ( ) NEW_LINE DEDENT
length ( self , distance ) : NEW_LINE INDENT return self . length ( distance ) NEW_LINE DEDENT
length ( self ) : NEW_LINE INDENT distance = self . distance NEW_LINE if distance is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT return distance NEW_LINE DEDENT
assert_match_finder_is_valid ( self , match finder ) : NEW_LINE INDENT if self . match_finder is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . match_finder is not None : NEW_LINE INDENT return self . match_finder . is_valid ( ) NEW_LINE DEDENT if self . match_finder is not None : NEW_LINE INDENT return self . match_finder . is_valid ( ) NEW_LINE DEDENT return self . match_finder . is_valid ( ) NEW_LINE DEDENT
move ( self , input ) : NEW_LINE INDENT if len ( input ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( input ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( input ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( input ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( input ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( input ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT

flush ( self ) : NEW_LINE INDENT self . flush ( ) NEW_LINE DEDENT
def def _discard_output_buffer ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . output_buffer = self . output_buffer NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . output_buffer = self . output_buffer NEW_LINE DEDENT DEDENT
Flush ( self , stream ) : NEW_LINE INDENT self . stream . flush ( ) NEW_LINE DEDENT
close_stream ( self , stream ) : NEW_LINE INDENT try : NEW_LINE INDENT stream . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
def def def get___python____python____python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def def get___python____python____python__ def def def ___python____python__ def def def def get_ def get___python__ def get_ def get___python__ def get_ def get___python__ def get___python__ def get___python__ def get___python____python__ def get___python__ def get___python____python__ def get___python__ def get___python__ def get___python__ def get___python__ def get_ def _get_PWC ( self ) : NEW def get_PWC ( self ) : NEW_LINE def get_PWC ( self ) : NEW_LINE def get_PWC ( self ) : NEW_LINE def get_PWC ( self ) : NEW_LINE
def def def def def def Process def def def def Process def def def public public public public public public public void process public static void process ( final public static void process ( final public static void process ( final String javacErrorReport report , final String message , final String message , final String message , final String message , final String message ) { if ( message != null ) { throw new IllegalArgumentException ( message ) ; } public static void process ( final String message ) { if ( message != null ) { throw new IllegalArgumentException ( message ) ; } } } }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void main ( String [ ] args ) throws ServletException { try { Class . forName ( " com . sun . tools . javac . Main " ) ; } catch ( ClassNotFoundException e ) { throw new ServletException ( e ) ; } }
compile ( self ) : NEW_LINE INDENT return self . _compile ( ) NEW_LINE DEDENT
remove_generated_files ( self , files ) : NEW_LINE INDENT if not files : NEW_LINE INDENT return NEW_LINE DEDENT for file in files : NEW_LINE INDENT self . remove_generated_file ( file ) NEW_LINE DEDENT return NEW_LINE DEDENT
static Jsr199JavaCompiler getJavaCompiler ( ) { return new Jsr199JavaCompiler ( ) ; }
static boolean isJar ( String path ) { if ( path == null ) { return false ; } if ( path . endsWith ( " . jar " ) ) { return true ; } if ( path . endsWith ( " . jar " ) ) { return true ; } if ( path . endsWith ( " . jar " ) ) { return true ; } return false ; }
escape ( self , character ) : NEW_LINE INDENT try : NEW_LINE INDENT return unicodedata . normalize ( ' NFKD ' , character ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def generateDeclarations ( self ) : NEW_LINE INDENT declarations = [ ] NEW_LINE declarations = [ ] NEW_LINE for declarations in self . declarations : NEW_LINE INDENT declarations . append ( declarations ) NEW_LINE DEDENT return declarations NEW_LINE DEDENT
def get_tag_handler_pool_names ( self ) : NEW_LINE INDENT pool_names = [ ] NEW_LINE for name in self . tag_handlers : NEW_LINE INDENT pool_names . append ( name ) NEW_LINE DEDENT return pool_names NEW_LINE DEDENT
def def create_xml_declaration ( self ) : NEW_LINE INDENT return self . _create_xml_declaration ( ) NEW_LINE DEDENT

static final String getEnding ( final String servletName ) { if ( servletName == null || servletName . length ( ) == 0 || servletName . length ( ) == 0 || servletName . length ( ) == 0 || servletName . length ( ) == 0 || servletName . length ( ) == 0 ) { return " " ; } return servletName ; }
main ( self ) : NEW_LINE INDENT if not self . generator : NEW_LINE INDENT self . generator = Generator ( self ) NEW_LINE DEDENT return self . generator . main ( ) NEW_LINE DEDENT
tag_handler_attributes ( self ) : NEW_LINE INDENT return self . _tag_handler_attributes . copy ( ) NEW_LINE DEDENT
read_properties ( self , properties ) : NEW_LINE INDENT properties = { } NEW_LINE for key , value in properties . items ( ) : NEW_LINE INDENT try : NEW_LINE INDENT properties [ key ] = value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return properties NEW_LINE DEDENT
export_content ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _content NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate ( self ) : NEW_LINE INDENT if self . tagLibraryValidator is not None : NEW_LINE INDENT return self . tagLibraryValidator . validate ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_expression ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , basestring ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , basestring ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , basestring ) : NEW_LINE INDENT return expression NEW_LINE DEDENT else : NEW_LINE INDENT return expression NEW_LINE DEDENT DEDENT

find_uri ( uri ) : NEW_LINE INDENT if not uri : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse ( uri ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
static void print ( String comment ) { if ( comment != null && comment . length ( ) > 0 ) { System . out . println ( comment ) ; } else { System . out . println ( ) ; } }
def def get_current_indention ( self , string ) : NEW_LINE INDENT return self . indention NEW_LINE DEDENT
def def def def def def get_ind__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def print__python____python____python____python____python____python__ def def def def def print__python____python____python____python____python__ def def def def def get___python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def get_ def get_string ( self ) : NEW def get_string ( self ) : NEW def get_string ( self ) : NEW def get_string ( self ) : NEW_LINE def get_string ( self ) : NEW_LINE INDENT return self . get_string ( ) NEW_LINE def get_string ( self ) : NEW_LINE INDENT return self . get_string ( ) NEW_LINE def get_string ( self ) :
def def print_string ( self , string ) : NEW_LINE INDENT print ( string ) NEW_LINE print ( string ) NEW_LINE print ( string ) NEW_LINE DEDENT
parse_potential_expression ( expression ) : NEW_LINE INDENT if isinstance ( expression , str ) : NEW_LINE INDENT return expression NEW_LINE DEDENT else : NEW_LINE INDENT return expression NEW_LINE DEDENT DEDENT
check_scope ( self , scope ) : NEW_LINE INDENT if isinstance ( scope , Scope ) : NEW_LINE INDENT return scope NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
escape_entities ( self , entities ) : NEW_LINE INDENT if len ( entities ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( entities ) == 1 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT return ' ' NEW_LINE DEDENT
validate_syntax ( self , string ) : NEW_LINE INDENT if isinstance ( string , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
get_tag_handler_class_name ( self ) : NEW_LINE INDENT tag_handler_class_name = self . _tag_handler_class_name NEW_LINE return tag_handler_class_name NEW_LINE DEDENT
static String convert ( String path ) { if ( path == null ) { return null ; } if ( path . startsWith ( " / " ) ) { return path . substring ( 1 ) ; } else { return path . substring ( 1 ) ; } }
split ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT DEDENT
convert_identifier ( identifier ) : NEW_LINE INDENT try : NEW_LINE INDENT return identifier NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public public static final String toString ( String name ) { return name . toUpperCase ( ) + " . " " + name . toUpperCase ( ) ; }
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; System . out . println ( args [ i ] ) ; } }
add_property_entry ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , basestring ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE

get_meta_data ( self , namespace , key ) : NEW_LINE INDENT meta_data = { } NEW_LINE meta_data . setdefault ( ' namespace ' , namespace ) NEW_LINE meta_data . setdefault ( ' key ' , key ) NEW_LINE meta_data . setdefault ( ' namespace ' , namespace ) NEW_LINE meta_data . setdefault ( ' key ' , key ) NEW_LINE return meta_data NEW_LINE DEDENT
clean ( self ) : NEW_LINE INDENT if self . timed out : NEW_LINE INDENT self . timed out = True NEW_LINE return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_last_segment ( self , filename ) : NEW_LINE INDENT if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT filename = os . path . basename ( filename ) NEW_LINE if not filename : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return filename NEW_LINE DEDENT DEDENT
is_updated ( self , updated ) : NEW_LINE INDENT if not self . _updated : NEW_LINE INDENT return False NEW_LINE DEDENT return self . _updated NEW_LINE DEDENT

serialize_number ( self , number ) : NEW_LINE INDENT if isinstance ( number , int ) : NEW_LINE INDENT return number NEW_LINE DEDENT if isinstance ( number , float ) : NEW_LINE INDENT return number NEW_LINE DEDENT if isinstance ( number , int ) : NEW_LINE INDENT return number NEW_LINE DEDENT if isinstance ( number , float ) : NEW_LINE INDENT return number NEW_LINE DEDENT return number NEW_LINE DEDENT
resolveNumber ( long number ) : NEW_LINE INDENT try : NEW_LINE INDENT return Double . valueOf ( number ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return Double . valueOf ( number ) NEW_LINE DEDENT DEDENT
write ( self , object ) : NEW_LINE INDENT if isinstance ( object , CodedOutputStream ) : NEW_LINE INDENT return object . write ( self ) NEW_LINE DEDENT else : NEW_LINE INDENT return object . write ( self ) NEW_LINE DEDENT DEDENT

create_prepared_statements ( self ) : NEW_LINE INDENT if self . prepared_statements is None : NEW_LINE INDENT self . prepared_statements = [ ] NEW_LINE DEDENT if self . prepared_statements is not None : NEW_LINE INDENT self . prepared_statements . append ( self . prepared_statements ) NEW_LINE DEDENT DEDENT
log_delayed_metrics ( self ) : NEW_LINE INDENT self . logger . info ( " Logging delayed metrics . . . " ) NEW_LINE self . logger . info ( " Logging delayed metrics . . . " ) NEW_LINE self . logger . info ( " Logging delayed metrics . . . " ) NEW_LINE DEDENT
void log ( String metricName ) { if ( metricName == null || metricName . isEmpty ( ) ) { return ; } logger . info ( metricName ) ; logger . info ( metricName ) ; }
read_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT type = self . type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT type = self . type NEW_LINE DEDENT return type NEW_LINE DEDENT

static Map < String , String > convert ( Map < String , String > defaultProps ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . putAll ( defaultProps ) ; map . putAll ( defaultProps ) ; return map ; }
month_change ( self , month ) : NEW_LINE INDENT if month is not None : NEW_LINE INDENT return self . _month_change ( month ) NEW_LINE DEDENT return self . _month_change ( month ) NEW_LINE DEDENT
void run ( ) { synchronized ( this ) { this . notifyAll ( ) ; this . notifyAll ( ) ; this . notifyAll ( ) ; } }
remove_slot_from_running_group ( self ) : NEW_LINE INDENT if self . running_group is not None : NEW_LINE INDENT self . running_group . remove_slot_from_running_group ( self . running_group ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_listeners ( self , event ) : NEW_LINE INDENT if not self . listeners : NEW_LINE INDENT return NEW_LINE DEDENT self . listeners . remove ( event ) NEW_LINE DEDENT
execute ( self , args ) : NEW_LINE INDENT if len ( args ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
get_listeners ( self , event ) : NEW_LINE INDENT listeners = [ ] NEW_LINE for listener in self . listeners : NEW_LINE INDENT listeners . append ( listener ) NEW_LINE DEDENT return listeners NEW_LINE DEDENT
get_remote_file_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _remote_file_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void append ( final RollupEvent event ) { if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { final RollupEvent event = ( RollupEvent ) event ; if ( event instanceof RollupEvent ) { event . set
parse_timestamp ( filename ) : NEW_LINE INDENT try : NEW_LINE INDENT timestamp = datetime . datetime . strptime ( filename , ' % Y - % m - % dT % H : % M : % S ' ) NEW_LINE return timestamp NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
start_ingest_server ( self ) : NEW_LINE INDENT self . _ingest_server = True NEW_LINE self . _ingest_server = False NEW_LINE self . _ingest_server = True NEW_LINE DEDENT
determine_serialization_type ( self ) : NEW_LINE INDENT if self . serialization_type is not None : NEW_LINE INDENT return self . serialization_type NEW_LINE DEDENT return self . serialization_type NEW_LINE DEDENT
get_driver ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . driver NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
build_ttl_mapping ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , datetime . datetime ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
maximum_width ( self , formatters ) : NEW_LINE INDENT if len ( formatters ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif len ( formatters ) == 1 : NEW_LINE INDENT return len ( formatters [ 0 ] ) NEW_LINE DEDENT elif len ( formatters ) == 2 : NEW_LINE INDENT return len ( formatters [ 1 ] ) NEW_LINE DEDENT elif len ( formatters ) == 3 : NEW_LINE INDENT return len ( formatters [ 0 ] ) NEW_LINE DEDENT elif len ( formatters ) == 4 : NEW_LINE INDENT return len ( formatters [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return len ( formatters [ 0 ] ) NEW_LINE DEDENT DEDENT
def format_header_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return self . format_row ( row ) NEW_LINE DEDENT DEDENT
def def format ( self , formattedStrings ) : NEW_LINE INDENT formattedStrings = [ ] NEW_LINE formattedStrings . extend ( formattedStrings ) NEW_LINE return ' ' . join ( formattedStrings ) NEW_LINE DEDENT


def def public public public static final public static final void store ( final int baseLevel , final int baseLevel , final int baseLevel , final int baseLevel , final int baseLevel , final int baseLevel ) { if ( baseLevel > 0 ) { final int baseLevel = baseLevel ; if ( baseLevel > 0 ) { final int baseLevel = baseLevel ; if ( baseLevel > 0 ) { final int baseLevel = baseLevel ; if ( baseLevel > 0 ) { final int baseLevel = baseLevel ; if ( baseLevel > 0 ) { baseLevel = baseLevel ; } else if ( baseLevel > 0 ) { baseLevel = baseLevel ; } else { baseLevel = baseLevel ; } } } } } }
_get_actualDocCount ( self ) : NEW_LINE INDENT return self . actualDocCount NEW_LINE DEDENT
List < String > parents ( ) { List < String > parents = new ArrayList < String > ( ) ; parents . add ( " " ) ; parents . add ( " " ) ; return parents ; }
insert_metric ( self , metric ) : NEW_LINE INDENT if metric is None : NEW_LINE INDENT return self . insert_metric ( metric ) NEW_LINE DEDENT return self . insert_metric ( metric ) NEW_LINE DEDENT
def def get_selection_threshold ( self ) : NEW_LINE INDENT return self . _get_selection_threshold ( ) NEW_LINE DEDENT

set_server_time ( self , server_time ) : NEW_LINE INDENT self . server_time = server_time NEW_LINE DEDENT
static List < String > getHosts ( ) { List < String > hosts = new ArrayList < String > ( ) ; for ( String host : hosts ) { hosts . add ( host ) ; } return hosts ; }
max_connections ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _max_connections NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _max_connections NEW_LINE DEDENT DEDENT
get_column_families ( self ) : NEW_LINE INDENT column families = [ ] NEW_LINE for family in self . column_families : NEW_LINE INDENT columnFamilies . append ( family ) NEW_LINE DEDENT return columnFamilies NEW_LINE DEDENT
_insert_metrics_preaggregated_full ( self , metrics_preaggregated_full ) : NEW_LINE INDENT if metrics_preaggregated_full is None : NEW_LINE INDENT return self . _insert_metrics_preaggregated_full ( metrics_preaggregated_full ) NEW_LINE DEDENT return self . _insert_metrics ( metrics_preaggregated_full ) NEW_LINE DEDENT
insertMetrics ( self , columnFamily ) : NEW_LINE INDENT columnFamily = self . columnFamily NEW_LINE if columnFamily is None : NEW_LINE INDENT columnFamily = self . columnFamily NEW_LINE DEDENT else : NEW_LINE INDENT columnFamily = self . columnFamily NEW_LINE DEDENT return columnFamily . append ( columnFamily ) NEW_LINE DEDENT
rollup_slot ( self , slot ) : NEW_LINE INDENT if isinstance ( slot , Slot ) : NEW_LINE INDENT return slot . rollup ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return slot . rollup ( ) NEW_LINE DEDENT DEDENT
get_doc_count_by_metric_name ( self , metric_name ) : NEW_LINE INDENT return self . _doc_count_by_metric_name ( metric_name ) NEW_LINE DEDENT
def get_metric_names ( self , query ) : NEW_LINE INDENT return self . _get_metric_names ( query ) NEW_LINE DEDENT
def start_background_storage_management ( self ) : NEW_LINE INDENT self . _background_storage_management = True NEW_LINE self . _background_storage_management = False NEW_LINE DEDENT
stop_background_storage ( self ) : NEW_LINE INDENT if self . background_storage : NEW_LINE INDENT self . background_storage . stop ( ) NEW_LINE self . background_storage = None NEW_LINE DEDENT DEDENT
check_locator ( self , locator ) : NEW_LINE INDENT if not locator : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
public public static boolean is_last_inserted_in_discovery_layer ( String locator ) { if ( locator == null ) { return false ; } else { return true ; } }
public static void check ( String locator ) { if ( locator == null ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator . length ( ) == 0 ) { return ; } if ( locator .
get_delayed_locator ( self ) : NEW_LINE INDENT if self . delayed_locator : NEW_LINE INDENT return self . delayed_locator NEW_LINE DEDENT return None NEW_LINE DEDENT
mark_delayed_locator ( self ) : NEW_LINE INDENT if self . delayed_locator is not None : NEW_LINE INDENT self . delayed_locator = self . delayed_locator NEW_LINE DEDENT DEDENT
_get_ranges_in_coarser_granularity ( self ) : NEW_LINE INDENT return self . _ranges_in_coarser_granularity NEW_LINE DEDENT
get_ranges ( self , granularity ) : NEW_LINE INDENT if granularity is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
update_column_updates ( self ) : NEW_LINE INDENT self . update_column_updates ( ) NEW_LINE self . update_column_updates ( ) NEW_LINE DEDENT
insert ( self , metric ) : NEW_LINE INDENT self . _metric = metric NEW_LINE self . _metric . append ( metric ) NEW_LINE return self NEW_LINE DEDENT
is_delayed ( self , metric ) : NEW_LINE INDENT if isinstance ( metric , Metric ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
BoundStatement getBoundStatement ( ColumnFamily columnFamily ) { if ( columnFamily == null ) { throw new IllegalArgumentException ( " Column Family must not be null . " ) ; } return new BoundStatement ( columnFamily ) ; }
get_metadata_for_locator ( self , locator ) : NEW_LINE INDENT locator = self . _get_locator ( locator ) NEW_LINE metadata = self . _get_metadata ( locator ) NEW_LINE if metadata is None : NEW_LINE INDENT return None NEW_LINE DEDENT return metadata NEW_LINE DEDENT
get_serializer ( self , type ) : NEW_LINE INDENT serializer = self . get_serializer ( type ) NEW_LINE if serializer : NEW_LINE INDENT return serializer NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static boolean isAcceptableMediaType ( String mediaType ) { if ( mediaType == null ) { return false ; } if ( mediaType . equals ( " " ) ) { return true ; } if ( mediaType . equals ( " " ) ) { return true ; } return false ; }
index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _index ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _index ( ) NEW_LINE DEDENT DEDENT
validate ( self , validator ) : NEW_LINE INDENT if not self . validator : NEW_LINE INDENT self . validator = validator NEW_LINE DEDENT else : NEW_LINE INDENT self . validator = None NEW_LINE DEDENT return self . validator NEW_LINE DEDENT
run ( self , thread ) : NEW_LINE INDENT self . thread = thread NEW_LINE self . thread . start ( ) NEW_LINE self . thread . join ( ) NEW_LINE DEDENT
static Extractor getInstance ( final String configuration ) { if ( configuration == null ) { return null ; } final Extractor instance = new Extractor ( configuration ) ; if ( configuration . length ( ) == 0 ) { return instance ; } return instance ; }
static boolean isOperatingSystem ( String operatingSystem ) { if ( operatingSystem == null ) { return false ; } if ( operatingSystem . length ( ) == 0 ) { return true ; } if ( operatingSystem . length ( ) == 1 ) { return true ; } if ( operatingSystem . length ( ) == 2 ) { return true ; } return false ; }
start ( self ) : NEW_LINE INDENT self . thread = threading . currentThread ( ) NEW_LINE self . thread . start ( ) NEW_LINE DEDENT
stop ( self ) : NEW_LINE INDENT if self . _shutdown : NEW_LINE INDENT return NEW_LINE DEDENT self . _shutdown = True NEW_LINE self . _logger . info ( ' Stopping RabbitMQ . . . ' ) NEW_LINE self . _shutdown = False NEW_LINE DEDENT
def def def def def def def set___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def def def set___python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def set___python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def
append_default_servers ( self , list ) : NEW_LINE INDENT if len ( list ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( list ) == 1 : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT DEDENT

public public static JSONObject send ( JSONObject user message ) { JSONObject user = new JSONObject ( ) ; JSONObject user = new JSONObject ( ) ; user . put ( " message " message " , message ) ; return user . put ( " message " message " , message ) ; }
static JSONObject userMessage ( JSONObject userMessage ) { JSONObject userMessage = new JSONObject ( ) ; userMessage . put ( " user " , userMessage ) ; userMessage . put ( " message " , userMessage ) ; return userMessage ; }
get_weitere_adresse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . weitereAdresse NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_userDefinedSimplefield ( self ) : NEW_LINE INDENT return self . userDefinedSimplefield NEW_LINE DEDENT
get_userDefinedAnyfield ( self ) : NEW_LINE INDENT return self . userDefinedAnyfield NEW_LINE DEDENT
set_apiSuchfelder ( self , apiSuchfelder ) : NEW_LINE INDENT self . apiSuchfelder = apiSuchfelder NEW_LINE DEDENT

statusVBM ( self ) : NEW_LINE INDENT return self . _statusVBM NEW_LINE DEDENT
def get_status ( self ) : NEW_LINE INDENT return self . _status NEW_LINE DEDENT
static String getStatusHP ( ) { if ( statusHP == null ) { return null ; } return statusHP . toString ( ) ; }
get_importmodus ( self ) : NEW_LINE INDENT importmodus = self . importmodus NEW_LINE return importmodus NEW_LINE DEDENT
get_adressdruck_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . adressdruck NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . adressdruck NEW_LINE DEDENT DEDENT
def def def get_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _value NEW_LINE DEDENT DEDENT
get_bodenbelag_value ( self , bodenbelag ) : NEW_LINE INDENT return self . _bodenbelag . get ( bodenbelag ) NEW_LINE DEDENT

def setArea ( self , area ) : NEW_LINE INDENT self . area = area NEW_LINE self . area = area NEW_LINE return self . area NEW_LINE DEDENT

def set_description ( self , description ) : NEW_LINE INDENT self . description = description NEW_LINE self . description = description NEW_LINE DEDENT
def def def def def def re__python____python____python____python____python____python____python__ def def def def _set def _get_rentCollectionPeriod ( self ) : NEW def _get_rentCollectionPeriod ( self , rentCollectionPeriod ) : NEW def _get_rentCollectionPeriod ( self , rentCollectionPeriod ) : NEW_LINE def _get_rentCollectionPeriod ( self ) : NEW_LINE def _get_rentCollectionPeriod ( self ) : NEW_LINE INDENT return self . _rentCollectionPeriod ( ) NEW_LINE DEDENT def _set_rentCollectionPeriod ( self , rentCollectionPeriod ) : NEW_LINE INDENT return self . _rentCollectionPeriod ( rentCollectionPeriod ) NEW_LINE DEDENT
furnished ( self ) : NEW_LINE INDENT if self . furnished is None : NEW_LINE INDENT self . furnished = { } NEW_LINE DEDENT return self . furnished NEW_LINE DEDENT
set_phone1 ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . phone1 = value NEW_LINE DEDENT
setPhone2 ( self , phone2 ) : NEW_LINE INDENT self . phone2 = phone2 NEW_LINE DEDENT
def setContact def setContactName ( String value ) : NEW_LINE INDENT if ( value != null ) { if ( value == null ) { return NEW_LINE DEDENT if ( value == null ) { return NEW_LINE DEDENT if ( value == null ) { return NEW_LINE DEDENT
setPhoneInfo ( self , phoneInfo ) : NEW_LINE INDENT self . phoneInfo = phoneInfo NEW_LINE DEDENT
mainEmail ( self ) : NEW_LINE INDENT if self . mainEmail is None : NEW_LINE INDENT self . mainEmail = { } NEW_LINE DEDENT return self . mainEmail NEW_LINE DEDENT

externalId ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _externalId NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
setAgentId ( self , agentId ) : NEW_LINE INDENT self . agentId = agentId NEW_LINE DEDENT

def jahrgang ( self ) : NEW_LINE INDENT jahrgang = self . jahrgang NEW_LINE jahrgang = self . jahrgang NEW_LINE return jahrgang NEW_LINE DEDENT
def gebaeudeart ( self ) : NEW_LINE INDENT gebaeudeart = self . gebaeudeart . gebaeudeart NEW_LINE gebaeudeart = self . gebaeudeart NEW_LINE return gebaeudeart . gebaeudeart NEW_LINE DEDENT

parse_parsable_number ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_parsable_number ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_parsable_number ( string ) NEW_LINE DEDENT DEDENT
def set_gebiete ( self , gebiete ) : NEW_LINE INDENT self . gebiete = gebiete NEW_LINE self . gebiete = gebiete NEW_LINE DEDENT

set_agent ( self , agent ) : NEW_LINE INDENT self . agent = agent NEW_LINE DEDENT
get_property_value ( self , property ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties [ property ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_stand_property ( self , stand_property ) : NEW_LINE INDENT self . _stand_property = stand_property NEW_LINE DEDENT
get_user_defined_extends ( self , userDefinedExtend ) : NEW_LINE INDENT if self . userDefinedExtend : NEW_LINE INDENT return self . userDefinedExtend NEW_LINE DEDENT DEDENT
def set_zeiteinheit ( self , zeiteinheit ) : NEW_LINE INDENT self . zeiteinheit = zeiteinheit NEW_LINE DEDENT
get_zimmer_value ( self , zimmer ) : NEW_LINE INDENT return self . zimmer . get ( zimmer ) NEW_LINE DEDENT
get_haus_property ( self ) : NEW_LINE INDENT return self . haus_property NEW_LINE DEDENT
def get_bueroPraxen_praxen ( self ) : NEW_LINE INDENT return self . bueroPraxen . bueroPraxen . get ( ) NEW_LINE DEDENT
gastgewerbe ( self ) : NEW_LINE INDENT gastgewerbe = self . gastgewerbe ( ) NEW_LINE if gastgewerbe is None : NEW_LINE INDENT return None NEW_LINE DEDENT return gastgewerbe NEW_LINE DEDENT
landUndForstwirtschaft ( landUndForstwirtschaft ) : NEW_LINE INDENT landUndForstwirtschaft = landUndForstwirtschaft NEW_LINE return landUndForstwirtschaft NEW_LINE DEDENT
get_sonstige_property ( self ) : NEW_LINE INDENT sonstige_property = self . _get_sonstige_property ( ) NEW_LINE return sonstige_property NEW_LINE DEDENT
def def def get_zinshausRenditeobjekt ( self ) : NEW_LINE INDENT zinshausRenditeobjekt = self . zinshausRenditeobjekt . zinshausRenditeobjekt NEW_LINE return self . zinshausRenditeobjekt . zinshausRenditeobjekt . zinshausRenditeobjekt NEW_LINE DEDENT
get_terrain ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . terrain NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_country_code ( self , country_code ) : NEW_LINE INDENT if country_code : NEW_LINE INDENT return country_code NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

get_country_code ( self , country_code ) : NEW_LINE INDENT if country_code is None : NEW_LINE INDENT return None NEW_LINE DEDENT if country_code is not None : NEW_LINE INDENT return country_code NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

get_country_name ( self ) : NEW_LINE INDENT country_name = self . country_name NEW_LINE if country_name : NEW_LINE INDENT return country_name NEW_LINE DEDENT else : NEW_LINE INDENT return self . country_name NEW_LINE DEDENT DEDENT
static String translateCountryName ( String countryName ) { if ( countryName == null ) { return " " ; } if ( countryName . length ( ) == 0 ) { return " " ; } if ( countryName . length ( ) == 0 ) { return " " ; } return countryName ; }
get_anbieter ( self , anbieter ) : NEW_LINE INDENT if anbieter is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return anbieter NEW_LINE DEDENT DEDENT

get_pdf_property ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _pdf_property NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

set_realestateitems ( self , realestateitems ) : NEW_LINE INDENT self . realestateitems = realestateitems NEW_LINE DEDENT

downgrade ( version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 5 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
upgrade ( self , version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
get_content ( self ) : NEW_LINE INDENT content = self . content NEW_LINE if not content : NEW_LINE INDENT return None NEW_LINE DEDENT return content NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def blick__python____python____python____python__ def def def def set ( self ) : def set_b def set_blick_blick ( self , blick ) : NEW__python__ def set_blick_blick ( self , value ) : NEW_LINE INDENT return self . blick . blick . blick . set_blick ( self . blick ) NEW_LINE DEDENT def set_blick ( self ) : NEW_LINE INDENT self . blick = self . blick NEW_LINE DEDENT


getParkplatz ( self ) : NEW_LINE INDENT parkplatz = self . parkplatz NEW_LINE return parkplatz NEW_LINE DEDENT
def lastenaufzug ( self ) : NEW_LINE INDENT return self . _lastenaufzug = self . _lastenaufzug NEW_LINE DEDENT

get_feld_value ( self ) : NEW_LINE INDENT feld = self . feld NEW_LINE if feld is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return feld NEW_LINE DEDENT DEDENT
def def receive_validation_warning ( self ) : NEW_LINE INDENT if self . validation_warning : NEW_LINE INDENT return self . validation_warning NEW_LINE DEDENT elif self . validation_error : NEW_LINE INDENT return self . validation_error NEW_LINE DEDENT else : NEW_LINE INDENT return self . validation_error NEW_LINE DEDENT DEDENT
write_content ( self , record ) : NEW_LINE INDENT if isinstance ( record , Record ) : NEW_LINE INDENT return self . write_content ( record ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . write_content ( record ) NEW_LINE DEDENT DEDENT
get_value ( self , index ) : NEW_LINE INDENT return self . _get_value ( index ) NEW_LINE DEDENT
get_values ( self , record ) : NEW_LINE INDENT if isinstance ( record , list ) : NEW_LINE INDENT return record NEW_LINE DEDENT elif isinstance ( record , dict ) : NEW_LINE INDENT return record NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT

def def set_ctype ( self , ctype ) : NEW_LINE INDENT self . ctype = ctype NEW_LINE self . ctype = ctype NEW_LINE return self . ctype NEW_LINE DEDENT
set_haustyp ( self , haustyp ) : NEW_LINE INDENT self . haustyp = haustyp NEW_LINE return self . haustyp NEW_LINE DEDENT
get_energiepass ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . energiepass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def def def def def _get_k def _get_keller_keller_keller ( self ) : def _get_keller_keller ( self ) : NEW_LINE INDENT return self . _keller . _keller . keller . get_keller ( ) NEW_LINE DEDENT def _keller ( self ) : NEW_LINE INDENT return self . _keller . _keller . get_keller ( ) NEW_LINE DEDENT

geschlAttr ( self ) : NEW_LINE INDENT if self . geschlAttr is None : NEW_LINE INDENT self . geschlAttr = { } NEW_LINE DEDENT return self . geschlAttr NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_teilungsversteigerung ( self , teilungsversteigerung ) : NEW_LINE INDENT teilungsversteigerung = teilungsversteigerung NEW_LINE return teilungsversteigerung NEW_LINE DEDENT
upgrade ( version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_bevorzugt_value ( self ) : NEW_LINE INDENT return self . _bevorzugt_value NEW_LINE DEDENT
def def def get_wunsch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _wunsch . _wunsch . get_wunsch ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _wunsch NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def setModus ( self , modus ) : NEW_LINE INDENT self . modus = modus NEW_LINE self . modus = modus NEW_LINE DEDENT
getEmailSonstige ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _emailSonstige NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_telSonstige ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . telSonstige NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

downgrade ( version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 5 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
set_apiSuchfeld1 ( self , apiSuchfeld1 ) : NEW_LINE INDENT self . apiSuchfeld1 = apiSuchfeld1 NEW_LINE DEDENT
set_apiSuchfeld2 ( self , apiSuchfeld2 ) : NEW_LINE INDENT self . apiSuchfeld2 = apiSuchfeld2 NEW_LINE DEDENT
apiSuchfeld3 ( self ) : NEW_LINE INDENT if self . apiSuchfeld3 is None : NEW_LINE INDENT self . apiSuchfeld3 = { } NEW_LINE DEDENT return self . apiSuchfeld3 NEW_LINE DEDENT
get_row_property ( self ) : NEW_LINE INDENT row = self . row NEW_LINE if row is None : NEW_LINE INDENT return None NEW_LINE DEDENT return row NEW_LINE DEDENT
setDistanzZuSport ( self , distanzZuSport ) : NEW_LINE INDENT self . distanzZuSport = distanzZuSport NEW_LINE DEDENT
get_anhang ( self ) : NEW_LINE INDENT if self . anhang is None : NEW_LINE INDENT self . anhang = { } NEW_LINE DEDENT return self . anhang NEW_LINE DEDENT
get_objekt_kategorie2 ( self , objektKategorie2 ) : NEW_LINE INDENT if objektKategorie2 is None : NEW_LINE INDENT objektKategorie2 = { } NEW_LINE DEDENT return objektKategorie2 NEW_LINE DEDENT
get_objektzustand_value ( self , objektzustand ) : NEW_LINE INDENT try : NEW_LINE INDENT return objektzustand . value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
hausKategorie ( self , hausKategorie ) : NEW_LINE INDENT self . hausKategorie = hausKategorie NEW_LINE return self . hausKategorie NEW_LINE DEDENT
def def ausstattungsqualitaet ( self , ausstattungsqualitaet ) : NEW_LINE INDENT return self . ausstattungsqualitaet . get ( ausstattungsqualitaet ) NEW_LINE DEDENT
get_vermarktungsart ( self ) : NEW_LINE INDENT vermarktungsart = self . vermarktungsart NEW_LINE if vermarktungsart is None : NEW_LINE INDENT return None NEW_LINE DEDENT return vermarktungsart NEW_LINE DEDENT
get_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _value NEW_LINE DEDENT DEDENT


def def bauerwartungsland ( self ) : NEW_LINE INDENT bauerwartungsland = self . bauerwartungsland . bauerwartungsland NEW_LINE return bauerwartungsland . bauerwartungsland NEW_LINE DEDENT
set_bootsstaende ( self , bootsstaende ) : NEW_LINE INDENT self . bootsstaende = bootsstaende NEW_LINE DEDENT

def def set camping ( self , camping ) : NEW_LINE INDENT self . camping = camping NEW_LINE self . camping = camping NEW_LINE return self . camping NEW_LINE DEDENT
set_doppelhaus ( self , doppelhaus ) : NEW_LINE INDENT self . doppelhaus = doppelhaus NEW_LINE DEDENT

einzelhandelGross ( self , einzelhandelGross ) : NEW_LINE INDENT self . einzelhandelGross = einzelhandelGross NEW_LINE return self . einzelhandelGross NEW_LINE DEDENT
einzelhandelKlein ( einzelhandelKlein ) : NEW_LINE INDENT einzelhandelKlein = einzelhandelKlein NEW_LINE einzelhandelKlein = einzelhandelKlein NEW_LINE einzelhandelKlein = einzelhandelKlein NEW_LINE einzelhandelKlein = einzelhandelKlein NEW_LINE return einzelhandelKlein NEW_LINE DEDENT
def def set_garagen_garagen ( self , garagen ) : NEW_LINE INDENT self . garagen = garagen NEW_LINE self . garagen = garagen NEW_LINE DEDENT
def set_garten ( self , garten ) : NEW_LINE INDENT self . garten = garten NEW_LINE self . garten = garten NEW_LINE DEDENT

def def set_gewerbe_gewerbe ( self , gewerbe ) : NEW_LINE INDENT self . gewerbe = gewerbe NEW_LINE self . gewerbe = gewerbe NEW_LINE DEDENT


keineBebauung ( self , keineBebauung ) : NEW_LINE INDENT self . keineBebauung = keineBebauung NEW_LINE return self . keineBebauung NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def _set__python____python____python____python__ def def def def def def _set def _set def _set

mehrfamilienhaus ( self , mehrfamilienhaus ) : NEW_LINE INDENT self . mehrfamilienhaus = mehrfamilienhaus NEW_LINE DEDENT
set obstpflanzung ( self , obstpflanzung ) : NEW_LINE INDENT self . obstpflanzung = obstpflanzung NEW_LINE DEDENT
setParkhaus ( self , parkhaus ) : NEW_LINE INDENT self . parkhaus = parkhaus NEW_LINE DEDENT


setStellplaetze ( self , stellplaetze ) : NEW_LINE INDENT self . stellplaetze = stellplaetze NEW_LINE DEDENT
set_villa ( self , villa ) : NEW_LINE INDENT self . villa = villa NEW_LINE DEDENT
def set_ wald_value ( self , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . wald = value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . wald = None NEW_LINE DEDENT else : NEW_LINE INDENT self . wald = value NEW_LINE DEDENT DEDENT

def def get_wohnung ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . wohnung NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . wohnung NEW_LINE DEDENT DEDENT
get_grundstueck ( self , grundstueck ) : NEW_LINE INDENT return self . _get_grundstueck ( grundstueck ) NEW_LINE DEDENT
einzelhandel ( einzelhandel ) : NEW_LINE INDENT einzelhandel = einzelhandel . einzelhandel ( ) NEW_LINE return einzelhandel NEW_LINE DEDENT
hallenLagerProd ( hallenLagerProd ) : NEW_LINE INDENT return hallenLagerProd NEW_LINE DEDENT
getParken ( self ) : NEW_LINE INDENT parken = self . parken NEW_LINE if not parken : NEW_LINE INDENT return None NEW_LINE DEDENT return parken NEW_LINE DEDENT
freizeitimmobilieGewerblich ( self , freizeitimmobilieGewerblich ) : NEW_LINE INDENT self . freizeitimmobilieGewerblich = freizeitimmobilieGewerblich NEW_LINE DEDENT
get_objektartZusatz ( objektartZusatz ) : NEW_LINE INDENT return objektartZusatz NEW_LINE DEDENT
get_stellplatzart ( self , stellplatzart ) : NEW_LINE INDENT return self . _get_stellplatzart ( stellplatzart ) NEW_LINE DEDENT
maxDauer ( self ) : NEW_LINE INDENT if self . maxDauer is not None : NEW_LINE INDENT return self . maxDauer NEW_LINE DEDENT else : NEW_LINE INDENT return self . maxDauer NEW_LINE DEDENT DEDENT
get_feature_property_value ( self , feature ) : NEW_LINE INDENT return self . _get_feature_property_value ( feature ) NEW_LINE DEDENT

upgrade ( self , version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
keineAngabe ( self , keineAngabe ) : NEW_LINE INDENT self . keineAngabe = keineAngabe NEW_LINE return self . keineAngabe NEW_LINE DEDENT
def erdwaerme ( self ) : NEW_LINE INDENT if ( self . erdwaerme != null ) { return self . erdwaerme . value NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def set solarhe
def pelletheizung_pelletheizung_pelletheizung ( pelletheizung ) : NEW_LINE INDENT pelletheizung = pelletheizung . pelletheizung_pelletheizung NEW_LINE pelletheizung = pelletheizung . pelletheizung_pelletheizung NEW_LINE pelletheizung = pelletheizung . pelletheizung_pelletheizung NEW_LINE return pelletheizung . pelletheizung_pelletheizung NEW_LINE DEDENT

def def def def set_o def set_oel ( self , oel ) : NEW_LINE INDENT self . oel = oel NEW_LINE DEDENT def set_oel ( self , oel ) : NEW_LINE INDENT self . oel = oel NEW_LINE DEDENT def set_oel ( self , oel ) : NEW_LINE INDENT self . oel = oel NEW_LINE DEDENT
fernwaerme ( self , fernwaerme ) : NEW_LINE INDENT self . fernwaerme = fernwaerme NEW_LINE return self . fernwaerme NEW_LINE DEDENT
setStrom ( self , strom , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . strom = value NEW_LINE DEDENT

generate_random_string ( self ) : NEW_LINE INDENT random_string = self . _random_string ( ) NEW_LINE random_string = self . _random_string ( ) NEW_LINE random_string = self . _random_string ( ) NEW_LINE random_string = self . _random_string ( ) NEW_LINE return random_string NEW_LINE DEDENT
generate_random_string ( self ) : NEW_LINE INDENT random_string = " " NEW_LINE for i in range ( self . length ) : NEW_LINE INDENT random_string = " " NEW_LINE DEDENT random_string = " " NEW_LINE for i in range ( self . length ) : NEW_LINE INDENT random_string = " " NEW_LINE DEDENT return random_string NEW_LINE DEDENT
generate_random_string ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _generate_random_string ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def benutzer def benutzer ( self ) : NEW_LINE INDENT return self . benutzer . benutzer . getBenutzer ( ) NEW_LINE DEDENT
def def set_objekte ( self , objekte ) : NEW_LINE INDENT self . objekte = objekte NEW_LINE if self . objekte is not None : NEW_LINE INDENT self . objekte = objekte NEW_LINE DEDENT DEDENT
get_feed_property ( self ) : NEW_LINE INDENT feed = self . feed NEW_LINE if not feed : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return feed NEW_LINE DEDENT DEDENT

def def def get_service_eleistungen ( self ) : NEW_LINE INDENT serviceleistungen = self . serviceleistungen NEW_LINE return self . serviceleistungen . serviceleistungen . serviceleistungen NEW_LINE DEDENT
def def def def def setSubAdministrativeArea ( self , subAdministrativeArea subAdministrativeArea property ) : NEW__python__ def def def def def def def def def def def def def def def def def def def sub__python__ def def def def __ public static public static void set subAdmin__python__ def def _
set_city ( self , city ) : NEW_LINE INDENT self . _city = city NEW_LINE self . _city = city NEW_LINE DEDENT
def set_locality_locality ( self , locality ) : NEW_LINE INDENT self . locality = locality NEW_LINE self . locality = locality NEW_LINE return self . locality NEW_LINE DEDENT
downgrade ( self , version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
upgrade ( version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
landTyp ( self , landTyp ) : NEW_LINE INDENT if landTyp is None : NEW_LINE INDENT landTyp = self . landTyp NEW_LINE DEDENT else : NEW_LINE INDENT landTyp = landTyp NEW_LINE DEDENT return landTyp NEW_LINE DEDENT
static String getValue ( String field ) { if ( field == null ) { return null ; } if ( field . length ( ) == 0 ) { return " " ; } return field . substring ( 0 , field . length ( ) - 1 ) ; }
upgrade ( version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _value NEW_LINE DEDENT DEDENT

def def set_platzart ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT self . platzart = value NEW_LINE DEDENT else : NEW_LINE INDENT self . platzart = value NEW_LINE DEDENT DEDENT
get_datenVerkabelung ( self , datenVerkabelung ) : NEW_LINE INDENT return self . _datenVerkabelung . get ( datenVerkabelung ) NEW_LINE DEDENT
def get_klimaanlage ( self , klimaanlage ) : NEW_LINE INDENT if klimaanlage is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return klimaanlage NEW_LINE DEDENT DEDENT
get_image_property ( self ) : NEW_LINE INDENT image = self . image NEW_LINE if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT return image NEW_LINE DEDENT

newDevelopmentAvailability ( newDevelopmentAvailability ) : NEW_LINE INDENT if newDevelopmentAvailability is None : NEW_LINE INDENT newDevelopmentAvailability = { } NEW_LINE DEDENT else : NEW_LINE INDENT newDevelopmentAvailability = { } NEW_LINE DEDENT return newDevelopmentAvailability NEW_LINE DEDENT
set_direction ( self , direction ) : NEW_LINE INDENT self . _direction = direction NEW_LINE DEDENT
setCo2Rating ( self , co2Rating ) : NEW_LINE INDENT self . co2Rating = co2Rating NEW_LINE DEDENT
energyRating ( self ) : NEW_LINE INDENT if self . energyRating is None : NEW_LINE INDENT self . energyRating = { } NEW_LINE DEDENT return self . energyRating NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
propertyStatus ( self ) : NEW_LINE INDENT if self . propertyStatus is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . propertyStatus NEW_LINE DEDENT

bebaubarAttr ( self ) : NEW_LINE INDENT if self . bebaubarAttr : NEW_LINE INDENT return self . bebaubarAttr NEW_LINE DEDENT return self . bebaubarAttr NEW_LINE DEDENT
upgrade ( self , version ) : NEW_LINE INDENT if version == 1 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 2 : NEW_LINE INDENT return self NEW_LINE DEDENT elif version == 3 : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
setParkenTyp ( self , parkenTyp ) : NEW_LINE INDENT self . parkenTyp = parkenTyp NEW_LINE DEDENT
alterAttr ( self , name , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _alterAttr ( name , value ) NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def set freizeit def freizeit def freizeitTyp ( self ) : NEW__python____python____python____python____python____python____python____python____python____python__ def def def set freizeit def freizeitTyp ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def set freizeitTyp ( self def freizeitTyp ( self ) : NEW__python____python____python____python____python____python____python____python____python__
set_telefonart ( self , telefonart ) : NEW_LINE INDENT self . telefonart = telefonart NEW_LINE DEDENT
def def def def def _get_email def _get_emailart_emailart_emailart ( self ) : NEW_LINE INDENT return self . _emailart . _emailart_emailart . get ( ) NEW_LINE DEDENT def _get_emailart_emailart ( self ) : NEW_LINE INDENT return self . _emailart . _emailart NEW_LINE DEDENT
def setOverseasSales ( self , value ) : NEW_LINE INDENT self . overseasSales = value NEW_LINE self . overseasSales = value NEW_LINE DEDENT
def def setOverseasRental ( self , value ) : NEW_LINE INDENT self . overseasRental = value NEW_LINE self . overseasRental = value NEW_LINE DEDENT
create_simplefield ( self , feldname ) : NEW_LINE INDENT if feldname is None : NEW_LINE INDENT return self . create_simplefield ( feldname ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_simplefield ( feldname ) NEW_LINE DEDENT DEDENT
fehler_value ( self , fehler ) : NEW_LINE INDENT return self . fehler_value ( fehler ) NEW_LINE DEDENT
set erbpacht ( self , erbpacht ) : NEW_LINE INDENT self . erbpacht = erbpacht NEW_LINE return self . erbpacht NEW_LINE DEDENT
static String getStpSonstige ( String stpSonstige ) { String stpSonstige = stpSonstige ; if ( stpSonstige == null || stpSonstige . isEmpty ( ) ) { stpSonstige = " " ; } return stpSonstige ; }
def get_value ( self , valuelist ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _value NEW_LINE DEDENT DEDENT
minDauer ( minDauer ) : NEW_LINE INDENT if minDauer is not None : NEW_LINE INDENT return minDauer NEW_LINE DEDENT else : NEW_LINE INDENT return minDauer NEW_LINE DEDENT DEDENT

get_photo_property ( self ) : NEW_LINE INDENT photo_property = self . _get_photo_property ( ) NEW_LINE if photo_property : NEW_LINE INDENT return photo_property NEW_LINE DEDENT DEDENT
def def def def def def setMetadataProperty ( self , metadata ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def def def def def setMetadata ( self ) : NEW def setMetadata ( self ) : NEW def setMetadata ( self , metadata ) : NEW__python__ def setMetadata ( self , metadata ) : NEW__python__ def setMetadata ( self , metadata ) : NEW__python____python__ def setMetadata ( self , metadata ) : NEW__python__ def setMetadata ( self , metadata ) : NEW__python__ def setMetadata ( self , metadata ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

downgrade ( self , version ) : NEW_LINE INDENT if version == 3 : NEW_LINE INDENT return self . _downgrade ( version ) NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return self . _downgrade ( version ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _downgrade ( version ) NEW_LINE DEDENT DEDENT
upgrade ( self , version ) : NEW_LINE INDENT if version == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 5 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 6 : NEW_LINE INDENT return NEW_LINE DEDENT elif version == 7 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_immobilie_property ( self ) : NEW_LINE INDENT return self . _immobilie_property NEW_LINE DEDENT
get_objekt_value ( self , objekt ) : NEW_LINE INDENT if objekt is None : NEW_LINE INDENT return None NEW_LINE DEDENT return objekt NEW_LINE DEDENT
fehlerliste ( self , fehlerliste ) : NEW_LINE INDENT fehlerliste = self . fehlerliste NEW_LINE if fehlerliste is None : NEW_LINE INDENT return None NEW_LINE DEDENT return fehlerliste NEW_LINE DEDENT
get_status ( self ) : NEW_LINE INDENT status = self . status NEW_LINE if not status : NEW_LINE INDENT return None NEW_LINE DEDENT return status NEW_LINE DEDENT
def def def son def sonstigeTyp ( self ) : NEW def sonstigeTyp ( self ) : NEW_LINE INDENT if ( self . sonstigeTyp != null ) { return self . sonstigeTyp . sonstigeTyp ( ) NEW_LINE DEDENT
setDistanzZu ( self , distanzZu ) : NEW_LINE INDENT self . distanzZu = distanzZu NEW_LINE DEDENT
get_distanzen_property ( self ) : NEW_LINE INDENT distanzen_property = self . _distanzen_property NEW_LINE if distanzen_property is None : NEW_LINE INDENT return None NEW_LINE DEDENT return distanzen_property NEW_LINE DEDENT
get_distanzen_sport ( self ) : NEW_LINE INDENT distanzenSport = self . _distanzenSport NEW_LINE return distanzenSport NEW_LINE DEDENT
static boolean isCompatibleWith ( List < ? extends Exception > exceptions ) { if ( exceptions != null && ! exceptions . isEmpty ( ) ) { return true ; } return false ; }
def def setBindings ( self ) : NEW_LINE INDENT if not isinstance ( self . namespace , NamespaceContext ) : NEW_LINE INDENT self . namespace = self . namespace NEW_LINE DEDENT else : NEW_LINE INDENT self . namespace = self . namespace NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
removePrefix ( self , prefix ) : NEW_LINE INDENT prefix = prefix . strip ( ) NEW_LINE if not prefix : NEW_LINE INDENT return NEW_LINE DEDENT prefix = prefix . strip ( ) NEW_LINE if not prefix : NEW_LINE INDENT return NEW_LINE DEDENT prefix = prefix . strip ( ) NEW_LINE return prefix NEW_LINE DEDENT
boolean parse ( String content ) { if ( content == null ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } if ( content . length ( ) == 0 ) { return false ; } return true ; }
strip_leading_comment_content ( self , content ) : NEW_LINE INDENT if len ( content ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( content ) == 1 : NEW_LINE INDENT return content [ 0 ] NEW_LINE DEDENT return content NEW_LINE DEDENT
updateComment ( self ) : NEW_LINE INDENT if self . inComment : NEW_LINE INDENT self . inComment = True NEW_LINE DEDENT else : NEW_LINE INDENT self . inComment = False NEW_LINE DEDENT DEDENT
parse_comment ( self , content ) : NEW_LINE INDENT token = self . parse_token ( content ) NEW_LINE if token is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . parse_token ( token ) NEW_LINE DEDENT DEDENT
static void initialize ( ) { if ( log4j == null ) { log4j = new Log4j ( ) ; log4j . init ( ) ; } log4j . init ( ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
add_iterator ( self , iterator ) : NEW_LINE INDENT if isinstance ( iterator , Iterator ) : NEW_LINE INDENT iterator = iterator . next ( ) NEW_LINE DEDENT else : NEW_LINE INDENT iterator = iter ( iterator ) NEW_LINE DEDENT return iterator NEW_LINE DEDENT
add_accepted_option ( self , accepted_options ) : NEW_LINE INDENT if accepted_options is None : NEW_LINE INDENT accepted_options = [ ] NEW_LINE DEDENT accepted_options . append ( accepted_options [ 0 ] ) NEW_LINE DEDENT
add_string_option ( self , option ) : NEW_LINE INDENT if not option . is_string ( ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if option . is_string ( ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if option . is_string ( ) : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT DEDENT
add_integer_option ( self , option ) : NEW_LINE INDENT if not option . isdigit ( ) : NEW_LINE INDENT raise ValueError ( " Invalid integer option . " ) NEW_LINE DEDENT if option . isdigit ( ) : NEW_LINE INDENT raise ValueError ( " Invalid integer option . " ) NEW_LINE DEDENT if option . isdigit ( ) : NEW_LINE INDENT raise ValueError ( " Invalid integer option . " ) NEW_LINE DEDENT if option . isdigit ( ) : NEW_LINE INDENT raise ValueError ( " Invalid integer option . " ) NEW_LINE DEDENT DEDENT
add_long_integer_option ( self , long integer_option ) : NEW_LINE INDENT if integer_option is not None : NEW_LINE INDENT return self . add_long_integer_option ( integer_option ) NEW_LINE DEDENT return self . add_long_integer_option ( integer_option ) NEW_LINE DEDENT
add_double_option ( self , double_option ) : NEW_LINE INDENT if self . double_option : NEW_LINE INDENT self . double_option = double_option NEW_LINE DEDENT else : NEW_LINE INDENT self . double_option = double_option NEW_LINE DEDENT DEDENT
add_boolean_option ( self , option ) : NEW_LINE INDENT if option . is_boolean ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif option . is_boolean ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
parse_options ( self ) : NEW_LINE INDENT options = [ ] NEW_LINE for option in self . options : NEW_LINE INDENT options . append ( option ) NEW_LINE DEDENT options = [ ] NEW_LINE for option in self . options : NEW_LINE INDENT options . append ( option ) NEW_LINE DEDENT return options NEW_LINE DEDENT
static < T > T getInstance ( Class < T > type ) { if ( type . isPrimitive ( ) ) { return type . newInstance ( ) ; } else { return type . newInstance ( ) ; } }
public public static final void invoke ( final Class < ? > concreteClass , final Class < ? > concreteClass ) { if ( concreteClass != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( ) ; if ( concreteClass . getSuperclass ( ) != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( ) ; if ( concreteClass . getSuperclass ( ) != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( ) ; if ( concreteClass . getSuperclass ( ) != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( ) ; if ( concreteClass . getSuperclass ( ) != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( ) ; if ( concreteClass . getSuperclass ( ) != null ) { final Class < ? > concreteClass = concreteClass . getSuperclass ( )
static void setTarget ( final Class < ? > targetClass ) { if ( targetClass == null ) { throw new IllegalArgumentException ( " targetClass is null " ) ; } if ( targetClass . isInterface ( ) ) { throw new IllegalArgumentException ( " targetClass . isInterface ( ) " ) ; } if ( targetClass . isInterface ( ) ) { throw new IllegalArgumentException ( " targetClass . isInterface ( ) " ) ; } if ( targetClass . isInterface ( ) ) { throw new IllegalArgumentException ( " targetClass . isInterface ( ) " ) ; } if ( targetClass . isInterface ( ) ) { throw new IllegalArgumentException ( " targetClass . isInterface ( ) " ) ; } }
prepare_method ( self , method ) : NEW_LINE INDENT self . method = method NEW_LINE if self . method is not None : NEW_LINE INDENT self . method . prepare ( self . method ) NEW_LINE DEDENT DEDENT
find_matching_method ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return self . find_matching_method ( name ) NEW_LINE DEDENT
static unsigned int convert ( int integer ) { if ( integer == 0 ) { return 0 ; } if ( integer == 1 ) { return 1 ; } if ( integer == 2 ) { return 2 ; } if ( integer == 3 ) { return 3 ; } if ( integer == 4 ) { return 4 ; } if ( integer == 5 ) { return 5 ; } if ( integer == 6 ) { return 6 ; } return 0 ; }
static byte [ ] serialize ( Object object ) { if ( object == null ) { return null ; } if ( object . getClass ( ) . isArray ( ) ) { return serializeArray ( object ) ; } if ( object . getClass ( ) . isArray ( ) ) { return serializeArray ( object ) ; } if ( object . getClass ( ) . isArray ( ) ) { return serializeArray ( object ) ; } return serializeArray ( object ) ; }
static byte [ ] deserialize ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } byte [ ] array = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { array [ i ] = bytes [ i ] ; } return array ; }
first_child_element ( self ) : NEW_LINE INDENT return self . _first_child_element ( ) NEW_LINE DEDENT
first_child_element_value ( self ) : NEW_LINE INDENT return self . _first_child_element_value NEW_LINE DEDENT
all child elements of the given DOM element .
def def def get_local_name ( self , name ) : NEW_LINE INDENT return self . _get_local_name ( name ) NEW_LINE DEDENT
def def def get_local_name ( self ) : NEW_LINE INDENT return self . _get_local_name ( ) NEW_LINE DEDENT
static String trim ( String str ) { if ( str == null ) { return " " ; } if ( str . length ( ) == 0 ) { return " " ; } if ( str . length ( ) == 1 ) { return " " ; } if ( str . length ( ) == 2 ) { return " " ; } if ( str . length ( ) == 3 ) { return " " ; } if ( str . length ( ) == 4 ) { return " " ; } if ( str . length ( ) == 5 ) { return " " ; } if ( str . length ( ) == 6 ) { return " " ; } if ( str . length ( ) == 7 ) { return " " ; } if ( str . length ( ) == 8 ) { return " " ; } return str ; }
void monitor ( Handle handle ) { if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } if ( handle == null ) { throw new IllegalArgumentException ( " handle is null " ) ; } }
def
def check_monitoring_thread_alive ( ) : NEW_LINE INDENT try : NEW_LINE INDENT if ( monitoring_thread . isAlive ( ) : NEW_LINE INDENT return monitoring_thread . isAlive ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return monitoring_thread . isAlive ( ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_phone_number_from_city ( self , city ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_phone_number_from_city ( city ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
prefix_mapping ( prefix ) : NEW_LINE INDENT prefix_mapping = [ ] NEW_LINE prefix_mapping . append ( prefix ) NEW_LINE prefix_mapping . append ( prefix ) NEW_LINE return prefix_mapping NEW_LINE DEDENT
prefix_mapping ( prefix ) : NEW_LINE INDENT prefix_mapping = [ ] NEW_LINE prefix_mapping . append ( prefix ) NEW_LINE prefix_mapping . append ( prefix ) NEW_LINE return prefix_mapping NEW_LINE DEDENT
add_callback ( self , callback ) : NEW_LINE INDENT self . callbacks . add ( callback ) NEW_LINE DEDENT
build_tree ( self , entries ) : NEW_LINE INDENT tree = self . _build_tree ( entries ) NEW_LINE if tree is not None : NEW_LINE INDENT return tree NEW_LINE DEDENT tree = self . _build_tree ( entries ) NEW_LINE return tree NEW_LINE DEDENT
calculate_text_color ( self , position , state ) : NEW_LINE INDENT item = self . get_item ( position , state ) NEW_LINE if item is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return item . text_color NEW_LINE DEDENT DEDENT
choose_from ( self , values ) : NEW_LINE INDENT if len ( values ) == 1 : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT elif len ( values ) == 2 : NEW_LINE INDENT return values [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT DEDENT
color ( self , position ) : NEW_LINE INDENT color = self . get_color ( position ) NEW_LINE if color : NEW_LINE INDENT return color NEW_LINE DEDENT else : NEW_LINE INDENT return color NEW_LINE DEDENT DEDENT
def def set_text_size ( self , items ) : NEW_LINE INDENT if len ( items ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( items ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( items ) == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return len ( items ) NEW_LINE DEDENT
scroll ( self , x , y ) : NEW_LINE INDENT if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if y < 0 : NEW_LINE INDENT y = 0 NEW_LINE DEDENT if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if y < 0 : NEW_LINE INDENT y = 0 NEW_LINE DEDENT if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if y < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if y < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if y < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT return x NEW_LINE DEDENT
static String getIntroduction ( String introduction ) { if ( introduction == null ) { throw new IllegalArgumentException ( " introduction cannot be null " ) ; } if ( introduction . length ( ) == 0 ) { throw new IllegalArgumentException ( " introduction cannot be null " ) ; } if ( introduction . length ( ) == 0 ) { throw new IllegalArgumentException ( " introduction cannot be null " ) ; } return introduction ; }
static String [ ] getNames ( ) { String [ ] names = new String [ ] { } ; for ( int i = 0 ; i < keywords . length ; i ++ ) { names [ i ] = keywords [ i ] ; } return names ; }
get_argument_specifiers ( self , keyword ) : NEW_LINE INDENT argument_specifiers = [ ] NEW_LINE for keyword in self . keywords : NEW_LINE INDENT argument_specifiers = self . _get_argument_specifiers ( keyword ) NEW_LINE if argument_specifiers is not None : NEW_LINE INDENT argument_specifiers . append ( argument_specifiers ) NEW_LINE DEDENT DEDENT return argument_specifiers NEW_LINE DEDENT
get_documentation ( self , keyword ) : NEW_LINE INDENT if not keyword : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return [ ] NEW_LINE for keyword in self . keywords . values ( ) : NEW_LINE INDENT if not keyword . startswith ( ' _ ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT return [ ] NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; } for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; } }
stop ( self , timeout = None ) : NEW_LINE INDENT if timeout is None : NEW_LINE INDENT timeout = self . timeout NEW_LINE DEDENT else : NEW_LINE INDENT timeout = self . timeout NEW_LINE DEDENT if timeout is None : NEW_LINE INDENT timeout = self . timeout NEW_LINE DEDENT else : NEW_LINE INDENT timeout = self . timeout NEW_LINE DEDENT try : NEW_LINE INDENT self . server . stop ( timeout ) NEW_LINE DEDENT except : NEW_LINE INDENT self . server . stop ( timeout ) NEW_LINE raise NEW_LINE DEDENT DEDENT
def start ( ) : NEW_LINE INDENT try : NEW_LINE INDENT self . start ( ) NEW_LINE DEDENT except Exception e : NEW_LINE INDENT raise Exception ( " Failed to start the remote server . " ) NEW_LINE DEDENT DEDENT
static String toJson ( String path ) { if ( path == null ) { throw new IllegalArgumentException ( " path must not be null " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " path must not be null " ) ; } if ( path . length ( ) == 0 ) { throw new IllegalArgumentException ( " path must not be null " ) ; } return path . substring ( path . length ( ) - 1 ) ; }
Generate Json ( File file ) throws IOException { return new JsonGenerator ( ) { @ Override public void generate ( ) throws IOException { for ( String key : properties . keySet ( ) ) { for ( String key : properties . keySet ( ) ) { if ( properties . containsKey ( key ) ) { return new Json ( ) ; } } } } } ; }
def generateJson ( InputStream inputStream , Filter filter ) : NEW_LINE INDENT if filter == null : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return json . fromJson ( inputStream , filter ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
generate_json ( self ) : NEW_LINE INDENT json = { } NEW_LINE for key in self . properties : NEW_LINE INDENT json [ key ] = self . properties [ key ] NEW_LINE DEDENT return json NEW_LINE DEDENT
static String toJson ( Map < String , String > map ) { String json = null ; if ( map != null ) json = map . get ( " json " ) ; if ( json == null ) json = " " ; if ( map != null ) json = map . get ( " json " ) ; return json ; }
static String toJson ( Map < String , Object > map ) { String json = null ; if ( map != null ) { json = map . get ( " json " ) ; } if ( json == null ) { json = new String ( ) ; } return json ; }
json_filter ( self , map , filter ) : NEW_LINE INDENT if filter is None : NEW_LINE INDENT return self . json_filter ( map ) NEW_LINE DEDENT return self . json_filter ( map , filter ) NEW_LINE DEDENT
generateJson ( self , filter ) : NEW_LINE INDENT if not filter : NEW_LINE INDENT return None NEW_LINE DEDENT if filter : NEW_LINE INDENT return self . _generateJson ( filter ) NEW_LINE DEDENT return self . _generateJson ( filter ) NEW_LINE DEDENT
calculate_radius ( shadow ) : NEW_LINE INDENT radius = shadow . radius ( ) NEW_LINE if radius is None : NEW_LINE INDENT return radius NEW_LINE DEDENT return radius NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
findIssuer ( self ) : NEW_LINE INDENT issuer = self . issuer NEW_LINE if issuer is not None : NEW_LINE INDENT return issuer NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
execute_maven_plugin ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . plugin . execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . plugin . execute ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
read_markdown_files ( directory ) : NEW_LINE INDENT try : NEW_LINE INDENT return read_markdown_file ( directory ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
replace_variables_with_pattern ( self , pattern ) : NEW_LINE INDENT if not pattern : NEW_LINE INDENT return self . _replace_variables_with_pattern ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _replace_variables_with_pattern ( pattern ) NEW_LINE DEDENT DEDENT
def def get_first_h1 ( self , title ) : NEW_LINE INDENT h1 = self . _get_h1 ( title ) NEW_LINE if h1 is not None : NEW_LINE INDENT return h1 NEW_LINE DEDENT else : NEW_LINE INDENT return h1 NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
_replace_variables ( self , html_file ) : NEW_LINE INDENT if isinstance ( html_file , basestring ) : NEW_LINE INDENT html_file = open ( html_file , ' r ' ) NEW_LINE DEDENT else : NEW_LINE INDENT html_file = html_file . read ( ) NEW_LINE DEDENT return html_file NEW_LINE DEDENT
update_relative_include_paths ( self ) : NEW_LINE INDENT if self . include_paths is None : NEW_LINE INDENT self . include_paths = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . include_paths . extend ( self . include_paths ) NEW_LINE DEDENT DEDENT
copy_file_to_dir ( self , dir ) : NEW_LINE INDENT if os . path . isdir ( dir ) : NEW_LINE INDENT shutil . rmtree ( dir ) NEW_LINE DEDENT elif os . path . isfile ( dir ) : NEW_LINE INDENT shutil . copyfile ( dir , dir ) NEW_LINE DEDENT DEDENT
get_full_path ( self , uri ) : NEW_LINE INDENT if not uri : NEW_LINE INDENT return None NEW_LINE DEDENT if not uri : NEW_LINE INDENT return None NEW_LINE DEDENT if not uri : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return uri NEW_LINE DEDENT DEDENT

animate_to_large_view ( self , view ) : NEW_LINE INDENT self . view = view NEW_LINE return self . view NEW_LINE DEDENT
animate_to_small_view ( self , view ) : NEW_LINE INDENT self . view = view NEW_LINE return self . view NEW_LINE DEDENT
def get_percentage ( self ) : NEW_LINE INDENT if self . visible : NEW_LINE INDENT return self . _percentage NEW_LINE DEDENT else : NEW_LINE INDENT return self . _percentage NEW_LINE DEDENT DEDENT
def crossfade ( self , views ) : NEW_LINE INDENT if len ( views ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT elif len ( views ) == 1 : NEW_LINE INDENT return views [ 0 ] NEW_LINE DEDENT elif len ( views ) == 2 : NEW_LINE INDENT return views [ 1 ] NEW_LINE DEDENT elif len ( views ) == 1 : NEW_LINE INDENT return views [ 0 ] NEW_LINE DEDENT elif len ( views ) == 2 : NEW_LINE INDENT return views [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return views [ 0 ] NEW_LINE DEDENT DEDENT
launch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . app . launch ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . app . launch ( ) NEW_LINE DEDENT DEDENT
launch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . activity . launch ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . activity . launch ( ) NEW_LINE DEDENT DEDENT
List < Todos > getTodos ( ) { List < Todos > todos = new ArrayList < Todos > ( ) ; for ( int i = 0 ; i < todos . size ( ) ; i ++ ) { todos . add ( todos . get ( i ) ) ; } return todos ; }
getFactSheets ( self ) : NEW_LINE INDENT return self . getFactSheets ( ) NEW_LINE DEDENT
download_file ( self , response ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _download_file ( response ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
createAccessControlEntity ( self ) : NEW_LINE INDENT accessControlEntity = self . createAccessControlEntity ( ) NEW_LINE if accessControlEntity : NEW_LINE INDENT return accessControlEntity NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
updateDataModel ( dataModel ) : NEW_LINE INDENT if dataModel is None : NEW_LINE INDENT return NEW_LINE DEDENT dataModel = dataModel . copy ( ) NEW_LINE dataModel . update ( ) NEW_LINE return dataModel NEW_LINE DEDENT
createFullExport ( self ) : NEW_LINE INDENT export = self . createExport ( ) NEW_LINE if export is None : NEW_LINE INDENT export = self . createExport ( ) NEW_LINE DEDENT return export NEW_LINE DEDENT
List < Export > getExports ( ) { List < Export > exportList = new ArrayList < Export > ( ) ; exportList . add ( new Export ( ) ) ; exportList . add ( new Export ( ) ) ; return exportList ; }
get_access_token ( self ) : NEW_LINE INDENT return self . _get_access_token ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
processGraphQLMultipart ( self , graphQL ) : NEW_LINE INDENT if graphQL is not None : NEW_LINE INDENT return self . processGraphQLMultipart ( graphQL ) NEW_LINE DEDENT DEDENT
List < Bookmark > getBookmarks ( ) { List < Bookmark > bookmarks = new ArrayList < Bookmark > ( ) ; for ( Bookmark bookmark : bookmarks ) { bookmarks . add ( bookmark ) ; } return bookmarks ; }
add_permissions_to_graph ( graph , permissions ) : NEW_LINE INDENT if permissions is None : NEW_LINE INDENT permissions = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT permissions . append ( permissions ) NEW_LINE DEDENT return permissions NEW_LINE DEDENT
set_permissions ( self , permissions ) : NEW_LINE INDENT self . permissions = permissions NEW_LINE DEDENT
set_rulesets ( self , rulesets ) : NEW_LINE INDENT self . rulesets = rulesets NEW_LINE DEDENT
close_connection ( self ) : NEW_LINE INDENT if self . connection : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT
set_page_length ( self , page_length ) : NEW_LINE INDENT self . page_length = page_length NEW_LINE DEDENT
static MarkLogicDatasetGraph createMarkLogicDatasetGraph ( ) { MarkLogicDatasetGraph graph = new MarkLogicDatasetGraph ( ) ; graph . setName ( " MarkLogicDatasetGraph " ) ; return graph ; }
static int getMaxThreads ( ) { return ( int ) Math . ceil ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math . log10 ( Math .
resize_source ( self , source , target ) : NEW_LINE INDENT self . _resize_source ( source , target ) NEW_LINE self . _resize_target ( target ) NEW_LINE DEDENT
rotate ( self , image ) : NEW_LINE INDENT if self . background_color is None : NEW_LINE INDENT self . background_color = self . background_color NEW_LINE DEDENT if self . background_color is not None : NEW_LINE INDENT self . background_color = self . background_color NEW_LINE DEDENT if self . background_color is not None : NEW_LINE INDENT self . background_color = self . background_color NEW_LINE DEDENT return self NEW_LINE DEDENT
set_gravity ( self , gravity ) : NEW_LINE INDENT self . gravity = gravity NEW_LINE DEDENT
def def def def strip_profiles__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def _get___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def _strip__python____python____python____python____python____python__ def def def def def def def def def _strip__python____python____python____python____python__ def def def def def def def def _get_profile ( self ) : NEW def _get_profile ( self ) : NEW def _get_profile ( self ) : NEW__python__ def _get_profile ( self ) : NEW_LINE def _get_profile ( self ) : NEW_LINE INDENT return self . _get_profile ( ) NEW_LINE def _get_profile ( self ) : NEW_LINE def _get_profiles__python__
set_font ( self , font ) : NEW_LINE INDENT if not font : NEW_LINE INDENT return NEW_LINE DEDENT font = self . _get_font ( font ) NEW_LINE self . _set_font ( font ) NEW_LINE DEDENT
convert_source_image ( self , source_image ) : NEW_LINE INDENT if source_image is None : NEW_LINE INDENT return NEW_LINE DEDENT image = Image . open ( source_image ) NEW_LINE image . close ( ) NEW_LINE image . close ( ) NEW_LINE return image NEW_LINE DEDENT
add_image ( self , image ) : NEW_LINE INDENT if image is not None : NEW_LINE INDENT return image NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
parse_arguments ( self , args ) : NEW_LINE INDENT if len ( args ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( args ) == 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( args ) == 4 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_usage_info ( self ) : NEW_LINE INDENT if self . annotations : NEW_LINE INDENT return self . annotations NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static TimeUnit extractTimeUnit ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return null ; } return new TimeUnit ( string . substring ( 0 , string . length ( ) - 1 ) ) ; }
parse_properties ( self , properties ) : NEW_LINE INDENT self . parse_properties ( properties ) NEW_LINE self . parse_properties ( properties ) NEW_LINE DEDENT
execute ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute ( url ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static List < ExecutableAction > getExecutableActions ( ) { List < ExecutableAction > executableActions = new ArrayList < ExecutableAction > ( ) ; for ( int i = 0 ; i < executableActions . size ( ) ; i ++ ) { executableActions . add ( executableActions . get ( i ) ) ; } return executableActions ; }
sort_rectangles ( self , rectangles ) : NEW_LINE INDENT if isinstance ( rectangles , list ) : NEW_LINE INDENT return rectangles NEW_LINE DEDENT elif isinstance ( rectangles , list ) : NEW_LINE INDENT return rectangles NEW_LINE DEDENT elif isinstance ( rectangles , list ) : NEW_LINE INDENT return rectangles NEW_LINE DEDENT else : NEW_LINE INDENT return rectangles NEW_LINE DEDENT DEDENT
render_template_string ( self , template_string ) : NEW_LINE INDENT template_string = template_string . strip ( ) NEW_LINE template_string = template_string . strip ( ) NEW_LINE template_string = template_string . strip ( ) NEW_LINE template_string = template_string . strip ( ) NEW_LINE template_string = template_string . strip ( ) NEW_LINE template_string = template_string . strip ( ) NEW_LINE return template_string NEW_LINE DEDENT
get_slide_rel ( self , slide_number ) : NEW_LINE INDENT slide_rel = self . get_slide_rel ( slide_number ) NEW_LINE if not slide_rel : NEW_LINE INDENT return None NEW_LINE DEDENT return slide_rel NEW_LINE DEDENT
mouse_action ( self ) : NEW_LINE INDENT if self . mouse_action is not None : NEW_LINE INDENT return self . mouse_action NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
outbound_sqs_operation ( self ) : NEW_LINE INDENT return self . outbound_sqs_operation ( ) NEW_LINE DEDENT
outbound_sns_operation ( self ) : NEW_LINE INDENT if self . outbound_sns : NEW_LINE INDENT return self . outbound_sns NEW_LINE DEDENT return self . outbound_sns NEW_LINE DEDENT
findFile ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = self . _get_file ( filename ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT if file is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return file NEW_LINE DEDENT DEDENT
create_temporary_directory ( self , directory ) : NEW_LINE INDENT if not os . path . exists ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT return directory NEW_LINE DEDENT
static Map < String , String > create ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , " value " ) ; map . put ( " key " , " value " ) ; return map ; }
void log ( String message ) { if ( message == null || message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 0 ) { return ; } logger . info ( message ) ; }
void log ( String message ) { if ( message == null ) { return ; } logger . info ( message ) ; logger . info ( message ) ; logger . info ( message ) ; }
static void log ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } logger . info ( message ) ; }
static void log ( String message ) { if ( message == null || message . length ( ) == 0 ) { return ; } logger . info ( message ) ; }
log ( self , message ) : NEW_LINE INDENT logger . info ( message ) NEW_LINE logger . info ( message ) NEW_LINE logger . info ( message ) NEW_LINE DEDENT
void log ( String message ) { logger . info ( message ) ; logger . info ( message ) ; logger . info ( message ) ; }
log ( self , message ) : NEW_LINE INDENT logger . info ( message ) NEW_LINE logger . info ( message ) NEW_LINE logger . info ( ) NEW_LINE DEDENT
log ( self , message ) : NEW_LINE INDENT self . logger . info ( message ) NEW_LINE self . logger . info ( message ) NEW_LINE DEDENT
static void log ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return ; } if ( message . length ( ) == 4 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return
log ( self , message ) : NEW_LINE INDENT self . logger . info ( message ) NEW_LINE self . logger . info ( message ) NEW_LINE DEDENT
static void log ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } logger . error ( message ) ; }
inject_additional_context ( self , context ) : NEW_LINE INDENT context = context . copy ( ) NEW_LINE context . update ( context . copy ( ) ) NEW_LINE context . update ( context ) NEW_LINE return context NEW_LINE DEDENT
write_wrapper ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _writer . write_wrapper ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_key_value_pairs ( self , key_value_pairs ) : NEW_LINE INDENT self . write_key_value_pairs ( key_value_pairs ) NEW_LINE self . write_key_value_pairs ( key_value_pairs ) NEW_LINE DEDENT
fill_field ( self , field ) : NEW_LINE INDENT if field is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field , Field ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field , Field ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def generate_log_representation ( self ) : NEW_LINE INDENT return self . log_representation . log_representation ( ) NEW_LINE DEDENT
def get_caller_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _caller_data NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _caller_data NEW_LINE DEDENT DEDENT
serialize ( self , value ) : NEW_LINE INDENT if isinstance ( value , dict ) : NEW_LINE INDENT value = value . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT value = value . copy ( ) NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT value = value . copy ( ) NEW_LINE DEDENT return value NEW_LINE DEDENT
create_database ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_database ( name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def clear ( self ) : NEW_LINE INDENT self . __dict__ . clear ( ) NEW_LINE self . __dict__ . clear ( ) NEW_LINE DEDENT
save_attr ( self , attr ) : NEW_LINE INDENT if attr is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( attr , str ) : NEW_LINE INDENT return attr NEW_LINE DEDENT if isinstance ( attr , int ) : NEW_LINE INDENT return attr NEW_LINE DEDENT if isinstance ( attr , str ) : NEW_LINE INDENT return attr NEW_LINE DEDENT if isinstance ( attr , str ) : NEW_LINE INDENT return attr NEW_LINE DEDENT if isinstance ( attr , str ) : NEW_LINE INDENT return attr NEW_LINE DEDENT if isinstance ( attr , str ) : NEW_LINE INDENT return attr NEW_LINE DEDENT return attr NEW_LINE DEDENT
save ( self , context ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _save ( context ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
reload ( self , context ) : NEW_LINE INDENT self . context = context NEW_LINE self . context . reload ( ) NEW_LINE self . context . reload ( ) NEW_LINE DEDENT
save_attr_string ( self , attr_string ) : NEW_LINE INDENT if isinstance ( attr_string , str ) : NEW_LINE INDENT return attr_string NEW_LINE DEDENT elif isinstance ( attr_string , str ) : NEW_LINE INDENT return attr_string NEW_LINE DEDENT else : NEW_LINE INDENT return attr_string NEW_LINE DEDENT DEDENT
get_save_attr_list ( self , row ) : NEW_LINE INDENT save_attr_list = [ ] NEW_LINE for attr in row : NEW_LINE INDENT save_attr_list . append ( attr ) NEW_LINE DEDENT return save_attr_list NEW_LINE DEDENT
get_save_attr ( self , list ) : NEW_LINE INDENT attr = [ ] NEW_LINE for attr in list : NEW_LINE INDENT attr = getattr ( self , attr ) NEW_LINE if attr : NEW_LINE INDENT attr . append ( attr ) NEW_LINE DEDENT DEDENT return attr NEW_LINE DEDENT
save ( self ) : NEW_LINE INDENT self . _save ( ) NEW_LINE self . _save ( ) NEW_LINE DEDENT
set_save_attrs ( self , attrs ) : NEW_LINE INDENT self . save_attrs = { } NEW_LINE self . save_attrs . update ( attrs ) NEW_LINE DEDENT
save_attrs ( self , row ) : NEW_LINE INDENT if isinstance ( row , dict ) : NEW_LINE INDENT self . save_attrs ( row ) NEW_LINE DEDENT else : NEW_LINE INDENT self . save_attrs ( row ) NEW_LINE DEDENT DEDENT
prepare_context ( self , context , attrs ) : NEW_LINE INDENT self . context = context NEW_LINE self . attrs = attrs NEW_LINE DEDENT
def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def F__python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def def ___python____python____python__ def def def def def def ___python____python____python__ def def def def def def F__python____python____python____python__ def def def def def def def def get___python____python____python____python__ def def def def def def ___python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def def get___python____python____python____python__ def def def def get___python____python____python____python__ def def def get___python____python____python__ def def _ def get___python__
def shift_attrs ( self , attrs ) : NEW_LINE INDENT attrs = attrs . copy ( ) NEW_LINE attrs . clear ( ) NEW_LINE for attr in attrs : NEW_LINE INDENT attrs . add ( attr ) NEW_LINE DEDENT return attrs NEW_LINE DEDENT
create_evaluation_wrapper ( self ) : NEW_LINE INDENT workbook = self . workbook NEW_LINE if workbook is None : NEW_LINE INDENT workbook = self . workbook NEW_LINE DEDENT else : NEW_LINE INDENT workbook = workbook . copy ( ) NEW_LINE workbook . close ( ) NEW_LINE DEDENT return workbook NEW_LINE DEDENT
get_evaluation_wrapper ( self ) : NEW_LINE INDENT return self . _evaluator . get_evaluation_wrapper ( ) NEW_LINE DEDENT
getFormulaevaluator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . formulaevaluator NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . formulaevaluator NEW_LINE DEDENT DEDENT
max_count ( self , workbook ) : NEW_LINE INDENT if workbook is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return self . _max_count ( workbook ) NEW_LINE DEDENT DEDENT
load_web_sheet ( inputStream ) : NEW_LINE INDENT try : NEW_LINE INDENT data = json . loads ( inputStream ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
load_sheet ( workbook ) : NEW_LINE INDENT workbook = workbook . copy ( ) NEW_LINE workbook . close ( ) NEW_LINE return workbook NEW_LINE DEDENT
load_worksheet_by_tab_name ( self , tab_name ) : NEW_LINE INDENT worksheet = self . get_worksheet ( tab_name ) NEW_LINE if worksheet is None : NEW_LINE INDENT return None NEW_LINE DEDENT return worksheet NEW_LINE DEDENT
download_current_workbook ( self ) : NEW_LINE INDENT workbook = self . get_workbook ( ) NEW_LINE if workbook is None : NEW_LINE INDENT workbook = self . get_workbook ( ) NEW_LINE DEDENT if workbook is None : NEW_LINE INDENT workbook = self . get_workbook ( ) NEW_LINE DEDENT if workbook is not None : NEW_LINE INDENT workbook . close ( ) NEW_LINE DEDENT return workbook NEW_LINE DEDENT
save_current_workbooks ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . workbooks . save ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . workbooks . save ( ) NEW_LINE DEDENT DEDENT
submit_current_workbooks ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . current_workbooks . submit ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . current_workbooks . submit ( ) NEW_LINE DEDENT DEDENT
populate_component ( self , component ) : NEW_LINE INDENT self . component = component NEW_LINE DEDENT
get_current_sheet_config ( self ) : NEW_LINE INDENT sheet = self . sheet NEW_LINE if sheet is None : NEW_LINE INDENT return None NEW_LINE DEDENT return sheet . config NEW_LINE DEDENT
load_bean ( self , bean ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_bean ( bean ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static Locale getLocale ( ) { Locale locale = null ; try { locale = Locale . getDefault ( ) ; } catch ( IllegalArgumentException e ) { locale = Locale . getDefault ( ) ; } return locale ; }
def get_picture ( self ) : NEW_LINE INDENT return self . _get_picture ( ) NEW_LINE return self . _get_picture ( ) NEW_LINE DEDENT
get_cell_helper ( self ) : NEW_LINE INDENT return self . _cell_helper NEW_LINE DEDENT
get_pic_helper ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pic_helper NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_validation_handler ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . validation_handler NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
shared formulas into shared formulas .
convert_ptg ( ptg ) : NEW_LINE INDENT try : NEW_LINE INDENT return ptg NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
convert_watch_list ( self , watch_list ) : NEW_LINE INDENT if isinstance ( watch_list , list ) : NEW_LINE INDENT return watch_list NEW_LINE DEDENT elif isinstance ( watch_list , list ) : NEW_LINE INDENT return watch_list NEW_LINE DEDENT DEDENT
single_ptg ( ptg ) : NEW_LINE INDENT if ptg is not None : NEW_LINE INDENT return ptg NEW_LINE DEDENT return ptg NEW_LINE DEDENT
getRows ( self ) : NEW_LINE INDENT rows = [ ] NEW_LINE for row in self . rows : NEW_LINE INDENT rows . append ( row ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
def def rowslist ( self , rowsmapping ) : NEW_LINE INDENT rowslist = [ ] NEW_LINE for row in rowsmapping : NEW_LINE INDENT rowslist . append ( row ) NEW_LINE DEDENT return rowslist NEW_LINE DEDENT
def def fix_row ( self , row ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fix_row ( row ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _fix_row ( row ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_background_color ( self ) : NEW_LINE INDENT background_color = self . _get_background_color ( ) NEW_LINE if background_color is None : NEW_LINE INDENT background_color = self . _get_background_color ( ) NEW_LINE DEDENT return background_color NEW_LINE DEDENT
get_line_color ( self ) : NEW_LINE INDENT line_color = self . _get_line_color ( ) NEW_LINE if line_color is not None : NEW_LINE INDENT return line_color NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_xcolor ( self , color ) : NEW_LINE INDENT if color is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return color NEW_LINE DEDENT DEDENT
get_xcolor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . xcolor NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void set_xcolor ( int xcolor ) { if ( xcolor == 0 ) { return ; } if ( xcolor == 1 ) { return ; } if ( xcolor == 2 ) { return ; } if ( xcolor == 3 ) { return ; } if ( xcolor == 4 ) { return ; } if ( xcolor == 5 ) { return ; } if ( xcolor == 6 ) { return ; } if ( xcolor == 7 ) { return ; } if ( xcolor == 8 ) { return ; } if ( xcolor == 9 ) { return ; } if ( xcolor == 10 ) { return ; } if ( xcolor == 11 ) { return ; } if ( xcolor == 12 ) { return ; } if ( xcolor == 13 ) { return ; } if ( xcolor == 14 ) { return ; } if ( xcolor == 15 ) { return ; } if ( xcolor == 16 ) { return ;
color ( self , color ) : NEW_LINE INDENT if color is None : NEW_LINE INDENT color = self . color NEW_LINE DEDENT if color is None : NEW_LINE INDENT color = self . color NEW_LINE DEDENT return color NEW_LINE DEDENT
convert_xssfcolor ( xssfcolor ) : NEW_LINE INDENT if xssfcolor is not None : NEW_LINE INDENT return xssfcolor NEW_LINE DEDENT else : NEW_LINE INDENT return xssfcolor NEW_LINE DEDENT DEDENT
get_bg_color ( self , cell ) : NEW_LINE INDENT bg_color = self . bg_color NEW_LINE if bg_color is not None : NEW_LINE INDENT return bg_color NEW_LINE DEDENT return self . bg_color NEW_LINE DEDENT
find_component_by_class ( cls , class_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . find_component_by_class ( class_name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
populate_attributes ( self , attributes ) : NEW_LINE INDENT if attributes is None : NEW_LINE INDENT return NEW_LINE DEDENT attributes = [ ] NEW_LINE for attr in attributes : NEW_LINE INDENT attributes . append ( attr ) NEW_LINE DEDENT return attributes NEW_LINE DEDENT
match_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . match ( method ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_object_property ( self , object_property ) : NEW_LINE INDENT self . object_property = object_property NEW_LINE DEDENT
get_object_property_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_object_property_value ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def set_control_attributes ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _control_attributes = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate_attributes ( self ) : NEW_LINE INDENT self . _validate_attributes ( ) NEW_LINE self . _validate_attributes ( ) NEW_LINE self . _validate_attributes ( ) NEW_LINE DEDENT
def def def def _setup_cell_cell_picture_picture_charts ( self ) : NEW_LINE def _setup_cell_picture_picture_charts ( self ) : NEW_LINE INDENT self . _setup_cell_picture_charts ( ) NEW_LINE def _setup_LINE INDENT self . _setup_cell_picture_charts ( ) NEW_LINE self . _setup_cell_picture_charts ( ) NEW_LINE DEDENT def _setup_cell_picture_charts ( self ) : NEW_LINE INDENT self . _setup_cell_picture_charts ( ) NEW_LINE DEDENT DEDENT
def def _setup_cell_charts ( self ) : NEW_LINE INDENT self . _cell_charts = { } NEW_LINE self . _cell_charts = { } NEW_LINE DEDENT
def def def def _setup_cell_cell_picture_picture ( self ) : NEW_LINE def _setup_cell_picture ( self ) : NEW_LINE INDENT self . _setup_cell_picture ( ) NEW_LINE def _setup_cell_picture ( self ) : NEW_LINE INDENT self . _setup_cell_picture ( ) NEW_LINE self . _setup_cell_picture ( ) NEW_LINE DEDENT def _setup_cell_picture ( self ) : NEW_LINE INDENT self . _setup_cell_picture ( ) NEW_LINE self . _setup_cell_picture ( ) NEW_LINE DEDENT DEDENT
get_chart_map ( self , workbook ) : NEW_LINE INDENT chart_map = { } NEW_LINE if workbook is not None : NEW_LINE INDENT chart_map = workbook . get_chart_map ( ) NEW_LINE DEDENT else : NEW_LINE INDENT chart_map = { } NEW_LINE DEDENT return chart_map NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_color ( self , series , color ) : NEW_LINE INDENT if color is not None : NEW_LINE INDENT self . color = color NEW_LINE DEDENT else : NEW_LINE INDENT self . color = color NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
setupStyle ( self , style ) : NEW_LINE INDENT self . style = style NEW_LINE return self . style NEW_LINE DEDENT
create_chart_map ( self ) : NEW_LINE INDENT chart_map = { } NEW_LINE chart_map . clear ( ) NEW_LINE chart_map . putAll ( self . get_chart_map ( ) ) NEW_LINE return chart_map NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_anchor_map ( self ) : NEW_LINE INDENT return self . anchors_map NEW_LINE DEDENT
static XSSFChart create ( XSSFChart chart ) { XSSFChart chart = new XSSFChart ( chart ) ; return chart ; }
transform ( self , collection ) : NEW_LINE INDENT if isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT elif isinstance ( collection , collections . Collection ) : NEW_LINE INDENT return collection NEW_LINE DEDENT DEDENT
get_full_name_from_row ( self , row ) : NEW_LINE INDENT try : NEW_LINE INDENT full_name = row . full_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT full_name = ' ' NEW_LINE DEDENT return full_name NEW_LINE DEDENT
build_upper_level_formula ( self , formula ) : NEW_LINE INDENT self . formula = formula NEW_LINE return self . formula NEW_LINE DEDENT
def _setup_upper_level_formula ( self , formula ) : NEW_LINE INDENT self . formula = formula NEW_LINE return self . formula NEW_LINE DEDENT
def def _build_cell_formula ( self ) : NEW_LINE INDENT return self . _build_cell_formula ( ) NEW_LINE DEDENT
def def get_rows ( self ) : NEW_LINE INDENT rows = self . _get_rows ( ) NEW_LINE for row in rows . values ( ) : NEW_LINE INDENT rows = rows . values ( ) NEW_LINE DEDENT return rows . values ( ) NEW_LINE DEDENT
increase_index_number ( self , index_number ) : NEW_LINE INDENT self . index_number = index_number NEW_LINE return self . index_number NEW_LINE DEDENT
def increase_length ( final int length ) : NEW_LINE INDENT if length > 0 : NEW_LINE INDENT length = length + 1 NEW_LINE DEDENT else : NEW_LINE INDENT length = length - 1 NEW_LINE DEDENT return length NEW_LINE DEDENT
def index_number ( self ) : NEW_LINE INDENT return self . _get_index_number ( ) NEW_LINE DEDENT
def def _get_full_name ( self ) : NEW_LINE INDENT return self . _get_full_name ( ) NEW_LINE DEDENT
get_row_num ( self , row_num ) : NEW_LINE INDENT if row_num is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return row_num NEW_LINE DEDENT DEDENT
def def set_row_num ( self , row_num ) : NEW_LINE INDENT self . row_num = row_num NEW_LINE self . row_num = row_num NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
find_item ( self , item ) : NEW_LINE INDENT item = self . _find_item ( item ) NEW_LINE if item : NEW_LINE INDENT return item NEW_LINE DEDENT DEDENT
def def build_range ( self , range ) : NEW_LINE INDENT return self . _build_range ( range ) NEW_LINE DEDENT
static boolean isRowStatic ( int rowIndex ) { if ( rowIndex < 0 ) { return false ; } if ( rowIndex == 0 ) { return true ; } if ( rowIndex == 1 ) { return true ; } if ( rowIndex == 2 ) { return true ; } if ( rowIndex == 3 ) { return true ; } if ( rowIndex == 4 ) { return true ; } return false ; }
check_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return False NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def def def def public static final public static final void update ( self ) { if ( self .__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

public public static void skipRegionCells ( Region region ) { if ( region != null ) { for ( int i = 0 ; i < region . cells . size ( ) ; i ++ ) { if ( region . cells . get ( i ) != null ) { return ; } } } }
def add_skipped_cell ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT region = self . region . get_region ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
static String getComment ( String alias ) { if ( alias == null ) { return " " ; } if ( alias . length ( ) == 0 ) { return " " ; } return alias ; }
static String buildCellComment ( String cellComment ) { if ( cellComment == null ) { return " " ; } if ( cellComment . length ( ) == 0 ) { return " " ; } return cellComment ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_sheet_configuration ( self ) : NEW_LINE INDENT sheet_configuration = self . _sheet_configuration NEW_LINE if sheet_configuration is not None : NEW_LINE INDENT return sheet_configuration NEW_LINE DEDENT DEDENT
def def def build_form_command ( self ) : NEW_LINE INDENT command = self . _build_form_command ( ) NEW_LINE command = self . _build_command ( command ) NEW_LINE return command NEW_LINE DEDENT
check_last_column ( self , column ) : NEW_LINE INDENT if column is None : NEW_LINE INDENT return None NEW_LINE DEDENT if column is None : NEW_LINE INDENT return None NEW_LINE DEDENT if column is None : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if column . isblank ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return column NEW_LINE DEDENT
build_sheet ( self ) : NEW_LINE INDENT sheet = self . sheet NEW_LINE if sheet is not None : NEW_LINE INDENT return sheet NEW_LINE DEDENT else : NEW_LINE INDENT return sheet NEW_LINE DEDENT DEDENT
repair_lastrow ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT if not row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if row . isblank ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
remove_comment ( self , comment ) : NEW_LINE INDENT comment = self . get_comment ( comment ) NEW_LINE if comment is not None : NEW_LINE INDENT return comment NEW_LINE DEDENT return None NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
contains_command ( self , command ) : NEW_LINE INDENT if isinstance ( command , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def config_sheet_config ( self ) : NEW_LINE INDENT return self . _sheet_config . get_sheet_config ( ) NEW_LINE DEDENT
copy_command_area_to_seperated_sheet ( self ) : NEW_LINE INDENT for i in range ( 0 , self . command_areas . size ( ) ) : NEW_LINE INDENT for i in range ( 0 , self . command_areas . size ( ) ) : NEW_LINE INDENT self . command_areas [ i ] = self . command_areas [ i ] . copy ( ) NEW_LINE DEDENT DEDENT DEDENT
build_command_list ( comment ) : NEW_LINE INDENT command_list = [ ] NEW_LINE for line in comment . splitlines ( ) : NEW_LINE INDENT command_list . append ( line ) NEW_LINE DEDENT return command_list NEW_LINE DEDENT
process_method_line ( self , method_line ) : NEW_LINE INDENT line = self . _process_method_line ( method_line ) NEW_LINE if line is None : NEW_LINE INDENT return line NEW_LINE DEDENT return line NEW_LINE DEDENT
def process_command_line ( self , command ) : NEW_LINE INDENT command = self . _process_command_line ( command ) NEW_LINE self . _process_command_line ( command ) NEW_LINE self . _process_command_line ( command ) NEW_LINE DEDENT
change_comment ( self , comment ) : NEW_LINE INDENT try : NEW_LINE INDENT self . comment = comment NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_configuration_command ( self ) : NEW_LINE INDENT command = self . create_configuration_command ( ) NEW_LINE return command NEW_LINE DEDENT
build_attributes_map ( self ) : NEW_LINE INDENT attributes = { } NEW_LINE for key , value in self . attributes . items ( ) : NEW_LINE INDENT attributes [ key ] = value NEW_LINE DEDENT for key , value in self . attributes . items ( ) : NEW_LINE INDENT attributes [ key ] = value NEW_LINE DEDENT DEDENT
create_sheet_configuration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT sheet = self . _create_sheet_configuration ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT sheet = self . _create_sheet_configuration ( ) NEW_LINE DEDENT return sheet NEW_LINE DEDENT
footer ( self ) : NEW_LINE INDENT return self . _footer NEW_LINE DEDENT
set_sheet_configuration ( self , sheet_configuration ) : NEW_LINE INDENT self . _sheet_configuration = sheet_configuration NEW_LINE DEDENT
def def set_sheet_header ( self , sheet_name ) : NEW_LINE INDENT self . _sheet_name = sheet_name NEW_LINE self . _sheet_name = sheet_name NEW_LINE return self . _sheet_name NEW_LINE DEDENT
delete_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT row . delete ( ) NEW_LINE row . delete ( ) NEW_LINE DEDENT
remove_ranges ( self , shift_map ) : NEW_LINE INDENT ranges = [ ] NEW_LINE for range in shift_map : NEW_LINE INDENT ranges . append ( range ) NEW_LINE DEDENT return ranges NEW_LINE DEDENT
remove_full_name ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' ' ) NEW_LINE name = name . replace ( ' - ' , ' ' ) NEW_LINE return name NEW_LINE DEDENT
get_command_from_parts_name ( self , parts_name ) : NEW_LINE INDENT parts = [ ] NEW_LINE for name in parts_name : NEW_LINE INDENT parts . append ( name ) NEW_LINE DEDENT return parts NEW_LINE DEDENT
insert_empty_object ( self , context ) : NEW_LINE INDENT self . context = context NEW_LINE if self . context is None : NEW_LINE INDENT return NEW_LINE DEDENT self . context . append ( self . context ) NEW_LINE DEDENT
delete_object ( context , object ) : NEW_LINE INDENT if object is None : NEW_LINE INDENT return NEW_LINE DEDENT context . delete_object ( object ) NEW_LINE DEDENT
prepare_collection_data ( self , context ) : NEW_LINE INDENT self . _context = context NEW_LINE self . _collection_data = { } NEW_LINE self . _collection_data . clear ( ) NEW_LINE self . _collection_data . clear ( ) NEW_LINE return self . _collection_data NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def _ def _ def _
add_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return False NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return True NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
insert_template ( self , template ) : NEW_LINE INDENT self . _templates . append ( template ) NEW_LINE DEDENT
static boolean isNormalCell ( Cell cell ) { if ( cell == null ) { return false ; } if ( cell instanceof NormalCell ) { return true ; } return false ; }
def user_formula ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _user_formula ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _user_formula ( ) NEW_LINE DEDENT DEDENT
is_user_formula ( self , formula ) : NEW_LINE INDENT if not formula : NEW_LINE INDENT return False NEW_LINE DEDENT if not formula . is_formula ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
create_cell_comment ( self ) : NEW_LINE INDENT if self . cell_comment is None : NEW_LINE INDENT self . cell_comment = [ ] NEW_LINE DEDENT return self . cell_comment NEW_LINE DEDENT
express ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _express ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _express ( ) NEW_LINE DEDENT DEDENT
remove_rows ( self , rows ) : NEW_LINE INDENT for row in rows : NEW_LINE INDENT self . remove_row ( row ) NEW_LINE DEDENT DEDENT
remove_single_row ( self , sheet ) : NEW_LINE INDENT self . sheet . remove_row ( sheet ) NEW_LINE self . sheet . remove_row ( sheet ) NEW_LINE DEDENT
remove_cached_cell ( self , row ) : NEW_LINE INDENT if self . cached_cell is None : NEW_LINE INDENT self . cached_cell = None NEW_LINE DEDENT else : NEW_LINE INDENT self . cached_cell = self . cached_cell NEW_LINE DEDENT DEDENT
remove_rows ( self , rows ) : NEW_LINE INDENT if len ( rows ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( rows ) == 1 : NEW_LINE INDENT return rows [ 0 ] NEW_LINE DEDENT if len ( rows ) == 2 : NEW_LINE INDENT return rows [ 1 ] NEW_LINE DEDENT if len ( rows ) == 3 : NEW_LINE INDENT return rows [ 2 ] NEW_LINE DEDENT DEDENT
def public static void put ( String key , String key , String value ) { if ( key == null ) { return ; } if ( key == null ) { return ; } if ( value == null ) { return ; } if ( value == null ) { return ; } if ( key == null ) { return ; } if ( key == null ) { return ; } else { return ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
assemble ( self , value ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _assemble ( value ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
format_cell ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . format_cell ( cell ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . format_cell ( cell ) NEW_LINE DEDENT DEDENT
get_input_cell_value ( self ) : NEW_LINE INDENT if self . input_cell_value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . input_cell_value NEW_LINE DEDENT
get_cell_value ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cell_value NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . _cell_value NEW_LINE DEDENT DEDENT
get_cell_string_value ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , str ) : NEW_LINE INDENT return cell NEW_LINE DEDENT elif isinstance ( cell , str ) : NEW_LINE INDENT return cell NEW_LINE DEDENT else : NEW_LINE INDENT return cell NEW_LINE DEDENT DEDENT
set_cell_value ( self , cell_value ) : NEW_LINE INDENT self . cell_value = cell_value NEW_LINE return self . cell_value NEW_LINE DEDENT
def set_cell_value ( self , cell_value ) : NEW_LINE INDENT self . _cell_value = cell_value NEW_LINE return self . _cell_value NEW_LINE DEDENT
set_cell_value ( self , cell_value ) : NEW_LINE INDENT if isinstance ( cell_value , bool ) : NEW_LINE INDENT self . cell_value = cell_value NEW_LINE DEDENT else : NEW_LINE INDENT self . cell_value = cell_value NEW_LINE DEDENT DEDENT
def set_cell_value_date ( self , cell_value_date ) : NEW_LINE INDENT self . cell_value_date = cell_value_date NEW_LINE return self . cell_value_date NEW_LINE DEDENT
def set_cell_value_number ( self , cell_value_number ) : NEW_LINE INDENT self . cell_value_number = cell_value_number NEW_LINE return self . cell_value_number NEW_LINE DEDENT
copy_rows ( self , rows ) : NEW_LINE INDENT for row in rows : NEW_LINE INDENT self . _copy_rows ( row ) NEW_LINE DEDENT DEDENT
copy_row ( self , row ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _copy_row ( row ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _copy_row ( row ) NEW_LINE raise NEW_LINE DEDENT DEDENT
copy_cell ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _copy_cell ( cell ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_cell_value ( self , cell_value ) : NEW_LINE INDENT self . cell_value = cell_value NEW_LINE DEDENT
set_cell_style ( self , cell_style ) : NEW_LINE INDENT self . cell_style = cell_style NEW_LINE DEDENT
clone_cell_comment ( self , cell_comment ) : NEW_LINE INDENT if cell_comment is not None : NEW_LINE INDENT return cell_comment . clone ( ) NEW_LINE DEDENT if cell_comment is not None : NEW_LINE INDENT return cell_comment NEW_LINE DEDENT DEDENT
comment_anchor ( self ) : NEW_LINE INDENT if self . comment_anchor is None : NEW_LINE INDENT self . comment_anchor = [ ] NEW_LINE DEDENT return self . comment_anchor NEW_LINE DEDENT
create_comment ( self , comment ) : NEW_LINE INDENT if comment is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return comment NEW_LINE DEDENT DEDENT
match_comments ( self , comments ) : NEW_LINE INDENT if isinstance ( comments , dict ) : NEW_LINE INDENT return comments NEW_LINE DEDENT elif isinstance ( comments , list ) : NEW_LINE INDENT return comments NEW_LINE DEDENT elif isinstance ( comments , dict ) : NEW_LINE INDENT return comments NEW_LINE DEDENT else : NEW_LINE INDENT return comments NEW_LINE DEDENT DEDENT
def find_vmldrawing_part ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_vmldrawing_part ( cell ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static CtShape findCtShape ( Class < ? extends CtShape > clazz ) { return clazz . getAnnotation ( CtShape . class ) ; }
create_cell_style ( self , cell ) : NEW_LINE INDENT style = self . getStyle ( cell ) NEW_LINE if style is None : NEW_LINE INDENT style = self . getStyle ( cell ) NEW_LINE DEDENT return style NEW_LINE DEDENT
setFacesCell ( self , facesCell ) : NEW_LINE INDENT self . facesCell = facesCell NEW_LINE return self . facesCell NEW_LINE DEDENT
get_row_col ( self ) : NEW_LINE INDENT row_col = self . get_row_col ( ) NEW_LINE if row_col is None : NEW_LINE INDENT return None NEW_LINE DEDENT return row_col NEW_LINE DEDENT
get_inits ( self ) : NEW_LINE INDENT inits = [ ] NEW_LINE for row in self . rows : NEW_LINE INDENT inits . append ( row ) NEW_LINE DEDENT return inits NEW_LINE DEDENT
def get_faces_row ( self , body ) : NEW_LINE INDENT faces_row = [ ] NEW_LINE for row in body : NEW_LINE INDENT faces_row . append ( row ) NEW_LINE DEDENT return faces_row NEW_LINE DEDENT
get_faces_cell ( self , body ) : NEW_LINE INDENT faces = [ ] NEW_LINE for cell in self . faces : NEW_LINE INDENT faces . append ( cell ) NEW_LINE DEDENT return faces NEW_LINE DEDENT
get_poi_cell_from_sheet ( self , sheet ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _poi_cell_from_sheet ( sheet ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_skey ( self , cell ) : NEW_LINE INDENT skey = cell . get_skey ( ) NEW_LINE if skey : NEW_LINE INDENT return skey NEW_LINE DEDENT return None NEW_LINE DEDENT
add_tie_cell ( self , cell ) : NEW_LINE INDENT if cell is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return cell NEW_LINE DEDENT DEDENT
static String getCurrentDataContextName ( ) { if ( currentDataContextName == null ) { currentDataContextName = " " ; } else { currentDataContextName = currentDataContextName . trim ( ) ; } return currentDataContextName ; }
evaluate_expression ( self , expression ) : NEW_LINE INDENT if isinstance ( expression , str ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , str ) : NEW_LINE INDENT return expression NEW_LINE DEDENT elif isinstance ( expression , str ) : NEW_LINE INDENT return expression NEW_LINE DEDENT else : NEW_LINE INDENT return expression NEW_LINE DEDENT DEDENT
evaluate ( self , context ) : NEW_LINE INDENT context = context . copy ( ) NEW_LINE context . clear ( ) NEW_LINE context . add ( self ) NEW_LINE return context NEW_LINE DEDENT
save_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _save_row ( row ) NEW_LINE DEDENT
_remove_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT row . delete ( ) NEW_LINE row . delete ( ) NEW_LINE row . delete ( ) NEW_LINE DEDENT
merge_map ( self , map ) : NEW_LINE INDENT if not map : NEW_LINE INDENT return None NEW_LINE DEDENT map = { } NEW_LINE for key , value in map . items ( ) : NEW_LINE INDENT map [ key ] = value NEW_LINE DEDENT for key , value in map . items ( ) : NEW_LINE INDENT map [ key ] = value NEW_LINE DEDENT DEDENT
recover_rows_mapping ( self ) : NEW_LINE INDENT rows_mapping = { } NEW_LINE for row in self . rows : NEW_LINE INDENT rows_mapping [ row . id ] = row NEW_LINE DEDENT rows_mapping = { } NEW_LINE for row in self . rows : NEW_LINE INDENT rows_mapping [ row . id ] = row NEW_LINE DEDENT return rows_mapping NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
stroke ( self , style_string ) : NEW_LINE INDENT if style_string is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return style_string NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static ChartData createChartData ( List < Category > categoryList , List < Series > seriesList ) { ChartData chartData = new ChartData ( ) ; chartData . setCategories ( categoryList ) ; chartData . setSeriesList ( seriesList ) ; return chartData ; }
get_anchor_info ( self ) : NEW_LINE INDENT return self . _get_anchor_info ( ) NEW_LINE DEDENT
static XSSF anchors map ( XSSFSheet sheet ) { if ( sheet == null ) { return null ; } XSSF anchors = new XSSF anchors ( sheet ) ; return anchors ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void build ( List < Object > objects ) { for ( Object obj : objects ) { if ( obj . getClass ( ) . getName ( ) . equals ( obj . getClass ( ) . getName ( ) ) ) { build ( obj ) ; } } }
save_context ( self , context ) : NEW_LINE INDENT self . context = context NEW_LINE self . context . save ( ) NEW_LINE DEDENT
recalc ( self , workbook ) : NEW_LINE INDENT workbook = workbook . copy ( ) NEW_LINE workbook . close ( ) NEW_LINE workbook . close ( ) NEW_LINE workbook . close ( ) NEW_LINE DEDENT
get_poi_cell ( self , row , col ) : NEW_LINE INDENT poi_cell = self . get_poi_cell ( row , col ) NEW_LINE if poi_cell is None : NEW_LINE INDENT return None NEW_LINE DEDENT return poi_cell NEW_LINE DEDENT
get_faces_cell ( self , row , col ) : NEW_LINE INDENT faces_cell = [ ] NEW_LINE faces_cell . append ( row ) NEW_LINE faces_cell . append ( col ) NEW_LINE faces_cell . append ( col ) NEW_LINE return faces_cell NEW_LINE DEDENT
restore_data_context ( self ) : NEW_LINE INDENT data_context = self . data_context . copy ( ) NEW_LINE self . data_context . clear ( ) NEW_LINE self . data_context . clear ( ) NEW_LINE self . data_context . clear ( ) NEW_LINE self . data_context . clear ( ) NEW_LINE DEDENT
get_last_collect_object ( self ) : NEW_LINE INDENT return self . _last_collect_object NEW_LINE DEDENT
restore ( self ) : NEW_LINE INDENT self . _restore ( ) NEW_LINE self . _restore ( ) NEW_LINE DEDENT
restore_data_context ( self ) : NEW_LINE INDENT self . _restore_data_context ( ) NEW_LINE self . _restore_data_context ( ) NEW_LINE DEDENT
shift_row_ref ( self , row_ref ) : NEW_LINE INDENT row_ref = row_ref . copy ( ) NEW_LINE row_ref . clear ( ) NEW_LINE row_ref . add ( row_ref ) NEW_LINE row_ref . add ( row_ref ) NEW_LINE DEDENT
setFirstCellAddress ( self , firstCellAddress ) : NEW_LINE INDENT self . firstCellAddress = firstCellAddress NEW_LINE DEDENT
setLastCellAddress ( self , lastCellAddress ) : NEW_LINE INDENT self . lastCellAddress = lastCellAddress NEW_LINE DEDENT
build_cells ( self ) : NEW_LINE INDENT for row in self . rows : NEW_LINE INDENT for column in self . columns : NEW_LINE INDENT cell = self . build_cell ( row , column ) NEW_LINE if cell is not None : NEW_LINE INDENT return cell NEW_LINE DEDENT DEDENT DEDENT return [ ] NEW_LINE DEDENT
def build_single_cell ( self ) : NEW_LINE INDENT return self . _build_single_cell ( ) NEW_LINE DEDENT
load_workbook ( self ) : NEW_LINE INDENT if self . workbook is None : NEW_LINE INDENT self . workbook = openpyxl . load_workbook ( self . filename ) NEW_LINE DEDENT return self . workbook NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
build_series_list ( self ) : NEW_LINE INDENT series_list = [ ] NEW_LINE for series in self . series_list : NEW_LINE INDENT series_list . append ( series ) NEW_LINE DEDENT series_list = [ ] NEW_LINE for series in self . series_list : NEW_LINE INDENT series . append ( series ) NEW_LINE DEDENT return series_list NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_color_list ( dpt ) : NEW_LINE INDENT color_list = [ ] NEW_LINE for color in dpt . get_color_list ( ) : NEW_LINE INDENT color_list . append ( color ) NEW_LINE DEDENT return color_list NEW_LINE DEDENT
get_dpt_from_list ( self , list ) : NEW_LINE INDENT dpt = [ ] NEW_LINE for dpt in list : NEW_LINE INDENT dpt . append ( dpt ) NEW_LINE DEDENT dpt = [ ] NEW_LINE for dpt in list : NEW_LINE INDENT dpt . append ( dpt ) NEW_LINE DEDENT return dpt NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_pictrues_map ( self ) : NEW_LINE INDENT pictrues = self . pictrues NEW_LINE return pictrues NEW_LINE DEDENT
get_pictrues_map ( self ) : NEW_LINE INDENT pictrues_map = { } NEW_LINE for pictrues in self . pictrues . values ( ) : NEW_LINE INDENT pictrues_map [ pictrues . name ] = pictrues NEW_LINE DEDENT return pictrues_map NEW_LINE DEDENT
save_pciture ( self , pciture ) : NEW_LINE INDENT try : NEW_LINE INDENT pciture . save ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def generate_picture_style ( self ) : NEW_LINE INDENT picture_style = self . _generate_picture_style ( ) NEW_LINE if picture_style is not None : NEW_LINE INDENT return picture_style NEW_LINE DEDENT return picture_style NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static String getPattern ( String pattern ) { if ( pattern == null ) { return null ; } if ( pattern . isEmpty ( ) ) { return null ; } return pattern ; }
def get_real_chart_picture ( self ) : NEW_LINE INDENT return self . _get_real_chart_picture ( ) NEW_LINE DEDENT
recover_cell ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT cell . address = cell . address NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return cell NEW_LINE DEDENT DEDENT
def def get_row_style ( self ) : NEW_LINE INDENT row_style = self . style . getStyle ( ) NEW_LINE if row_style : NEW_LINE INDENT return row_style NEW_LINE DEDENT DEDENT
get_cell_font_style ( self ) : NEW_LINE INDENT style = self . _cell_font_style NEW_LINE if style : NEW_LINE INDENT return style NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_cell_font_color ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cell_font_color NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_font_ decoration ( self ) : NEW_LINE INDENT decoration = self . _get_font_decoration ( ) NEW_LINE if decoration is not None : NEW_LINE INDENT return decoration NEW_LINE DEDENT return decoration NEW_LINE DEDENT
get_cell_style ( self ) : NEW_LINE INDENT style = self . cell_style NEW_LINE if style is not None : NEW_LINE INDENT return style NEW_LINE DEDENT return self . cell_style NEW_LINE DEDENT
get_column_style ( self ) : NEW_LINE INDENT if self . column_style is not None : NEW_LINE INDENT return self . column_style NEW_LINE DEDENT return self . column_style NEW_LINE DEDENT
getAlignment ( self , cell ) : NEW_LINE INDENT return self . alignment NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
calc_height ( self ) : NEW_LINE INDENT height = self . height NEW_LINE if height is None : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return height NEW_LINE DEDENT DEDENT
_setup_cell_styles ( self ) : NEW_LINE INDENT self . _cell_styles = [ ] NEW_LINE self . _cell_styles . append ( self . _cell_styles ) NEW_LINE self . _cell_styles . append ( self . _cell_styles ) NEW_LINE DEDENT
get_input_type ( self , cell_type ) : NEW_LINE INDENT if isinstance ( cell_type , str ) : NEW_LINE INDENT return cell_type NEW_LINE DEDENT elif isinstance ( cell_type , str ) : NEW_LINE INDENT return cell_type NEW_LINE DEDENT return None NEW_LINE DEDENT
get_resource_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return " / " NEW_LINE DEDENT DEDENT
get_resource_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_resource_file ( filename ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_prefix_path ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
input_type ( self ) : NEW_LINE INDENT input_type = self . _input_type ( ) NEW_LINE return input_type NEW_LINE DEDENT
def def find_bean def find_bean def find_bean ( self ) : NEW_LINE INDENT return context . getBean ( ) . getBean ( " bean " ) NEW_LINE DEDENT
join ( self , string ) : NEW_LINE INDENT return self . _join ( string ) NEW_LINE DEDENT
round ( self , number ) : NEW_LINE INDENT if number == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 4 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 5 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 6 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 7 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 8 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 9 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 10 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 11 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if number == 12 : NEW_
get_tab_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . tab_type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_tab_style ( self ) : NEW_LINE INDENT tab_style = self . get_tab_style ( ) NEW_LINE if tab_style is not None : NEW_LINE INDENT return tab_style NEW_LINE DEDENT DEDENT
get_default_date_pattern ( self ) : NEW_LINE INDENT pattern = self . default_date_pattern NEW_LINE if not pattern : NEW_LINE INDENT return None NEW_LINE DEDENT return pattern NEW_LINE DEDENT
static String getDecimalSeparator ( Locale locale ) { String separator = null ; if ( locale != null ) { separator = locale . getDecimalSeparator ( ) ; } if ( separator != null ) { separator = separator . trim ( ) ; } return separator ; }
static String thousandSeparator ( String separator ) { if ( separator == null ) { separator = " " ; } if ( separator . length ( ) == 0 ) { separator = " " ; } return separator ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
watch ( self ) : NEW_LINE INDENT if self . formula is not None : NEW_LINE INDENT self . formula = self . formula NEW_LINE DEDENT else : NEW_LINE INDENT self . formula = None NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

check_command_comment ( self ) : NEW_LINE INDENT if self . command_comment is not None : NEW_LINE INDENT return self . command_comment NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_attribute_key ( self , cell ) : NEW_LINE INDENT key = self . get_attribute_key ( cell ) NEW_LINE return key NEW_LINE DEDENT
validate_attributes ( self ) : NEW_LINE INDENT if self . validate_attributes : NEW_LINE INDENT return self . validate_attributes NEW_LINE DEDENT DEDENT
def find_pair_ bracket_position ( self ) : NEW_LINE INDENT pair_position = self . bracket_position NEW_LINE return pair_position NEW_LINE DEDENT
parse_attributes_from_string ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_attributes_from_string ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_attributes_from_string ( string ) NEW_LINE DEDENT DEDENT
parse_input_attributes ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_input_attributes ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
validate_attributes ( self , attributes ) : NEW_LINE INDENT if isinstance ( attributes , dict ) : NEW_LINE INDENT return attributes NEW_LINE DEDENT elif isinstance ( attributes , list ) : NEW_LINE INDENT return attributes NEW_LINE DEDENT elif isinstance ( attributes , dict ) : NEW_LINE INDENT return attributes NEW_LINE DEDENT elif isinstance ( attributes , dict ) : NEW_LINE INDENT return attributes NEW_LINE DEDENT else : NEW_LINE INDENT return attributes NEW_LINE DEDENT DEDENT
def split ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _split ( string ) NEW_LINE DEDENT DEDENT
parse_select_item ( self ) : NEW_LINE INDENT item = self . _parse_select_item ( ) NEW_LINE if item is None : NEW_LINE INDENT return None NEW_LINE DEDENT item = item [ 0 ] NEW_LINE item [ 1 ] = item [ 1 ] NEW_LINE item [ 2 ] = item [ 2 ] NEW_LINE return item NEW_LINE DEDENT
process_calendar_attributes ( self ) : NEW_LINE INDENT calendar_attributes = [ ] NEW_LINE calendar_attributes . extend ( self . calendar_attributes ) NEW_LINE calendar_attributes . extend ( self . calendar_attributes ) NEW_LINE calendar_attributes . extend ( self . calendar_attributes ) NEW_LINE calendar_attributes . extend ( self . calendar_attributes ) NEW_LINE return calendar_attributes NEW_LINE DEDENT
def def process_item_attributes ( self , item ) : NEW_LINE INDENT item_attributes = item . attributes NEW_LINE if item_attributes is not None : NEW_LINE INDENT return item_attributes NEW_LINE DEDENT else : NEW_LINE INDENT return item_attributes NEW_LINE DEDENT DEDENT
def def gather_special_attributes ( self ) : NEW_LINE INDENT def gather_special_attributes ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT def gather_special_attributes ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT def gather_special_attributes ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static Map < String , String > parseComment ( String comment ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( comment , comment ) ; return map ; }
find_first_non_letterordigit_position ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . find_first_non_letterordigit_position ( string ) NEW_LINE DEDENT except IndexError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
remove_chars_from_string ( string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . delete ( 0 , len ( string ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return string . delete ( 0 , len ( string ) ) NEW_LINE DEDENT DEDENT
get_column_name ( self , column_name ) : NEW_LINE INDENT column_name = column_name . strip ( ) NEW_LINE return column_name NEW_LINE DEDENT
convert_int ( col ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( col ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return int ( col ) NEW_LINE DEDENT DEDENT
get_cell_by_reference ( self , reference ) : NEW_LINE INDENT cell = self . get_cell_by_reference ( reference ) NEW_LINE return cell NEW_LINE DEDENT
def height ( self ) : NEW_LINE INDENT return self . _height ( ) NEW_LINE DEDENT
is_date ( self , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return isinstance ( date , datetime . datetime ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
parse_date ( self , date ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_date ( date ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
isnumeric ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
continue ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT yield NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def set_object_property ( self , name , value ) : NEW_LINE INDENT self . object_property = { } NEW_LINE self . object_property . set ( name , value ) NEW_LINE DEDENT
compare_cell ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return self . compare_cell ( cell ) NEW_LINE DEDENT return self . compare_cell ( cell ) NEW_LINE DEDENT
range ( self ) : NEW_LINE INDENT return self . _range ( ) NEW_LINE DEDENT
clear_hidden_columns ( self ) : NEW_LINE INDENT self . _columns . clear ( ) NEW_LINE self . _columns . clear ( ) NEW_LINE DEDENT
delete_hidden_columns ( self , row ) : NEW_LINE INDENT if self . _hidden_columns : NEW_LINE INDENT self . _hidden_columns . delete ( row ) NEW_LINE self . _hidden_columns = [ ] NEW_LINE DEDENT DEDENT
delete_cell_from_row ( self , row ) : NEW_LINE INDENT try : NEW_LINE INDENT row . delete ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
process_event ( self , event ) : NEW_LINE INDENT self . event = event NEW_LINE if self . event is not None : NEW_LINE INDENT return self . event NEW_LINE DEDENT if self . event is not None : NEW_LINE INDENT return self . event NEW_LINE DEDENT DEDENT
refresh ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _refresh ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _refresh ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
validate_row_col ( self , row_col ) : NEW_LINE INDENT if row_col is not None : NEW_LINE INDENT return self . validate_row_col ( row_col ) NEW_LINE DEDENT elif row_col is not None : NEW_LINE INDENT return self . validate_row_col ( row_col ) NEW_LINE DEDENT DEDENT
validate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _validate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _validate ( ) NEW_LINE DEDENT DEDENT
static String getErrorMessage ( Context context ) { String message = context . getMessage ( ) ; if ( message == null ) { message = " " ; } else { message = message . trim ( ) ; } return message ; }
validate ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
validate_validation ( self ) : NEW_LINE INDENT if self . _validation : NEW_LINE INDENT return self . _validation NEW_LINE DEDENT else : NEW_LINE INDENT return self . _validation NEW_LINE DEDENT DEDENT
validate_cell ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , basestring ) : NEW_LINE INDENT cell = self . _validate_cell ( cell ) NEW_LINE DEDENT if isinstance ( cell , basestring ) : NEW_LINE INDENT cell = self . _validate_cell ( cell ) NEW_LINE DEDENT return cell NEW_LINE DEDENT
validate_current_page ( self , page ) : NEW_LINE INDENT if not page : NEW_LINE INDENT return NEW_LINE DEDENT page = self . _get_page ( page ) NEW_LINE if not page : NEW_LINE INDENT return NEW_LINE DEDENT page = self . _get_page ( page ) NEW_LINE if not page : NEW_LINE INDENT return NEW_LINE DEDENT return page NEW_LINE DEDENT
validate_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return NEW_LINE DEDENT if row is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
validate_row ( self , row ) : NEW_LINE INDENT if not row : NEW_LINE INDENT return NEW_LINE DEDENT row = row . copy ( ) NEW_LINE row . validate ( ) NEW_LINE row . validate ( ) NEW_LINE return NEW_LINE DEDENT
refresh_cached_cells ( self ) : NEW_LINE INDENT self . _cached_cells = { } NEW_LINE self . _cached_cells . clear ( ) NEW_LINE self . _cached_cells = { } NEW_LINE DEDENT
refresh_cells ( self ) : NEW_LINE INDENT for row in self . rows : NEW_LINE INDENT for column in self . columns : NEW_LINE INDENT self . refresh_cells ( row , column ) NEW_LINE DEDENT DEDENT DEDENT
set_submit_mode ( self , submit_mode ) : NEW_LINE INDENT self . submit_mode = submit_mode NEW_LINE DEDENT
validate ( self , * args , ** kwargs ) : NEW_LINE INDENT if not self . is_valid ( * args , ** kwargs ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( * args , ** kwargs ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( * args , ** kwargs ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( * args , ** kwargs ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( * args , ** kwargs ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
clear_related_maps ( self ) : NEW_LINE INDENT self . related_maps . clear ( ) NEW_LINE DEDENT
load_header_rows ( self ) : NEW_LINE INDENT self . header_rows = [ ] NEW_LINE for row in self . header_rows : NEW_LINE INDENT self . header_rows . append ( row ) NEW_LINE DEDENT return self . header_rows NEW_LINE DEDENT
load_header_row ( self ) : NEW_LINE INDENT self . header_row = [ ] NEW_LINE self . header_row . append ( self . header_row ) NEW_LINE self . header_row . append ( self . header_row ) NEW_LINE DEDENT
def def fill ( self ) :__python__ def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python__ def def def def def ___python__ def def def def ___python__ def def def def def ___python____python____python__ def def def ___python____python____python__
def def get_header_column_style ( self ) : NEW_LINE INDENT return self . header_column_style NEW_LINE DEDENT
width ( self ) : NEW_LINE INDENT width = self . style . width NEW_LINE if width is None : NEW_LINE INDENT width = self . style . width NEW_LINE DEDENT return width NEW_LINE DEDENT

get_column_width_style ( self ) : NEW_LINE INDENT style = self . style NEW_LINE if style . width : NEW_LINE INDENT return style . width NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
clear_workbook ( workbook ) : NEW_LINE INDENT workbook . close ( ) NEW_LINE workbook . close ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_data_process ( self ) : NEW_LINE INDENT data_process = self . _load_data_process ( ) NEW_LINE if data_process is not None : NEW_LINE INDENT return data_process NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
refresh ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT data = { } NEW_LINE DEDENT else : NEW_LINE INDENT data = data . copy ( ) NEW_LINE DEDENT return data NEW_LINE DEDENT
refresh_row ( self , row ) : NEW_LINE INDENT if not row : NEW_LINE INDENT return NEW_LINE DEDENT row = row . copy ( ) NEW_LINE row . update ( ) NEW_LINE row . update ( ) NEW_LINE row . update ( ) NEW_LINE return NEW_LINE DEDENT
refresh_data ( self ) : NEW_LINE INDENT self . refresh_cells ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_worksheet ( self ) : NEW_LINE INDENT if self . _worksheet is None : NEW_LINE INDENT self . _worksheet = self . _worksheet NEW_LINE DEDENT return self . _worksheet NEW_LINE DEDENT
load_worksheet ( self ) : NEW_LINE INDENT worksheet = self . _get_worksheet ( ) NEW_LINE if worksheet is None : NEW_LINE INDENT return None NEW_LINE DEDENT worksheet . load ( ) NEW_LINE return worksheet NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
save_objs ( self , objs ) : NEW_LINE INDENT for obj in objs : NEW_LINE INDENT self . save_obj ( obj ) NEW_LINE DEDENT self . save_obj ( objs ) NEW_LINE DEDENT
def def def def _get_row_info ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_body_rows ( self ) : NEW_LINE INDENT body_rows = [ ] NEW_LINE for row in self . body_rows : NEW_LINE INDENT body_rows . append ( row ) NEW_LINE DEDENT return body_rows NEW_LINE DEDENT
def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def def def def ___python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def ___python____python____python____python____python__ def def def ___python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def get___python__ def _
refresh_cell ( self , cell ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _cell = cell NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
refresh_cell ( self , cell ) : NEW_LINE INDENT self . _cell = cell NEW_LINE self . _cell . refresh ( ) NEW_LINE DEDENT

add_repeat_row ( self , repeat_row ) : NEW_LINE INDENT if repeat_row is None : NEW_LINE INDENT return NEW_LINE DEDENT self . repeat_row . append ( repeat_row ) NEW_LINE DEDENT
refresh_body_rows ( self ) : NEW_LINE INDENT if self . body_rows is not None : NEW_LINE INDENT self . body_rows = self . body_rows . copy ( ) NEW_LINE DEDENT DEDENT
unsaved_status ( self ) : NEW_LINE INDENT status = self . _get_status ( ) NEW_LINE if status : NEW_LINE INDENT return status NEW_LINE DEDENT return None NEW_LINE DEDENT
unsaved_status ( self ) : NEW_LINE INDENT if self . is_unsaved ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
static < T > T get ( List < T > argumentList ) { if ( argumentList == null ) { throw new NullPointerException ( " argumentList is null " ) ; } return argumentList . get ( 0 ) ; }
transferring_input_stream ( self , input_stream , output_stream ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _transferring_input_stream ( input_stream , output_stream ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _transferring_input_stream ( input_stream ) NEW_LINE DEDENT DEDENT
write_next_line ( self , line ) : NEW_LINE INDENT line = line . rstrip ( ) NEW_LINE if len ( line ) == 0 : NEW_LINE INDENT return line NEW_LINE DEDENT elif len ( line ) == 1 : NEW_LINE INDENT return line NEW_LINE DEDENT elif len ( line ) == 2 : NEW_LINE INDENT return line NEW_LINE DEDENT elif len ( line ) == 3 : NEW_LINE INDENT return line NEW_LINE DEDENT else : NEW_LINE INDENT return line NEW_LINE DEDENT DEDENT
write_line ( self , line ) : NEW_LINE INDENT if line . startswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT if line . endswith ( " \n " ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def _convert_network_stats_tag ( self , tag ) : NEW_LINE INDENT if isinstance ( tag , six . string_types ) : NEW_LINE INDENT return tag NEW_LINE DEDENT if isinstance ( tag , six . string_types ) : NEW_LINE INDENT return tag NEW_LINE DEDENT return tag NEW_LINE DEDENT
def def _create_binary_content ( self ) : NEW_LINE INDENT return self . _create_bitmap ( ) NEW_LINE DEDENT
def def _get_binary_content ( self , file_descriptor ) : NEW_LINE INDENT if isinstance ( file_descriptor , file_descriptor ) : NEW_LINE INDENT return file_descriptor . read ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return file_descriptor NEW_LINE DEDENT DEDENT
remove_parameter ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE return name NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
clear_builder ( self ) : NEW_LINE INDENT self . builder . clear ( ) NEW_LINE DEDENT
play_track ( self ) : NEW_LINE INDENT if self . is_playing ( ) : NEW_LINE INDENT return self . _play_track ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _play_track ( ) NEW_LINE DEDENT DEDENT
stop ( self ) : NEW_LINE INDENT if self . _playback : NEW_LINE INDENT self . _playback . stop ( ) NEW_LINE self . _playback = False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
unbind ( self ) : NEW_LINE INDENT if self . streaming : NEW_LINE INDENT self . streaming . stop ( ) NEW_LINE self . streaming = False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
store_image ( self , image ) : NEW_LINE INDENT if self . image is None : NEW_LINE INDENT self . image = image NEW_LINE DEDENT else : NEW_LINE INDENT self . image = self . image . copy ( ) NEW_LINE DEDENT return self . image NEW_LINE DEDENT
read ( self , input_stream ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read ( input_stream ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String convert ( InputStream input , Charset charset ) throws IOException { if ( input == null ) { throw new IOException ( " Input stream is null . " ) ; } if ( charset == null ) { throw new IOException ( " charset is null . " ) ; } return new String ( input , charset ) ; }
write ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . writer . write ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT self . writer . write ( data ) NEW_LINE DEDENT DEDENT
public static int getNumberOfBytes ( ) throws IOException { if ( buffer . size ( ) > 0 ) { return buffer . size ( ) ; } else if ( buffer . size ( ) == 0 ) { return 0 ; } else { return buffer . size ( ) ; } }
close ( self ) : NEW_LINE INDENT self . stream . close ( ) NEW_LINE DEDENT
int read ( InputStream stream ) throws IOException { if ( stream . read ( ) == - 1 ) { throw new EOFException ( ) ; } if ( stream . read ( ) == 0 ) { throw new EOFException ( ) ; } if ( stream . read ( ) == 0 ) { throw new EOFException ( ) ; } return stream . read ( ) ; }
def get_last_marked_location ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT stream = self . stream . stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . stream NEW_LINE DEDENT DEDENT
start ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _start = True NEW_LINE DEDENT except : NEW_LINE INDENT self . _start = False NEW_LINE raise NEW_LINE DEDENT DEDENT
def def def write_content_disposition_header ( self ) : NEW_LINE INDENT if self . content_disposition is not None : NEW_LINE INDENT self . content_disposition = self . content_disposition NEW_LINE DEDENT else : NEW_LINE INDENT self . content_disposition = self . content_disposition NEW_LINE DEDENT DEDENT


write_header ( self , header ) : NEW_LINE INDENT if not header : NEW_LINE INDENT return NEW_LINE DEDENT self . header = header NEW_LINE self . headers . append ( header ) NEW_LINE DEDENT
write_end_data ( self , end_data ) : NEW_LINE INDENT if end_data is not None : NEW_LINE INDENT return end_data NEW_LINE DEDENT if end_data is not None : NEW_LINE INDENT return end_data NEW_LINE DEDENT DEDENT
write_parts ( self , parts ) : NEW_LINE INDENT if len ( parts ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( parts ) == 3 : NEW_LINE INDENT return NEW_
def def _get_length def _get_length ( self ) : NEW_LINE INDENT return len ( self . _multipart_message ) NEW_LINE def _get_LINE def _get_length ( self ) : NEW_LINE INDENT return self . _get_length ( ) NEW_LINE DEDENT DEDENT
def get_url ( self ) : NEW_LINE INDENT if self . url is not None : NEW_LINE INDENT return self . url NEW_LINE DEDENT elif self . url is not None : NEW_LINE INDENT return self . url NEW_LINE DEDENT return None NEW_LINE DEDENT
file_mtime ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return os . stat ( filename ) . st_mtime NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT return os . stat ( filename ) . st_mtime NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
close ( self ) : NEW_LINE INDENT if self . channel is not None : NEW_LINE INDENT self . channel . close ( ) NEW_LINE self . channel = None NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
write ( self , stream ) : NEW_LINE INDENT data = self . stream . write ( stream ) NEW_LINE if data : NEW_LINE INDENT self . stream . write ( data ) NEW_LINE DEDENT return data NEW_LINE DEDENT
def setup_cache ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache = self . cache NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . cache = { } NEW_LINE self . cache = { } NEW_LINE DEDENT self . cache . clear ( ) NEW_LINE DEDENT
mkdir ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _mkdir ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _mkdir ( ) NEW_LINE DEDENT DEDENT
get_cache ( self ) : NEW_LINE INDENT cache = self . cache NEW_LINE if cache is not None : NEW_LINE INDENT return cache NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
read ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , io . InputStream ) : NEW_LINE INDENT return stream . read ( ) NEW_LINE DEDENT elif isinstance ( stream , io . InputStream ) : NEW_LINE INDENT return stream . read ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def def def def _prepare__python____python____python____python____python____python____python____python____python____python__ def def def _prepare__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare def _prepare
static Singleton getInstance ( Class < ? > clazz ) { if ( clazz == null ) { throw new NullPointerException ( " clazz must not be null " ) ; } return getInstance ( clazz ) ; }
validate_keystore ( self , keystore ) : NEW_LINE INDENT if keystore . exists ( ) : NEW_LINE INDENT return keystore NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
scale ( self , scale_type ) : NEW_LINE INDENT if scale_type is not None : NEW_LINE INDENT return scale_type NEW_LINE DEDENT else : NEW_LINE INDENT return self . _scale ( scale_type ) NEW_LINE DEDENT DEDENT
stop_updates ( self ) : NEW_LINE INDENT if self . _updates : NEW_LINE INDENT self . _updates . clear ( ) NEW_LINE self . _updates . clear ( ) NEW_LINE DEDENT DEDENT
start ( self ) : NEW_LINE INDENT executor = self . executor NEW_LINE if executor is None : NEW_LINE INDENT executor = self . executor NEW_LINE DEDENT else : NEW_LINE INDENT executor = executor . executor ( ) NEW_LINE DEDENT return executor . start ( ) NEW_LINE DEDENT
disconnect ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . disconnect ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . connection . disconnect ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void destroy ( ) { if ( serviceConnection != null ) { serviceConnection . close ( ) ; } }
void update ( final Consumer < T > consumer ) { if ( consumer != null ) { consumer . update ( consumer ) ; } else { consumer . update ( ) ; } }
def connect ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . client . connect ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT self . client . connect ( ) NEW_LINE DEDENT DEDENT

reset_loader ( self ) : NEW_LINE INDENT if self . loader is not None : NEW_LINE INDENT self . loader . reset ( ) NEW_LINE DEDENT DEDENT
static void test ( ) { for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 0 ) { return ; } } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 0 ) { return ; } } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 0 ) { return ; } } }
set_text_view_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . text_view_value = value NEW_LINE DEDENT
def hide_keyboard ( self ) : NEW_LINE INDENT if self . keyboard is not None : NEW_LINE INDENT self . keyboard . hide ( ) NEW_LINE DEDENT DEDENT
static void showSoftKeyboard ( String key ) { if ( key == null ) { return ; } if ( key . length ( ) == 0 ) { return ; } if ( key . length ( ) == 1 ) { return ; } if ( key . length ( ) == 2 ) { return ; } if ( key . length ( ) == 3 ) { return ; } if ( key . length ( ) == 1 ) { return ; } if ( key . length ( ) == 2 ) { return ; } if ( key . length ( ) == 1 ) { return ; } if ( key . length ( ) == 2 ) { return ; } if ( key . length ( ) == 1 ) { return ; } if ( key . length ( ) == 2 ) { return ; } if ( key . length ( ) == 3 ) { return ; } if ( key . length ( ) == 1 ) { return ; } if ( key . length ( ) == 2 )
def def toggle_keyboard_visibility ( self ) : NEW_LINE INDENT if self . keyboard_visibility : NEW_LINE INDENT return self . keyboard_visibility NEW_LINE DEDENT return self . keyboard_visibility NEW_LINE DEDENT
convert_pixels ( self , pixels ) : NEW_LINE INDENT if isinstance ( pixels , dict ) : NEW_LINE INDENT return pixels NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
cancel ( self , exception = None ) : NEW_LINE INDENT if exception is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( exception , BaseException ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
clear_cached_entities ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _cache . clear ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static void PopulateImage ( View view ) { if ( view == null ) { throw new IllegalArgumentException ( " view is null " ) ; } if ( view . getView ( ) == null ) { throw new IllegalArgumentException ( " view is null " ) ; } if ( view . getView ( ) == null ) { throw new IllegalArgumentException ( " view is null " ) ; } if ( view . getView ( ) == null ) { throw new IllegalArgumentException ( " view is null " ) ; } }
cancel_image_loading ( self , view ) : NEW_LINE INDENT if self . _image_loading : NEW_LINE INDENT self . _image_loading = False NEW_LINE self . _image_loading = True NEW_LINE DEDENT DEDENT
_create_image_holder ( self , view ) : NEW_LINE INDENT image_holder = self . _create_image_holder ( view ) NEW_LINE if image_holder : NEW_LINE INDENT return image_holder NEW_LINE DEDENT DEDENT
main ( ) : NEW_LINE INDENT try : NEW_LINE INDENT thread = threading . currentThread ( ) NEW_LINE thread . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT traceback . print_exc ( ) NEW_LINE traceback . print_exc ( ) NEW_LINE DEDENT return thread NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
main ( ) : NEW_LINE INDENT thread = threading . Thread . currentThread ( ) NEW_LINE thread . start ( ) NEW_LINE thread . join ( ) NEW_LINE DEDENT
add_memory_cache_image ( self , image ) : NEW_LINE INDENT self . cache . add ( image ) NEW_LINE DEDENT
_recycle_buffer ( self ) : NEW_LINE INDENT if self . buffer is not None : NEW_LINE INDENT self . buffer . recycle ( ) NEW_LINE self . buffer = None NEW_LINE DEDENT DEDENT
set_headers ( self , headers ) : NEW_LINE INDENT self . headers = headers NEW_LINE DEDENT
add_string_parameter ( self , string_parameter ) : NEW_LINE INDENT self . params . append ( string_parameter ) NEW_LINE self . params . append ( string_parameter ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
md5 ( self ) : NEW_LINE INDENT return self . digest ( ) NEW_LINE DEDENT
string_representation ( self , constant ) : NEW_LINE INDENT if isinstance ( constant , str ) : NEW_LINE INDENT return constant NEW_LINE DEDENT elif isinstance ( constant , str ) : NEW_LINE INDENT return constant NEW_LINE DEDENT else : NEW_LINE INDENT return constant NEW_LINE DEDENT DEDENT
def def get_clas_status ( self , cublasStatus ) : NEW_LINE INDENT cublasStatus = self . _get_clas_status ( cublasStatus ) NEW_LINE if cublasStatus is not None : NEW_LINE INDENT return cublasStatus NEW_LINE DEDENT else : NEW_LINE INDENT cublasStatus = self . _get_clas_status ( cublasStatus ) NEW_LINE DEDENT DEDENT
def def def def def def def cub def def def public public public public static public static void handleError def def def def _ public static public static void handleError def def def _ public static public static void handleError
cublasGetErrorNative ( ) : NEW_LINE INDENT try : NEW_LINE INDENT cublasStatus = CUBLAS_STATUS_SUCCESS NEW_LINE DEDENT except CudaException : NEW_LINE INDENT cublasStatus = CUBLAS_STATUS_ERROR NEW_LINE DEDENT if cublasStatus . CUBLAS_STATUS_ERROR : NEW_LINE INDENT cublasStatus . CUBLAS_STATUS_ERROR = cublasStatus . CUBLAS_STATUS_ERROR NEW_LINE DEDENT else : NEW_LINE INDENT cublasStatus . CUBLAS_STATUS_ERROR = cublasStatus . CUBLAS_STATUS_ERROR NEW_LINE DEDENT return cublasStatus NEW_LINE DEDENT
def add_lexeme ( self , lexeme ) : NEW_LINE INDENT if lexeme is None : NEW_LINE INDENT lexeme = self . lexeme NEW_LINE DEDENT else : NEW_LINE INDENT lexeme = lexeme . copy ( ) NEW_LINE DEDENT return lexeme NEW_LINE DEDENT
def add_one_end_of_ending ( self , ending ) : NEW_LINE INDENT if ending == None : NEW_LINE INDENT return NEW_LINE DEDENT if ending . endswith ( ' . ' ) : NEW_LINE INDENT return NEW_LINE DEDENT elif ending . endswith ( ' . ' ) : NEW_LINE INDENT return NEW_LINE DEDENT elif ending . endswith ( ' . ' ) : NEW_LINE INDENT return NEW_LINE DEDENT elif ending . endswith ( ' . ' ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
calculate_cumulative_frequency ( self , wordform ) : NEW_LINE INDENT return self . _calculate_cumulative_frequency ( wordform ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_attribute_value ( self , attributeValue ) : NEW_LINE INDENT if self . attribute_value is None : NEW_LINE INDENT self . attribute_value = attributeValue NEW_LINE DEDENT else : NEW_LINE INDENT self . attribute_value = self . attribute_value NEW_LINE DEDENT DEDENT
static SemTi - Kamols parse ( String value ) { SemTi - Kamols tag = new SemTi - Kamols ( ) ; if ( value == null ) { throw new IllegalArgumentException ( ) ; } if ( value . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } return tag . parse ( value ) ; }
set_attribute_value ( self , tag , value ) : NEW_LINE INDENT if tag == self . tag : NEW_LINE INDENT self . tag = tag NEW_LINE DEDENT else : NEW_LINE INDENT self . tag = None NEW_LINE DEDENT DEDENT
format_style ( self , style ) : NEW_LINE INDENT if self . format_style : NEW_LINE INDENT return self . format_style NEW_LINE DEDENT elif self . format_style : NEW_LINE INDENT return self . format_style NEW_LINE DEDENT return self . format_style NEW_LINE DEDENT
get_metrics ( self ) : NEW_LINE INDENT metrics = { } NEW_LINE for metric in self . metrics : NEW_LINE INDENT metrics [ metric . name ] = metric . value NEW_LINE DEDENT return metrics NEW_LINE DEDENT
def def get_request_query_string ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return request . get_query_string ( ) NEW_LINE DEDENT elif request . method == ' GET ' : NEW_LINE INDENT return request . get_query_string ( ) NEW_LINE DEDENT DEDENT
process_json_response ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT response = json . loads ( request . body ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT response = json . loads ( request . body ) NEW_LINE DEDENT return response NEW_LINE DEDENT
parse_config ( self , config ) : NEW_LINE INDENT if isinstance ( config , dict ) : NEW_LINE INDENT config = json . loads ( config ) NEW_LINE DEDENT return config NEW_LINE DEDENT
get_config ( self ) : NEW_LINE INDENT return self . _get_config ( ) NEW_LINE DEDENT

createReader ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT if reader is None : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
createReader ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT if reader is None : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
createReaderBuilder ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = None NEW_LINE DEDENT if reader is None : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
create_reader ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _create_reader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = self . _create_reader ( ) NEW_LINE DEDENT if reader is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return reader NEW_LINE DEDENT DEDENT
createReader ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT if reader is None : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
createReaderBuilder ( self ) : NEW_LINE INDENT reader = None NEW_LINE try : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT except : NEW_LINE INDENT reader = None NEW_LINE DEDENT if reader is None : NEW_LINE INDENT reader = self . _createReader ( ) NEW_LINE DEDENT return reader NEW_LINE DEDENT
get_id ( self , column_id ) : NEW_LINE INDENT if column_id is not None : NEW_LINE INDENT return column_id NEW_LINE DEDENT return None NEW_LINE DEDENT
get_value ( self , row ) : NEW_LINE INDENT row = self . _get_row ( row ) NEW_LINE value = self . _get_value ( row ) NEW_LINE return value NEW_LINE DEDENT
get_column_by_id ( self , column_id ) : NEW_LINE INDENT if column_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return column_id NEW_LINE DEDENT DEDENT
getIDs ( self ) : NEW_LINE INDENT ids = [ ] NEW_LINE for key in self . keys : NEW_LINE INDENT ids . append ( key . id ) NEW_LINE DEDENT return ids NEW_LINE DEDENT
get_key ( self , key ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return None NEW_LINE DEDENT key = self . _get_key ( key ) NEW_LINE if key is not None : NEW_LINE INDENT return key NEW_LINE DEDENT DEDENT
check_column_id ( self , column_id ) : NEW_LINE INDENT if column_id is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
add_column ( self , column_set ) : NEW_LINE INDENT self . column_set . add ( column_set ) NEW_LINE DEDENT
add_key ( self , key , value ) : NEW_LINE INDENT if key not in self . column_set : NEW_LINE INDENT self . column_set . add ( key ) NEW_LINE DEDENT self . column_set [ key ] = value NEW_LINE DEDENT
skip_lines ( self , lines ) : NEW_LINE INDENT if len ( lines ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif len ( lines ) == 1 : NEW_LINE INDENT return lines [ 0 ] NEW_LINE DEDENT elif len ( lines ) == 2 : NEW_LINE INDENT return lines [ 1 ] NEW_LINE DEDENT elif len ( lines ) == 3 : NEW_LINE INDENT return lines [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return lines [ 3 ] NEW_LINE DEDENT DEDENT
add_column_definition ( self , column_definition ) : NEW_LINE INDENT self . column_definition . append ( column_definition ) NEW_LINE self . column_definition . append ( column_definition ) NEW_LINE DEDENT
static Writer createWriter ( ) { Writer writer = null ; try { writer = new Writer ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } if ( writer == null ) { writer = new Writer ( ) ; } return writer ; }
writer ( self ) : NEW_LINE INDENT writer = None NEW_LINE try : NEW_LINE INDENT writer = self . document . writer NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT writer = self . document . writer NEW_LINE DEDENT if writer is None : NEW_LINE INDENT writer = self . document . writer NEW_LINE DEDENT else : NEW_LINE INDENT writer = self . document . writer NEW_LINE DEDENT return writer NEW_LINE DEDENT
writer ( self ) : NEW_LINE INDENT writer = None NEW_LINE try : NEW_LINE INDENT writer = self . get_writer ( ) NEW_LINE DEDENT except : NEW_LINE INDENT writer = None NEW_LINE DEDENT if writer is None : NEW_LINE INDENT writer = self . get_writer ( ) NEW_LINE DEDENT if writer is None : NEW_LINE INDENT writer = self . get_writer ( ) NEW_LINE DEDENT if writer is not None : NEW_LINE INDENT return writer NEW_LINE DEDENT return writer NEW_LINE DEDENT
static Writer createWriter ( ) { Writer writer = null ; try { writer = new Writer ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } if ( writer == null ) { writer = new Writer ( ) ; } return writer ; }
writer ( self ) : NEW_LINE INDENT writer = None NEW_LINE try : NEW_LINE INDENT writer = self . _writer NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT writer = self . _writer NEW_LINE DEDENT if writer is None : NEW_LINE INDENT writer = self . _writer NEW_LINE DEDENT else : NEW_LINE INDENT writer = self . _writer NEW_LINE DEDENT return writer NEW_LINE DEDENT
writer ( self ) : NEW_LINE INDENT writer = None NEW_LINE try : NEW_LINE INDENT writer = self . writer NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT writer = self . writer NEW_LINE DEDENT if writer is None : NEW_LINE INDENT writer = self . writer NEW_LINE DEDENT else : NEW_LINE INDENT writer = self . writer NEW_LINE DEDENT return writer NEW_LINE DEDENT
createValidator ( self ) : NEW_LINE INDENT validator = self . getValidator ( ) NEW_LINE if not validator : NEW_LINE INDENT return None NEW_LINE DEDENT return validator NEW_LINE DEDENT
createValidator ( self ) : NEW_LINE INDENT if self . validator is None : NEW_LINE INDENT return None NEW_LINE DEDENT validator = self . validator NEW_LINE if self . validator is not None : NEW_LINE INDENT return validator NEW_LINE DEDENT return self . validator NEW_LINE DEDENT
static ValidatorBuilder createValidatorBuilder ( ) { ValidatorBuilder builder = new ValidatorBuilder ( ) ; return builder ; }
createValidator ( self ) : NEW_LINE INDENT if self . validator is None : NEW_LINE INDENT self . validator = self . createValidator ( ) NEW_LINE DEDENT return self . validator NEW_LINE DEDENT
createValidator ( self ) : NEW_LINE INDENT if self . validator is None : NEW_LINE INDENT self . validator = self . validator NEW_LINE DEDENT return self . validator NEW_LINE DEDENT
static ValidatorBuilder createValidatorBuilder ( ) { ValidatorBuilder builder = new ValidatorBuilder ( ) ; return builder ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Logger getLogger ( ) { Logger logger = LoggerFactory . getLogger ( getClass ( ) . getName ( ) ) ; if ( logger == null ) { logger = LoggerFactory . getLogger ( getClass ( ) . getName ( ) ) ; } return logger ; }
get_current_logger_level ( self ) : NEW_LINE INDENT logger_level = self . get_logger_level ( ) NEW_LINE if logger_level is not None : NEW_LINE INDENT return logger_level NEW_LINE DEDENT return None NEW_LINE DEDENT
def get_current_capture_flag ( self ) : NEW_LINE INDENT return self . _capture_flags . get ( ) NEW_LINE DEDENT
def def set_maximum_file_size ( ) : NEW_LINE INDENT log . debug ( " Set the maximum size of the maximum size of the local log file . " ) NEW_LINE log . debug ( " Set the maximum size of the local log file " ) ; }
def def prepend_callstack_metadata ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _callstack_metadata . prepend ( message ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _callstack_metadata NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
createJSONObject ( self , ** kwargs ) : NEW_LINE INDENT return self . _createJSONObject ( ** kwargs ) NEW_LINE DEDENT
log_location_event ( self , event ) : NEW_LINE INDENT try : NEW_LINE INDENT location = event . location NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT location = None NEW_LINE DEDENT if location is not None : NEW_LINE INDENT location = location NEW_LINE DEDENT else : NEW_LINE INDENT location = event . location NEW_LINE DEDENT return location NEW_LINE DEDENT
static boolean isAuthenticated ( ) { if ( ! isAuthenticated ( ) ) { return false ; } if ( isAuthenticated ( ) ) { return true ; } return false ; }
void test ( ) throws Exception { for ( int i = 0 ; i < 10 ; i ++ ) { if ( i > 0 ) { throw new Exception ( ) ; } if ( i > 0 ) { throw new Exception ( ) ; } } }
start_location_updates ( self ) : NEW_LINE INDENT if self . location_updates : NEW_LINE INDENT return self . location_updates NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def log ( self , numEntries ) : NEW_LINE INDENT numEntries = len ( self . numEntries ) NEW_LINE if numEntries == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if numEntries == 1 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
numEntries ( self , numEntries ) : NEW_LINE INDENT if numEntries == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return numEntries NEW_LINE DEDENT
static int numEntries ( int numEntries ) { if ( numEntries == 0 ) { return 0 ; } else { return numEntries ; } }
read_snapshot ( self ) : NEW_LINE INDENT if self . last_entry is not None : NEW_LINE INDENT return self . last_entry . read_snapshot ( ) NEW_LINE DEDENT return self . last_entry . read_snapshot ( ) NEW_LINE DEDENT
elapsedMillis ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . elapsedMillis NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static long [ ] getTimeStamp ( int index ) { long [ ] time_stamp = new long [ index ] ; return time_stamp ; }
public public static boolean accept ( File file or directory ) throws IOException { if ( directory == null ) { return false ; } if ( directory == null ) { return false ; } return true ; }
create_gemFire_pool ( self ) : NEW_LINE INDENT self . _gemFire_pools = [ ] NEW_LINE self . _gemFire_pools . append ( self . _gemFire_pools ) NEW_LINE return self . _gemFire_pools NEW_LINE DEDENT
create_pool ( self ) : NEW_LINE INDENT pools = [ ] NEW_LINE for pool in self . pools : NEW_LINE INDENT pools . append ( pool ) NEW_LINE DEDENT for pool in pools : NEW_LINE INDENT pools . append ( pool ) NEW_LINE DEDENT return pools NEW_LINE DEDENT
get_region ( self , region ) : NEW_LINE INDENT if not region : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return region NEW_LINE DEDENT DEDENT
static GemFire JMXClient getClient ( ) { GemFire JMXClient client = new GemFire JMXClient ( ) ; return client ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
resolve_host_network_lookup_issues ( self ) : NEW_LINE INDENT host_network_lookup_issues = [ ] NEW_LINE for host_network_lookup_issues in self . host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_LINE INDENT for host_network_lookup_issues in host_network_lookup_issues : NEW_
static boolean isDataSent ( String data ) { if ( data == null ) { return false ; } if ( data . length ( ) == 0 ) { return false ; } return true ; }
execute_function ( self , function , execution_settings = None ) : NEW_LINE INDENT if execution_settings is None : NEW_LINE INDENT execution_settings = { } NEW_LINE DEDENT else : NEW_LINE INDENT execution_settings = { } NEW_LINE DEDENT return self . _execute_function ( function , execution_settings ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
put_events_registration ( self , ** kwargs ) : NEW_LINE INDENT self . put_events ( ** kwargs ) NEW_LINE self . put_events ( ** kwargs ) NEW_LINE self . put_events ( ** kwargs ) NEW_LINE DEDENT
delete_events ( self ) : NEW_LINE INDENT self . _delete_events ( ) NEW_LINE self . _delete_events ( ) NEW_LINE DEDENT
handle_rest_response ( self , response ) : NEW_LINE INDENT if isinstance ( response , HttpResponse ) : NEW_LINE INDENT return response NEW_LINE DEDENT elif isinstance ( response , list ) : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
parse_region_filter_facts ( self , region_filter_facts ) : NEW_LINE INDENT if region_filter_facts : NEW_LINE INDENT return region_filter_facts NEW_LINE DEDENT else : NEW_LINE INDENT return region_filter_facts NEW_LINE DEDENT DEDENT
JsonExportFunction ( self ) : NEW_LINE INDENT return self . _export_function ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
search ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _search ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_cache_server_name ( self ) : NEW_LINE INDENT cache_server_name = self . _get_cache_server_name ( ) NEW_LINE return cache_server_name NEW_LINE DEDENT
def def def def def def def public public public public public public static final void initialize public static final void InitializeSecurity public static void initialize ( ) { if (
create_region ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT region = self . _get_region ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT return region NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
tsAtInsertPoint ( tsAtInsertPoint ) : NEW_LINE INDENT if tsAtInsertPoint is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . archive . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
convert ( self , directory ) : NEW_LINE INDENT if os . path . isdir ( directory ) : NEW_LINE INDENT return self . convert ( directory ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . convert ( directory ) NEW_LINE DEDENT DEDENT
extract_gf_stats ( self ) : NEW_LINE INDENT print ( " Extracting GF Stats . . . " ) NEW_LINE DEDENT
def def close ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _client . close ( ) NEW_LINE self . _client . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
public public public public static List < CacheServer > listCacheServers ( ) { List < CacheServer > cacheServers = new ArrayList < CacheServer > ( ) ; for ( int i = 0 ; i < cacheServers . size ( ) ; i ++ ) { for ( int i = 0 ; i < cacheServers . size ( ) ; i ++ ) { cacheServers . add ( cacheServers . get ( i ) ) ; } } return cacheServers . values ( ) ; }
_shut_down_member ( self , member_name ) : NEW_LINE INDENT member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE member_name = member_name . lower ( ) NEW_LINE return member_name NEW_LINE DEDENT
stop_locators ( self ) : NEW_LINE INDENT if self . locators : NEW_LINE INDENT self . locators . stop ( ) NEW_LINE DEDENT DEDENT
def def shut_down ( self , RedundancyZone zone ) : NEW_LINE INDENT if isinstance ( zone , RedundancyZone ) : NEW_LINE INDENT for member in zone . getMembers ( ) : NEW_LINE INDENT if member . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) . getRedundancyZone ( ) NEW_LINE DEDENT DEDENT DEDENT
search_result_details ( self , search_result ) : NEW_LINE INDENT search_result_details = { } NEW_LINE search_result_details = { } NEW_LINE search_result_details . update ( search_result_details ) NEW_LINE return search_result_details NEW_LINE DEDENT

import_data ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return data NEW_LINE DEDENT DEDENT
_parse_remote_locators ( self ) : NEW_LINE INDENT locators = self . _parse_remote_locators ( ) NEW_LINE locator = self . _parse_locator ( ) NEW_LINE return locators NEW_LINE DEDENT
public public static HashMap < String , BigInteger > get ( String key , BigInteger value ) { if ( key == null ) { return null ; } else { return new HashMap < String , BigInteger > ( ) ; } }
check_sum_map ( self , map ) : NEW_LINE INDENT if map is None : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static String wrap ( String value ) { if ( value == null ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } if ( value . length ( ) == 0 ) { return " " ; } return value ; }
static boolean isTypeMirror ( TypeMirror typeMirror ) { if ( typeMirror == null ) { return false ; } if ( typeMirror instanceof SqliteIntegerType ) { return true ; } return typeMirror . isTypeMirror ( typeMirror ) ; }
static byte [ ] serialize ( byte [ ] bytes ) { if ( bytes == null ) { throw new NullPointerException ( ) ; } if ( bytes . length == 0 ) { throw new IllegalArgumentException ( ) ; } return bytes ; }
byte [ ] serialize ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } byte [ ] array = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { array [ i ] = bytes [ i ] ; } return array ; }
public static < T > T create ( Class < T > class ) { return new T ( ) ; }
check_element ( self , element ) : NEW_LINE INDENT if isinstance ( element , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( element , tuple ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
check_element ( self , element ) : NEW_LINE INDENT if isinstance ( element , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( element , tuple ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
is_supertype ( element ) : NEW_LINE INDENT if isinstance ( element , supertype ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_table_schema ( self , table_name ) : NEW_LINE INDENT table_schema = self . get_table_schema ( table_name ) NEW_LINE if table_schema : NEW_LINE INDENT return table_schema NEW_LINE DEDENT return None NEW_LINE DEDENT
create_java_functions ( self ) : NEW_LINE INDENT return self . _create_java_functions ( ) NEW_LINE DEDENT
get_foreign_key_id ( self ) : NEW_LINE INDENT id = self . get_foreign_key_id ( ) NEW_LINE if id : NEW_LINE INDENT return id NEW_LINE DEDENT return None NEW_LINE DEDENT
execute_query ( self , query ) : NEW_LINE INDENT if self . query is not None : NEW_LINE INDENT return self . query . execute ( query ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
validate_column_name ( self , column_name ) : NEW_LINE INDENT if column_name is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( column_name , six . string_types ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( column_name , six . string_types ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
check_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
capitalize_first_letter ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string . capitalize ( ) NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string . capitalize ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return string . capitalize ( ) NEW_LINE DEDENT DEDENT
static boolean isTypeMirror ( TypeMirror typeMirror ) { if ( typeMirror == null ) { return false ; } if ( typeMirror instanceof SqliteType ) { return true ; } return typeMirror . isTypeMirror ( typeMirror ) ; }
sort_results ( self , results ) : NEW_LINE INDENT if not results : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( results ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return results NEW_LINE DEDENT DEDENT
read_temperature ( self ) : NEW_LINE INDENT temperature = self . sensors . get_temperature ( ) NEW_LINE if temperature is None : NEW_LINE INDENT temperature = self . sensors . get_temperature ( ) NEW_LINE DEDENT if temperature is None : NEW_LINE INDENT temperature = self . sensors . get_temperature ( ) NEW_LINE DEDENT return temperature NEW_LINE DEDENT
get ( self , type ) : NEW_LINE INDENT if type is not None : NEW_LINE INDENT return self . _get ( type ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get ( type ) NEW_LINE DEDENT DEDENT
print_notes ( self , notes ) : NEW_LINE INDENT if not notes : NEW_LINE INDENT return NEW_LINE DEDENT if len ( notes ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( notes ) == 1 : NEW_LINE INDENT return notes [ 0 ] NEW_LINE DEDENT elif len ( notes ) == 2 : NEW_LINE INDENT return notes [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
stop_build ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stop_build ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . stop_build ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
static List < String > getIconFonts ( ) { List < String > iconFonts = new ArrayList < String > ( ) ; iconFonts . add ( " icon " ) ; iconFonts . add ( " icon " ) ; return iconFonts ; }
static List < Icon > getAllIconsFromBundle ( Bundle bundle ) { List < Icon > icons = new ArrayList < Icon > ( ) ; for ( int i = 0 ; i < icons . size ( ) ; i ++ ) { icons . add ( icons . get ( i ) ) ; } return icons ; }

def create_background_content_ decoration ( self , widget ) : NEW_LINE INDENT if self . _background_content_ decoration is not None : NEW_LINE INDENT return self . _background_content_ decoration NEW_LINE DEDENT else : NEW_LINE INDENT return self . _background_content_ decoration NEW_LINE DEDENT DEDENT
def compute_power ( self , x , y ) : NEW_LINE INDENT x = np . atleast_1d ( x ) NEW_LINE y = np . atleast_1d ( y ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE y = np . atleast_1d ( y ) NEW_LINE return x , y NEW_LINE DEDENT
def def set_column_vector ( self , column_vector ) : NEW_LINE INDENT column_vector = np . asarray ( column_vector ) NEW_LINE if column_vector . shape [ 0 ] == 0 : NEW_LINE INDENT column_vector = np . zeros ( column_vector . shape ) NEW_LINE DEDENT else : NEW_LINE INDENT column_vector = np . asarray ( column_vector ) NEW_LINE DEDENT return column_vector NEW_LINE DEDENT
public static double x^exponent ( double x , int scale ) { return Math . pow ( x , scale ) * Math . pow ( x , scale ) ; }
integral_root ( x , scale ) : NEW_LINE INDENT if scale == 0 : NEW_LINE INDENT return x NEW_LINE DEDENT elif scale == 1 : NEW_LINE INDENT return x NEW_LINE DEDENT elif scale == 2 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
def compute ( self ) : NEW_LINE INDENT scale = self . scale NEW_LINE if self . scale == 0 : NEW_LINE INDENT return self . scale NEW_LINE DEDENT else : NEW_LINE INDENT return self . scale NEW_LINE DEDENT DEDENT
natural_logarithm ( self , x ) : NEW_LINE INDENT if x == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif x == 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 4 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 5 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 6 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif x == 7 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
natural_logarithm ( x ) : NEW_LINE INDENT if x > 0 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
def compute_arctangent ( self , x ) : NEW_LINE INDENT scale = self . scale NEW_LINE scale = self . scale NEW_LINE return self . arctangent ( scale ) NEW_LINE DEDENT
static double arctangent ( double x , double y ) { if ( x < 0 ) { throw new IllegalArgumentException ( " x < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } if ( y < 0 ) { throw new IllegalArgumentException ( " y < 0" ) ; } return y ; }
square_root ( x , scale ) : NEW_LINE INDENT if scale == 0 : NEW_LINE INDENT return x NEW_LINE DEDENT elif scale == 1 : NEW_LINE INDENT return x NEW_LINE DEDENT elif scale == 2 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
static String printDigits ( String digits ) { if ( digits == null ) { return " " ; } if ( digits . length ( ) == 0 ) { return " " ; } if ( digits . length ( ) == 1 ) { return " " ; } return digits . substring ( 0 , digits . length ( ) - 1 ) ; }
get_timestamp ( self ) : NEW_LINE INDENT return self . timestamp NEW_LINE DEDENT
set_random_value ( self , random_value ) : NEW_LINE INDENT self . random_value = random_value NEW_LINE return self . random_value NEW_LINE DEDENT
random_value ( self ) : NEW_LINE INDENT random_value = self . random_value ( ) NEW_LINE return random_value NEW_LINE DEDENT

add_complex_number ( self , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return NEW_LINE DEDENT complex_number = complex_number . copy ( ) NEW_LINE complex_number . update ( ) NEW_LINE complex_number . update ( ) NEW_LINE return complex_number NEW_LINE DEDENT
subtract_complex_number ( self , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return None NEW_LINE DEDENT complex_number = complex_number . copy ( ) NEW_LINE complex_number = complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE complex_number . copy ( ) NEW_LINE DEDENT
multiply_complex_number ( complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return complex_number NEW_LINE DEDENT if complex_number is not None : NEW_LINE INDENT return complex_number NEW_LINE DEDENT if complex_number is not None : NEW_LINE INDENT return complex_number NEW_LINE DEDENT return complex_number NEW_LINE DEDENT
def divide ( self , complex_number , complex_number ) : NEW_LINE INDENT if complex_number is None : NEW_LINE INDENT return complex_number NEW_LINE DEDENT if complex_number is not None : NEW_LINE INDENT return complex_number NEW_LINE DEDENT return complex_number NEW_LINE DEDENT
def _set_row_vector ( self , row_vector ) : NEW_LINE INDENT if row_vector is None : NEW_LINE INDENT self . row_vector = row_vector NEW_LINE DEDENT else : NEW_LINE INDENT self . row_vector = row_vector NEW_LINE DEDENT DEDENT
get_row ( self , matrix ) : NEW_LINE INDENT if matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT row = np . asarray ( matrix ) NEW_LINE if row is not None : NEW_LINE INDENT return row NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_column ( self , matrix ) : NEW_LINE INDENT if matrix is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return matrix NEW_LINE DEDENT DEDENT
static double [ ] matrix ( double [ ] values ) { double [ ] matrix = new double [ values . length ] ; matrix [ 0 ] = values [ 0 ] ; matrix [ 1 ] = values [ 1 ] ; matrix [ 2 ] = values [ 2 ] ; matrix [ 3 ] = values [ 3 ] ; matrix [ 4 ] = values [ 4 ] ; matrix [ 5 ] = values [ 5 ] ; matrix [ 6 ] = values [ 6 ] ; return matrix ; }
transpose ( self , matrix ) : NEW_LINE INDENT if self . transpose_matrix : NEW_LINE INDENT return self . transpose_matrix ( matrix ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . transpose_matrix ( matrix ) NEW_LINE DEDENT DEDENT
add_matrix ( self , matrix ) : NEW_LINE INDENT self . matrix . append ( matrix ) NEW_LINE self . matrix . append ( matrix ) NEW_LINE DEDENT
_subtract_matrix ( self , matrix ) : NEW_LINE INDENT matrix = np . atleast_2d ( matrix ) NEW_LINE if matrix . ndim == 0 : NEW_LINE INDENT return matrix NEW_LINE DEDENT else : NEW_LINE INDENT return matrix NEW_LINE DEDENT DEDENT
multiply ( self , matrix ) : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE matrix = matrix . copy ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix = matrix . transpose ( ) NEW_LINE matrix = matrix . copy ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix = matrix . transpose ( ) NEW_LINE return matrix NEW_LINE DEDENT
multiply_matrix ( self , matrix ) : NEW_LINE INDENT if matrix . ndim == 0 : NEW_LINE INDENT return matrix NEW_LINE DEDENT elif matrix . ndim == 1 : NEW_LINE INDENT return matrix NEW_LINE DEDENT elif matrix . ndim == 2 : NEW_LINE INDENT return matrix NEW_LINE DEDENT DEDENT
print_matrix_values ( self , matrix ) : NEW_LINE INDENT if self . matrix is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . matrix . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if self . matrix . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if self . matrix . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if self . matrix . is not None : NEW_LINE INDENT return NEW_LINE DEDENT if self . matrix . is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
void attachImageResource ( ImageButton button , ImageResource imageResource ) { if ( imageResource != null ) { button . setImageResource ( imageResource ) ; } else { button . setImageResource ( imageResource ) ; } }
def validate_coefficients ( self , coefficients ) : NEW_LINE INDENT if len ( coefficients ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( coefficients ) == 1 : NEW_LINE INDENT return coefficients [ 0 ] NEW_LINE DEDENT if len ( coefficients ) == 2 : NEW_LINE INDENT return coefficients [ 1 ] NEW_LINE DEDENT if len ( coefficients ) == 3 : NEW_LINE INDENT return coefficients [ 2 ] NEW_LINE DEDENT if len ( coefficients ) == 4 : NEW_LINE INDENT return coefficients [ 3 ] NEW_LINE DEDENT return coefficients [ 4 ] NEW_LINE DEDENT
next ( self , xn ) : NEW_LINE INDENT xn = xn . copy ( ) NEW_LINE xn = xn . copy ( ) NEW_LINE xn = xn . copy ( ) NEW_LINE return xn NEW_LINE DEDENT
clear_template_names ( self ) : NEW_LINE INDENT self . template_names . clear ( ) NEW_LINE DEDENT
static StyledLayerDescriptorInfo convertStyledLayerDescriptorInfo ( StyledLayerDescriptorInfo info ) { StyledLayerDescriptorInfo styledLayerDescriptorInfo = new StyledLayerDescriptorInfo ( info ) ; StyledLayerDescriptorInfo styledLayerDescriptorInfo = styledLayerDescriptorInfo . getStyledLayerDescriptorInfo ( ) ; StyledLayerDescriptorInfo styledLayerDescriptorInfo = styledLayerDescriptorInfo . getStyledLayerDescriptorInfo ( ) ; return styledLayerDescriptorInfo ; }
StyledLayerDescriptorInfo getStyledLayerDescriptorInfo ( ) { StyledLayerDescriptorInfo info = new StyledLayerDescriptorInfo ( ) ; info . setStyle ( StyledLayerDescriptorInfo . STYLE ) ; info . setStyle ( StyledLayerDescriptorInfo . STYLE ) ; info . setStyle ( StyledLayerDescriptorInfo . STYLE ) ; return info ; }
def testMarshalling ( self ) : NEW_LINE INDENT self . assertEqual ( 0 , len ( self . marshalling ) ) NEW_LINE self . assertEqual ( self . marshalling , self . marshalling ) NEW_LINE DEDENT
unmarshall ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return super ( ) . unmarshall ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
def compute_area ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . area NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
square ( self , matrix ) : NEW_LINE INDENT self . matrix = matrix NEW_LINE return self . matrix NEW_LINE DEDENT
square ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT raise ValueError ( " The square matrix is empty . " ) NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " The square matrix is empty . " ) NEW_LINE DEDENT return self . _square ( values ) NEW_LINE DEDENT
inverse ( self , matrix ) : NEW_LINE INDENT return self . _inverse ( matrix ) NEW_LINE DEDENT
determinant ( self ) : NEW_LINE INDENT return self . _determinant ( ) NEW_LINE DEDENT
norm ( self , matrix ) : NEW_LINE INDENT matrix = np . asarray ( matrix ) NEW_LINE norm = np . linalg . norm ( matrix ) NEW_LINE return norm NEW_LINE DEDENT
solve ( x , b ) : NEW_LINE INDENT if b is None : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
decomposed_matrix ( self ) : NEW_LINE INDENT return self . decomposed_matrix ( ) NEW_LINE DEDENT
forward_ elimination ( self ) : NEW_LINE INDENT if self . is_pivoting ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT if self . is_pivoting ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
solve ( y , b ) : NEW_LINE INDENT y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE return y NEW_LINE DEDENT
solve ( self , x , y ) : NEW_LINE INDENT x = x . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE y = y . copy ( ) NEW_LINE DEDENT
accuracy ( self , x ) : NEW_LINE INDENT x = np . atleast_1d ( x ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE return x NEW_LINE DEDENT
identity ( self , matrix ) : NEW_LINE INDENT if matrix . shape [ 0 ] == 0 : NEW_LINE INDENT return matrix NEW_LINE DEDENT return matrix NEW_LINE DEDENT
next_randomn ( self ) : NEW_LINE INDENT if self . is_valid ( ) : NEW_LINE INDENT return self . next_randomn ( ) NEW_LINE DEDENT return self . next_randomn ( ) NEW_LINE DEDENT
regula_falsi_iteration ( self ) : NEW_LINE INDENT if self . falsi : NEW_LINE INDENT return self . falsi NEW_LINE DEDENT else : NEW_LINE INDENT return self . falsi NEW_LINE DEDENT DEDENT
def def next_position ( self , x ) : NEW_LINE INDENT x = self . x NEW_LINE if x < 0 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
def def position ( x , y ) : NEW_LINE INDENT if ( x < 0 ) : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
next_position ( self ) : NEW_LINE INDENT x = self . x NEW_LINE if x is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT
def _check_interval ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT interval = self . _get_interval ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
add ( self , addend ) : NEW_LINE INDENT if addend is None : NEW_LINE INDENT addend = self . addend NEW_LINE DEDENT return addend NEW_LINE DEDENT
multiply ( self , a , b , modulo = None ) : NEW_LINE INDENT if modulo is None : NEW_LINE INDENT modulo = self . modulo NEW_LINE DEDENT if modulo is None : NEW_LINE INDENT modulo = self . modulo NEW_LINE DEDENT if modulo is None : NEW_LINE INDENT modulo = self . modulo NEW_LINE DEDENT if modulo is None : NEW_LINE INDENT modulo = self . modulo NEW_LINE DEDENT return modulo NEW_LINE DEDENT
def Raise ( self , a , b , m ) : NEW_LINE INDENT b = self . b NEW_LINE m = self . b NEW_LINE if m == 0 : NEW_LINE INDENT return a NEW_LINE DEDENT return a NEW_LINE DEDENT
secant_iteration ( self ) : NEW_LINE INDENT if self . secant_iterations : NEW_LINE INDENT return self . secant_iterations NEW_LINE DEDENT else : NEW_LINE INDENT return self . secant_iterations NEW_LINE DEDENT DEDENT
static SldManager getInstance ( ) { if ( instance == null ) { instance = new SldManager ( ) ; } return instance ; }
a long value into a character array of 0 and 1 that represents the value in base 2 .
_decompose_floating_point ( self , value ) : NEW_LINE INDENT if isinstance ( value , float ) : NEW_LINE INDENT value = float ( value ) NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT value = float ( value ) NEW_LINE DEDENT return value NEW_LINE DEDENT
decomposed ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return self . _decomposed ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _decomposed ( value ) NEW_LINE DEDENT DEDENT
static float biased exponent ( float value ) { if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 1.0 ; } if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } return value ; }
static float unbiased exponent ( float value ) { if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 1.0 ; } if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } return value ; }
static double biased exponent ( double value ) { if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 1.0 ; } if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } return value ; }
static double unbiased exponent ( double value ) { if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 0.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } if ( value == 1.0 ) { return 0.0 ; } return value ; }
static SldEditorServiceFactory newInstance ( ) { return new SldEditorServiceFactory ( ) ; }
static double nextRandomValue ( ) { return random . nextDouble ( ) ; }
next ( self ) : NEW_LINE INDENT return self . _next ( ) NEW_LINE DEDENT
next_random_value ( self ) : NEW_LINE INDENT if self . random_value is None : NEW_LINE INDENT self . random_value = self . random_value NEW_LINE DEDENT return self . random_value NEW_LINE DEDENT
static Sieve of Eratosthenes ( Eratosthenes eratosthenes ) { if ( eratosthenes == null ) { throw new IllegalArgumentException ( " Eratosthenes cannot be null " ) ; } return new Sieve ( eratosthenes ) ; }
prime_factors ( self , value ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _compute_prime_factors ( value ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
bisection_iteration ( bisection ) : NEW_LINE INDENT if bisection is not None : NEW_LINE INDENT return bisection . iteration ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def next ( self , xMid ) : NEW_LINE INDENT xMid = self . xMid NEW_LINE xMid = xMid . copy ( ) NEW_LINE xMid = xMid . copy ( ) NEW_LINE return xMid NEW_LINE DEDENT
def def getPosition ( self , xMid ) : NEW_LINE INDENT xMid = xMid . getXMid ( ) NEW_LINE xMid = xMid . getXMid ( ) NEW_LINE return xMid NEW_LINE DEDENT
public static void setApplicationInstance ( final Application application ) { if ( application == null ) { throw new IllegalArgumentException ( " JavaFX application instance must be provided by CDI BeanManager . " ) ; } }
get_settings ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_settings ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
apply_settings ( self , settings ) : NEW_LINE INDENT if not settings : NEW_LINE INDENT return NEW_LINE DEDENT settings = settings . copy ( ) NEW_LINE settings . save ( ) NEW_LINE return settings NEW_LINE DEDENT
initialize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
location ( self , latitude , longitude ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _location ( latitude , longitude ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_info ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_info ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
find_attribute_filter ( self , attribute_filter ) : NEW_LINE INDENT if attribute_filter is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _find_attribute_filter ( attribute_filter ) NEW_LINE DEDENT
def def def filter ( self ) : NEW_LINE INDENT def filter ( self ) : NEW_LINE INDENT return self . _filter ( ) NEW_LINE DEDENT def filter ( self ) : NEW_LINE INDENT return self . _filter ( ) NEW_LINE DEDENT return filter ( self ) NEW_LINE DEDENT
chars ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . chars NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . chars NEW_LINE DEDENT DEDENT
geocode_address ( self , address ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . geocode ( address ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
geocode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . geocode_response NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . geocode_response NEW_LINE DEDENT DEDENT
def def def public public public public public static boolean isRegistered ( String name ) { if ( this discovery_type
List < Instance > getInstances ( String name ) { if ( name == null ) { return Collections . emptyList ( ) ; } if ( name . equals ( " " ) ) { return Collections . emptyList ( ) ; } return Collections . singletonList ( new Instance ( name ) ) ; }
static List < CollaborationItem > getAllCollaborationItems ( ) { List < CollaborationItem > allCollaborationItems = new ArrayList < CollaborationItem > ( ) ; for ( int i = 0 ; i < allCollaborationItems . size ( ) ; i ++ ) { if ( allCollaborationItems . get ( i ) != null ) { allCollaborationItems . add ( allCollaborationItems . get ( i ) ) ; } } return allCollaborationItems ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
changePassword ( self , password ) : NEW_LINE INDENT self . password = password NEW_LINE if self . password is not None : NEW_LINE INDENT return self . password NEW_LINE DEDENT return self . password NEW_LINE DEDENT
all user information .
get_gravatar_bytes ( self , email ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_gravatar_bytes ( email ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
gravatar ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_gravatar ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
call ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _call ( method ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _call ( method ) NEW_LINE DEDENT DEDENT

FlowStep createFlowStep ( FlowStep flowStep ) { FlowStep step = new FlowStep ( flowStep ) ; step . setId ( flowStep . getId ( ) ) ; step . setName ( flowStep . getName ( ) ) ; return step ; }
update_flow_step ( self , flow_step ) : NEW_LINE INDENT if isinstance ( flow_step , FlowStep ) : NEW_LINE INDENT flow_step = flow_step NEW_LINE DEDENT else : NEW_LINE INDENT flow_step = flow_step NEW_LINE DEDENT return flow_step NEW_LINE DEDENT
get_flow_step ( self ) : NEW_LINE INDENT return self . _get_flow_step ( ) NEW_LINE DEDENT
get_step ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_step ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
all Steps via Flow . GetAllSteps ( ) { List < Steps > allSteps = new ArrayList < Steps > ( ) ; for ( int i = 0 ; i < allSteps . size ( ) ; i ++ ) { allSteps . add ( new Steps ( ) ) ; } return allSteps ; }
delete_flow_step ( self , flow_step ) : NEW_LINE INDENT if isinstance ( flow_step , FlowStep ) : NEW_LINE INDENT return self . delete_flow_step ( flow_step ) NEW_LINE DEDENT DEDENT
delete_flow_step ( self , flow_step ) : NEW_LINE INDENT self . _delete_flow_step ( flow_step ) NEW_LINE self . _delete_flow_step ( flow_step ) NEW_LINE self . _delete_flow_step ( flow_step ) NEW_LINE DEDENT
PopulateTableFieldValues ( self ) : NEW_LINE INDENT table = self . getTable ( ) NEW_LINE if table is None : NEW_LINE INDENT return NEW_LINE DEDENT table . clear ( ) NEW_LINE DEDENT
close_connection ( self ) : NEW_LINE INDENT if self . connection : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection = None NEW_LINE DEDENT DEDENT

def def close ( self , connection ) : NEW_LINE INDENT connection . close ( ) NEW_LINE connection . close ( ) NEW_LINE connection . close ( ) NEW_LINE DEDENT
get_echo_messages ( self ) : NEW_LINE INDENT return self . _get_echo_messages ( ) NEW_LINE DEDENT
List < Personal InventoryItem > getPersonalInventoryItems ( ) { List < Personal InventoryItem > items = new ArrayList < Personal InventoryItem > ( ) ; for ( int i = 0 ; i < items . size ( ) ; i ++ ) { items . add ( items . get ( i ) ) ; } return items ; }
create_table_record ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_table_record ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
delete ( self , id ) : NEW_LINE INDENT if id is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _delete ( id ) NEW_LINE self . _delete ( id ) NEW_LINE DEDENT
Electronic Form Workflow historic information .
Electronic Form and Field historic information .
Electronic Form and Field historic information for the most recent modification .
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
unlock ( self ) : NEW_LINE INDENT if not self . is_logged_in ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . is_logged_in ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_logged_in ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_logged_in ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_logged_in ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_logged_in ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
unlock_form_container ( self ) : NEW_LINE INDENT if self . form_container is not None : NEW_LINE INDENT return self . form_container . unlock ( ) NEW_LINE DEDENT return self . form_container . unlock ( ) NEW_LINE DEDENT
def def def def def def def get___python____python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python__
convert_roles ( roles ) : NEW_LINE INDENT if isinstance ( roles , list ) : NEW_LINE INDENT return roles NEW_LINE DEDENT elif isinstance ( roles , tuple ) : NEW_LINE INDENT return roles NEW_LINE DEDENT else : NEW_LINE INDENT return roles NEW_LINE DEDENT DEDENT
createFormDefinition ( self ) : NEW_LINE INDENT if self . fields is None : NEW_LINE INDENT self . fields = [ ] NEW_LINE DEDENT if self . fields : NEW_LINE INDENT self . fields . extend ( self . fields ) NEW_LINE DEDENT return self NEW_LINE DEDENT
update_definition ( self , definition ) : NEW_LINE INDENT if not isinstance ( definition , FormDefinition ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( definition , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( definition , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( definition , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( definition , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_form_definition ( self ) : NEW_LINE INDENT return self . _get_form_definition_by_primary_key ( ) NEW_LINE DEDENT
get_form_definition_by_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _form_definition_by_name [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_all_form_definitions ( self ) : NEW_LINE INDENT return self . _get_all_form_definitions ( ) NEW_LINE DEDENT
delete ( self , id ) : NEW_LINE INDENT if id is None : NEW_LINE INDENT raise ValueError ( " id must be set on the Form Definition . " ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _deletes ( id ) NEW_LINE DEDENT DEDENT
generate_storage_key ( self ) : NEW_LINE INDENT storage_key = self . get_storage_key ( ) NEW_LINE if storage_key is not None : NEW_LINE INDENT return storage_key NEW_LINE DEDENT return storage_key NEW_LINE DEDENT
static MemcachedClient getMemcachedClient ( ) { MemcachedClient client = new MemcachedClient ( ) ; return client ; }
close ( self ) : NEW_LINE INDENT if self . client : NEW_LINE INDENT self . client . close ( ) NEW_LINE self . client = None NEW_LINE DEDENT DEDENT
_convert ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
convert_pdf ( self , document ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_pdf ( document ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _convert_pdf ( document ) NEW_LINE DEDENT DEDENT
PopulateFieldsFromCache ( self , cache ) : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE DEDENT
createFlowStepEntryRule ( FlowStepEntry rule ) : NEW_LINE INDENT if rule is None : NEW_LINE INDENT return None NEW_LINE DEDENT if rule is None : NEW_LINE INDENT return None NEW_LINE DEDENT if rule . isFlowStepEntry ( ) : NEW_LINE INDENT return rule NEW_LINE DEDENT return None NEW_LINE DEDENT
createFlowStepExitRule ( FlowStepExitRule rule ) : NEW_LINE INDENT if rule . isFlowStepExitRule ( ) : NEW_LINE INDENT return rule NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
createFlowStepViewRule ( FlowStepView rule ) : NEW_LINE INDENT if rule is None : NEW_LINE INDENT return None NEW_LINE DEDENT if rule is not None : NEW_LINE INDENT return rule NEW_LINE DEDENT if rule is None : NEW_LINE INDENT return None NEW_LINE DEDENT return rule NEW_LINE DEDENT
update_flow_step_entry ( self ) : NEW_LINE INDENT flow_step_entry = self . _get_flow_step_entry ( ) NEW_LINE if flow_step_entry : NEW_LINE INDENT return self . _update_flow_step_entry ( flow_step_entry ) NEW_LINE DEDENT DEDENT
update_flow_step_exit_rule ( self , flow_step_exit_rule ) : NEW_LINE INDENT if flow_step_exit_rule is None : NEW_LINE INDENT flow_step_exit_rule = FlowStepExitRule ( flow_step_exit_rule ) NEW_LINE DEDENT if flow_step_exit_rule is None : NEW_LINE INDENT flow_step_exit_rule = FlowStepExitRule ( flow_step_exit_rule ) NEW_LINE DEDENT return flow_step_exit_rule NEW_LINE DEDENT
update_flow_step_view_rule ( self , flow_step_view_rule ) : NEW_LINE INDENT if flow_step_view_rule is None : NEW_LINE INDENT flow_step_view_rule = FlowStepViewRule ( flow_step_view_rule ) NEW_LINE DEDENT if flow_step_view_rule is None : NEW_LINE INDENT flow_step_view_rule = FlowStepViewRule ( flow_step_view_rule ) NEW_LINE DEDENT return flow_step_view_rule NEW_LINE DEDENT
move_entry_rule ( self ) : NEW_LINE INDENT if self . entry_rule is None : NEW_LINE INDENT return NEW_LINE DEDENT self . entry_rule = self . entry_rule . copy ( ) NEW_LINE self . entry_rule . move ( ) NEW_LINE DEDENT
move_entry_rule ( self ) : NEW_LINE INDENT if self . entry_rule is None : NEW_LINE INDENT return NEW_LINE DEDENT self . entry_rule = self . entry_rule . copy ( ) NEW_LINE self . entry_rule . move ( ) NEW_LINE DEDENT
delete_step_entry ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . rule . delete ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . rule . delete ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
delete_step_exit ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . delete_step ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . delete_step ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
delete_rule ( self , rule ) : NEW_LINE INDENT if not isinstance ( rule , Rule ) : NEW_LINE INDENT return NEW_LINE DEDENT rule . delete ( ) NEW_LINE DEDENT
initialize_session ( self , session ) : NEW_LINE INDENT self . session = session NEW_LINE DEDENT
all user query information .
def get_role_info ( self ) : NEW_LINE INDENT role_info = self . _get_role_info ( ) NEW_LINE return role_info NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static Text MaskedField createTextMaskedField ( Text MaskedField maskedField ) { if ( maskedField == null ) { throw new IllegalArgumentException ( " Masked field cannot be null " ) ; } return maskedField ; }

create_decimal_spinner_field ( self , field ) : NEW_LINE INDENT try : NEW_LINE INDENT return DecimalSpinner . create ( field ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return DecimalSpinner . create ( field ) NEW_LINE DEDENT return DecimalSpinner . create ( field ) NEW_LINE DEDENT
def def create_decimal_slider_field ( self ) : NEW_LINE INDENT if self . is_decimal : NEW_LINE INDENT return self . create_decimal_slider ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_decimal_slider ( ) NEW_LINE DEDENT DEDENT

update_masked_text ( self ) : NEW_LINE INDENT masked_text = self . get_masked_text ( ) NEW_LINE if masked_text is not None : NEW_LINE INDENT return masked_text NEW_LINE DEDENT return masked_text NEW_LINE DEDENT
update_barcode_text ( self , barcode_text ) : NEW_LINE INDENT if barcode_text is None : NEW_LINE INDENT return None NEW_LINE DEDENT if barcode_text is not None : NEW_LINE INDENT return self . _update_barcode_text ( barcode_text ) NEW_LINE DEDENT return None NEW_LINE DEDENT
update_decimal_spinner ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _decimal_spinner . update ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _decimal_spinner . update ( ) NEW_LINE DEDENT DEDENT
update_slider_field ( self ) : NEW_LINE INDENT if self . _slider_field is not None : NEW_LINE INDENT self . _slider_field = self . _slider_field . copy ( ) NEW_LINE DEDENT DEDENT
update_table_field ( self , table_field ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _update_table_field ( table_field ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_form_field ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fields [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_form_fields ( self ) : NEW_LINE INDENT form_fields = [ ] NEW_LINE for field in self . fields : NEW_LINE INDENT form_fields . append ( field ) NEW_LINE DEDENT return form_fields NEW_LINE DEDENT
get_form_fields ( self ) : NEW_LINE INDENT form_fields = [ ] NEW_LINE for field in self . form_fields : NEW_LINE INDENT form_fields . append ( field ) NEW_LINE DEDENT return form_fields NEW_LINE DEDENT
delete_field ( self , field ) : NEW_LINE INDENT if not field : NEW_LINE INDENT return NEW_LINE DEDENT if not field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if field . is_nullable ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
delete_field ( self , field ) : NEW_LINE INDENT if not field : NEW_LINE INDENT return NEW_LINE DEDENT field = field . copy ( ) NEW_LINE field . delete ( ) NEW_LINE field . delete ( ) NEW_LINE field . delete ( ) NEW_LINE DEDENT
def def def def def def def def def def def generate_meta_meta_data_data ( self ) : def generate_meta_meta_data ( self , table_field_field_name , table_name ) : NEW_LINE INDENT if ( table_field_name != null ) : NEW_LINE INDENT return table_field_name = table_field_name NEW_LINE DEDENT def generate_meta_meta_data ( self ) : NEW_LINE INDENT return self . _generate_meta_data ( ) NEW_LINE DEDENT
update_field_value ( self , field , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if value is not None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT

create_flow ( self ) : NEW_LINE INDENT flow = self . _create_flow ( ) NEW_LINE flow . add_flow ( self . _create_flow ( ) ) NEW_LINE return flow NEW_LINE DEDENT
update_flow ( self ) : NEW_LINE INDENT flow = self . get_flow ( ) NEW_LINE if not flow : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , Flow ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( flow , dict ) : NEW
get_flow_by_primary_key ( self , key ) : NEW_LINE INDENT return self . _get_flow_by_primary_key ( key ) NEW_LINE DEDENT
get_flow_by_unique_name ( self , name ) : NEW_LINE INDENT return self . _get_flow_by_unique_name ( name ) NEW_LINE DEDENT
delete_flow ( self ) : NEW_LINE INDENT if self . _flow is not None : NEW_LINE INDENT self . _flow . delete ( ) NEW_LINE self . _flow = None NEW_LINE DEDENT DEDENT
delete_flow ( self ) : NEW_LINE INDENT self . _delete_flows ( ) NEW_LINE self . _delete_flows ( ) NEW_LINE DEDENT
update_global_field_value ( self , field_value ) : NEW_LINE INDENT if field_value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( field_value , dict ) : NEW_LINE INDENT field_value = field_value NEW_LINE DEDENT elif isinstance ( field_value , dict ) : NEW_LINE INDENT field_value = field_value NEW_LINE DEDENT elif isinstance ( field_value , dict ) : NEW_LINE INDENT field_value = field_value NEW_LINE DEDENT return NEW_LINE DEDENT
get_global_field_values ( self ) : NEW_LINE INDENT global_field_values = [ ] NEW_LINE for field in self . fields . values ( ) : NEW_LINE INDENT global_field_values . append ( field ) NEW_LINE DEDENT return global_field_values NEW_LINE DEDENT
def def get_form_definitions ( self ) : NEW_LINE INDENT return self . _get_form_definitions ( ) NEW_LINE DEDENT
decrypt ( self , data ) : NEW_LINE INDENT data = data . decode ( ' utf - 8' ) NEW_LINE data = data . decode ( ' utf - 8' ) NEW_LINE data = data . decode ( ' utf - 8' ) NEW_LINE return data NEW_LINE DEDENT
close ( self ) : NEW_LINE INDENT if self . connection is not None : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT DEDENT
def Initiate_request_process ( self ) : NEW_LINE INDENT request_process = self . request_process NEW_LINE request_LINE if request_process is None : NEW_LINE INDENT return NEW_LINE DEDENT request_process = self . request_process NEW_LINE if request_process is not None : NEW_LINE INDENT return request_process NEW_LINE DEDENT DEDENT
def def def get_verbose_exception_message ( self ) : NEW_LINE INDENT if self . verbose : NEW_LINE INDENT return self . message NEW_LINE DEDENT else : NEW_LINE INDENT return self . message NEW_LINE DEDENT DEDENT
create_administrator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . admin_user = self . admin_user NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . admin_user = self . admin_user NEW_LINE DEDENT return self . admin_user NEW_LINE DEDENT
get_access_token ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _access_token NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_user_profile_info ( self ) : NEW_LINE INDENT user_profile_info = self . _user_profile_info NEW_LINE if user_profile_info is not None : NEW_LINE INDENT return user_profile_info NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def json_body ( self , body ) : NEW_LINE INDENT if isinstance ( body , dict ) : NEW_LINE INDENT return json . dumps ( body ) NEW_LINE DEDENT def json_body ( self ) : NEW_LINE INDENT return json . dumps ( body ) NEW_LINE DEDENT return json . dumps ( body ) NEW_LINE DEDENT
def def def def def def def def def submit__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python__ def def def def def def submit__python____python____python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def submit__python____python____python____python____python____python____python__ def def def def def def def submit__python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def submit__python____python____python____python____python____python____python____python__ def def def def def submit__python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__ def def def def _
get_text_based_response_handler ( self ) : NEW_LINE INDENT response_handler = self . _get_text_based_response_handler ( ) NEW_LINE if response_handler : NEW_LINE INDENT return response_handler NEW_LINE DEDENT DEDENT
test_connection ( self ) : NEW_LINE INDENT self . assertIsNotNone ( self . connection ) NEW_LINE self . assertIsNotNone ( self . connection . get ( ) ) NEW_LINE self . assertIsNotNone ( self . connection . get ( ) ) NEW_LINE DEDENT

static String getSystemProperty ( String systemProperty ) { if ( systemProperty == null ) { return null ; } if ( systemProperty . length ( ) == 0 ) { return null ; } return systemProperty ; }
close_sql_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
items for the provided JobView . public static List < JobViewItem > getJobViewItems ( ) { List < JobViewItem > items = new ArrayList < JobViewItem > ( ) ; for ( JobViewItem item : items ) { items . add ( item ) ; } return items ; }
def def def def def SendFormItem ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def _Send__python____python____python____python____python____python____python__ def def def def def def def def _send__python____python____python____python____python____python____python____python____python__ def def def def def def def def def def SendFormItem ( self ) : NEW__python____python____python____python____python____python____python____python____python__ def def def def def def _Send__python____python____python____python____python____python____python____python____python____python__ def def def def def def _send__python____python____python____python____python____python____python____python__ def def def def def _send__python____python____python____python____python____python____python__ def def def def def _send__python____python____python____python____python__ def def def def _send
close ( self ) : NEW_LINE INDENT if self . connection . isClosed ( ) : NEW_LINE INDENT return NEW_LINE DEDENT self . connection . close ( ) NEW_LINE DEDENT
void onMessage ( Message message ) { if ( message == null ) { throw new IllegalArgumentException ( " Message is null . " ) ; } if ( message . getMessage ( ) == null ) { throw new IllegalArgumentException ( " Message is null . " ) ; } if ( message . getMessage ( ) == null ) { throw new IllegalArgumentException ( " Message is null . " ) ; } if ( message . getMessage ( ) == null ) { throw new IllegalArgumentException ( " Message is null . " ) ; } }
send_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . sendMessage ( message ) NEW_LINE DEDENT except : NEW_LINE INDENT self . sendMessage ( message ) NEW_LINE DEDENT DEDENT

close ( self ) : NEW_LINE INDENT if self . _session is not None : NEW_LINE INDENT self . _session . close ( ) NEW_LINE self . _session = None NEW_LINE DEDENT DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _execute ( ) NEW_LINE DEDENT return self . _execute ( ) NEW_LINE DEDENT
def request_license ( self , license_request ) : NEW_LINE INDENT if license_request is None : NEW_LINE INDENT return None NEW_LINE DEDENT if license_request is not None : NEW_LINE INDENT return license_request NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static License getAppliesLicense ( License license ) { if ( license == null ) { license = new License ( ) ; } else { license . setLicense ( license ) ; } return license ; }
static PlainText createPlainText ( String text ) { PlainText field = new PlainText ( ) ; field . setText ( text ) ; return field ; }
create_paragraph_text ( self , paragraph_text ) : NEW_LINE INDENT if paragraph_text is None : NEW_LINE INDENT paragraph_text = ParagraphText ( paragraph_text ) NEW_LINE DEDENT return paragraph_text NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

Date newDate ( Date date ) { if ( date == null ) { return new Date ( ) ; } if ( date . getTime ( ) == null ) { return new Date ( ) ; } return new Date ( date . getTime ( ) ) ; }
update_text ( self , text ) : NEW_LINE INDENT if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if not text : NEW_LINE INDENT return NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if text : NEW_LINE INDENT text = text . strip ( ) NEW_LINE DEDENT return text NEW_LINE DEDENT
update_paragraph_html ( self , paragraph_html ) : NEW_LINE INDENT if not paragraph_html : NEW_LINE INDENT return NEW_LINE DEDENT paragraph_html = paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' \n ' , ' \n ' ) NEW_LINE paragraph_html . replace ( ' ' , '
update_date_and_time ( self , date , time ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _update_date_and_time ( date , time ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
update_decimal_field ( self , field ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _decimal_field = field NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _decimal_field = field NEW_LINE DEDENT DEDENT
update_route ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
getConfiguration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _configuration NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _configuration NEW_LINE DEDENT DEDENT
static Configuration [ ] getAllConfigurations ( ) { Configuration [ ] configurations = new Configuration [ 0 ] ; for ( int i = 0 ; i < configurations . length ; i ++ ) { configurations [ i ] = new Configuration ( ) ; } return configurations ; }
void uploadAttachment ( Attachment attachment ) { if ( attachment != null && attachment . getName ( ) != null ) { if ( attachment . getName ( ) != null ) { attachment . setName ( attachment . getName ( ) ) ; } else { attachment . setName ( attachment . getName ( ) ) ; } } }
get_attachment_by_primary_key ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_attachment_by_primary_key ( key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
delete_attachment ( self , attachment ) : NEW_LINE INDENT if not attachment : NEW_LINE INDENT return NEW_LINE DEDENT attachment . delete ( ) NEW_LINE DEDENT
delete_attachment ( self , attachment ) : NEW_LINE INDENT if not attachment : NEW_LINE INDENT return False NEW_LINE DEDENT attachment . delete ( ) NEW_LINE return True NEW_LINE DEDENT

public public static final void addClassPath ( final String path , final String path ) { if ( path == null ) { throw new IllegalArgumentException ( ) ; } else if ( path == null ) { throw new IllegalArgumentException ( ) ; } else { return ; } } }
Asserts Asserts if ( this . name != null ) { if ( this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null && this . name != null &&
def def validate ( ) : NEW def def def _assert def def def _assert def _assert def _assert def _assert def _validate ( self ) : NEW_LINE INDENT if ( self . name != null ) : NEW_LINE INDENT if self . name == null : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT if self . name == null : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT DEDENT
Asserts Asserts if the current object has a ref attribute of a simpleType as a simpleType is not a form attribute or a type attribute or a type attribute . Throws an exception . Throws an exception if the current object does not have a simpleType attribute or a type attribute . Throws an exception if the current object does not have a ref attribute or a type attribute . Throws an exception if the current object does not have a type attribute . Throws an exception if the current object does not have a type attribute . Throws an exception if the current object has a type attribute .
def def get_nodes ( self ) : NEW_LINE INDENT return self . _get_nodes ( ) NEW_LINE DEDENT
Asserts Asserts if the current object has a form element has a form attribute named ' form ' form ' in the current object and not a direct child of the top level XsdSchema element of the top level XsdSchema element which isn't a direct child of the top level XsdSchema element which is a direct child of the top level XsdSchema element of the top level XsdSchema element .
Asserts Asserts if ( currentObject != null && currentObject != null ) { if ( currentObject != null && currentObject . ref != null && currentObject . ref != null ) { throw new AssertionError ( ) ; } }
create_instance ( T value ) : NEW_LINE INDENT if isinstance ( value , T ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , T ) : NEW_LINE INDENT return create_instance ( value ) NEW_LINE DEDENT elif isinstance ( value , T ) : NEW_LINE INDENT return create_instance ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return create_instance ( value ) NEW_LINE DEDENT DEDENT
Cli createCli ( ) { Cli cli = new Cli ( ) ; return cli ; }
Cli createCli ( Class < ? extends Cli > class ) { Cli cli = new Cli ( ) ; return cli ; }
arguments from an annotated interface definition .
arguments from an annotated class instance .
public
remove_footer_view ( self ) : NEW_LINE INDENT if self . footer_view : NEW_LINE INDENT return self . footer_view . remove_footer ( ) NEW_LINE DEDENT return self . footer_view NEW_LINE DEDENT
get_output_value ( self , input_value ) : NEW_LINE INDENT if input_value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return input_value NEW_LINE DEDENT DEDENT
gradient_noise ( self , input_value ) : NEW_LINE INDENT if input_value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return input_value NEW_LINE DEDENT DEDENT
noise ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
noise ( self ) : NEW_LINE INDENT return self . _noise ( ) NEW_LINE DEDENT
cubic_interpolation ( self ) : NEW_LINE INDENT if self . interpolation is not None : NEW_LINE INDENT return self . interpolation NEW_LINE DEDENT return self . interpolation NEW_LINE DEDENT
def def map ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
def def get_bounds ( self ) : NEW_LINE INDENT bounds = [ ] NEW_LINE for range in self . range : NEW_LINE INDENT bounds . append ( range ) NEW_LINE DEDENT return bounds NEW_LINE DEDENT
def def process ( self , event ) : NEW_LINE INDENT event = event . getEvent ( ) NEW_LINE if event . getEvent ( ) : NEW_LINE INDENT return event NEW_LINE DEDENT if event . getEvent ( ) : NEW_LINE INDENT return event . getEvent ( ) NEW_LINE DEDENT return event NEW_LINE DEDENT
process_event ( self , event ) : NEW_LINE INDENT if isinstance ( event , dict ) : NEW_LINE INDENT event = event [ ' event ' ] NEW_LINE DEDENT else : NEW_LINE INDENT event = None NEW_LINE DEDENT return event NEW_LINE DEDENT
extract_account_id ( self , accountId ) : NEW_LINE INDENT if accountId is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . _extract_account_id ( accountId ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
static boolean isValid ( Rule rule ) { if ( rule == null ) { return false ; } if ( ! rule . isValid ( ) ) { return false ; } return true ; }
get_event_serializer ( self ) : NEW_LINE INDENT event_serializer = self . _get_event_serializer ( ) NEW_LINE if event_serializer : NEW_LINE INDENT return event_serializer NEW_LINE DEDENT return None NEW_LINE DEDENT
create_temporary_folder ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . temporary_folder NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . temporary_folder NEW_LINE DEDENT DEDENT
create_temporary_folder ( self ) : NEW_LINE INDENT root = tempfile . mkdtemp ( ) NEW_LINE try : NEW_LINE INDENT os . makedirs ( root ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return root NEW_LINE DEDENT DEDENT
reverse_system_property_sets ( self , restore_context ) : NEW_LINE INDENT self . restore_context = restore_context NEW_LINE self . restore_context . set_system_property_sets ( self . restore_context . system_property_sets ) NEW_LINE DEDENT
create_map ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . map NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add ( self , collection ) : NEW_LINE INDENT self . collection . add ( collection ) NEW_LINE DEDENT
set_property ( self , property , value ) : NEW_LINE INDENT self . _property = property NEW_LINE self . _value = value NEW_LINE DEDENT
get_style_property ( self ) : NEW_LINE INDENT style = self . style NEW_LINE if style is not None : NEW_LINE INDENT return style NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
transition ( self , state , name ) : NEW_LINE INDENT if state . name == name : NEW_LINE INDENT return self NEW_LINE DEDENT elif state . name == name : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
clear ( self ) : NEW_LINE INDENT self . gcqueue . clear ( ) NEW_LINE self . gcqueue . clear ( ) NEW_LINE self . gcqueue . clear ( ) NEW_LINE DEDENT
get_type_info ( self ) : NEW_LINE INDENT type_info = { } NEW_LINE for type in self . types : NEW_LINE INDENT type_info [ type ] = self . get_type ( type ) NEW_LINE DEDENT return type_info NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_type_variables ( self ) : NEW_LINE INDENT type_variables = [ ] NEW_LINE for type in self . type_variables : NEW_LINE INDENT type_variables . append ( type ) NEW_LINE DEDENT return type_variables NEW_LINE DEDENT


check_remote_objects ( self ) : NEW_LINE INDENT self . check_remote_objects ( ) NEW_LINE return self . check_remote_objects ( ) NEW_LINE DEDENT
def def get_executor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . executor NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . executor NEW_LINE DEDENT DEDENT
set_thetask_for_wrapper ( self , wrapper ) : NEW_LINE INDENT try : NEW_LINE INDENT thetask = self . thetasks [ wrapper ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT thetask = self . thetasks [ wrapper ] NEW_LINE DEDENT return thetask NEW_LINE DEDENT
notify_task_accepted ( self , task ) : NEW_LINE INDENT if not self . task . accepted : NEW_LINE INDENT self . task . accepted = True NEW_LINE DEDENT else : NEW_LINE INDENT self . task . accepted = True NEW_LINE DEDENT DEDENT
notify_task_rejected ( self , task ) : NEW_LINE INDENT if task . rejected : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
notify_task_started ( self , task_id ) : NEW_LINE INDENT if task_id is None : NEW_LINE INDENT return NEW_LINE DEDENT if task_id is not None : NEW_LINE INDENT return NEW_LINE DEDENT if task_id is not None : NEW_LINE INDENT return NEW_LINE DEDENT if task_id is not None : NEW_LINE INDENT return NEW_LINE DEDENT if task_id is not None : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
def def notify_task_completed ( self , task ) : NEW_LINE INDENT if self . task_completed : NEW_LINE INDENT self . task_completed = True NEW_LINE DEDENT else : NEW_LINE INDENT self . task_completed = False NEW_LINE DEDENT DEDENT
stop_task ( self , task_id ) : NEW_LINE INDENT if self . task_id is not None : NEW_LINE INDENT self . task_id = self . task_id NEW_LINE DEDENT DEDENT
job_get ( self , job_id ) : NEW_LINE INDENT if job_id is None : NEW_LINE INDENT job_id = self . job_id NEW_LINE DEDENT if job_id is not None : NEW_LINE INDENT job_id = job_id NEW_LINE DEDENT return self . job_get ( job_id ) NEW_LINE DEDENT
addJob ( self , job ) : NEW_LINE INDENT self . jobs . add ( job ) NEW_LINE return self NEW_LINE DEDENT
static BlockingMode convert ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return new BlockingMode ( ) ; } return new BlockingMode ( name ) ; }
static BlockingMode valueOf ( int value ) { if ( value == 0 ) { return null ; } if ( value == 1 ) { return null ; } return new BlockingMode ( value ) ; }
def def def _setup ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_system_catalog_files ( self ) : NEW_LINE INDENT self . _load_system_catalog_files ( ) NEW_LINE DEDENT
augment ( self , data ) : NEW_LINE INDENT self . _data = data NEW_LINE return self . _data NEW_LINE DEDENT
static List < String > getPendingCatalogs ( ) { List < String > pendingCatalogs = new ArrayList < String > ( ) ; pendingCatalogs . add ( null ) ; pendingCatalogs . add ( null ) ; pendingCatalogs . add ( null ) ; pendingCatalogs . add ( null ) ; return pendingCatalogs ; }
parse_catalog_file ( self , catalog_file ) : NEW_LINE INDENT if not catalog_file : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT if isinstance ( catalog_file , dict ) : NEW_LINE INDENT return catalog_file NEW_LINE DEDENT return catalog_file NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_subordinate_catalogs ( self , catalogs ) : NEW_LINE INDENT subordinate_catalogs = [ ] NEW_LINE for catalogs in catalogs : NEW_LINE INDENT subordinate_catalogs . extend ( parse_subordinate_catalogs ( catalogs ) ) NEW_LINE DEDENT return subordinate_catalogs NEW_LINE DEDENT
get_doctype_system_identifier ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . DOCTYPE_SYSTEM_IDENTIFIER NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
applicable_document_entry ( self ) : NEW_LINE INDENT return self . _get_document_entry ( ) NEW_LINE DEDENT
get_system_identifier ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . system_identifier NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def get_uri ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . catalog . get_uri ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . catalog . get_uri ( ) NEW_LINE DEDENT DEDENT
search_subordinate_catalogs ( self , catalogs ) : NEW_LINE INDENT if len ( catalogs ) > 1 : NEW_LINE INDENT return catalogs [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return catalogs NEW_LINE DEDENT DEDENT
static URI absolute ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( " URI cannot be null " ) ; } if ( uri . getScheme ( ) == null ) { throw new IllegalArgumentException ( " URI cannot be null " ) ; } return new URI ( uri ) ; }
normalize_uri ( self , uri ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _normalize_uri ( uri ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _normalize_uri ( uri ) NEW_LINE DEDENT DEDENT
static byte [ ] encode ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } else { return bytes [ 0 ] ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
SoftValueRef createSoftValueRef ( ) { SoftValueRef softValueRef = new SoftValueRef ( ) ; SoftValueRef softValue = new SoftValueRef ( softValueRef ) ; SoftValueRef softValueRef2 = new SoftValueRef ( softValueRef2 ) ; SoftValueRef softValueRef3 = new SoftValueRef ( softValueRef3 ) ; SoftValueRef softValueRef4 = new SoftValueRef ( softValueRef4 ) ; SoftValueRef softValueRef5 = new SoftValueRef ( softValueRef5 ) ; SoftValueRef softValueRef6 = new SoftValueRef ( softValueRef5 ) ; SoftValueRef softValueRef7 = new SoftValueRef ( softValueRef7 ) ; SoftValueRef softValueRef8 = new SoftValueRef ( softValueRef8 ) ; SoftValueRef softValueRef9 = new SoftValueRef ( softValueRef9 ) ; SoftValueRef softValueRef
void onThrowable ( Throwable throwable ) { if ( throwable == null ) { return ; } if ( throwable . getCause ( ) != null ) { throw throwable ; } if ( throwable . getCause ( ) != null ) { throw throwable ; } }

create_list ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void schedule ( TimerTask task ) { if ( task == null ) { throw new IllegalArgumentException ( " TimerTask cannot be null " ) ; } if ( ! task . isScheduled ( ) ) { throw new IllegalArgumentException ( " TimerTask cannot be scheduled " ) ; } if ( ! task . isScheduled ( ) ) { throw new IllegalArgumentException ( " TimerTask cannot be scheduled " ) ; } task . schedule ( task ) ; }
static InetAddress fromString ( String input ) { if ( input == null ) { return null ; } if ( input . length ( ) == 0 ) { return null ; } if ( input . length ( ) == 1 ) { return InetAddress . getByName ( input ) ; } return InetAddress . getByName ( input ) ; }
dereference ( self , index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self [ index ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
remove_element ( self , element ) : NEW_LINE INDENT if not self . is_element ( element ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_element ( element ) : NEW_LINE INDENT self . remove_element ( element ) NEW_LINE DEDENT DEDENT
void remove ( Object obj ) { if ( obj == null ) { return ; } if ( obj instanceof GarbageCollector ) { GarbageCollector gc = ( GarbageCollector ) obj ; gc . remove ( obj ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

get_entry_argument ( self ) : NEW_LINE INDENT if self . entry_argument is None : NEW_LINE INDENT return self . entry_argument NEW_LINE DEDENT return self . entry_argument NEW_LINE DEDENT
set_context_loader ( self , classloader ) : NEW_LINE INDENT if classloader is None : NEW_LINE INDENT classloader = self . context_loader NEW_LINE DEDENT return classloader NEW_LINE DEDENT
swap_nodes ( self , nodes ) : NEW_LINE INDENT if len ( nodes ) == 1 : NEW_LINE INDENT return nodes [ 0 ] NEW_LINE DEDENT elif len ( nodes ) == 2 : NEW_LINE INDENT return nodes [ 1 ] NEW_LINE DEDENT return nodes NEW_LINE DEDENT
normalize ( self , tree ) : NEW_LINE INDENT node = self . _normalize ( tree ) NEW_LINE if node is None : NEW_LINE INDENT return node NEW_LINE DEDENT return node NEW_LINE DEDENT
cleanup_timeout ( self , timeout ) : NEW_LINE INDENT if timeout is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( timeout , TimeoutImpl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( timeout , TimeoutImpl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( timeout , TimeoutImpl ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( timeout , TimeoutImpl ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
load_class ( self ) : NEW_LINE INDENT if self . parent : NEW_LINE INDENT return self . parent . load_class ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . parent . load_class ( ) NEW_LINE DEDENT DEDENT
static void preload ( URL url ) throws MalformedURLException { if ( url . getProtocol ( ) == null ) { throw new MalformedURLException ( " Unsupported protocol : " + url . getProtocol ( ) ) ; } if ( url . getProtocol ( ) == null ) { throw new MalformedURLException ( " Unsupported protocol : " + url . getProtocol ( ) ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_handler_ pkgs ( self ) : NEW_LINE INDENT if self . handler . pkgs is not None : NEW_LINE INDENT return self . handler . pkgs NEW_LINE DEDENT else : NEW_LINE INDENT return self . handler . pkgs NEW_LINE DEDENT DEDENT
Class < ? > getType ( String input ) { if ( input == null ) { return null ; } if ( input . length ( ) == 0 ) { return null ; } if ( input . length ( ) == 1 ) { return String . class ; } if ( input . length ( ) == 2 ) { return String . class ; } return null ; }
set_implementation ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
_get_counter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _counter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def get_directional_counter ( self ) : NEW_LINE INDENT return self . _directional_counter NEW_LINE DEDENT
static boolean isExtension ( String namespace ) { if ( namespace == null ) { return false ; } if ( namespace . equals ( " " ) ) { return true ; } if ( namespace . equals ( " " ) ) { return true ; } return false ; }
static boolean isNotificationRequired ( Notification notification ) { if ( notification == null ) { return false ; } if ( notification . isRequired ( ) ) { return true ; } return false ; }
static void bind ( final Object target , final String name ) { if ( target == null ) { throw new IllegalArgumentException ( " Target object cannot be null . " ) ; } if ( name == null ) { throw new IllegalArgumentException ( " Target object cannot be null . " ) ; } if ( target . getClass ( ) . getName ( ) . equals ( name ) ) { throw new IllegalArgumentException ( " Target object cannot be null . " ) ; } if ( target . getClass ( ) . getName ( ) . equals ( name ) ) { throw new IllegalArgumentException ( " Target object cannot be null . " ) ; } }

sub - strings in side of a string .
split ( self , delimiter ) : NEW_LINE INDENT if not self . delimiter : NEW_LINE INDENT self . delimiter = delimiter NEW_LINE DEDENT else : NEW_LINE INDENT self . delimiter = self . delimiter NEW_LINE DEDENT return self . delimiter NEW_LINE DEDENT
static String join ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } return bytes [ 0 ] ; }
toString ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT DEDENT
BlockingMode convert ( String input ) { if ( input == null ) { return null ; } if ( input . length ( ) == 0 ) { return null ; } if ( input . length ( ) == 1 ) { return new BlockingMode ( ) ; } return new BlockingMode ( input ) ; }
initialize ( self ) : NEW_LINE INDENT self . cache = { } NEW_LINE if self . cache is None : NEW_LINE INDENT self . cache = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . cache = self . cache . copy ( ) NEW_LINE DEDENT return self . cache NEW_LINE DEDENT
get_cached_value ( self , key ) : NEW_LINE INDENT if self . cache . get ( key ) : NEW_LINE INDENT return self . cache . get ( key ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . cache . get ( key ) NEW_LINE DEDENT DEDENT
get_cache_value ( self , key ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . cache . get ( key ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . cache . get ( key ) NEW_LINE DEDENT DEDENT
destroy ( self , key ) : NEW_LINE INDENT if key in self . entries : NEW_LINE INDENT self . entries . remove ( key ) NEW_LINE DEDENT DEDENT
clear ( self ) : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE self . cache . clear ( ) NEW_LINE DEDENT
get_keys ( self ) : NEW_LINE INDENT keys = [ ] NEW_LINE for key in self . keys : NEW_LINE INDENT keys . append ( key ) NEW_LINE DEDENT return keys NEW_LINE DEDENT
set_cache_timer_resolution ( self , cache_timer_resolution ) : NEW_LINE INDENT self . cache_timer_resolution = cache_timer_resolution NEW_LINE self . cache_timer_resolution = cache_timer_resolution NEW_LINE DEDENT
get_raw_ TimedEntry ( self , key ) : NEW_LINE INDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT key = key . strip ( ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return key NEW_LINE DEDENT
Iterator < Element > iterator ( ) { return new Iterator < Element > ( ) { @ Override public Iterator < Element > next ( ) { return new ElementIterator ( ) ; } } ; }
def get_child ( self , name ) : NEW_LINE INDENT if len ( self . children ) > 1 : NEW_LINE INDENT return self . children [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . children [ 0 ] NEW_LINE DEDENT DEDENT
getChild ( self , name ) : NEW_LINE INDENT if self . name == null : NEW_LINE INDENT return None NEW_LINE DEDENT if self . name . startswith ( name ) : NEW_LINE INDENT return self . name NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_content ( self , element ) : NEW_LINE INDENT element = self . _element NEW_LINE if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT return element . content NEW_LINE DEDENT
get_content ( self , element ) : NEW_LINE INDENT if isinstance ( element , Element ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_content ( self , element ) : NEW_LINE INDENT if isinstance ( element , Element ) : NEW_LINE INDENT return element . content NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
resetWorkQueue ( self ) : NEW_LINE INDENT if self . workQueue is not None : NEW_LINE INDENT self . workQueue = self . workQueue . copy ( ) NEW_LINE self . workQueue . clear ( ) NEW_LINE DEDENT DEDENT
backward_compatibility ( self , mode ) : NEW_LINE INDENT if mode is None : NEW_LINE INDENT return self NEW_LINE DEDENT mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE mode = mode . lower ( ) NEW_LINE return mode NEW_LINE DEDENT
public void set ( String name , String value ) { this . name = name ; this . name = name ; this . value = value ; }
execute_task ( self , task ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _execute_task ( task ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_system_identifier ( self ) : NEW_LINE INDENT return self . _get_system_identifier ( ) NEW_LINE DEDENT
def def _get_public_identifiers ( self ) : NEW_LINE INDENT return self . _get_public_identifiers ( ) NEW_LINE return self . _get_identifiers ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def public public RFC public identifier public identifier . RFC2483 resolver ( RFC2483 resolver ) : NEW_LINE def resolver ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return resolver . resolver ( ) NEW_LINE def resolver ( self ) : NEW_LINE INDENT return resolver . resolver ( ) NEW_LINE DEDENT def resolver ( self ) : NEW_LINE INDENT return resolver . resolver ( ) NEW_LINE DEDENT def resolver ( self ) : NEW_LINE INDENT return resolver . resolver ( ) NEW_LINE DEDENT return resolver ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
append ( self , vectors ) : NEW_LINE INDENT result = [ ] NEW_LINE for vec in vectors : NEW_LINE INDENT result . append ( vec ) NEW_LINE DEDENT return result NEW_LINE DEDENT

static URN getURN ( String systemIdentifier ) { if ( systemIdentifier == null || systemIdentifier . length ( ) == 0 ) { return null ; } if ( systemIdentifier . length ( ) == 0 ) { return null ; } if ( systemIdentifier . length ( ) == 1 ) { return new URN ( systemIdentifier ) ; } return null ; }
get_system_identifiers ( self ) : NEW_LINE INDENT return self . _system_identifiers NEW_LINE DEDENT
get_system_identifiers ( self ) : NEW_LINE INDENT if self . system_identifiers is None : NEW_LINE INDENT self . system_identifiers = [ ] NEW_LINE DEDENT return self . system_identifiers NEW_LINE DEDENT
search_subordinate_catalogs ( self , catalogs ) : NEW_LINE INDENT if len ( catalogs ) > 1 : NEW_LINE INDENT return catalogs [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return catalogs NEW_LINE DEDENT DEDENT
parse_catalog_file ( self ) : NEW_LINE INDENT catalog_file = self . _parse_catalog_file ( ) NEW_LINE if catalog_file is None : NEW_LINE INDENT return None NEW_LINE DEDENT return catalog_file NEW_LINE DEDENT
parse_catalog ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_catalog ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_connection_exists ( self , connection ) : NEW_LINE INDENT if not connection : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
disallow ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
next_field ( self ) : NEW_LINE INDENT field = self . next_field ( ) NEW_LINE if field is None : NEW_LINE INDENT return None NEW_LINE DEDENT return field NEW_LINE DEDENT
delete ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_value ( self , node ) : NEW_LINE INDENT if isinstance ( node , dict ) : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT elif isinstance ( node , dict ) : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT elif isinstance ( node , dict ) : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT elif isinstance ( node , dict ) : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT elif isinstance ( node , dict ) : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT else : NEW_LINE INDENT return node . get ( ' value ' ) NEW_LINE DEDENT DEDENT
SnapshotEntry get ( String key ) { if ( key == null || key . length ( ) == 0 ) { return null ; } if ( key . length ( ) == 0 ) { return new SnapshotEntry ( ) ; } if ( key . length ( ) == 1 ) { return new SnapshotEntry ( ) ; } if ( key . length ( ) == 2 ) { return new SnapshotEntry ( ) ; } return new SnapshotEntry ( ) ; }
def def right_field ( self , field ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . right_field ( field ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . right_field ( field ) NEW_LINE DEDENT DEDENT
def def logger ( self ) : NEW_LINE INDENT logger = logging . getLogger ( self . name ) NEW_LINE logger . setLevel ( self . logger_level ) NEW_LINE logger . setLevel ( self . logger_level ) NEW_LINE logger . setLevel ( self . logger_level ) NEW_LINE logger . setLevel ( self . logger_level ) NEW_LINE logger . setLevel ( self . logger_level ) NEW_LINE return logger NEW_LINE DEDENT

get_class_short_name ( self , short_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . short_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static String toString ( String s ) { if ( s == null ) { return null ; } if ( s . length ( ) == 0 ) { return null ; } return s ; }
get_property_names ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_compatible_constructor ( self , value_type ) : NEW_LINE INDENT if isinstance ( value_type , type ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT elif isinstance ( value_type , type ) : NEW_LINE INDENT return value_type NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

Dereference ( self , object ) : NEW_LINE INDENT if object is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return object . dereference ( ) NEW_LINE DEDENT DEDENT
listener lists and the JNDI properties cache map .
update ( self , jndiMap ) : NEW_LINE INDENT self . jndiMap = jndiMap NEW_LINE if self . jndiMap is not None : NEW_LINE INDENT self . jndiMap = self . jndiMap NEW_LINE DEDENT DEDENT
get_defaults ( self ) : NEW_LINE INDENT defaults = self . defaults NEW_LINE if defaults : NEW_LINE INDENT return defaults NEW_LINE DEDENT else : NEW_LINE INDENT return { } NEW_LINE DEDENT DEDENT
get_defaults ( self ) : NEW_LINE INDENT return self . defaults NEW_LINE DEDENT
removePropertyListener ( self , listener ) : NEW_LINE INDENT if not listener : NEW_LINE INDENT return NEW_LINE DEDENT listener . removePropertyListener ( self ) NEW_LINE listener . removePropertyListener ( self ) NEW_LINE DEDENT
fire_property_added_event ( self , event ) : NEW_LINE INDENT if isinstance ( event , property_added_event ) : NEW_LINE INDENT return event NEW_LINE DEDENT elif isinstance ( event , property_added_event ) : NEW_LINE INDENT return event NEW_LINE DEDENT DEDENT
fire_property_removed ( self ) : NEW_LINE INDENT if self . property_removed : NEW_LINE INDENT self . property_removed = True NEW_LINE DEDENT else : NEW_LINE INDENT self . property_removed = False NEW_LINE DEDENT DEDENT
void firePropertyChangedEvent ( PropertyChangedEvent event ) { if ( event . getPropertyName ( ) == null ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } }
void firePropertyChangedEvent ( PropertyChangedEvent event ) { if ( event . getPropertyName ( ) == null ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } if ( event . getPropertyName ( ) . equals ( propertyChangedEvent . getPropertyName ( ) ) ) { return ; } }
def def def _get_optionaly_ prefixed_property_name ( self , name ) : NEW_LINE INDENT return self . _get_optionaly_prefix ( name ) NEW_LINE DEDENT def _get_optionaly_prefix ( self , name ) : NEW_LINE INDENT return self . _get_optionaly_prefix ( name ) NEW_LINE DEDENT
loadProperties ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . properties = self . properties . load ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . properties = self . properties . load ( ) NEW_LINE DEDENT DEDENT
static PropertyReader loadProperties ( Class < ? > clazz ) throws IOException { PropertyReader reader = new PropertyReader ( clazz ) ; reader . loadProperties ( ) ; return reader ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
inform_id_dtd ( self ) : NEW_LINE INDENT if not self . _dtd : NEW_LINE INDENT return False NEW_LINE DEDENT if self . _dtd : NEW_LINE INDENT self . _dtd = self . _dtd NEW_LINE DEDENT return self . _dtd NEW_LINE DEDENT
static URL getSystemId ( String systemId ) { if ( systemId == null ) { throw new IllegalArgumentException ( " systemId is null . " ) ; } if ( systemId . equals ( " " ) ) { throw new IllegalArgumentException ( " systemId is null . " ) ; } if ( systemId . equals ( " " ) ) { throw new IllegalArgumentException ( " systemId is null . " ) ; } return new URL ( systemId ) ; }
URL getSystemId ( String systemId ) { if ( systemId == null ) { throw new IllegalArgumentException ( " systemId is null " ) ; } if ( systemId . length ( ) == 0 ) { throw new IllegalArgumentException ( " systemId is null " ) ; } if ( systemId . length ( ) == 0 ) { throw new IllegalArgumentException ( " systemId is null " ) ; } return systemId ; }
resolve ( self , systemId ) : NEW_LINE INDENT if not systemId : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT if isinstance ( systemId , str ) : NEW_LINE INDENT return systemId NEW_LINE DEDENT return systemId NEW_LINE DEDENT
Element create ( Element element ) { if ( element == null ) { throw new IllegalArgumentException ( " Element cannot be null . " ) ; } if ( element instanceof Element ) { return ( Element ) element ; } return null ; }
normalize_identifier ( identifier ) : NEW_LINE INDENT try : NEW_LINE INDENT return identifier NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return identifier NEW_LINE DEDENT DEDENT
void encode ( String identifier ) { if ( identifier == null ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } if ( identifier . length ( ) == 0 ) { return ; } }
decode ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _decoder . decode ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
static String replace ( String s , String s1 , String s2 ) { return replace ( s , s1 , s2 ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
stop_watch ( self ) : NEW_LINE INDENT if self . is_watching ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_watching ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT if self . is_watching ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
stopwatch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _stopwatch NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
compare_object ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
static byte [ ] hash ( byte [ ] array ) { byte [ ] hash = new byte [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { hash [ i ] = array [ i ] ; } return hash ; }
generate_hash_code ( self ) : NEW_LINE INDENT hash_code = hashlib . md5 ( ) . hexdigest ( ) NEW_LINE if not hash_code : NEW_LINE INDENT return hash_code NEW_LINE DEDENT return hash_code NEW_LINE DEDENT
init ( self , cache ) : NEW_LINE INDENT self . cache = cache NEW_LINE self . cache . clear ( ) NEW_LINE DEDENT
set_field_value ( self , field , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . integer_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . integer_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . integer_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . integer_types ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT return NEW_LINE
next_token ( self ) : NEW_LINE INDENT token = self . token NEW_LINE if token is not None : NEW_LINE INDENT return token NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static void setLocale ( Locale locale ) { if ( locale == null ) { locale = Locale . getDefault ( ) ; } if ( locale . equals ( Locale . getDefault ( ) ) ) { Locale . setDefault ( locale ) ; } }
add_vertex_to_graph ( graph , vertex_id ) : NEW_LINE INDENT if vertex_id is None : NEW_LINE INDENT vertex_id = graph . add_vertex_to_graph ( graph , vertex_id ) NEW_LINE DEDENT return vertex_id NEW_LINE DEDENT
set_root_vertex ( self , vertex ) : NEW_LINE INDENT if vertex is None : NEW_LINE INDENT return NEW_LINE DEDENT root_vertex = vertex NEW_LINE if root_vertex is None : NEW_LINE INDENT return NEW_LINE DEDENT if root_vertex is None : NEW_LINE INDENT return NEW_LINE DEDENT root_vertex . set_root_vertex ( vertex ) NEW_LINE DEDENT
remove_vertex_from_graph ( graph ) : NEW_LINE INDENT try : NEW_LINE INDENT return graph . remove_vertex_from_graph ( graph ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
depthFirstSerach ( self ) : NEW_LINE INDENT if self . depth == 0 : NEW_LINE INDENT self . depth = 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . depth = self . depth - 1 NEW_LINE DEDENT return self NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
search ( self , graph ) : NEW_LINE INDENT if self . depth == 0 : NEW_LINE INDENT self . depth = 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . depth = self . depth NEW_LINE DEDENT return self NEW_LINE DEDENT
normalize_string ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
parse_xml_string ( self , xml_string ) : NEW_LINE INDENT try : NEW_LINE INDENT root = etree . fromstring ( xml_string ) NEW_LINE DEDENT except etree . XMLSyntaxError : NEW_LINE INDENT root = etree . fromstring ( xml_string ) NEW_LINE DEDENT return root NEW_LINE DEDENT
parse_xml ( self , stream ) : NEW_LINE INDENT root = etree . fromstring ( stream ) NEW_LINE if root is None : NEW_LINE INDENT return None NEW_LINE DEDENT return root NEW_LINE DEDENT
parse_input_source ( self , input_source ) : NEW_LINE INDENT if isinstance ( input_source , str ) : NEW_LINE INDENT return parse_input_source ( input_source ) NEW_LINE DEDENT else : NEW_LINE INDENT return parse_input_source ( input_source ) NEW_LINE DEDENT DEDENT
create_element ( self , name ) : NEW_LINE INDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE return name NEW_LINE DEDENT

copy_attributes ( self , attributes ) : NEW_LINE INDENT if attributes is None : NEW_LINE INDENT return None NEW_LINE DEDENT if attributes is not None : NEW_LINE INDENT return attributes . copy ( ) NEW_LINE DEDENT return None NEW_LINE DEDENT
node_has_child ( self , node ) : NEW_LINE INDENT if isinstance ( node , Node ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( node , Node ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_child_elements ( self ) : NEW_LINE INDENT children = [ ] NEW_LINE for child in self . children : NEW_LINE INDENT children . append ( child ) NEW_LINE DEDENT for child in children : NEW_LINE INDENT children . append ( child ) NEW_LINE DEDENT return children NEW_LINE DEDENT
get_text_content ( self , text ) : NEW_LINE INDENT if text is None : NEW_LINE INDENT return None NEW_LINE DEDENT text = text . strip ( ) NEW_LINE if not text : NEW_LINE INDENT return None NEW_LINE DEDENT return text NEW_LINE DEDENT
get_child_elements_for_local_name ( self , local_name ) : NEW_LINE INDENT if local_name is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT children = self . _get_child_elements_for_local_name ( local_name ) NEW_LINE if children is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return children NEW_LINE DEDENT
get_parent_element ( self ) : NEW_LINE INDENT if self . parent_element is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . parent_element NEW_LINE DEDENT
add_transaction ( self , lock ) : NEW_LINE INDENT self . lock . add ( lock ) NEW_LINE self . lock . commit ( ) NEW_LINE DEDENT
read_catalog ( self , input_stream ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_catalog ( input_stream ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def read_catalog ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _catalog . get_catalog ( url ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def get_host_internet_address ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . host_internet_address NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . host_internet_address NEW_LINE DEDENT DEDENT


static String formatClass ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isInterface ( ) ) { return clazz . getName ( ) ; } if ( clazz . isPrimitive ( ) ) { return clazz . getName ( ) ; } if ( clazz . isPrimitive ( ) ) { return clazz . getName ( ) ; } return clazz . getName ( ) ; }
def def describe_class ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . __class__ NEW_LINE DEDENT DEDENT
get_short_name ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _short_name NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _short_name NEW_LINE DEDENT DEDENT
static String getPackageName ( Class < ? > clazz ) { String packageName = clazz . getPackage ( ) . getName ( ) ; if ( packageName == null ) { packageName = " " ; } return packageName ; }
load_class ( cls ) : NEW_LINE INDENT if not cls : NEW_LINE INDENT raise ValueError ( " Class not found . " ) NEW_LINE DEDENT return cls NEW_LINE DEDENT
get_wrapper_class ( cls , primitive_type ) : NEW_LINE INDENT if primitive_type . isPrimitive ( ) : NEW_LINE INDENT return cls NEW_LINE DEDENT else : NEW_LINE INDENT return cls NEW_LINE DEDENT DEDENT
static List < Class < ? > > getAllInterfaces ( Class < ? > c ) { List < Class < ? > > list = new ArrayList < Class < ? > > ( ) ; for ( Class < ? > interface : c . getInterfaces ( ) ) { if ( interface . isInterface ( ) ) { list . add ( interface ) ; } } return list ; }
static String [ ] getAllInterfaces ( Class < ? > c ) { if ( c . isInterface ( ) ) { return new String [ ] { c . getName ( ) } ; } else { return new String [ ] { c . getName ( ) } ; } }
static boolean isPrimitiveWrapper ( Class < ? > class ) { if ( isPrimitiveWrapper ( class ) ) { return true ; } return false ; }
_instantiate_java_class ( cls ) : NEW_LINE INDENT return cls . _instantiate_java_class ( ) NEW_LINE DEDENT
getter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , ' _ getter ' ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
setter ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return getattr ( self , method ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
a given String into the appropriate Class . public static String convert ( String str ) { if ( str == null ) { return null ; } return str . trim ( ) ; }
get_system_property ( self ) : NEW_LINE INDENT return self . _system_property NEW_LINE DEDENT
load_filenames ( filenames ) : NEW_LINE INDENT filenames = [ ] NEW_LINE for filename in filenames : NEW_LINE INDENT try : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT return filenames NEW_LINE DEDENT
_remove_elements_from_set ( self , set ) : NEW_LINE INDENT self . _remove_elements_from_set ( set ) NEW_LINE DEDENT
iterate ( self , elements ) : NEW_LINE INDENT if len ( elements ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( elements ) == 1 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif len ( elements ) == 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_entry_set ( self , group ) : NEW_LINE INDENT entry_set = { } NEW_LINE for key in self . properties : NEW_LINE INDENT entry_set [ key ] = self . properties [ key ] NEW_LINE DEDENT return entry_set NEW_LINE DEDENT

remove_bound_property_listener ( self ) : NEW_LINE INDENT if self . bound_property_listener is not None : NEW_LINE INDENT self . bound_property_listener . remove ( self . bound_property_listener ) NEW_LINE DEDENT DEDENT
static String convert ( String value ) { if ( value == null ) { return null ; } if ( value . length ( ) == 0 ) { return " " ; } return value ; }
def def get_value_editor ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_value_editor ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

boolean convertTypeName ( String typeName ) { if ( typeName == null ) { return false ; } if ( typeName . length ( ) == 0 ) { return true ; } if ( typeName . length ( ) == 1 ) { return true ; } if ( typeName . length ( ) == 2 ) { return true ; } if ( typeName . length ( ) == 3 ) { return true ; } return false ; }
get_context_ classloader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . context . classloader NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static boolean isApplicationDeadlockException ( ApplicationDeadlockException exception ) { if ( exception instanceof ApplicationDeadlockException ) { return ( ( ApplicationDeadlockException ) exception ) . isApplicationDeadlock ( ) ; } return false ; }
def def schedule ( self , timeout ) : NEW_LINE INDENT self . timeout = timeout NEW_LINE self . timeout = timeout NEW_LINE return self . timeout NEW_LINE DEDENT
worker ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _worker ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def _get_default_initial_context ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . initial_context NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . initial_context NEW_LINE DEDENT DEDENT
static boolean implements ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } if ( clazz . isInterface ( ) ) { return true ; } return false ; }
append_class_info ( cls , class_info ) : NEW_LINE INDENT try : NEW_LINE INDENT return cls . append_class_info ( class_info ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

loadProperties ( propertyFile ) : NEW_LINE INDENT properties = { } NEW_LINE try : NEW_LINE INDENT properties . load ( propertyFile ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return properties NEW_LINE DEDENT
def _get_verbosity ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _verbosity NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _verbosity NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_catalog_files ( self , properties ) : NEW_LINE INDENT catalog_files = [ ] NEW_LINE for file in properties : NEW_LINE INDENT catalog_files . append ( file ) NEW_LINE DEDENT return catalog_files NEW_LINE DEDENT
get_catalog_files ( self ) : NEW_LINE INDENT catalog_files = [ ] NEW_LINE for catalog_file in self . catalog_files : NEW_LINE INDENT catalog_files . append ( catalog_file ) NEW_LINE DEDENT return catalog_files NEW_LINE DEDENT
void setPreferPublic ( boolean preferPublic ) { if ( preferPublic ) { this . preferPublic = preferPublic ; } else { this . preferPublic = false ; } }
static void setStaticCatalog ( Properties properties ) { if ( properties . containsKey ( " static - catalog " ) ) { return ; } if ( properties . containsKey ( " static - catalog " ) ) { return ; } if ( properties . containsKey ( " static - catalog " ) ) { return ; } if ( properties . containsKey ( " static - catalog " ) ) { return ; } if ( properties . containsKey ( " static - catalog " ) ) { return ; } if ( properties . containsKey ( " static - catalog " ) ) { return ; } }
resolveEntity ( self , entity ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _resolveEntity ( entity ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
resolve_api ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _resolve_api ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _resolve_api ( ) NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static void invokePropertySetter ( final String propertyName , final Object value ) { if ( value == null ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } if ( value . getClass ( ) . getSimpleName ( ) . equals ( propertyName ) ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } if ( value . getClass ( ) . getSimpleName ( ) . equals ( propertyName ) ) { throw new IllegalArgumentException ( " Value cannot be null . " ) ; } }
localname ( self ) : NEW_LINE INDENT if self . prefix : NEW_LINE INDENT return self . prefix NEW_LINE DEDENT else : NEW_LINE INDENT return self . prefix NEW_LINE DEDENT DEDENT
def def get_namespace_uri ( self ) : NEW_LINE INDENT prefix = self . prefix NEW_LINE if self . prefix : NEW_LINE INDENT prefix = self . prefix NEW_LINE DEDENT else : NEW_LINE INDENT prefix = self . prefix NEW_LINE DEDENT prefix = self . prefix NEW_LINE return prefix NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_input_stream ( filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( filename , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
load_properties ( self , file ) : NEW_LINE INDENT properties = { } NEW_LINE for key , value in self . properties . items ( ) : NEW_LINE INDENT properties [ key ] = value NEW_LINE DEDENT return properties NEW_LINE DEDENT
read_properties_from_filename ( filename ) : NEW_LINE INDENT properties = [ ] NEW_LINE for filename in filename : NEW_LINE INDENT properties . append ( read_properties_from_filename ( filename ) ) NEW_LINE DEDENT return properties NEW_LINE DEDENT
add_edge ( self , vertex , edge ) : NEW_LINE INDENT if edge is None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . from is None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . to is None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . from is not None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . to is not None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . from is not None : NEW_LINE INDENT return NEW_LINE DEDENT if edge . to is not None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

static Vertex getVertex ( int vertex ) { if ( vertex == 0 ) { return null ; } if ( vertex == 1 ) { return null ; } if ( vertex == 2 ) { return null ; } if ( vertex == 3 ) { return null ; } if ( vertex == 4 ) { return null ; } if ( vertex == 5 ) { return null ; } if ( vertex == 6 ) { return null ; } return vertex ; }
remove_edge_from_vertex ( self , vertex ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _remove_edge_from_vertex ( vertex ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def search_outgoing_edges ( self , s , dest ) : NEW_LINE INDENT return self . _search_outgoing_edges ( s , dest ) NEW_LINE return self . _search_outgoing_edges ( s , dest ) NEW_LINE DEDENT
search_outgoing_edges ( self ) : NEW_LINE INDENT for e in self . outgoing_edges : NEW_LINE INDENT if isinstance ( e , Edge ) : NEW_LINE INDENT return e NEW_LINE DEDENT DEDENT return self . outgoing_edges NEW_LINE DEDENT
cost ( self , vertext , dest ) : NEW_LINE INDENT cost = self . cost ( vertext , dest ) NEW_LINE if cost is not None : NEW_LINE INDENT return cost NEW_LINE DEDENT return 0 NEW_LINE DEDENT
write ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _writer . write ( self ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_elements ( self ) : NEW_LINE INDENT if len ( self . elements ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( self . elements ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( self . elements ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( self . elements ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def def handle ( self , event ) : NEW_LINE INDENT try : NEW_LINE INDENT event = event . event NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError ( " No handler method found . " ) NEW_LINE DEDENT return event NEW_LINE DEDENT
static JvmTypeProvider getInstance ( ) { return new JvmTypeProvider ( ) ; }
def version ( self ) : NEW_LINE INDENT version = self . _version NEW_LINE version = self . _version NEW_LINE version = self . _version NEW_LINE return version NEW_LINE DEDENT
dispatch ( self , action ) : NEW_LINE INDENT if not self . thread . isAlive ( ) : NEW_LINE INDENT self . thread . interrupt ( ) NEW_LINE self . thread . join ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . thread . interrupt ( ) NEW_LINE self . thread . join ( ) NEW_LINE DEDENT DEDENT
def def get_filtered_event_stream ( self ) : NEW_LINE INDENT return self . _get_filtered_event_stream ( ) NEW_LINE DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def def def def def def def def def public public public public public public static public static public static final public static final public static final public static final void add
def def public public public static final void add ( final String name , final String name , final String name ) { if ( name != null ) { if ( name == null ) { throw new IllegalArgumentException ( name ) ; public static final String toString ( ) { throw new IllegalArgumentException ( name ) ; public String toString ( ) { throw new IllegalArgumentException ( name ) ; } public String toString ( ) { throw new IllegalArgumentException ( name ) ; } } } } }
def def page_settings ( self ) : NEW_LINE INDENT return self . _page_settings . get ( ' page _ settings ' ) NEW_LINE DEDENT
def def verify_command ( self , generated_command ) : NEW_LINE INDENT if not os . path . exists ( generated_command ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not os . path . exists ( generated_command ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
simple_default ( self ) : NEW_LINE INDENT if self . _simple_default is not None : NEW_LINE INDENT return self . _simple_default NEW_LINE DEDENT if self . _simple_default is not None : NEW_LINE INDENT return self . _simple_default NEW_LINE DEDENT DEDENT
def def write ( self , file ) : NEW_LINE INDENT if not isinstance ( file , str ) : NEW_LINE INDENT raise TypeError ( " file is not a string " ) NEW_LINE DEDENT if not isinstance ( file , str ) : NEW_LINE INDENT raise TypeError ( " file is not a string " ) NEW_LINE DEDENT if not isinstance ( file , str ) : NEW_LINE INDENT raise TypeError ( " file is not a string " ) NEW_LINE DEDENT DEDENT
def def degree ( self ) : NEW_LINE INDENT return self . degree ( ) NEW_LINE DEDENT
static Map < String , String > map ( Map < String , String > map ) { if ( map == null ) { throw new NullPointerException ( " map is null " ) ; } return map ; }
load_words ( self ) : NEW_LINE INDENT words = [ ] NEW_LINE for word in self . words : NEW_LINE INDENT words . append ( word ) NEW_LINE DEDENT return words NEW_LINE DEDENT
check_datasource_connection ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT datasource = self . _datasource NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return False NEW_LINE DEDENT if datasource is None : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def complete ( self ) : NEW_LINE INDENT if self . is_complete ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def complete ( self ) : NEW_LINE INDENT if self . is_complete ( ) : NEW_LINE INDENT return self NEW_LINE DEDENT return self NEW_LINE DEDENT
complete ( self ) : NEW_LINE INDENT if self . _complete : NEW_LINE INDENT self . _complete = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _complete = False NEW_LINE DEDENT return self NEW_LINE DEDENT
complete_collection ( self ) : NEW_LINE INDENT if self . _complete : NEW_LINE INDENT return self . _complete NEW_LINE DEDENT else : NEW_LINE INDENT return self . _complete NEW_LINE DEDENT DEDENT
add_generic_checks ( self , generics ) : NEW_LINE INDENT if not generics : NEW_LINE INDENT return NEW_LINE DEDENT generics_checks = [ ] NEW_LINE for item in generics : NEW_LINE INDENT generics_checks . append ( item ) NEW_LINE DEDENT return generics_checks NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
eithers_right ( eithers ) : NEW_LINE INDENT eithers = eithers . copy ( ) NEW_LINE eithers . clear ( ) NEW_LINE eithers . add ( eithers ) NEW_LINE return eithers NEW_LINE DEDENT
validate_failures ( self ) : NEW_LINE INDENT failures = [ ] NEW_LINE for failure in self . failures : NEW_LINE INDENT failures . append ( failure ) NEW_LINE DEDENT for failure in failures : NEW_LINE INDENT failures . append ( failure ) NEW_LINE DEDENT return failures NEW_LINE DEDENT
successful ( self ) : NEW_LINE INDENT if not self . is_valid ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif self . is_valid ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif self . is_valid ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def successful ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _successful ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _failed ( ) NEW_LINE DEDENT DEDENT
execute_sql ( self , sql ) : NEW_LINE INDENT self . execute_sql ( sql ) NEW_LINE self . execute_sql ( sql ) NEW_LINE DEDENT
udpates ( self ) : NEW_LINE INDENT return self . udpates ( ) NEW_LINE DEDENT
def def def result ( self , result ) : NEW_LINE INDENT result = self . result NEW_LINE if result is not None : NEW_LINE INDENT return result NEW_LINE DEDENT def get_result ( self ) : NEW_LINE INDENT return self . result NEW_LINE DEDENT return result NEW_LINE DEDENT
static boolean isBool ( int value ) { if ( value == 0 ) return true ; if ( value == 1 ) return false ; if ( value == 2 ) return true ; if ( value == 3 ) return true ; if ( value == 4 ) return true ; if ( value == 5 ) return true ; if ( value == 6 ) return true ; if ( value == 7 ) return true ; if ( value == 8 ) return true ; return false ; }
get_defaults ( self ) : NEW_LINE INDENT return self . _get_defaults ( ) NEW_LINE DEDENT
public void add ( Entity entity ) throws SQLException { if ( entity == null ) { throw new SQLException ( ) ; } else { throw new SQLException ( ) ; } } }
def def back def def def back def def _ _ _get_table ( self ) : def _get_table ( self ) : def _get_table ( self ) : NEW_LINE INDENT return self . _get_table ( ) NEW_LINE DEDENT def _get_table ( self ) : NEW_LINE INDENT return self . _get_table ( ) NEW_LINE DEDENT
restores ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _restores ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _restores ( ) NEW_LINE DEDENT return self . _restores ( ) NEW_LINE DEDENT
static TextView makeText ( Context context , String text ) { TextView textView = new TextView ( context ) ; textView . setText ( text ) ; return textView ; }
dump_table ( self , table ) : NEW_LINE INDENT if isinstance ( table , Database . Table ) : NEW_LINE INDENT table . dump_table ( ) NEW_LINE DEDENT else : NEW_LINE INDENT table . dump_table ( ) NEW_LINE DEDENT DEDENT
unescape_quotes ( self , quotes ) : NEW_LINE INDENT quotes = [ ] NEW_LINE for quote in quotes : NEW_LINE INDENT quotes . append ( quote ) NEW_LINE DEDENT return quotes NEW_LINE DEDENT
get_values ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _values NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _values NEW_LINE DEDENT DEDENT
parse_row ( self , row ) : NEW_LINE INDENT if isinstance ( row , dict ) : NEW_LINE INDENT return row NEW_LINE DEDENT elif isinstance ( row , list ) : NEW_LINE INDENT return row NEW_LINE DEDENT elif isinstance ( row , tuple ) : NEW_LINE INDENT return row NEW_LINE DEDENT else : NEW_LINE INDENT return row NEW_LINE DEDENT DEDENT
def get_value_pairs ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . map . get ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . map . get ( name ) NEW_LINE DEDENT DEDENT

static String join ( String text , String separator ) { if ( separator == null ) { separator = " , " ; } return separator . join ( text . split ( separator ) ) ; }
the model of a database and its associated tables from a file in support of incremental compilation .
write_database_info ( self ) : NEW_LINE INDENT self . write_database_info ( ) NEW_LINE self . write_database ( ) NEW_LINE DEDENT
def
BaseDaoModel get ( Class < ? extends BaseDaoModel > baseDaoClass ) { if ( baseDaoClass == null ) { throw new IllegalArgumentException ( " baseDaoClass is null " ) ; } return new BaseDaoModel ( baseDaoClass ) ; }

import_database_table ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . import_database_table ( ) NEW_LINE DEDENT except ImportError : NEW_LINE INDENT return self . import_database_table ( ) NEW_LINE DEDENT DEDENT
backup ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT import csv NEW_LINE DEDENT except ImportError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
all tables from CSV files one per table .
def write_current_model_state ( self ) : NEW_LINE INDENT if self . model_state is not None : NEW_LINE INDENT return self . model_state NEW_LINE DEDENT else : NEW_LINE INDENT return self . model_state NEW_LINE DEDENT DEDENT
def def def def get_query_query ( self ) : NEW_LINE INDENT return self . _query ( ) NEW_LINE DEDENT def get_query ( self ) : NEW_LINE INDENT return self . _query ( ) NEW_LINE DEDENT def get_query ( self ) : NEW_LINE INDENT query = self . _query ( ) NEW_LINE return self . _query ( ) NEW_LINE DEDENT
static TypedQuery createTypedQuery ( List < String > parameters ) { TypedQuery query = new TypedQuery ( ) ; query . setParameters ( parameters ) ; return query ; }
def def query ( self , object ) : NEW_LINE INDENT if isinstance ( object , basestring ) : NEW_LINE INDENT return object . toString ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return object . toString ( ) NEW_LINE DEDENT DEDENT
delete_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return NEW_LINE DEDENT rows = self . db . delete ( row ) NEW_LINE if rows : NEW_LINE INDENT self . db . delete ( row ) NEW_LINE self . db . delete ( row ) NEW_LINE DEDENT DEDENT
insert ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT data = { } NEW_LINE DEDENT else : NEW_LINE INDENT data . update ( data ) NEW_LINE DEDENT return data NEW_LINE DEDENT
update_column ( self , entity_id ) : NEW_LINE INDENT if entity_id not in self . columns : NEW_LINE INDENT self . columns [ entity_id ] = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . columns [ entity_id ] = [ ] NEW_LINE DEDENT DEDENT
def def NOT_IN ( self , predicate ) : NEW_LINE INDENT if predicate is not None : NEW_LINE INDENT return predicate NEW_LINE DEDENT elif predicate is not None : NEW_LINE INDENT return predicate NEW_LINE DEDENT else : NEW_LINE INDENT return predicate NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


addBindings ( self , plan , bindings ) : NEW_LINE INDENT if not bindings : NEW_LINE INDENT return NEW_LINE DEDENT bindings . add ( plan ) NEW_LINE bindings . add ( bindings ) NEW_LINE DEDENT
public public public public static void selectPlanInstance ( final Policy policy , final Policy policy ) { if ( policy . getPolicy ( ) != null ) { if ( policy . getPolicy ( ) != null ) { throw new IllegalArgumentException ( ) ; } } }
public public static void select_plan_instance ( ) { if ( plan_instance_set . size ( ) > 0 ) { for ( int i = 0 ; i < plan_instance_set . size ( ) ; i ++ ) { plan_instance = plan_instance_set . get ( i ) ; } } }

get_result_at_index ( self , index ) : NEW_LINE INDENT result = self . results . get ( index ) NEW_LINE if result is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return result NEW_LINE DEDENT DEDENT
get_parents ( self ) : NEW_LINE INDENT parents = [ ] NEW_LINE for parent in self . parents : NEW_LINE INDENT parents . append ( parent ) NEW_LINE DEDENT return parents NEW_LINE DEDENT
get_children ( self , object ) : NEW_LINE INDENT if object is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def _grows ( self , array , size ) : NEW_LINE INDENT if ( array . size ( ) == 0 ) { return array . size ( ) NEW_LINE DEDENT


get_goals ( self ) : NEW_LINE INDENT goals = [ ] NEW_LINE for goal in self . goals : NEW_LINE INDENT goals . append ( goal ) NEW_LINE DEDENT return goals NEW_LINE DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def def def def start__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def def def def start__python____python____python____python____python____python____python__ def def def def def def def start__python____python____python____python____python__ def def def def def def ___python____python____python____python__ def def def def def start__python____python____python____python____python____python__ def def def def def def start__python____python____python____python____python____python____python__ def def def def def def start__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def def start__python____python____python____python____python____python____python____python__ def def def def def start__python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def _
def def start def start ( self ) : NEW def start ( self ) : NEW_LINE INDENT self . start ( ) NEW_LINE DEDENT def start ( self ) : NEW_LINE INDENT self . start ( ) NEW_LINE DEDENT
def def def _ public public void set_selection_selection_thread_thread_selection_thread ( ) : NEW_LINE INDENT for ( int i in range def def def def def def def def _ def def def def def def _ def def def def _ def def def def _ public void set_selection def def def _ def def def def def _ def _ public void set_selection def _set def _set def _set def _get_selection ( self ) :
static JillExtension newJillExtension ( ) { JillExtension extension = new JillExtension ( ) ; extension . init ( ) ; return extension ; }
def reset ( self ) : NEW_LINE INDENT self . _state = { } NEW_LINE self . _state . update ( ) NEW_LINE DEDENT
addAgents ( self ) : NEW_LINE INDENT agents = self . agents NEW_LINE if agents is None : NEW_LINE INDENT agents = self . agents NEW_LINE DEDENT return agents NEW_LINE DEDENT
load_plan_classes ( self ) : NEW_LINE INDENT plan_classes = [ ] NEW_LINE for plan_class in self . plan_classes : NEW_LINE INDENT plan_classes . append ( plan_class ) NEW_LINE DEDENT return plan_classes NEW_LINE DEDENT
static int numberOfAgentInstances ( Class < ? > type ) { int numberOfAgentInstances = 0 ; for ( Class < ? > type : type . getEnumConstants ( ) ) { numberOfAgentInstances ++ ; } return numberOfAgentInstances ; }

load_extension ( self ) : NEW_LINE INDENT if self . extension is not None : NEW_LINE INDENT return self . extension NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
boolean check ( String name ) { if ( name == null ) { return false ; } if ( name . length ( ) == 0 ) { return true ; } if ( name . length ( ) == 1 ) { return true ; } if ( name . length ( ) == 2 ) { return true ; } return false ; }
usage_string ( self ) : NEW_LINE INDENT usage_string = " Usage : % s % s " % ( self . name , self . args ) NEW_LINE usage_string += " % s % s " % ( self . name , self . args ) NEW_LINE return usage_string NEW_LINE DEDENT
parse_command_line_arguments ( self ) : NEW_LINE INDENT args = [ ] NEW_LINE for arg in self . args : NEW_LINE INDENT args . append ( arg ) NEW_LINE DEDENT return args NEW_LINE DEDENT
def parse ( self ) : NEW_LINE INDENT return self . _parse_command_line_argument ( ) NEW_LINE DEDENT
Evaluates the given query on the given belief base for the given query on the given belief base for the given belief base for the agent .
get_object_at_index ( self , index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _catalog . get_object_at_index ( index ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT


get_object_at_index ( self , index ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _catalog . get_object_at_index ( index ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
push ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT object . append ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT object . append ( object ) NEW_LINE DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
boolean matches ( String query ) { if ( query == null ) { return false ; } if ( query . length ( ) == 0 ) { return false ; } return true ; }
test_pattern_matching ( self ) : NEW_LINE INDENT def test_pattern_matching ( self , pattern ) : NEW_LINE INDENT self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW_LINE self . assertIsNotNone ( pattern ) NEW
static byte [ ] encode ( String str ) { byte [ ] result = new byte [ str . length ( ) ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { result [ i ] = str . charAt ( i ) ; } return result ; }
push_goal ( self , goal , stack ) : NEW_LINE INDENT if not stack : NEW_LINE INDENT return NEW_LINE DEDENT stack . push_goal ( goal ) NEW_LINE DEDENT
send_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . agent . send_message ( message ) NEW_LINE DEDENT except : NEW_LINE INDENT self . agent . send_message ( message ) NEW_LINE DEDENT DEDENT
send_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . agent . send_message ( message ) NEW_LINE DEDENT except : NEW_LINE INDENT self . agent . send_message ( message ) NEW_LINE DEDENT DEDENT
top_level_goals ( self ) : NEW_LINE INDENT return self . _top_level_goals NEW_LINE DEDENT
create ( self , fields ) : NEW_LINE INDENT belief_set = self . belief_set . copy ( ) NEW_LINE belief_set . clear ( ) NEW_LINE belief_set . add ( fields ) NEW_LINE return belief_set NEW_LINE DEDENT
add_new_ belief ( self , belief ) : NEW_LINE INDENT belief_set = self . belief_set NEW_LINE belief_set . add ( belief ) NEW_LINE belief_set . add ( belief ) NEW_LINE return belief_set NEW_LINE DEDENT
Evaluates the given query against this agent s belief base query against this agent s belief base query against this agent s belief base . agent . belief_base . query ( ) ; return this . _evaluator . query ( ) ; }
def def enter def def _ public public public public void enter ( ) { public void enterIdleIdleState ( ) { if ( ! agent . isIdle ( ) ) { if ( ! agent . isIdle ( ) ) { return ; } public void enterIdle ( ) { if ( ! agent . isIdle ( ) ) { return ; } if ( ! agent . isIdle ( ) && ! agent . isIdle ( ) ) { return ; } if ( ! agent . isIdle ( ) && ! agent . isIdle ( ) ) { return ; } if ( ! agent . isIdle ( ) && ! agent . isIdle ( ) && ! agent . isIdle ( ) ) { return ; } } } } }
get_field_by_name ( self , name ) : NEW_LINE INDENT return self . _get_field_by_name ( name ) NEW_LINE DEDENT
add_beliefs ( self , neighbours ) : NEW_LINE INDENT return self . add_beliefs ( neighbours ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

validate_stack ( self , stack ) : NEW_LINE INDENT if not isinstance ( stack , list ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not isinstance ( stack , list ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
remove_active_agents ( self , agents ) : NEW_LINE INDENT if len ( agents ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( agents ) == 1 : NEW_LINE INDENT return

def def def def def def public public public public public public void terminate
def def iterate_active_agents ( self ) : NEW_LINE INDENT while True : NEW_LINE INDENT try : NEW_LINE INDENT if self . _active_agents is not None : NEW_LINE INDENT self . _active_agents = self . _active_agents . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _active_agents = [ ] NEW_LINE self . _active_agents . extend ( self . _active_agents ) NEW_LINE self . _active_agents . extend ( self . _active_agents ) NEW_LINE self . _active_agents . extend ( self . _active_agents ) NEW_LINE self . _active_agents . extend ( self . _active_agents ) NEW_LINE self . _active_agents . extend ( self . _active_agents ) NEW_LINE self . _active_agents . extend ( self . _active_agents )
move ( self , pinA , pinB ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _move ( pinA , pinB ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def init ( self ) : NEW__python__ def def def def def def def def def def def def def def def def def def def def def def def
execute ( self , plans ) : NEW_LINE INDENT if len ( plans ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( plans ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT
public public public static Termiantes the Jill engine ( ) { return new Termiantes . Termiantes ( ) ; }
check_idle ( self ) : NEW_LINE INDENT if self . is_idle ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get_id ( self , agent ) : NEW_LINE INDENT return self . _get_id_from_agent ( agent ) NEW_LINE DEDENT
def get_expression ( self ) : NEW_LINE INDENT expression = self . context . get ( ' expression ' ) NEW_LINE if expression is None : NEW_LINE INDENT return None NEW_LINE DEDENT return expression NEW_LINE DEDENT
def def def setExpression ( self , expression ) : NEW_LINE INDENT if not self . is_active ( expression ) : NEW_LINE INDENT return NEW_LINE DEDENT def setExpression ( self , expression ) : NEW_LINE INDENT if not self . is_active ( expression ) : NEW_LINE INDENT return False NEW_LINE DEDENT if self . is_active ( expression ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def def create_join ( self ) : NEW_LINE INDENT join = self . get_join ( ) NEW_LINE if join is not None : NEW_LINE INDENT return join NEW_LINE DEDENT else : NEW_LINE INDENT return join NEW_LINE DEDENT DEDENT
join ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT path = path [ len ( " / " ) : ] NEW_LINE DEDENT return self . join ( path ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


handle ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . execute ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . error ( " Unable to handle request for % s " , e ) NEW_LINE raise e NEW_LINE DEDENT DEDENT
def test_content_type_parameters ( self ) : NEW_LINE INDENT content_type = self . content_type_parameters . get ( " content _ type " ) NEW_LINE if content_type == null : NEW_LINE INDENT return NEW_LINE DEDENT return content_type NEW_LINE DEDENT
get_parameter_value ( self , parameter_name ) : NEW_LINE INDENT if not parameter_name : NEW_LINE INDENT return None NEW_LINE DEDENT value = self . _get_parameter_value ( parameter_name ) NEW_LINE if value : NEW_LINE INDENT return value NEW_LINE DEDENT return None NEW_LINE DEDENT
parse_content_type_parameters ( self ) : NEW_LINE INDENT return self . _parse_content_type_parameters ( ) NEW_LINE DEDENT

create_target_file ( self , artifact_type , filename ) : NEW_LINE INDENT target_file = self . create_target_file ( artifact_type , filename ) NEW_LINE if target_file : NEW_LINE INDENT return target_file NEW_LINE DEDENT return target_file NEW_LINE DEDENT
write ( self , artifact ) : NEW_LINE INDENT self . _write ( artifact ) NEW_LINE self . _write ( ) NEW_LINE DEDENT
static < T > List < T > getInstanceFields ( Class < T > clazz ) { List < T > instanceFields = new ArrayList < T > ( ) ; instanceFields . add ( clazz . newInstance ( ) ) ; return instanceFields ; }
Constructor < T > getConstructor ( Class < T > clazz ) { Constructor < T > constructor = clazz . getConstructor ( ) ; if ( constructor == null ) { throw new IllegalArgumentException ( " Constructor is missing . " ) ; } if ( constructor . getDeclaringClass ( ) == clazz ) { throw new IllegalArgumentException ( " Constructor is missing . " ) ; } return constructor ; }
static String toString ( Class < ? > managedClass ) { if ( managedClass != null ) { return managedClass . toString ( ) ; } else { return " " ; } }
static Method getMethod ( Class < ? > declaringClass , Class < ? > interface ) { Method method = null ; if ( declaringClass . isInterface ( ) ) { method = declaringClass . getMethod ( interface . getName ( ) ) ; } else { method = declaringClass . getMethod ( interface . getName ( ) ) ; } if ( method == null ) { method = declaringClass . getMethod ( interface . getName ( ) ) ; } return method ; }
get_field_class ( self , field ) : NEW_LINE INDENT if isinstance ( field , list ) : NEW_LINE INDENT return field NEW_LINE DEDENT elif isinstance ( field , tuple ) : NEW_LINE INDENT return field NEW_LINE DEDENT else : NEW_LINE INDENT return field NEW_LINE DEDENT DEDENT

void delete ( ) throws IOException { if ( targetFile . exists ( ) ) { targetFile . delete ( ) ; } else { targetFile . delete ( ) ; } }
def def register_links ( self , relation_type ) : NEW_LINE INDENT if not self . _links : NEW_LINE INDENT self . _links = [ ] NEW_LINE self . _links = [ ] NEW_LINE DEDENT DEDENT
def def default_link_template ( self , relation_type ) : NEW_LINE INDENT template = self . _get_default_link_template ( relation_type ) NEW_LINE if not template : NEW_LINE INDENT return None NEW_LINE DEDENT return template NEW_LINE DEDENT
_handle_links ( self , links ) : NEW_LINE INDENT if isinstance ( links , list ) : NEW_LINE INDENT return links NEW_LINE DEDENT elif isinstance ( links , tuple ) : NEW_LINE INDENT return links NEW_LINE DEDENT elif isinstance ( links , tuple ) : NEW_LINE INDENT return links NEW_LINE DEDENT return links NEW_LINE DEDENT
def def def def def def _handle__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def def def def _ _handle__python____python____python____python____python____python____python__ def def def def def def def def def def _handle__python____python____python____python____python____python__ def def def def def def def def _handle def _get_links def _get_links def _get_links def _get_links def _get_links ( self ) : NEW_LINE def _get_links ( self ) : NEW_LINE def _get_links ( self ) : NEW_LINE def _get_links ( self ) : NEW_LINE__python__
_handle_links ( self , response ) : NEW_LINE INDENT if isinstance ( response , dict ) : NEW_LINE INDENT return response NEW_LINE DEDENT elif isinstance ( response , list ) : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
parse_link_info ( self , link_info ) : NEW_LINE INDENT if link_info is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( link_info , dict ) : NEW_LINE INDENT return link_info NEW_LINE DEDENT if isinstance ( link_info , dict ) : NEW_LINE INDENT return link_info NEW_LINE DEDENT return link_info NEW_LINE DEDENT
add ( self , key , value ) : NEW_LINE INDENT if not self . map . containsKey ( key ) : NEW_LINE INDENT self . map . put ( key , value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . map . get ( key ) NEW_LINE DEDENT DEDENT
def def _handle def _handle def _handle def _handle def _handle__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def def def def def def def def def ___python__ def def def def ___python__ def def def def _ _
static boolean isAllowed ( String method ) { if ( method == null ) { return false ; } if ( method . equals ( " GET " ) ) { return true ; } if ( method . equals ( " POST " ) ) { return true ; } return false ; }
register_instance_post_processors ( self , instance_post_processors ) : NEW_LINE INDENT self . instance_post_processors = instance_post_processors NEW_LINE DEDENT

static void register ( final Processor processor ) { if ( processor . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( " Only a single instance per processor class is allowed . " ) ; } if ( processor . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( " Only a single instance per processor class is allowed . " ) ; } if ( processor . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( " Only a single instance per processor class is allowed . " ) ; } }
static void registerPostProcessor ( Class < ? extends PostProcessor > postProcessor ) { if ( postProcessor == null ) { throw new IllegalArgumentException ( " Post - processor cannot be null . " ) ; } if ( ! postProcessor . isSingleton ( ) ) { throw new IllegalArgumentException ( " Post - processor cannot be registered . " ) ; } postProcessor . registerPostProcessor ( postProcessor ) ; }
get_algorithms ( self ) : NEW_LINE INDENT return [ ] NEW_LINE def get_algorithms ( self ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
add_argument ( template , arguments ) : NEW_LINE INDENT if not isinstance ( arguments , list ) : NEW_LINE INDENT arguments = [ arguments ] NEW_LINE DEDENT if not isinstance ( arguments , list ) : NEW_LINE INDENT arguments = [ arguments ] NEW_LINE DEDENT if not isinstance ( arguments , list ) : NEW_LINE INDENT arguments = [ arguments ] NEW_LINE DEDENT for arg in arguments : NEW_LINE INDENT arguments . append ( arg ) NEW_LINE DEDENT return arguments NEW_LINE DEDENT
get_target_files ( self ) : NEW_LINE INDENT if self . _target_files is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return self . _target_files NEW_LINE DEDENT
marshal ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
initialize_model ( self , model ) : NEW_LINE INDENT self . model = model NEW_LINE DEDENT
check_model_reference ( self , model ) : NEW_LINE INDENT if isinstance ( model , Template ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
create ( self ) : NEW_LINE INDENT return self . _create_instance ( ) NEW_LINE DEDENT
read_xml ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT xml = etree . fromstring ( file ) NEW_LINE return xml NEW_LINE DEDENT except etree . XMLSyntaxError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
public public static String getRequestURIPath ( String path ) { String path = requestURI . getPath ( ) ; if ( path == null ) { return null ; } else if ( path == null ) { return path ; } else { return path ; } } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_scoped_instance_from_string ( cls , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return cls ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return cls ( value ) NEW_LINE DEDENT DEDENT


removeCaptureAppender ( self ) : NEW_LINE INDENT if self . _captureAppender : NEW_LINE INDENT self . _captureAppender . removeCaptureAppender ( ) NEW_LINE self . _captureAppender = None NEW_LINE DEDENT DEDENT
delete_cached_log_entries ( self ) : NEW_LINE INDENT log_entries = [ ] NEW_LINE for entry in self . log_entries : NEW_LINE INDENT log_entries . append ( entry ) NEW_LINE DEDENT return log_entries NEW_LINE DEDENT
read_mixed_body ( self ) : NEW_LINE INDENT return self . _read_mixed_body ( ) NEW_LINE DEDENT
parse_model_files ( self ) : NEW_LINE INDENT model_files = [ ] NEW_LINE for filename in self . model_files : NEW_LINE INDENT model_files . append ( os . path . join ( self . model_dir , filename ) ) NEW_LINE DEDENT return model_files NEW_LINE DEDENT

static List < File > getFiles ( ) { List < File > files = new ArrayList < File > ( ) ; for ( File f : files ) { if ( f . isDirectory ( ) ) { files . add ( f ) ; } } return files ; }
parse_directory ( self , directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT os . makedirs ( directory ) NEW_LINE DEDENT return directory NEW_LINE DEDENT
get_proxies ( self ) : NEW_LINE INDENT proxies = [ ] NEW_LINE for proxy in self . proxies : NEW_LINE INDENT proxies . append ( proxy ) NEW_LINE DEDENT return proxies NEW_LINE DEDENT
def get_all_objects ( self ) : NEW_LINE INDENT return self . objects . values ( ) NEW_LINE DEDENT
def parse ( self , list ) : NEW_LINE INDENT if not list : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( list ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( list ) == 1 : NEW_LINE INDENT return list [ 0 ] NEW_LINE DEDENT DEDENT
list_file_extensions ( self ) : NEW_LINE INDENT if not self . list_file_extensions : NEW_LINE INDENT self . list_file_extensions = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . list_file_extensions = [ ] NEW_LINE DEDENT return self . list_file_extensions NEW_LINE DEDENT
parse ( self , list ) : NEW_LINE INDENT if not list : NEW_LINE INDENT list = [ ] NEW_LINE DEDENT if len ( list ) == 0 : NEW_LINE INDENT list = [ ] NEW_LINE DEDENT elif len ( list ) == 1 : NEW_LINE INDENT list = list [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT list = [ ] NEW_LINE DEDENT return list NEW_LINE DEDENT
def def read_next_row ( self ) : NEW_LINE INDENT row = self . reader . next_row ( ) NEW_LINE if row is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return row NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
set_parameters ( self , params ) : NEW_LINE INDENT if params is None : NEW_LINE INDENT params = { } NEW_LINE DEDENT params . update ( params ) NEW_LINE return params NEW_LINE DEDENT
static Statement createStatement ( ) { try { return new Statement ( ) ; } catch ( SQLException e ) { return new Statement ( ) ; } }
def def def def def create ( self ) : NEW def create_instance_instance_type ( self , value ) : NEW def create_instance_type ( self ) : NEW_LINE def create_instance ( self , value ) : NEW_LINE def create_instance ( self , value ) : NEW_LINE INDENT return self . _instance_type ( value ) NEW_LINE def create_instance ( self , value ) : NEW_LINE INDENT return self . _instance_type ( value ) NEW_LINE DEDENT def create_instance ( self , value ) : NEW_LINE INDENT return self . _instance_type ( value ) NEW_LINE DEDENT return self . _instance_type ( value ) NEW_LINE DEDENT
merge ( self , template , context ) : NEW_LINE INDENT if not os . path . exists ( template ) : NEW_LINE INDENT raise ValueError ( " The template file does not exist . " ) NEW_LINE DEDENT if not os . path . isdir ( template ) : NEW_LINE INDENT raise ValueError ( " The template file does not exist . " ) NEW_LINE DEDENT if not os . path . isdir ( template ) : NEW_LINE INDENT raise ValueError ( " The template file does not exist . " ) NEW_LINE DEDENT if not os . path . isdir ( template ) : NEW_LINE INDENT raise ValueError ( " The template file does not exist . " ) NEW_LINE DEDENT if not os . path . isdir ( template ) : NEW_LINE INDENT raise ValueError ( " The template file does not exist . " ) NEW_LINE DEDENT if not os . path . isdir ( template ) : NEW_LINE INDENT os . makedirs ( template ) NEW_LINE DEDENT
get_model_dir ( self ) : NEW_LINE INDENT model_dir = self . model_dir NEW_LINE if not model_dir : NEW_LINE INDENT return None NEW_LINE DEDENT return model_dir NEW_LINE DEDENT
get_template_directory ( self ) : NEW_LINE INDENT template_directory = self . _get_template_directory ( ) NEW_LINE return template_directory NEW_LINE DEDENT

def def start ( self ) : NEW_LINE INDENT url = self . _get_url ( ) NEW_LINE if url is not None : NEW_LINE INDENT url = self . _get_url ( url ) NEW_LINE DEDENT else : NEW_LINE INDENT url = self . _get_url ( ) NEW_LINE DEDENT return url NEW_LINE DEDENT

print_job ( self ) : NEW_LINE INDENT print_job = self . _get_print_job ( ) NEW_LINE if print_job is None : NEW_LINE INDENT print_job = self . _get_print_job ( ) NEW_LINE DEDENT print_job . print ( ) NEW_LINE print_job . print ( ) NEW_LINE print_job . print ( ) NEW_LINE print_job . print ( ) NEW_LINE print_job . print ( ) NEW_LINE DEDENT
copy ( stream ) : NEW_LINE INDENT if isinstance ( stream , Stream ) : NEW_LINE INDENT return stream . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return stream . copy ( ) NEW_LINE DEDENT DEDENT
static < T > T invoke ( final T instance , final String methodName ) throws Exception { if ( instance != null ) { return instance . invoke ( methodName ) ; } else { return null ; } }

detach_request_context ( self ) : NEW_LINE INDENT if self . request_context is not None : NEW_LINE INDENT return self . request_context . detach_request_context ( ) NEW_LINE DEDENT DEDENT
get_request_cookies ( self ) : NEW_LINE INDENT cookies = { } NEW_LINE for cookie in self . cookies . values ( ) : NEW_LINE INDENT cookies [ cookie . name ] = cookie . value NEW_LINE DEDENT return cookies NEW_LINE DEDENT
def dump def dump ( self ) : NEW_LINE INDENT logger . debug ( " Dumping request context state to error logger " ) NEW_LINE logger . debug ( " Dumping request context state to error logger " ) NEW_LINE DEDENT
invocation meters from application managed classes ( ) : NEW_LINE INDENT meters = [ ] NEW_LINE for meter in meters : NEW_LINE INDENT meters . append ( meter ) NEW_LINE DEDENT return meters NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
remove_prefix ( self , path ) : NEW_LINE INDENT if path . startswith ( self . prefix ) : NEW_LINE INDENT self . prefix = self . prefix NEW_LINE DEDENT else : NEW_LINE INDENT self . prefix = None NEW_LINE DEDENT DEDENT
longest_common_parent_directory_path ( self ) : NEW_LINE INDENT longest_common_parent_directory_path = self . longest_common_parent_directory_path ( ) NEW_LINE return longest_common_parent_directory_path NEW_LINE DEDENT
static String convert ( String path ) { if ( path . startsWith ( " / " ) ) { return path ; } else { return path . substring ( 1 ) ; } }
static String convert ( String path ) { if ( path . startsWith ( " / " ) ) { return path ; } else { return path ; } }
count_directories ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return self . count_directories ( path ) NEW_LINE DEDENT return self . count_directories ( path ) NEW_LINE DEDENT

public public public public static void set_content_type_length ( String content_type , String content_type , String content_type , String content_type , String content_type , String content_length , String language ) { if ( content_type == null || content_type == null || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type == null || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) || content_type . isEmpty ( ) ||
add_template ( self , template ) : NEW_LINE INDENT if not self . template : NEW_LINE INDENT return NEW_LINE DEDENT self . template = template NEW_LINE if not self . template : NEW_LINE INDENT return NEW_LINE DEDENT self . template . append ( template ) NEW_LINE DEDENT
add_templates_to_list ( self , list ) : NEW_LINE INDENT if not list : NEW_LINE INDENT return NEW_LINE DEDENT templates = [ ] NEW_LINE for template in list : NEW_LINE INDENT templates . append ( template ) NEW_LINE DEDENT if not templates : NEW_LINE INDENT return NEW_LINE DEDENT for template in templates : NEW_LINE INDENT templates . append ( template ) NEW_LINE DEDENT return NEW_LINE DEDENT
static void setInitalize ( Object object ) { if ( object == null ) { return ; } if ( object . getClass ( ) . isArray ( ) ) { object . getClass ( ) . isArray ( ) ; } if ( object . getClass ( ) . isArray ( ) ) { object . getClass ( ) . isArray ( ) ; } }
get_models ( self , template ) : NEW_LINE INDENT return self . _get_models_from_template ( template ) NEW_LINE DEDENT
def def _get_save_button ( self ) : NEW_LINE INDENT return self . _save_button . is_editable ( ) NEW_LINE DEDENT
delete_element ( self , element ) : NEW_LINE INDENT if isinstance ( element , str ) : NEW_LINE INDENT element . delete ( ) NEW_LINE DEDENT return element NEW_LINE DEDENT
delete_element ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return NEW_LINE DEDENT element . delete ( ) NEW_LINE DEDENT
static < T > T create ( Class < T > clazz ) { if ( clazz . isArray ( ) ) { return clazz . getComponent ( 0 ) ; } else { return clazz . getComponent ( 0 ) ; } }
get_all_saved_filenames ( self ) : NEW_LINE INDENT filenames = [ ] NEW_LINE for filename in self . saved_filenames : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT for filename in filenames : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT return filenames NEW_LINE DEDENT
sum_all_results ( self ) : NEW_LINE INDENT result = [ ] NEW_LINE for i in range ( self . num_results ) : NEW_LINE INDENT result . append ( self . results [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT
summary_row ( self ) : NEW_LINE INDENT if self . summary_row is None : NEW_LINE INDENT self . summary_row = [ ] NEW_LINE DEDENT return self . summary_row NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
load_service ( cls ) : NEW_LINE INDENT service = cls . get_service ( ) NEW_LINE if not service : NEW_LINE INDENT return None NEW_LINE DEDENT return service NEW_LINE DEDENT
get_setup_class ( self ) : NEW_LINE INDENT return self . _setup_class NEW_LINE DEDENT
parse_model_directories ( self ) : NEW_LINE INDENT model_directories = [ ] NEW_LINE for directory in self . model_directories : NEW_LINE INDENT model_directories . append ( directory ) NEW_LINE DEDENT return model_directories NEW_LINE DEDENT
parse_model_resources ( self , model_resources ) : NEW_LINE INDENT model_resources = self . _parse_model_resources ( model_resources ) NEW_LINE if model_resources is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT model_resources = self . _parse_model_resources ( model_resources ) NEW_LINE return model_resources NEW_LINE DEDENT
set_candidates ( self , candidates ) : NEW_LINE INDENT if len ( candidates ) == 0 : NEW_LINE INDENT return set ( ) NEW_LINE DEDENT if len ( candidates ) == 1 : NEW_LINE INDENT return candidates [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return set ( candidates ) NEW_LINE DEDENT DEDENT
load_configuration_document ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _load_configuration_document ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _load_configuration_document ( file ) NEW_LINE DEDENT DEDENT
def get_errors ( self ) : NEW_LINE INDENT errors = [ ] NEW_LINE try : NEW_LINE INDENT errors . extend ( self . _get_errors ( ) ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT errors . append ( e ) NEW_LINE DEDENT return errors NEW_LINE DEDENT
validate_strict ( self ) : NEW_LINE INDENT if self . strict : NEW_LINE INDENT self . strict = True NEW_LINE DEDENT else : NEW_LINE INDENT self . strict = False NEW_LINE DEDENT return self . strict NEW_LINE DEDENT
parse_method_arguments ( self , method_args ) : NEW_LINE INDENT method_args = { } NEW_LINE method_args . update ( method_args ) NEW_LINE method_args . update ( method_args ) NEW_LINE return method_args NEW_LINE DEDENT
parse_json ( input_stream ) : NEW_LINE INDENT parsed_object = json . loads ( input_stream ) NEW_LINE if parsed_object is None : NEW_LINE INDENT return None NEW_LINE DEDENT return parsed_object NEW_LINE DEDENT
extract_parameters_from_cell ( self , cell ) : NEW_LINE INDENT if isinstance ( cell , Cell ) : NEW_LINE INDENT return cell . getParameters ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return cell . getParameters ( ) NEW_LINE DEDENT DEDENT
def def def def public public public public static final public static Query createQuery public static Query createQuery public static Query createQuery public static Query createQuery public static Query createQuery createQuery createQuery createQuery createQuery createQuery createQuery createQuery createQuery createQuery ( Query query ) { return new Query ( query ) ; public Query createQuery ( Query query ) { return new Query ( query ) ; } public Query createQuery ( Query query ) { return new Query ( query ) ; } }
test_request ( self ) : NEW_LINE INDENT self . assertIsNotNone ( request ) NEW_LINE self . assertIsNotNone ( request ) NEW_LINE self . assertIsNotNone ( request ) NEW_LINE DEDENT
test_http_request ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT request = self . _http_request ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return False NEW_LINE DEDENT if request is None : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
refresh ( self ) : NEW_LINE INDENT if self . children : NEW_LINE INDENT for child in self . children : NEW_LINE INDENT child . refresh ( ) NEW_LINE DEDENT DEDENT DEDENT
static List < PropertyDescriptor > getPropertyDescriptors ( ) { List < PropertyDescriptor > properties = new ArrayList < PropertyDescriptor > ( ) ; for ( PropertyDescriptor property : properties ) { properties . add ( new PropertyDescriptor ( property . getName ( ) , property . getValue ( ) ) ) ; } return properties ; }
Annotation getAnnotation ( Class < ? extends Annotation > annotationType ) { if ( annotationType == null ) { return null ; } if ( annotationType . getAnnotation ( annotationType ) != null ) { return annotationType . getAnnotation ( annotationType ) ; } if ( annotationType . getAnnotation ( annotationType ) != null ) { return annotationType . getAnnotation ( annotationType ) ; } if ( annotationType . getAnnotation ( annotationType ) != null ) { return annotationType . getAnnotation ( annotationType ) ; } if ( annotationType . getAnnotation ( annotationType ) != null ) { return annotationType . getAnnotation ( annotationType ) ; } return null ; }
static void log ( String message ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( message ) ; logger . info ( message ) ; } }
get_whois ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _whois NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_parser ( self ) : NEW_LINE INDENT parser = self . _get_parser ( ) NEW_LINE if not parser : NEW_LINE INDENT parser = self . _get_parser ( ) NEW_LINE DEDENT return parser NEW_LINE DEDENT
get_managed_class ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _managed_class NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_managed_method ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE try : NEW_LINE INDENT return self . _managed_methods [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
def check_log_message ( self ) : NEW_LINE INDENT if ( self . log_message . text . length ( ) == 0 ) { return NEW_LINE DEDENT DEDENT
get_wrappers ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _wrappers NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def _ def def def def def _ def def def _ def _ def _ def _ def unwrap def unwrap def unwrap def def def def _ def _ def _ def unwrap def unwrap def _ _ _ _ _wrap def _get_wrapper ( self ) : def _get_wrapper ( self ) : NEW_LINE INDENT return self . _get_wrapper ( ) : NEW_LINE INDENT return self . _get_wrapper ( ) NEW_LINE DEDENT def _get_wrapper ( self ) : NEW_LINE INDENT return self . _get_wrapper ( ) NEW_LINE DEDENT def _get_LINE DEDENT
set_content_type ( self , content_type ) : NEW_LINE INDENT self . content_type = content_type NEW_LINE return self . content_type NEW_LINE DEDENT
get_cookie_value ( self , cookie ) : NEW_LINE INDENT if cookie is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return cookie NEW_LINE DEDENT DEDENT
add_cookie ( self , cookie ) : NEW_LINE INDENT if not cookie : NEW_LINE INDENT return NEW_LINE DEDENT self . _cookies . add ( cookie ) NEW_LINE self . _cookies . add ( cookie ) NEW_LINE DEDENT
remove_cookie ( self , cookie ) : NEW_LINE INDENT if cookie is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _cookies . remove ( cookie ) NEW_LINE self . _cookies . remove ( cookie ) NEW_LINE DEDENT
def _get_cookies ( self ) : NEW_LINE INDENT cookies = self . cookies NEW_LINE if not cookies : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return cookies NEW_LINE DEDENT
create ( self ) : NEW_LINE INDENT if not self . target_file_list : NEW_LINE INDENT self . target_file_list = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . target_file_list . append ( self . target_file_list ) NEW_LINE DEDENT return self NEW_LINE DEDENT
public static void add ( final Class < ? > constructedClass ) { if ( constructedClass == null ) { throw new IllegalArgumentException ( ) ; } else if ( constructedClass == null ) { throw new IllegalArgumentException ( ) ; } }
static Class < ? > getClass ( Class < ? > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isInterface ( ) ) { return clazz ; } return clazz . getSuperclass ( ) ; }
def def get_selected_image ( self , token ) : NEW_LINE INDENT image = self . _get_image ( token ) NEW_LINE if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT return image NEW_LINE DEDENT
static String convert ( String name ) { if ( name == null || name . isEmpty ( ) ) { return " " ; } else { return name ; } }
addTrailingSlash ( self , uri ) : NEW_LINE INDENT if not uri . endswith ( " / " ) : NEW_LINE INDENT uri += " / " NEW_LINE DEDENT if not uri . endswith ( " / " ) : NEW_LINE INDENT uri += " / " NEW_LINE DEDENT return uri NEW_LINE DEDENT
def def _get_context ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . context NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . context NEW_LINE DEDENT DEDENT
get_request ( self ) : NEW_LINE INDENT request = self . request NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT return request NEW_LINE DEDENT
void invoke ( Object instance , Method method ) throws Throwable { if ( instance instanceof Container ) { Container container = ( Container ) instance ; container . invoke ( instance , method ) ; } else { throw new IllegalStateException ( ) ; } }
execute ( self , transaction ) : NEW_LINE INDENT self . transaction = transaction NEW_LINE return self . transaction . execute ( ) NEW_LINE DEDENT
execute ( self , transaction ) : NEW_LINE INDENT self . transaction = transaction NEW_LINE return self . transaction . execute ( transaction ) NEW_LINE DEDENT
get_all_matching_files ( self , files ) : NEW_LINE INDENT if not files : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return files NEW_LINE DEDENT DEDENT
def lastMatchingFile ( self , file ) : NEW_LINE INDENT if not file . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return file NEW_LINE DEDENT DEDENT
def def get_parser_configuration ( self ) : NEW_LINE INDENT return self . _parser_configuration NEW_LINE DEDENT
boolean isPathComponent ( String path ) { if ( path == null ) { return false ; } if ( path . startsWith ( " / " ) ) { return true ; } if ( path . startsWith ( " / " ) ) { return true ; } return false ; }
List < Factory > factories ( ) { List < Factory > factories = new ArrayList < Factory > ( ) ; factories . add ( new Factory ( ) ) ; factories . add ( new Factory ( ) ) ; return factories ; }
get_session ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _session NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def public public public public static final void set_content_type ( String content_type , String content_type , String content_type , String content_type , String content_length ) { if ( content_type == null || content_type == null || content_type == null || content_type == null || content_length == null || content_type == null || content_length == null || content_type == null || content_length == null || content_type == null || content_length == null || content_type == null || content_length == null || content_type == null || content_length == null || content_length == null || content_type == null || content_length == null || content_length == null || content_type == null || content_length == null
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
handle ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _handle ( request ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT logger . error ( " Failed to handle request : % s " , e ) NEW_LINE raise NEW_LINE DEDENT DEDENT
close_sql_statement ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . connection . close ( ) NEW_LINE self . connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
close_event_stream ( event_stream_manager ) : NEW_LINE INDENT if event_stream_manager is None : NEW_LINE INDENT return NEW_LINE DEDENT event_stream_manager . close ( ) NEW_LINE DEDENT
def def enable_buttons ( self ) : NEW_LINE INDENT if self . is_enabled ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
upload_new_blob_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _upload_new_blob_data ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT self . _upload_new_blob_data ( ) NEW_LINE raise e NEW_LINE DEDENT DEDENT
delete_blob ( self , blob ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _delete_blob ( blob ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
extract_parameters_from_row ( self , row ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _extract_parameters_from_row ( row ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_argument_names ( self ) : NEW_LINE INDENT argument_names = [ ] NEW_LINE for name in self . arguments : NEW_LINE INDENT argument_names . append ( name ) NEW_LINE DEDENT return argument_names NEW_LINE DEDENT
schedule_task_execution ( self ) : NEW_LINE INDENT self . _schedule_task ( ) NEW_LINE self . _schedule_task ( ) NEW_LINE self . _schedule_task ( ) NEW_LINE DEDENT
resetTimeout ( self , timeout = None ) : NEW_LINE INDENT if timeout is not None : NEW_LINE INDENT self . timeout = timeout NEW_LINE DEDENT else : NEW_LINE INDENT self . timeout = None NEW_LINE DEDENT DEDENT
create_meta_pool ( self ) : NEW_LINE INDENT self . _meta_pool = [ ] NEW_LINE self . _meta_pool . append ( self . _meta_pool ) NEW_LINE self . _meta_pool . append ( self . _meta_pool ) NEW_LINE DEDENT
next_matching_file ( self , file ) : NEW_LINE INDENT if not file . exists ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not file . isFile ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT

static void main ( String [ ] args ) throws IOException { System . out . println ( " Welcome Banner . . . " ) ; System . out . println ( " Banner . . . " ) ; System . out . println ( " Banner . . . " ) ; }

static Chameleon getInstance ( ) { if ( instance == null ) { throw new IllegalArgumentException ( " instance is null " ) ; } return instance ; }
shutdown_hook ( self ) : NEW_LINE INDENT if self . shutdown_hook is not None : NEW_LINE INDENT return self . shutdown_hook NEW_LINE DEDENT return self . shutdown_hook NEW_LINE DEDENT
static void triggerAction ( String action ) { if ( action == null ) { return ; } if ( action . length ( ) == 0 ) { return ; } if ( action . length ( ) == 1 ) { return ; } if ( action . length ( ) == 2 ) { return ; } if ( action . length ( ) == 1 ) { return ; } if ( action . length ( ) == 2 ) { return ; } if ( action . length ( ) == 0 ) { return ; } if ( action . length ( ) == 1 ) { return ; } if ( action . length ( ) == 2 ) { return ; } if ( action . length ( ) == 1 ) { return ; } if ( action . length ( ) == 2 ) { return ; } if ( action . length ( ) == 1 ) { return ; } if ( action . length ( ) == 2 ) { return ; } if ( action . length ( ) == 1 ) {
trigger_action ( self , action ) : NEW_LINE INDENT if isinstance ( action , Handler ) : NEW_LINE INDENT return action NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def Replaces ( self ) : NEW_LINE INDENT if len ( self . results ) == 1 : NEW_LINE INDENT return self . results [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . results NEW_LINE DEDENT DEDENT
sum ( self , results ) : NEW_LINE INDENT if not results : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return results NEW_LINE DEDENT DEDENT
get_score_set ( self , answer ) : NEW_LINE INDENT score = self . get_score ( answer ) NEW_LINE if score is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return score NEW_LINE DEDENT DEDENT
get_alternative_answer_summaries ( self ) : NEW_LINE INDENT return self . _get_alternative_answer_summaries ( ) NEW_LINE DEDENT
get_alternative_answer_summaries ( self ) : NEW_LINE INDENT return self . _get_alternative_answer_summaries ( ) NEW_LINE DEDENT
getQuestionClass ( questionType ) : NEW_LINE INDENT if questionType == None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return questionType NEW_LINE DEDENT DEDENT
setQuestionType ( questionType ) : NEW_LINE INDENT if questionType is None : NEW_LINE INDENT return NEW_LINE DEDENT questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE questionType = questionType . lower ( ) NEW_LINE DEDENT
get_token ( self ) : NEW_LINE INDENT token = self . _get_token ( ) NEW_LINE if token : NEW_LINE INDENT return token NEW_LINE DEDENT DEDENT
get_dependency_label ( self , token ) : NEW_LINE INDENT depLabel = self . get_dependency_label ( token ) NEW_LINE if depLabel : NEW_LINE INDENT return depLabel NEW_LINE DEDENT return None NEW_LINE DEDENT
depLabel ( self , token ) : NEW_LINE INDENT if isinstance ( token , str ) : NEW_LINE INDENT return self . depLabel ( token ) NEW_LINE DEDENT return self . depLabel ( token ) NEW_LINE DEDENT
semanticType ( self ) : NEW_LINE INDENT return self . semanticType NEW_LINE DEDENT
void setSemanticType ( String semanticType ) { if ( semanticType == null ) { throw new IllegalArgumentException ( " semanticType cannot be null " ) ; } this . semanticType = semanticType ; }
get_sections ( self ) : NEW_LINE INDENT sections = self . _get_sections ( ) NEW_LINE if len ( sections ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return sections NEW_LINE DEDENT
set_sections ( self , sections ) : NEW_LINE INDENT self . _sections = sections NEW_LINE DEDENT
get_indexed_value ( self ) : NEW_LINE INDENT return self . _get_indexed_value ( ) NEW_LINE DEDENT
set_indexed_value ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _set_indexed_value ( value ) NEW_LINE DEDENT
uris ( self ) : NEW_LINE INDENT uris = [ ] NEW_LINE for uri in self . uris : NEW_LINE INDENT uris . append ( uri ) NEW_LINE DEDENT return uris NEW_LINE DEDENT
setUris ( self , uris ) : NEW_LINE INDENT if len ( uris ) > 1 : NEW_LINE INDENT self . uris = uris NEW_LINE DEDENT else : NEW_LINE INDENT self . uris = [ ] NEW_LINE DEDENT DEDENT
get_types ( self , concept ) : NEW_LINE INDENT types = [ ] NEW_LINE for type in concept . types : NEW_LINE INDENT types . append ( type ) NEW_LINE DEDENT return types NEW_LINE DEDENT
setTypes ( self , types ) : NEW_LINE INDENT self . types = types NEW_LINE return self NEW_LINE DEDENT
get_target_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . target_type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_target_type ( self , target_type ) : NEW_LINE INDENT if target_type is None : NEW_LINE INDENT return NEW_LINE DEDENT target_type = target_type . strip ( ) NEW_LINE target_type . strip ( ) NEW_LINE target_type . strip ( ) NEW_LINE return target_type NEW_LINE DEDENT
rank ( self ) : NEW_LINE INDENT return self . _rank ( ) NEW_LINE DEDENT
set_rank ( self , rank ) : NEW_LINE INDENT self . set_rank ( rank ) NEW_LINE return self NEW_LINE DEDENT
get_query_string ( self ) : NEW_LINE INDENT query_string = self . _get_query_string ( ) NEW_LINE if query_string : NEW_LINE INDENT return query_string NEW_LINE DEDENT DEDENT
queryString ( self ) : NEW_LINE INDENT return self . _getQueryString ( ) NEW_LINE DEDENT
getCandidateAnswerVariants ( self ) : NEW_LINE INDENT candidateAnswers = self . candidateAnswers NEW_LINE if candidateAnswers is not None : NEW_LINE INDENT return candidateAnswers NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
setCandidateAnswerVariants ( self , candidateAnswers ) : NEW_LINE INDENT self . candidateAnswers = candidateAnswers NEW_LINE return self . candidateAnswers NEW_LINE DEDENT
get_candidate_answers ( self ) : NEW_LINE INDENT return self . _get_candidate_answers ( ) NEW_LINE DEDENT
set_candidate_answers ( self , candidateAnswers ) : NEW_LINE INDENT self . _set_candidate_answers ( candidateAnswers ) NEW_LINE DEDENT
get_query ( self , query ) : NEW_LINE INDENT if query is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( query , basestring ) : NEW_LINE INDENT return query NEW_LINE DEDENT elif isinstance ( query , basestring ) : NEW_LINE INDENT return query NEW_LINE DEDENT else : NEW_LINE INDENT return query NEW_LINE DEDENT DEDENT
query_set ( self , query ) : NEW_LINE INDENT query_set = [ ] NEW_LINE query_set . append ( query ) NEW_LINE query_set . append ( query ) NEW_LINE return query_set NEW_LINE DEDENT
HitList getHitList ( ) { if ( hitList == null ) { hitList = new HitList ( ) ; } return hitList ; }
void setHitList ( List < Hit > hitList ) { if ( hitList == null ) { return ; } if ( hitList . size ( ) == 0 ) { return ; } if ( hitList . size ( ) == 1 ) { hitList . add ( hitList . get ( 0 ) ) ; } }
get_hit_list ( self ) : NEW_LINE INDENT return self . _hit_list NEW_LINE DEDENT
void setHitList ( List < Hit > hitList ) { if ( hitList == null ) { return ; } if ( hitList . size ( ) == 0 ) { return ; } if ( hitList . size ( ) == 1 ) { return ; } if ( hitList . size ( ) == 2 ) { return ; } if ( hitList . size ( ) == 1 ) { return ; } if ( hitList . size ( ) == 2 ) { return ; } if ( hitList . size ( ) == 1 ) { return ; } if ( hitList . size ( ) == 2 ) { return ; } if ( hitList . size ( ) == 1 ) { return ; } if ( hitList . size ( ) == 2 ) { return ; } if ( hitList . size ( ) == 1 ) { return ; } if ( hitList . size ( ) == 2 ) { return ; } if ( hitList . size ( ) ==
abstractQuery ( self ) : NEW_LINE INDENT abstractQuery = self . query NEW_LINE return abstractQuery NEW_LINE DEDENT
abstractQuery ( self ) : NEW_LINE INDENT abstractQuery = self . _abstractQuery ( ) NEW_LINE if abstractQuery is None : NEW_LINE INDENT return self . _abstractQuery ( ) NEW_LINE DEDENT return abstractQuery NEW_LINE DEDENT
get_search_id ( self , searchId ) : NEW_LINE INDENT return self . _get_search_id ( searchId ) NEW_LINE DEDENT
void setSearchId ( String searchId ) { if ( searchId != null ) { this . searchId = searchId ; } else { this . searchId = searchId ; } }
void setDocId ( String docId ) { if ( docId == null ) { throw new IllegalArgumentException ( " docId must not be null " ) ; } this . docId = docId ; }
offsetInBeginSection ( self , offsetInBeginSection ) : NEW_LINE INDENT return self . offsetInBeginSection ( offsetInBeginSection ) NEW_LINE DEDENT
offsetInBeginSection ( self ) : NEW_LINE INDENT offsetInBeginSection = self . offsetInBeginSection ( ) NEW_LINE return offsetInBeginSection NEW_LINE DEDENT
offsetInEndSection ( self ) : NEW_LINE INDENT offsetInEndSection = self . offsetInEndSection ( ) NEW_LINE return offsetInEndSection NEW_LINE DEDENT
offsetInEndSection ( self ) : NEW_LINE INDENT offsetInEndSection = self . offsetInEndSection ( ) NEW_LINE return offsetInEndSection NEW_LINE DEDENT
beginSection ( self , passage ) : NEW_LINE INDENT passage = self . get_passage ( passage ) NEW_LINE if not passage : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return passage NEW_LINE DEDENT DEDENT
beginSection ( self ) : NEW_LINE INDENT passage = self . passage NEW_LINE if passage is None : NEW_LINE INDENT passage = self . passage NEW_LINE DEDENT else : NEW_LINE INDENT passage = self . passage NEW_LINE DEDENT return passage NEW_LINE DEDENT
endSection ( self , passage ) : NEW_LINE INDENT if self . endSection : NEW_LINE INDENT return self . endSection NEW_LINE DEDENT else : NEW_LINE INDENT return self . endSection NEW_LINE DEDENT DEDENT
endSection ( self , passage ) : NEW_LINE INDENT if self . endSection : NEW_LINE INDENT return self . endSection NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_aspects ( self ) : NEW_LINE INDENT aspects = self . _get_aspects ( ) NEW_LINE if not aspects : NEW_LINE INDENT return None NEW_LINE DEDENT return aspects NEW_LINE DEDENT
set_aspects ( self , aspects ) : NEW_LINE INDENT self . aspects = aspects NEW_LINE return self NEW_LINE DEDENT
get_triple ( self , triple ) : NEW_LINE INDENT triple = self . _get_triple ( triple ) NEW_LINE if triple : NEW_LINE INDENT return triple NEW_LINE DEDENT return None NEW_LINE DEDENT
triple_set ( self , triple ) : NEW_LINE INDENT return self . triple_set ( triple ) NEW_LINE DEDENT
get_source_relation ( self ) : NEW_LINE INDENT sourceRelation = self . _get_source_relation ( ) NEW_LINE if sourceRelation is None : NEW_LINE INDENT return None NEW_LINE DEDENT return sourceRelation NEW_LINE DEDENT
setSourceRelation ( self , sourceRelation ) : NEW_LINE INDENT self . sourceRelation = sourceRelation NEW_LINE return self . sourceRelation NEW_LINE DEDENT
get_subject ( self , triple ) : NEW_LINE INDENT subject = self . _get_subject ( triple ) NEW_LINE if not subject : NEW_LINE INDENT return None NEW_LINE DEDENT return subject NEW_LINE DEDENT
setSubject ( self , triple ) : NEW_LINE INDENT self . subject = triple NEW_LINE self . triple = triple NEW_LINE DEDENT
get_predicate ( self , triple ) : NEW_LINE INDENT predicate = self . _get_predicate ( triple ) NEW_LINE if predicate is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return predicate NEW_LINE DEDENT DEDENT
predicate_set ( self , triple ) : NEW_LINE INDENT predicate = self . predicate ( triple ) NEW_LINE if predicate is None : NEW_LINE INDENT return None NEW_LINE DEDENT return predicate NEW_LINE DEDENT
static boolean isObjUri ( String uri ) { if ( uri == null ) { return false ; } if ( uri . length ( ) == 0 ) { return true ; } if ( uri . length ( ) == 1 ) { return true ; } return false ; }
isObjUri ( self , object ) : NEW_LINE INDENT if isinstance ( object , URI ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
operator_get ( self ) : NEW_LINE INDENT operator = self . operator NEW_LINE if operator : NEW_LINE INDENT return operator NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
operator_set ( self , operator ) : NEW_LINE INDENT self . operator_set = operator NEW_LINE return self . operator_set NEW_LINE DEDENT
operatorArgs ( self ) : NEW_LINE INDENT operatorArgs = self . operatorArgs . copy ( ) NEW_LINE operatorArgs . clear ( ) NEW_LINE return operatorArgs NEW_LINE DEDENT
operatorArgs ( self ) : NEW_LINE INDENT return self . operatorArgs NEW_LINE DEDENT
get_concept ( self , text ) : NEW_LINE INDENT concept = self . get_concept ( text ) NEW_LINE if concept : NEW_LINE INDENT return concept NEW_LINE DEDENT DEDENT
get_confidence_score ( self , concept ) : NEW_LINE INDENT confidence_score = self . _get_confidence_score ( concept ) NEW_LINE if confidence_score is None : NEW_LINE INDENT return confidence_score NEW_LINE DEDENT return confidence_score NEW_LINE DEDENT
get_candidate_answer ( self , candidate_answer ) : NEW_LINE INDENT if candidate_answer : NEW_LINE INDENT return candidate_answer NEW_LINE DEDENT else : NEW_LINE INDENT return candidate_answer NEW_LINE DEDENT DEDENT
set_candidate_answer ( self , candidate_answer ) : NEW_LINE INDENT if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate_answer = candidate_answer . strip ( ) NEW_LINE candidate_answer = candidate_answer . strip ( ) NEW_LINE if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate_answer = candidate_answer . strip ( ) NEW_LINE if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate_answer = candidate_answer . strip ( ) NEW_LINE if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate_answer = candidate_answer . strip ( ) NEW_LINE if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate_answer = candidate_answer . strip ( ) NEW_LINE if candidate_answer is None : NEW_LINE INDENT return NEW_LINE DEDENT candidate
get_id ( self ) : NEW_LINE INDENT id = self . id NEW_LINE return id NEW_LINE DEDENT
set_id ( self , id ) : NEW_LINE INDENT self . id = id NEW_LINE return self NEW_LINE DEDENT
get_human_readable_concept_label ( self , name ) : NEW_LINE INDENT return self . _get_human_readable_concept_label ( name ) NEW_LINE DEDENT
abbreviation ( self , name ) : NEW_LINE INDENT abbreviation = self . abbreviation ( name ) NEW_LINE if abbreviation : NEW_LINE INDENT return abbreviation NEW_LINE DEDENT DEDENT
set_abbreviation ( self , abbreviation ) : NEW_LINE INDENT self . abbreviation = abbreviation NEW_LINE DEDENT
Set < Concept > getConceptSet ( ) { Set < Concept > set = new HashSet < Concept > ( ) ; set . add ( new Concept ( ) ) ; return set ; }
get_candidate_answer_variants ( self ) : NEW_LINE INDENT return self . _get_candidate_answer_variants ( ) NEW_LINE DEDENT
List < String > variants ( ) { List < String > variants = new ArrayList < String > ( ) ; for ( String variant : variants ) { variants . add ( variant ) ; } return variants ; }
List < NamedEntityType > namedEntityTypes ( ) { List < NamedEntityType > namedEntityTypes = new ArrayList < NamedEntityType > ( ) ; namedEntityTypes . add ( new NamedEntityType ( ) ) ; namedEntityTypes . add ( new NamedEntityType ( ) ) ; return namedEntityTypes ; }
List < NamedEntityType > getNamedEntityTypes ( ) { List < NamedEntityType > namedEntityTypes = new ArrayList < NamedEntityType > ( ) ; namedEntityTypes . add ( new NamedEntityType ( ) ) ; return namedEntityTypes ; }
get_concept_type ( self ) : NEW_LINE INDENT conceptType = self . get_concept_type ( ) NEW_LINE if conceptType : NEW_LINE INDENT return conceptType NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
void setConceptType ( ConceptType conceptType ) { if ( conceptType == null ) { throw new IllegalArgumentException ( " conceptType is null " ) ; } this . conceptType = conceptType ; }
get_occurrences ( self ) : NEW_LINE INDENT return self . _get_occurrences ( ) NEW_LINE DEDENT
void setOccurrences ( Set < String > occurrences ) { if ( occurrences != null && occurrences . size ( ) > 0 ) { for ( int i = 0 ; i < occurrences . size ( ) ; i ++ ) { if ( occurrences . get ( i ) != null ) { occurrences . set ( i ) ; } } } }
get_query_concepts ( self ) : NEW_LINE INDENT query_concepts = self . get_query_concepts ( ) NEW_LINE if query_concepts : NEW_LINE INDENT return query_concepts NEW_LINE DEDENT return query_concepts NEW_LINE DEDENT
void setConcepts ( List < Concept > concepts ) { if ( concepts == null ) { throw new IllegalArgumentException ( " concepts is null " ) ; } if ( concepts . size ( ) == 0 ) { throw new IllegalArgumentException ( " concepts is null " ) ; } if ( concepts . size ( ) == 0 ) { throw new IllegalArgumentException ( " concepts is null " ) ; } }
get_original_text ( self ) : NEW_LINE INDENT return self . _original_text NEW_LINE DEDENT
setOriginalText ( self , originalText ) : NEW_LINE INDENT self . originalText = originalText NEW_LINE if self . originalText is not None : NEW_LINE INDENT self . originalText = self . originalText NEW_LINE DEDENT DEDENT
_get_args ( self ) : NEW_LINE INDENT args = self . _get_args ( ) NEW_LINE if args is None : NEW_LINE INDENT return None NEW_LINE DEDENT return args NEW_LINE DEDENT
set_args ( self , args ) : NEW_LINE INDENT self . _set_args ( args ) NEW_LINE DEDENT
get_label ( self ) : NEW_LINE INDENT label = self . _get_label ( ) NEW_LINE if label : NEW_LINE INDENT return label NEW_LINE DEDENT DEDENT
set_label ( self , label ) : NEW_LINE INDENT self . label = label NEW_LINE DEDENT
nextClearBit ( self ) : NEW_LINE INDENT if self . clear_bit : NEW_LINE INDENT return self . clear_bit NEW_LINE DEDENT else : NEW_LINE INDENT return self . clear_bit NEW_LINE DEDENT DEDENT
set ( self , bit ) : NEW_LINE INDENT if not self . isSet ( bit ) : NEW_LINE INDENT return NEW_LINE DEDENT if not self . isSet ( bit ) : NEW_LINE INDENT return NEW_LINE DEDENT self . set ( bit ) NEW_LINE DEDENT
def copy ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _copy ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static CacheValue create ( File file ) { if ( file . exists ( ) ) { return new CacheValue ( file ) ; } else { return new CacheValue ( file ) ; } }
rebuild_backing_array ( self , backing_array ) : NEW_LINE INDENT self . backing_array = backing_array NEW_LINE return self . backing_array NEW_LINE DEDENT
generate_HELM2 ( self , object ) : NEW_LINE INDENT if isinstance ( object , HELM2 ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , HELM2 ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
check_closed_ brackets ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
set_connection_details ( self , connection_details ) : NEW_LINE INDENT self . connection_details = connection_details NEW_LINE if self . connection_details is None : NEW_LINE INDENT self . connection_details = { } NEW_LINE DEDENT DEDENT
get_ HELM2 ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT connection = self . connection NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT connection = self . connection NEW_LINE DEDENT return connection NEW_LINE DEDENT
add ( self , group ) : NEW_LINE INDENT self . add ( group ) NEW_LINE return self NEW_LINE DEDENT
main ( argv = None ) : NEW_LINE INDENT if argv is None : NEW_LINE INDENT argv = sys . argv NEW_LINE DEDENT else : NEW_LINE INDENT argv = argv [ 1 : ] NEW_LINE DEDENT parser = HELM2Parser ( ) NEW_LINE parser . parse ( argv ) NEW_LINE return parser NEW_LINE DEDENT
validate_polymer_id ( self , polymer_id ) : NEW_LINE INDENT if isinstance ( polymer_id , basestring ) : NEW_LINE INDENT polymer_id = polymer_id . strip ( ) NEW_LINE DEDENT if isinstance ( polymer_id , basestring ) : NEW_LINE INDENT polymer_id = polymer_id . strip ( ) NEW_LINE DEDENT if isinstance ( polymer_id , basestring ) : NEW_LINE INDENT polymer_id = polymer_id . strip ( ) NEW_LINE DEDENT if isinstance ( polymer_id , basestring ) : NEW_LINE INDENT polymer_id = polymer_id . strip ( ) NEW_LINE DEDENT if isinstance ( polymer_id , basestring ) : NEW_LINE INDENT polymer_id = polymer_id . strip ( ) NEW_LINE DEDENT return polymer_id NEW_LINE DEDENT
validate_polymer_id ( polymer_id ) : NEW_LINE INDENT if isinstance ( polymer_id , int ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , int ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , float ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , int ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , float ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , int ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , float ) : NEW_LINE INDENT return polymer_id NEW_LINE DEDENT if isinstance ( polymer_id , int ) : NEW_
validate ( self , connections ) : NEW_LINE INDENT if len ( connections ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( connections ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( connections ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( connections ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
validate_group_id ( self , group_id ) : NEW_LINE INDENT if group_id is None : NEW_LINE INDENT return NEW_LINE DEDENT group_id = group_id . strip ( ) NEW_LINE group_id = group_id . strip ( ) NEW_LINE group_id = group_id . strip ( ) NEW_LINE group_id = group_id . strip ( ) NEW_LINE group_id = group_id . strip ( ) NEW_LINE return group_id NEW_LINE DEDENT
validateRepeatingSection ( self , section ) : NEW_LINE INDENT if section is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( section , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT
check_last_added_polymer_element ( self , polymer_element ) : NEW_LINE INDENT if isinstance ( polymer_element , polymer_element ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( polymer_element , polymer_element ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( polymer_element , polymer_element ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
generate_json_object ( self ) : NEW_LINE INDENT return self . _generate_json_object ( ) NEW_LINE DEDENT
get_simple_polymer_type ( self ) : NEW_LINE INDENT polymer_type = self . _get_simple_polymer_type ( ) NEW_LINE return polymer_type NEW_LINE DEDENT
get_current_grouping_notation ( self ) : NEW_LINE INDENT if self . current_grouping_notation is not None : NEW_LINE INDENT return self . current_grouping_notation NEW_LINE DEDENT return self . current_grouping_notation NEW_LINE DEDENT
generate ( self ) : NEW_LINE INDENT for section in self . sections : NEW_LINE INDENT if section in self . sections : NEW_LINE INDENT self . sections . append ( section ) NEW_LINE DEDENT DEDENT return self NEW_LINE DEDENT
generate_HELM2_string ( self ) : NEW_LINE INDENT if self . section == 0 : NEW_LINE INDENT return " " NEW_LINE DEDENT if self . section == 1 : NEW_LINE INDENT return " " NEW_LINE DEDENT return " " NEW_LINE DEDENT
generate_HELM2_string ( self , section ) : NEW_LINE INDENT if not section : NEW_LINE INDENT return " " NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
generate_HELM2_string ( self ) : NEW_LINE INDENT if self . is_valid ( ) : NEW_LINE INDENT return self . _generate_HELM2_string ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _generate_HELM2_string ( ) NEW_LINE DEDENT DEDENT
generate_HELM2_string ( self ) : NEW_LINE INDENT if not self . is_valid ( ) : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if self . is_valid ( ) : NEW_LINE INDENT return ' ' NEW_LINE DEDENT return ' ' NEW_LINE DEDENT
get_id_from_polymers ( self , polymers , groups ) : NEW_LINE INDENT return self . _get_id_from_polymers ( polymers , groups ) NEW_LINE DEDENT
get_polymer_by_id ( self , id ) : NEW_LINE INDENT polymer = self . get_polymer_by_id ( id ) NEW_LINE if polymer is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return polymer NEW_LINE DEDENT DEDENT
static PolymerElement [ ] PolymerElements ( ) { PolymerElement [ ] polymerElements = new PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ] = PolymerElement [ 0 ] ; PolymerElement [ 0 ]
convert_string ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
addAnnotation ( self , monomer ) : NEW_LINE INDENT self . monomer . addAnnotation ( monomer ) NEW_LINE self . monomer . addAnnotation ( monomer ) NEW_LINE DEDENT
set_default_count ( self , default_count ) : NEW_LINE INDENT if default_count is None : NEW_LINE INDENT default_count = 0 NEW_LINE DEDENT else : NEW_LINE INDENT default_count = int ( default_count ) NEW_LINE DEDENT return default_count NEW_LINE DEDENT
static MonomerNotation getInstance ( ) { MonomerNotation m = new MonomerNotation ( ) ; return m ; }
__call__ ( self , Constructors , MonomerNotationGroupElement ) : NEW_LINE INDENT if isinstance ( Constructors , MonomerNotationGroupElement ) : NEW_LINE INDENT return Constructors . __call__ ( self , Constructors , MonomerNotationGroupElement ) NEW_LINE DEDENT elif isinstance ( Constructors , MonomerNotationGroupElement ) : NEW_LINE INDENT return Constructors . __call__ ( self , Constructors , MonomerNotationGroupElement ) NEW_LINE DEDENT return None NEW_LINE DEDENT
void initialize ( ) { if ( ! initialized ) { initialized = true ; } else { initialized = false ; } }
get_ratio ( self , group ) : NEW_LINE INDENT if isinstance ( group , list ) : NEW_LINE INDENT return group NEW_LINE DEDENT if isinstance ( group , tuple ) : NEW_LINE INDENT return group [ 0 ] NEW_LINE DEDENT if isinstance ( group , list ) : NEW_LINE INDENT return group [ 0 ] NEW_LINE DEDENT return group [ 1 ] NEW_LINE DEDENT
parse_HELM2 ( self , string ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_HELM2 ( string ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
set ( self , sugar , base , phosphat ) : NEW_LINE INDENT self . sugar = sugar NEW_LINE self . base = base NEW_LINE self . phosphat = phosphat NEW_LINE DEDENT
add_ambiguity_to_group ( self , group ) : NEW_LINE INDENT try : NEW_LINE INDENT self . add_ambiguity_to_group ( group ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . add_ambiguity_to_group ( group ) NEW_LINE DEDENT DEDENT
get_statistics ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _statistics NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _statistics NEW_LINE DEDENT DEDENT
static List < Node > getEdges ( List < Edge > edges ) { List < Node > nodes = new ArrayList < Node > ( ) ; for ( Edge edge : edges ) { nodes . add ( edge ) ; } return nodes ; }
create_graph ( self , nodes , edges ) : NEW_LINE INDENT if not nodes : NEW_LINE INDENT return None NEW_LINE DEDENT if not edges : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . create_graph ( nodes , edges ) NEW_LINE DEDENT DEDENT
get_method_ reachability_analysis ( self , method ) : NEW_LINE INDENT return self . _get_method_ reachability_analysis ( method ) NEW_LINE DEDENT
sort_graph ( self , graph ) : NEW_LINE INDENT if isinstance ( graph , networkx . DiGraph ) : NEW_LINE INDENT return graph NEW_LINE DEDENT elif isinstance ( graph , networkx . Graph ) : NEW_LINE INDENT return graph NEW_LINE DEDENT return None NEW_LINE DEDENT
static void subscribe ( String serviceName ) { if ( serviceName == null ) { throw new IllegalArgumentException ( " Service name must not be null " ) ; } if ( serviceName . equals ( " " ) ) { throw new IllegalArgumentException ( " Service name must not be null " ) ; } if ( serviceName . equals ( " " ) ) { throw new IllegalArgumentException ( " Service name must not be empty " ) ; } }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
unsubscribe ( self ) : NEW_LINE INDENT self . _subscribes . clear ( ) NEW_LINE self . _subscribes . addAll ( self . _subscribes ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _get_response ( self ) : NEW_LINE INDENT response = self . _get_response ( ) NEW_LINE if response is not None : NEW_LINE INDENT return response NEW_LINE DEDENT return response NEW_LINE DEDENT
process_cloudI_service_requests ( self ) : NEW_LINE INDENT self . _cloudI_service_requests = [ ] NEW_LINE self . _cloudI_service_requests . append ( self . _cloudI_service_requests ) NEW_LINE self . _cloudI_service_requests . append ( self . _cloudI_service_requests ) NEW_LINE DEDENT
shutdown_service ( self ) : NEW_LINE INDENT if self . _shutdown_service : NEW_LINE INDENT self . _shutdown_service ( ) NEW_LINE DEDENT DEDENT
is_throwing_error ( self , Throwable throwable ) : NEW_LINE INDENT if isinstance ( throwable , Throwable ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
setRunState ( self , runState ) : NEW_LINE INDENT self . runState = runState NEW_LINE DEDENT
void deregisterWorker ( Worker worker ) { if ( worker != null ) { worker . deregister ( ) ; } }
addWorker ( self , worker ) : NEW_LINE INDENT self . worker = worker NEW_LINE self . worker . add ( worker ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
terminate_worker ( self ) : NEW_LINE INDENT if self . pool . is_shutdown ( ) : NEW_LINE INDENT self . pool . terminate ( ) NEW_LINE self . pool . shutdown ( ) NEW_LINE DEDENT DEDENT
def _create_worker ( self ) : NEW_LINE INDENT if self . worker_id is not None : NEW_LINE INDENT return self . _create_worker ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_worker ( ) NEW_LINE DEDENT DEDENT
run ( self ) : NEW_LINE INDENT runloop = self . _runloop NEW_LINE if runloop is not None : NEW_LINE INDENT return runloop NEW_LINE DEDENT runloop = self . _runloop NEW_LINE return runloop NEW_LINE DEDENT
def is_alive ( ) : NEW_LINE INDENT return true if worker w . is_alive ( ) : NEW_LINE INDENT return true ; } }
partition ( self , task ) : NEW_LINE INDENT if not self . _task_partition : NEW_LINE INDENT self . _task_partition = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _task_partition = False NEW_LINE DEDENT if self . _task_partition : NEW_LINE INDENT self . _task_partition = True NEW_LINE DEDENT return self . _task_partition NEW_LINE DEDENT
def def get_common_pool_queue ( self ) : NEW_LINE INDENT return self . _common_queue . get ( ) NEW_LINE DEDENT
helpComplete ( self ) : NEW_LINE INDENT return self . _helpComplete ( ) NEW_LINE DEDENT
ForkJoinTask getTask ( ) { ForkJoinTask task = new ForkJoinTask ( ) ; task . setDaemon ( true ) ; task . start ( ) ; return task ; }
getCommonPool ( self ) : NEW_LINE INDENT pool = self . pool NEW_LINE if pool is None : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT return pool NEW_LINE DEDENT
def def def get_result ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python__ def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python____python____python____python____python____python____python____python__ def def def def get___python____python__
build_json_string ( self ) : NEW_LINE INDENT return self . _build_json_string ( ) NEW_LINE DEDENT
get_statistical_data ( self ) : NEW_LINE INDENT return self . statistical_data NEW_LINE DEDENT
def create ( self ) : NEW_LINE INDENT return new AList ( ) NEW_LINE DEDENT
copy ( self , AList ) : NEW_LINE INDENT if self . is_reversed ( ) : NEW_LINE INDENT return self . copy ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
boolean matches ( Collection < ? > collection ) { if ( collection . size ( ) == 0 ) { return false ; } if ( collection . size ( ) == 1 ) { return true ; } return false ; }
def apply ( self ) : NEW_LINE INDENT return self . operator ( ) . operator ( ) . apply ( self . operator ( ) ) NEW_LINE DEDENT
def apply ( self , list ) : NEW_LINE INDENT if len ( list ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT
addTask ( localQueue , task ) : NEW_LINE INDENT if task is None : NEW_LINE INDENT task = localQueue . add ( task ) NEW_LINE DEDENT return task NEW_LINE DEDENT
create ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT
static ALongHashMap create ( int size ) { if ( size == 0 ) { return new ALongHashMap ( ) ; } return new ALongHashMap ( size ) ; }
static AListMap create ( AListMap map ) { if ( map == null ) { throw new IllegalArgumentException ( " map is null " ) ; } if ( map . isEmpty ( ) ) { throw new IllegalArgumentException ( " map is empty " ) ; } return new AListMap ( map ) ; }
static AHashMap create ( Map < String , Object > map ) { if ( map != null ) { return new AHashMap ( map ) ; } else { return new AHashMap ( ) ; } }
AListMap get ( String key , String value ) { AListMap map = new AListMap ( ) ; map . put ( key , value ) ; return map ; }
def def override_default ( self ) : NEW_LINE INDENT return self . _default_implementation NEW_LINE if self . _default_implementation is not None : NEW_LINE INDENT return self . _implementation NEW_LINE DEDENT DEDENT
hack ( self ) : NEW_LINE INDENT if self . _hack : NEW_LINE INDENT self . _hack ( ) NEW_LINE DEDENT self . _hack ( ) NEW_LINE DEDENT
marshal ( self , value ) : NEW_LINE INDENT if isinstance ( value , str ) : NEW_LINE INDENT return self . marshal ( value ) NEW_LINE DEDENT elif isinstance ( value , str ) : NEW_LINE INDENT return self . marshal ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . marshal ( value ) NEW_LINE DEDENT DEDENT
subsequence ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , Sequence ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT elif isinstance ( sequence , Sequence ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT elif isinstance ( sequence , Sequence ) : NEW_LINE INDENT return sequence NEW_LINE DEDENT else : NEW_LINE INDENT return sequence NEW_LINE DEDENT DEDENT
binary_search_wrapper ( self , comparable_elements ) : NEW_LINE INDENT if isinstance ( comparable_elements , list ) : NEW_LINE INDENT return self . binary_search_wrapper ( comparable_elements ) NEW_LINE DEDENT return self . binary_search_wrapper ( comparable_elements ) NEW_LINE DEDENT
create_binary_search_wrapper ( self , list , comparator ) : NEW_LINE INDENT if isinstance ( list , list ) : NEW_LINE INDENT return self . create_binary_search_wrapper ( list , comparator ) NEW_LINE DEDENT return self . create_binary_search_wrapper ( list , comparator ) NEW_LINE DEDENT
send_email ( self , email ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . send ( email ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
send_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _send_message ( message ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
_get_handler ( self ) : NEW_LINE INDENT if self . _handler is not None : NEW_LINE INDENT return self . _handler NEW_LINE DEDENT return self NEW_LINE DEDENT
wrap_route_execution_handler ( self , route_execution_handler ) : NEW_LINE INDENT filter_handler = self . filter_handler ( route_execution_handler ) NEW_LINE if filter_handler is not None : NEW_LINE INDENT return filter_handler NEW_LINE DEDENT return None NEW_LINE DEDENT
separates_role_names ( self ) : NEW_LINE INDENT tag = self . tag NEW_LINE if tag is not None : NEW_LINE INDENT return tag NEW_LINE DEDENT else : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
pack ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pack ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . pack ( ) NEW_LINE DEDENT DEDENT
removeDuplicates ( self , array ) : NEW_LINE INDENT if isinstance ( array , SortedSet ) : NEW_LINE INDENT return self . _removeDuplicates ( array ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _removeDuplicates ( array ) NEW_LINE DEDENT DEDENT
def _percent ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _percent ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _percent ( ) NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) { try { WebInterface webInterface = new WebInterface ( ) ; webInterface . run ( args ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
execute_login_request ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT login_request = self . _login_request ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT log . exception ( e ) NEW_LINE login_request = self . _login_request ( ) NEW_LINE log . exception ( e ) NEW_LINE DEDENT return login_request NEW_LINE DEDENT
get_user_login_info ( self ) : NEW_LINE INDENT cookie = self . get_cookie ( ) NEW_LINE if cookie is not None : NEW_LINE INDENT return cookie NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_user_login_info ( ) NEW_LINE DEDENT DEDENT
get_user_information ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _user_information NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
check_password_salt ( self , password ) : NEW_LINE INDENT salt = hashlib . sha256 ( password ) . hexdigest ( ) NEW_LINE salt = salt . encode ( ' utf - 8' ) NEW_LINE salt = salt . encode ( ' utf - 8' ) NEW_LINE salt = salt . encode ( ' utf - 8' ) NEW_LINE salt = salt . encode ( ' utf - 8' ) NEW_LINE salt = salt . encode ( ' utf - 8' ) NEW_LINE return salt NEW_LINE DEDENT
store_user_info ( self , user_info ) : NEW_LINE INDENT if user_info is None : NEW_LINE INDENT user_info = { } NEW_LINE DEDENT else : NEW_LINE INDENT user_info = user_info . copy ( ) NEW_LINE DEDENT return user_info NEW_LINE DEDENT
def def get_system_user_login_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_system_user_login_id ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_user_information ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_user_information ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def public static public static public static public static public static public static

get_shaping_parameters ( self ) : NEW_LINE INDENT return self . _get_shaping_parameters ( ) NEW_LINE DEDENT

get_caller_stack_trace ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _caller_stack_trace NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static byte [ ] convert ( char [ ] array , int offset , int length ) { byte [ ] result = new byte [ length ] ; for ( int i = offset ; i < length ; i ++ ) { result [ i ] = ( byte ) array [ i ] ; } return result ; }
byte [ ] convert ( char sequence ) { if ( sequence == null ) { return null ; } if ( sequence . length == 0 ) { return new byte [ 0 ] ; } if ( sequence . length == 1 ) { return new byte [ 0 ] ; } else { return new byte [ 0 ] ; } }
static char [ ] convert ( byte [ ] bytes ) { char [ ] chars = new char [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { chars [ i ] = bytes [ i ] ; } return chars ; }
static byte [ ] convert ( char sequence ) { if ( sequence == null ) { return new byte [ 0 ] ; } if ( sequence . length == 0 ) { return new byte [ 0 ] ; } if ( sequence . length == 1 ) { return new byte [ 0 ] ; } return new byte [ 0 ] ; }
def create ( ) : NEW def create ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
start_job ( self , job_name ) : NEW_LINE INDENT self . _job_name = job_name NEW_LINE if self . _job_name is not None : NEW_LINE INDENT self . _job_name = job_name NEW_LINE DEDENT DEDENT
crop_image ( self , image ) : NEW_LINE INDENT if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _crop_image ( image ) NEW_LINE DEDENT DEDENT
run ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT try : NEW_LINE INDENT Thread . sleep ( 1 ) NEW_LINE DEDENT except KeyboardInterrupt : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT
run_code ( self , code ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _run_code ( code ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_rest_operations ( self , credentials ) : NEW_LINE INDENT if credentials is not None : NEW_LINE INDENT return self . _rest_operations ( credentials ) NEW_LINE DEDENT return self . _rest_operations ( ) NEW_LINE DEDENT
render ( self ) : NEW_LINE INDENT return self . _render ( ) NEW_LINE DEDENT
render_ forbidden_information ( self ) : NEW_LINE INDENT return self . _render_ forbidden_information ( ) NEW_LINE DEDENT
render_view ( self , view ) : NEW_LINE INDENT if isinstance ( view , str ) : NEW_LINE INDENT return view NEW_LINE DEDENT else : NEW_LINE INDENT if isinstance ( view , str ) : NEW_LINE INDENT return view NEW_LINE DEDENT else : NEW_LINE INDENT return view NEW_LINE DEDENT DEDENT DEDENT
jump_full_path ( path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT elif path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT elif path . startswith ( " / " ) : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
render ( self ) : NEW_LINE INDENT data = self . data NEW_LINE if data is not None : NEW_LINE INDENT return data NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
render_empty_datasource ( self ) : NEW_LINE INDENT if self . datasource is not None : NEW_LINE INDENT return self . datasource . render ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . datasource . render ( ) NEW_LINE DEDENT DEDENT

write_response ( self , response ) : NEW_LINE INDENT if response . status_code == 200 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 304 : NEW_LINE INDENT return response NEW_LINE DEDENT elif response . status_code == 200 : NEW_LINE INDENT return response NEW_LINE DEDENT else : NEW_LINE INDENT return response NEW_LINE DEDENT DEDENT
static List < ExtensionImplementation > getAllExtensionImplementations ( Injector injector ) { List < ExtensionImplementation > extensionImplementations = injector . getExtensionImplementations ( ) ; if ( extensionImplementations == null ) { extensionImplementations = new ArrayList < ExtensionImplementation > ( ) ; } else { extensionImplementations . addAll ( extensionImplementations ) ; } return extensionImplementations ; }
current_method_signature ( self ) : NEW_LINE INDENT signature = self . method_signature NEW_LINE if not signature : NEW_LINE INDENT return None NEW_LINE DEDENT return signature NEW_LINE DEDENT
static void compact ( ) throws IOException { if ( memory == null ) { throw new IOException ( " memory is null " ) ; } if ( memory . size ( ) == 0 ) { throw new IOException ( " memory is null " ) ; } if ( memory . size ( ) == 0 ) { throw new IOException ( " memory is null " ) ; } }
def public public public public public public static void addMetricsEntry ( ) { if ( ! localMetricsCollection . isEmpty public public public public public public public public public public void add public public public public public public public public void add public public public public void add public public public public public void add public public public public static public static void add public static void add public static final public static synchronized public static synchronized public static synchronized public static void addMetricsMetricsEntry ( ) { if ( this .
def def _parse def _parse_value ( self , value ) : NEW_LINE INDENT value = value . strip ( ) NEW_LINE if len ( value ) == 0 : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT return value NEW_LINE DEDENT
get_coding_format_file ( self ) : NEW_LINE INDENT return self . _get_coding_format_file ( ) NEW_LINE DEDENT

def def def read ( self ) throws IOException { public void write ( ) throws IOException { if ( buffer . size ( ) > 0 ) { if ( buffer . size ( ) == 0 ) { throw new IOException ( " Copies specified number of bytes from input stream to output stream " ) ; } else { throw new IOException ( ) ; } } } else if ( buffer . size ( ) == 0 ) { throw new IOException ( ) ; } }
writer ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . write ( self . buffer ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE self . stream . flush ( ) NEW_LINE

def def write ( self , reader , writer ) : NEW_LINE INDENT try : NEW_LINE INDENT writer . write ( reader . read ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT writer . close ( ) NEW_LINE DEDENT else : NEW_LINE INDENT writer . write ( ) NEW_LINE DEDENT DEDENT DEDENT

def def def reader ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def read___python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def read___python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python__ def def def def read___python____python____python____python____python____python____python____python__ def def def ___python____python____python____python____python____python__ def def def ___python____python____python____python____python____python__ def def def def read___python____python____python____python____python____python____python__
compare_content ( self , content ) : NEW_LINE INDENT if content is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( content , bytes ) : NEW_LINE INDENT return content NEW_LINE DEDENT if isinstance ( content , bytes ) : NEW_LINE INDENT return content NEW_LINE DEDENT if isinstance ( content , bytes ) : NEW_LINE INDENT return content NEW_LINE DEDENT return content NEW_LINE DEDENT
compare_content ( self , content ) : NEW_LINE INDENT if content is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( content , str ) : NEW_LINE INDENT return content NEW_LINE DEDENT elif isinstance ( content , unicode ) : NEW_LINE INDENT return content NEW_LINE DEDENT elif isinstance ( content , str ) : NEW_LINE INDENT return content NEW_LINE DEDENT else : NEW_LINE INDENT return content NEW_LINE DEDENT DEDENT

def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
object ( self , obj ) : NEW_LINE INDENT if isinstance ( obj , object ) : NEW_LINE INDENT return obj NEW_LINE DEDENT else : NEW_LINE INDENT return obj NEW_LINE DEDENT DEDENT
extract_zip ( self ) : NEW_LINE INDENT if not self . patterns : NEW_LINE INDENT return None NEW_LINE DEDENT if self . patterns : NEW_LINE INDENT return self . patterns [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static < T extends DialogFragment > T creator ( final T fragment ) { if ( fragment == null ) { return null ; } return fragment . creator ( ) ; }
dismiss ( self ) : NEW_LINE INDENT if self . dialog . isShowing ( ) : NEW_LINE INDENT self . dialog . dismiss ( ) NEW_LINE self . dialog . dismiss ( ) NEW_LINE DEDENT DEDENT

static boolean matches ( String expression ) { if ( expression == null ) { return false ; } if ( expression . length ( ) == 0 ) { return false ; } if ( expression . length ( ) == 0 ) { return false ; } return true ; }
verify_phone_number_verification ( self , phone_number ) : NEW_LINE INDENT if not phone_number : NEW_LINE INDENT return False NEW_LINE DEDENT phone_number = phone_number . strip ( ) NEW_LINE if not phone_number . isdigit ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT if not phone_number . isdigit ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
static TelephoneNumber parseTelephoneNumber ( String telephoneNumber ) { if ( telephoneNumber == null ) { return null ; } if ( telephoneNumber . length ( ) == 0 ) { return null ; } if ( telephoneNumber . length ( ) == 1 ) { return telephoneNumber ; } if ( telephoneNumber . length ( ) == 2 ) { return telephoneNumber ; } return null ; }
is_birthday ( self , birthday ) : NEW_LINE INDENT if birthday : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python____python____python____python__ def def def def def def def def def def get___python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def def def def get___python____python____python____python__ def def def def def__python____python____python____python____python__ def def def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def get___python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python____python__
def def process_web_request ( self ) : NEW_LINE INDENT request = self . _get_request ( ) NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT request = self . _get_request ( request ) NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return request NEW_LINE DEDENT DEDENT
static String encode ( String s ) { if ( s == null ) { return " " ; } if ( s . length ( ) == 0 ) { return " " ; } return s . substring ( 0 , s . length ( ) - 1 ) ; }
decode_base64 ( value ) : NEW_LINE INDENT try : NEW_LINE INDENT return base64 . decode ( value ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static byte [ ] hexStringToByteArray ( String hexString ) { if ( hexString == null ) { return new byte [ 0 ] ; } if ( hexString . length ( ) == 0 ) { return new byte [ 0 ] ; } if ( hexString . length ( ) == 0 ) { return new byte [ 0 ] ; } if ( hexString . length ( ) == 1 ) { return new byte [ 0 ] ; } return new byte [ 0 ] ; }
read_properties ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_stream_content ( self , stream ) : NEW_LINE INDENT if isinstance ( stream , str ) : NEW_LINE INDENT return read_stream_content ( stream ) NEW_LINE DEDENT else : NEW_LINE INDENT return read_stream_content ( stream ) NEW_LINE DEDENT DEDENT
read_file_content ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT file = open ( filename , ' r ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
write_binay_data ( self , binay_data ) : NEW_LINE INDENT if binay_data is not None : NEW_LINE INDENT return binay_data NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
createTargetLocation ( self , targetLocation ) : NEW_LINE INDENT if self . targetLocation is None : NEW_LINE INDENT self . targetLocation = targetLocation NEW_LINE DEDENT else : NEW_LINE INDENT self . targetLocation = self . targetLocation NEW_LINE DEDENT return self . targetLocation NEW_LINE DEDENT
serialize ( self , xml ) : NEW_LINE INDENT if isinstance ( xml , str ) : NEW_LINE INDENT xml = etree . fromstring ( xml ) NEW_LINE DEDENT else : NEW_LINE INDENT xml = etree . fromstring ( xml ) NEW_LINE DEDENT return xml NEW_LINE DEDENT
parse_xml ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_xml ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_content ( self , content ) : NEW_LINE INDENT if isinstance ( content , str ) : NEW_LINE INDENT return content NEW_LINE DEDENT elif isinstance ( content , unicode ) : NEW_LINE INDENT return content NEW_LINE DEDENT elif isinstance ( content , str ) : NEW_LINE INDENT return content NEW_LINE DEDENT else : NEW_LINE INDENT return content NEW_LINE DEDENT DEDENT
parse_xml ( self , input_stream ) : NEW_LINE INDENT try : NEW_LINE INDENT xml = etree . fromstring ( input_stream ) NEW_LINE DEDENT except etree . XMLSyntaxError : NEW_LINE INDENT xml = etree . fromstring ( input_stream ) NEW_LINE DEDENT return xml NEW_LINE DEDENT
xmldsig ( self ) : NEW_LINE INDENT return self . xmldsig NEW_LINE DEDENT
sign ( self , xmldsig ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _sign ( xmldsig ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _sign ( xmldsig ) NEW_LINE DEDENT DEDENT
static boolean isCacheSafe ( Class < ? > class ) { if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } return class . getClassLoader ( ) . isCacheSafe ( class . getClassLoader ( ) ) ; }
static boolean isPrimitive ( Class < ? > clazz ) { if ( clazz . isPrimitive ( ) ) { return true ; } else { return false ; } }
static boolean isPrimitiveWrapper ( Class < ? > clazz ) { if ( clazz . isPrimitive ( ) ) { return true ; } else { return false ; } }
static Class < ? > getPrimitiveClass ( Class < ? > clazz ) { if ( clazz . isPrimitive ( ) ) { return clazz ; } else if ( clazz . isPrimitive ( ) ) { return clazz ; } else { return null ; } }
static < T > T get ( Class < T > type ) { if ( type . isPrimitive ( ) ) { return type . cast ( type ) ; } else { return null ; } }
static boolean isAssignableFromPrimitiveType ( Class < ? > primitiveType ) { if ( primitiveType == null ) { return false ; } if ( primitiveType . isPrimitive ( ) ) { return true ; } return false ; }
getInterfaces ( self , instance ) : NEW_LINE INDENT if isinstance ( instance , Class ) : NEW_LINE INDENT return [ instance ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
getInterfaces ( self , instance ) : NEW_LINE INDENT if isinstance ( instance , Class ) : NEW_LINE INDENT return [ instance ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ instance ] NEW_LINE DEDENT DEDENT
write ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write ( file ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write ( file ) NEW_LINE DEDENT DEDENT
template_variable_name_and_value_pairs ( self ) : NEW_LINE INDENT template_variable_name = self . template_variable_name NEW_LINE template_variable_value = self . template_variable_value NEW_LINE return template_variable_name , template_variable_value NEW_LINE DEDENT
add_message ( self , message ) : NEW_LINE INDENT self . message . append ( message ) NEW_LINE return self NEW_LINE DEDENT
static String getDatabaseName ( String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } return name ; }

def def get_built__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def get_ def get_value ( self , type ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python__ def def def _
static int getDefaultValue ( PrimitiveType primitiveType ) { if ( primitiveType . isPrimitive ( ) ) { return primitiveType . getDefaultValue ( ) ; } else if ( primitiveType . isPrimitive ( ) ) { return primitiveType . getDefaultValue ( ) ; } else { return primitiveType . getDefaultValue ( ) ; } }
convert ( self , object ) : NEW_LINE INDENT if isinstance ( object , type ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return self . _convert ( object ) NEW_LINE DEDENT DEDENT
convert ( self , object ) : NEW_LINE INDENT if isinstance ( object , type ) : NEW_LINE INDENT return object NEW_LINE DEDENT elif isinstance ( object , type ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
static WebEndpointMethodParameter fromString ( String query ) { WebEndpointMethodParameter parameter = WebEndpointMethodParameter . fromString ( query ) ; if ( parameter != null ) { return parameter ; } return new WebEndpointMethodParameter ( ) ; }
def _get_web_endpoint_method_parameter ( self ) : NEW_LINE INDENT return self . _get_web_endpoint_method_parameter ( ) NEW_LINE DEDENT
static WebEndpoint method ( String method ) { if ( method == null ) { throw new IllegalArgumentException ( ) ; } WebEndpoint method = new WebEndpoint ( method ) ; if ( method == null ) { throw new IllegalArgumentException ( ) ; } return method ; }

set_freemarker_variable ( self , freemarker_variable ) : NEW_LINE INDENT self . freemarker_variable = freemarker_variable NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void showDialog ( ) { if ( dialog != null ) { dialog . show ( ) ; } }
boolean isGranted ( @ Nonnull AnnotatedMethod value ) { if ( value . isGranted ( ) ) { return true ; } if ( value . isGranted ( ) ) { return true ; } return false ; }
void checkPermissions ( ) { if ( permissions . size ( ) == 0 ) { return ; } if ( permissions . size ( ) == 1 ) { return ; } if ( permissions . size ( ) == 2 ) { return ; } if ( permissions . size ( ) == 3 ) { return ; } if ( permissions . size ( ) == 4 ) { return ; } }
def def def get_database_record_set ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_database_record_set ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _get_record_set ( ) NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
void addEntity ( Entity entity ) { if ( entity == null ) { return ; } if ( entity . getPrimaryKey ( ) == null ) { return ; } if ( entity . getPrimaryKey ( ) . equals ( primaryKey ) ) { return ; } if ( entity . getPrimaryKey ( ) . equals ( primaryKey ) ) { return ; } if ( entity . getPrimaryKey ( ) . equals ( primaryKey ) ) { return ; } }
whether the given method explicitly declares the given exception or one of its superclasses which means that an exception of that type can be propagated as - is within a reflective invocation .
void remove ( SoftValue value ) { if ( value == null ) { throw new NullPointerException ( " value is null " ) ; } else { if ( value != null ) { value . remove ( ) ; } } }
static SoftValue create ( String value ) { if ( value == null ) { throw new IllegalArgumentException ( " value is null " ) ; } return new SoftValue ( value ) ; }
static boolean matches ( String pattern ) { if ( pattern == null || pattern . length ( ) == 0 ) { return false ; } if ( pattern . length ( ) == 0 ) { return false ; } return true ; }
static < A extends ArgumentsWithHelp > A get ( List < A > arguments ) { if ( arguments == null ) { return null ; } if ( arguments . size ( ) == 0 ) { return null ; } if ( arguments . size ( ) == 1 ) { return arguments . get ( 0 ) ; } if ( arguments . size ( ) == 1 ) { return arguments . get ( 0 ) ; } return null ; }
ProtobufEntity getAnnotation ( ) { if ( annotation == null ) { return null ; } if ( annotation instanceof ProtobufEntity ) { ProtobufEntity annotation = ( ProtobufEntity ) annotation ; return annotation ; } return null ; }
static boolean is ProtobufEntity ( Class < ? > clazz ) { return clazz . getAnnotation ( ProtobufEntity . class ) != null && clazz . getAnnotation ( ProtobufEntity . class ) != null && clazz . getAnnotation ( ProtobufEntity . class ) != null && clazz . getAnnotation ( ProtobufEntity . class ) != null && clazz . getAnnotation ( ProtobufEntity . class ) != null ; }
static List < ProtobufField > getAll ProtobufFields ( ) { List < ProtobufField > fields = new ArrayList < ProtobufField > ( ) ; for ( ProtobufField field : ProtobufField . values ( ) ) { fields . add ( field ) ; } return fields ; }
get_field_name ( self , field_name ) : NEW_LINE INDENT if isinstance ( field_name , six . string_types ) : NEW_LINE INDENT return field_name NEW_LINE DEDENT elif isinstance ( field_name , six . string_types ) : NEW_LINE INDENT return field_name NEW_LINE DEDENT elif isinstance ( field_name , six . string_types ) : NEW_LINE INDENT return field_name NEW_LINE DEDENT elif isinstance ( field_name , six . string_types ) : NEW_LINE INDENT return field_name NEW_LINE DEDENT elif isinstance ( field_name , six . string_types ) : NEW_LINE INDENT return field_name NEW_LINE DEDENT else : NEW_LINE INDENT return field_name NEW_LINE DEDENT DEDENT
static void setSetter ( String fieldName , String setter ) { if ( fieldName == null || fieldName . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( setter == null ) { throw new IllegalArgumentException ( ) ; } if ( fieldName . length ( ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( setter . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( setter . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( setter . length ( ) == 2 ) { throw new IllegalArgumentException ( ) ; } if ( setter . length ( ) == 1 ) { throw new IllegalArgumentException ( ) ; } if ( setter . length ( ) == 2 ) { throw new IllegalArgumentException ( ) ; } }
ObjectMapper new ObjectMapper ( ) { ObjectMapper mapper = new ObjectMapper ( ) ; if ( mapper == null ) { mapper = new ObjectMapper ( ) ; } if ( mapper instanceof ObjectMapper ) { mapper = ( ObjectMapper ) mapper ; } return mapper ; }
static JsonFactory newJsonFactory ( ) { JsonFactory factory = null ; try { factory = new JsonFactory ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return factory ; }
json_to_json ( self , json_string ) : NEW_LINE INDENT if isinstance ( json_string , basestring ) : NEW_LINE INDENT json_string = json . loads ( json_string ) NEW_LINE DEDENT return json_string NEW_LINE DEDENT
def border_values ( self ) : NEW_LINE INDENT border_values = [ ] NEW_LINE for border_value in self . border_values : NEW_LINE INDENT border_values . append ( border_value ) NEW_LINE DEDENT return border_values NEW_LINE DEDENT
def get_sql_statement ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _sql_statement NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _sql_statement NEW_LINE DEDENT DEDENT
copy_attributes ( self , ObjectName objectName ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _copy_attributes ( objectName ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
copy_attributes_to_target_object ( self , target_object , attribute_name ) : NEW_LINE INDENT target_object = target_object . copy ( ) NEW_LINE target_object . setAttribute ( attribute_name , target_object ) NEW_LINE return target_object NEW_LINE DEDENT
getProperty ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties [ name ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_property ( self , property , value ) : NEW_LINE INDENT self . _property = property NEW_LINE self . _value = value NEW_LINE DEDENT

save_token ( self , token ) : NEW_LINE INDENT if not token : NEW_LINE INDENT return NEW_LINE DEDENT self . token = token NEW_LINE DEDENT
get_token ( self ) : NEW_LINE INDENT token = self . _get_token ( ) NEW_LINE if token is None : NEW_LINE INDENT return None NEW_LINE DEDENT return token NEW_LINE DEDENT
current_context_class_loader ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _context_class_loader NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
find_resource_with_name ( self , name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_resource_with_name ( name ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read ( self , resource ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _input_stream . read ( resource ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return self . _input_stream . read ( ) NEW_LINE DEDENT DEDENT
def def read ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _input_stream . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _input_stream . read ( ) NEW_LINE DEDENT DEDENT


static String path ( String uri ) { if ( uri == null ) { throw new IllegalArgumentException ( " URI must not be null " ) ; } if ( uri . length ( ) == 0 ) { throw new IllegalArgumentException ( " URI must not be empty " ) ; } return uri . substring ( 0 , uri . length ( ) - 1 ) ; }
set_scheme ( String scheme ) : NEW_LINE INDENT try : NEW_LINE INDENT scheme = urlparse . urlparse ( scheme ) . scheme NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT


public public static void setPort ( URI uri , String port ) { if ( port == null ) { throw new IllegalArgumentException ( " port is not specified . " ) ; } else if ( port == null ) { throw new IllegalArgumentException ( " Port must be specified . " ) ; } }
append_slash ( self , path ) : NEW_LINE INDENT if path . startswith ( " / " ) : NEW_LINE INDENT self . append_slash ( path ) NEW_LINE DEDENT else : NEW_LINE INDENT self . append_slash ( path ) NEW_LINE DEDENT DEDENT
public public static final String getQueryString ( String uri , String path ) { if ( uri == null ) { return null ; } else if ( uri == null ) { return null ; } else { throw new IllegalArgumentException ( ) ; } } }
setFragment ( self , value ) : NEW_LINE INDENT if value is not null : NEW_LINE INDENT self . fragment = value NEW_LINE DEDENT else : NEW_LINE INDENT self . fragment = None NEW_LINE DEDENT DEDENT
def def _parse_uri ( self , uri ) : NEW_LINE INDENT uri = urlparse . urlparse ( uri ) NEW_LINE if not uri . scheme : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse . urlparse ( uri ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
def parameter ( self , parameter ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . getParameter ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . getParameter ( ) NEW_LINE DEDENT DEDENT
static MuffinManager create ( ) { return new MuffinManager ( ) ; }
get_muffin_value ( self ) : NEW_LINE INDENT muffin_value = self . muffin . get_muffin_value ( ) NEW_LINE return muffin_value NEW_LINE DEDENT
set_muffin_value ( self , muffin_value ) : NEW_LINE INDENT self . muffin_value = muffin_value NEW_LINE return self . muffin_value NEW_LINE DEDENT
get_data ( self ) : NEW_LINE INDENT data = self . clipboard . get_data ( ) NEW_LINE if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT return data NEW_LINE DEDENT
set_global_clipboard_contents ( self , clipboard_contents ) : NEW_LINE INDENT self . clipboard_contents = clipboard_contents NEW_LINE DEDENT
def def open_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def dis def discovers ( self ) : NEW_LINE INDENT return self . _discovers . _discovers ( ) NEW_LINE DEDENT
set_operation_parametres ( self , operation_parametres ) : NEW_LINE INDENT if operation_parametres is None : NEW_LINE INDENT operation_parametres = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT operation_parametres . append ( operation_parametres ) NEW_LINE DEDENT DEDENT
get_parametres ( operation ) : NEW_LINE INDENT parametres = [ ] NEW_LINE for parametres in operation . parametres : NEW_LINE INDENT parametres . append ( parametres [ 0 ] ) NEW_LINE DEDENT return parametres NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def iterator ( self ) : NEW_LINE INDENT return self . buffer . iterator ( ) NEW_LINE DEDENT
get_xml_encoding ( self ) : NEW_LINE INDENT return self . _xml_encoding NEW_LINE DEDENT
static void setJDK1 ( int jdk1 , int jdk2 , int jdk3 , int jdk4 , int jdk5 , int jdk6 , int jdk7 , int jdk8 , int jdk9 , int jdk10 , int jdk11 , int jdk12 , int jdk13 , int jdk13 , int jdk14 , int jdk14 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != jdk1 ) { if ( jdk1 != null ) { if ( jdk1 != null ) {
def def def get_logging_version ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_logging_version ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def getAuthorizationUrl ( self ) : NEW_LINE INDENT authorizationUrl = self . authorizationUrl NEW_LINE authorizationUrl = self . authorizationUrl NEW_LINE if authorizationUrl is not None : NEW_LINE INDENT return authorizationUrl NEW_LINE DEDENT return self . authorizationUrl NEW_LINE DEDENT

def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def public static void visit public static void visit public static void visit public static void visit public static void visit public static void visit public static void visit ( Class <__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void visitMethod ( Method method , Constructor constructor ) { if ( method == null || constructor == null ) { throw new NullPointerException ( ) ; } if ( method . getDeclaringClass ( ) == null ) { throw new NullPointerException ( ) ; } if ( constructor . getDeclaringClass ( ) == null ) { throw new NullPointerException ( ) ; } if ( constructor . getDeclaringClass ( ) == null ) { throw new NullPointerException ( ) ; } }
get_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
filter ( self , modifiers ) : NEW_LINE INDENT if isinstance ( modifiers , list ) : NEW_LINE INDENT return modifiers NEW_LINE DEDENT else : NEW_LINE INDENT return self . _filter ( modifiers ) NEW_LINE DEDENT DEDENT
filter ( kind ) : NEW_LINE INDENT kind = kind . lower ( ) NEW_LINE if kind == ' class ' : NEW_LINE INDENT kind = ' class ' NEW_LINE DEDENT if kind == ' field ' : NEW_LINE INDENT kind = ' field ' NEW_LINE DEDENT if kind == ' enum ' : NEW_LINE INDENT kind = ' enum ' NEW_LINE DEDENT if kind == ' enum ' : NEW_LINE INDENT kind = ' enum ' NEW_LINE DEDENT if kind == ' class ' : NEW_LINE INDENT kind = ' class ' NEW_LINE DEDENT if kind == ' enum ' : NEW_LINE INDENT kind = ' enum ' NEW_LINE DEDENT if kind == ' enum ' : NEW_LINE INDENT kind = ' enum ' NEW_LINE DEDENT if kind == ' class ' : NEW_LINE INDENT kind = ' class ' NEW_LINE DEDENT if kind == ' enum ' : NEW_LINE INDENT kind = ' enum ' NEW_LINE
filter ( self , filter ) : NEW_LINE INDENT return self . _filter ( filter ) NEW_LINE DEDENT
filter ( self , filter ) : NEW_LINE INDENT if filter : NEW_LINE INDENT return filter NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
check_map ( self , map ) : NEW_LINE INDENT if isinstance ( map , dict ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( map , list ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( map , dict ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
set_constructor ( self , constructor ) : NEW_LINE INDENT self . constructor = constructor NEW_LINE return self NEW_LINE DEDENT
query ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return self . _query ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _query ( object ) NEW_LINE DEDENT DEDENT
strip_hyphens ( self , padding ) : NEW_LINE INDENT if padding : NEW_LINE INDENT return self . _strip_hyphens ( padding ) NEW_LINE DEDENT return self . _strip_hyphens ( padding ) NEW_LINE DEDENT
an array of bytes to a string of two digits hex - representations .
get_indexes ( self ) : NEW_LINE INDENT return self . _get_indexes ( ) NEW_LINE DEDENT
parse_sql ( self , sql ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _parse_sql ( sql ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _parse_sql ( sql ) NEW_LINE DEDENT DEDENT
static void serialize ( Collection < ProtobufEntity > objects ) { if ( objects . size ( ) == 0 ) { return ; } if ( objects . size ( ) == 0 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 2 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 2 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 2 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 2 ) { return ; } if ( objects . size ( ) == 1 ) { return ; } if ( objects . size ( ) == 2 ) { return ;
set ( self , value ) : NEW_LINE INDENT if self . converter is not None : NEW_LINE INDENT self . converter . set ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . converter = None NEW_LINE DEDENT DEDENT
set ( self , value ) : NEW_LINE INDENT if self . converter is not None : NEW_LINE INDENT self . converter . set ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . converter . set ( value ) NEW_LINE DEDENT DEDENT
def def _get_abstract_pathname ( self ) : NEW_LINE INDENT return self . _get_abstract_pathname ( ) NEW_LINE DEDENT
public static ResultSet createLoggingVersion ( ResultSet resultSet ) throws SQLException { return new ResultSet ( resultSet , ResultSet . class , ResultSet . TYPE_FORWARD_ONLY ) ; }
parse_state ( self , state ) : NEW_LINE INDENT if isinstance ( state , dict ) : NEW_LINE INDENT return self . _parse_state ( state ) NEW_LINE DEDENT elif isinstance ( state , dict ) : NEW_LINE INDENT return self . _parse_state ( state ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _parse_state ( state ) NEW_LINE DEDENT DEDENT
extract_state ( self ) : NEW_LINE INDENT state = self . _get_state ( ) NEW_LINE if state is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return state NEW_LINE DEDENT DEDENT
static < T > T getGenericSupertype ( Class < T > clazz ) { if ( clazz == null ) { return null ; } if ( clazz . isArray ( ) ) { return clazz . getComponent ( 0 ) ; } else { return clazz . getComponent ( 0 ) ; } }
poll ( self , objects ) : NEW_LINE INDENT if len ( objects ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( objects ) == 1 : NEW_LINE INDENT return objects [ 0 ] NEW_LINE DEDENT elif len ( objects ) == 2 : NEW_LINE INDENT return objects [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return objects NEW_LINE DEDENT DEDENT
def poll ( self ) : NEW_LINE INDENT self . _poll ( ) NEW_LINE return self . _poll ( ) NEW_LINE DEDENT
static void obtainFields ( Class < ? > clazz ) { if ( clazz == null ) return ; if ( clazz . isInterface ( ) ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ; if ( clazz . getSuperclass ( ) == null ) return ;
get_methods_from_class ( cls ) : NEW_LINE INDENT if cls is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
static void obtain ( Class < ? > class ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) { if ( class . getSuperclass ( ) != null ) {
static < T extends Annotation > List < T > getAnnotatedMethods ( Class < T > annotationClass ) { List < T > methods = new ArrayList < T > ( ) ; methods . addAll ( annotationClass . getDeclaredMethods ( ) ) ; methods . addAll ( annotationClass . getDeclaredMethods ( ) ) ; return methods ; }
static Constructor [ ] getConstructors ( Class < ? extends Annotation > annotationClass ) { if ( annotationClass == null ) { return new Constructor [ 0 ] ; } if ( annotationClass . isInterface ( ) ) { return new Constructor [ 0 ] ; } return null ; }

first_index ( source , range ) : NEW_LINE INDENT try : NEW_LINE INDENT return source . index ( range ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return source . index ( range ) NEW_LINE DEDENT DEDENT
remove_all_characters ( self , string ) : NEW_LINE INDENT if not string : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( string , unicode ) : NEW_LINE INDENT return NEW_LINE DEDENT
clean_login_attempt ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . login_attempt = None NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT self . login_attempt = None NEW_LINE DEDENT DEDENT
initialize_audit_object ( self ) : NEW_LINE INDENT global audit_object NEW_LINE audit_object = self . audit_object NEW_LINE if audit_object is None : NEW_LINE INDENT audit_object = self . audit_object NEW_LINE DEDENT if audit_object is None : NEW_LINE INDENT audit_object = self . audit_object NEW_LINE DEDENT return audit_object NEW_LINE DEDENT
static MessageQueue getInstance ( ) { if ( instance == null ) { instance = new MessageQueue ( ) ; } return instance ; }
initialize ( cls ) : NEW_LINE INDENT global password validator NEW_LINE passwordValidator = cls ( ) NEW_LINE if passwordValidator is not None : NEW_LINE INDENT return passwordValidator NEW_LINE DEDENT passwordValidator = cls ( ) NEW_LINE if passwordValidator is not None : NEW_LINE INDENT return passwordValidator NEW_LINE DEDENT return passwordValidator NEW_LINE DEDENT
initialize_password_authenticator ( self ) : NEW_LINE INDENT if self . password_authenticator is not None : NEW_LINE INDENT self . password_authenticator = self . password_authenticator NEW_LINE DEDENT else : NEW_LINE INDENT self . password_authenticator = None NEW_LINE DEDENT DEDENT
get_locale_code ( self ) : NEW_LINE INDENT locale_code = self . locale NEW_LINE if locale_code is None : NEW_LINE INDENT locale_code = self . locale NEW_LINE DEDENT return locale_code NEW_LINE DEDENT
def create ( ) : def create ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _lookup ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
static Statement create ( Statement statement ) { if ( statement instanceof Statement ) { return ( Statement ) statement ; } else { return new Statement ( statement ) ; } }
remove_elements_from_stack ( self , stack ) : NEW_LINE INDENT if len ( stack ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( stack ) == 1 : NEW_LINE INDENT return stack [ 0 ] NEW_LINE DEDENT if len ( stack ) == 2 : NEW_LINE INDENT return stack [ 1 ] NEW_LINE DEDENT if len ( stack ) == 3 : NEW_LINE INDENT return stack [ 2 ] NEW_LINE DEDENT return stack [ 3 ] NEW_LINE DEDENT
push ( self , item ) : NEW_LINE INDENT self . stack . push ( item ) NEW_LINE DEDENT
remove_object ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT if isinstance ( object , str ) : NEW_LINE INDENT return object . delete ( ) NEW_LINE DEDENT return object . delete ( ) NEW_LINE DEDENT
create_input_stream ( self ) : NEW_LINE INDENT if self . input_stream is None : NEW_LINE INDENT self . input_stream = StringIO ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . input_stream = self . input_stream NEW_LINE DEDENT return self . input_stream NEW_LINE DEDENT
parse_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse . urlparse ( url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
match_tokenized_string ( self , string , pattern ) : NEW_LINE INDENT if isinstance ( string , six . string_types ) : NEW_LINE INDENT return string NEW_LINE DEDENT if isinstance ( pattern , six . string_types ) : NEW_LINE INDENT return pattern NEW_LINE DEDENT elif isinstance ( pattern , six . string_types ) : NEW_LINE INDENT return pattern NEW_LINE DEDENT elif isinstance ( pattern , six . string_types ) : NEW_LINE INDENT return pattern NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def add_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is not None : NEW_LINE INDENT return rectangle NEW_LINE DEDENT if rectangle is not None : NEW_LINE INDENT return rectangle NEW_LINE DEDENT DEDENT
boolean contains ( Rectangle rectangle ) { if ( rectangle == null ) { return false ; } if ( rectangle . intersects ( rectangle ) ) { return true ; } return false ; }
check_rectangle ( self , rectangle ) : NEW_LINE INDENT if rectangle is None : NEW_LINE INDENT return False NEW_LINE DEDENT rectangle = rectangle . copy ( ) NEW_LINE if rectangle . size ( ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
boolean intersects ( Rectangle rectangle ) { if ( rectangle == null ) { return false ; } if ( rectangle . isEmpty ( ) ) { return true ; } return rectangle . intersects ( rectangle ) ; }
union ( self , rectangle ) : NEW_LINE INDENT if isinstance ( rectangle , Rectangle ) : NEW_LINE INDENT return rectangle NEW_LINE DEDENT else : NEW_LINE INDENT return rectangle NEW_LINE DEDENT DEDENT
static Rectangle translate ( Rectangle rectangle ) { if ( rectangle == null ) { throw new IllegalArgumentException ( " rectangle is null " ) ; } if ( rectangle . getWidth ( ) == 0 ) { throw new IllegalArgumentException ( " rectangle is empty " ) ; } return rectangle ; }
static Rectangle2D rectangle2D ( Rectangle2D rectangle ) { Rectangle2D rectangle2D = new Rectangle2D ( rectangle ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; Rectangle2D rectangle2D = new Rectangle2D ( rectangle2D ) ; rectangle
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def _get_grid_cell_coordinates ( self ) : NEW_LINE INDENT return self . _grid_cell_coordinates ( ) NEW_LINE DEDENT
create_child_areas ( self , child_areas ) : NEW_LINE INDENT for child_areas in child_areas : NEW_LINE INDENT for child_areas in child_areas : NEW_LINE INDENT for child_areas in child_areas : NEW_LINE INDENT self . create_child_areas ( child_areas ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def def create_rows ( self ) : NEW_LINE INDENT rows = [ ] NEW_LINE rows = [ ] NEW_LINE for row in self . rows : NEW_LINE INDENT rows = [ ] NEW_LINE for row in rows : NEW_LINE INDENT rows . append ( row ) NEW_LINE DEDENT return rows NEW_LINE DEDENT return rows NEW_LINE DEDENT


static byte [ ] toByteArray ( byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( bytes . length == 0 ) { return null ; } return new byte [ bytes . length ] ; }
public public public static void copyCode ( ) { if ( codeBuffer . size ( ) > 0 ) { if ( codeBuffer . size ( ) > 0 ) { if ( codeBuffer . size ( ) > 0 ) { codeBuffer . clear ( ) ; codeBuffer . clear ( ) ; } else { codeBuffer . clear ( ) ; codeBuffer . clear ( ) ; } } } }
disassembled_instructions ( self ) : NEW_LINE INDENT return self . disassembled_instructions ( ) NEW_LINE DEDENT
loadProperties ( self ) : NEW_LINE INDENT if not self . properties : NEW_LINE INDENT self . properties = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . properties = self . properties NEW_LINE DEDENT return self . properties NEW_LINE DEDENT
def _get_query_parameters ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _query_parameters . copy ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _query_parameters NEW_LINE DEDENT DEDENT
void addLeaf ( Node node ) { if ( node . isLeaf ( ) ) { throw new IllegalArgumentException ( ) ; } if ( node . isLeaf ( ) ) { throw new IllegalArgumentException ( ) ; } }
void clear ( ) { if ( this . children != null ) { this . children . clear ( ) ; } }
next ( self ) : NEW_LINE INDENT if self . cached_element is not None : NEW_LINE INDENT return self . cached_element NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

add_predicate ( self , predicate ) : NEW_LINE INDENT if predicate is not None : NEW_LINE INDENT self . add_predicate ( predicate ) NEW_LINE DEDENT DEDENT
void setWorkPanelState ( WorkPanelState workPanelState ) { this . workPanelState = workPanelState ; }
def public public public public public void setWorkPanel ( WorkPanel work panel ) { if ( work panels . get ( ) != null ) { if ( work panels . get ( ) != null ) { if ( work panels . get ( ) != null ) { workPanel = work panels . get ( ) ; if ( work panels . get ( ) != null ) { workPanel = workPanel . get ( ) ; if ( workPanel . get ( ) != null ) { workPanel = workPanel . get ( ) ; if ( workPanel . get ( ) != null ) { workPanel = workPanel . get ( ) ; if ( workPanel . get ( ) != null ) { workPanel = workPanel . get ( ) ; if ( workPanel . get ( )
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_decimal_type ( name ) : NEW_LINE INDENT try : NEW_LINE INDENT return decimal . Decimal ( name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return decimal . Decimal ( name ) NEW_LINE DEDENT DEDENT
is_free ( term ) : NEW_LINE INDENT return isinstance ( term , Term ) NEW_LINE DEDENT
optimize ( self ) : NEW_LINE INDENT if self . _optimization : NEW_LINE INDENT self . _optimization = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _optimization = False NEW_LINE DEDENT return self NEW_LINE DEDENT
lexicographic_ordering ( self ) : NEW_LINE INDENT return self . comparator . lexicographic ( ) NEW_LINE DEDENT
processRequest ( final HttpServletRequest request ) : NEW_LINE INDENT request = request . getRequest ( ) NEW_LINE if request . getMethod ( ) == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' HEAD ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' HEAD ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' POST ' : NEW_LINE INDENT return request NEW_LINE DEDENT if request . getMethod ( ) == ' HEAD ' : NEW_LINE INDENT return request NEW_
def def def render_p def render_paging_control ( self ) : NEW_LINE INDENT return self . _render_paging_control ( ) NEW_LINE DEDENT
def def _render_button_control_hyperlink ( self ) : NEW_LINE INDENT return self . _render_button_control_hyperlink ( ) NEW_LINE DEDENT
train ( self ) : NEW_LINE INDENT return self . _train ( ) NEW_LINE DEDENT
learn ( self , input = None , output = None ) : NEW_LINE INDENT if not self . _initialized : NEW_LINE INDENT self . _initialized = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _initialized = False NEW_LINE DEDENT DEDENT
get_value ( self , key ) : NEW_LINE INDENT return self . _get_value ( key ) NEW_LINE DEDENT
index ( self , key ) : NEW_LINE INDENT key = key . lower ( ) NEW_LINE key = key . upper ( ) NEW_LINE key = key . lower ( ) NEW_LINE return key NEW_LINE DEDENT
insert_element ( self , index , element ) : NEW_LINE INDENT self . index = index NEW_LINE self . element = element NEW_LINE DEDENT
remove ( self , key ) : NEW_LINE INDENT if key not in self . mappings : NEW_LINE INDENT return NEW_LINE DEDENT self . mappings . remove ( key ) NEW_LINE self . mappings . remove ( key ) NEW_LINE DEDENT
remove_index ( self , index ) : NEW_LINE INDENT index = self . _get_index ( index ) NEW_LINE if index is not None : NEW_LINE INDENT return self . _remove_index ( index ) NEW_LINE DEDENT return self . _remove_index ( index ) NEW_LINE DEDENT
boolean hasNamedProperty ( String name , String value ) { if ( name == null ) { return false ; } if ( value == null ) { return true ; } if ( value . equals ( " " ) ) { return true ; } return false ; }

public static String getProperty ( String name , String property ) { if ( property == null ) { return null ; } return property ; }
is_assignable_from_primtive_type ( primtive_type ) : NEW_LINE INDENT return primtive_type . is_assignable ( ) NEW_LINE DEDENT
static PropertyIntrospector getPropertyIntrospector ( ) { if ( propertyIntrospector == null ) { propertyIntrospector = new PropertyIntrospector ( ) ; propertyIntrospector . init ( ) ; } return propertyIntrospector ; }
def _get_decision ( self ) : NEW_LINE INDENT return self . _get_decision ( ) NEW_LINE DEDENT
void init ( Decision node ) { if ( node == null ) { throw new IllegalArgumentException ( " node is null " ) ; } this . node = node ; }

unify ( terms ) : NEW_LINE INDENT if len ( terms ) == 1 : NEW_LINE INDENT return terms [ 0 ] NEW_LINE DEDENT elif len ( terms ) == 2 : NEW_LINE INDENT return terms [ 1 ] NEW_LINE DEDENT elif len ( terms ) == 1 : NEW_LINE INDENT return terms [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return terms [ 0 ] NEW_LINE DEDENT DEDENT

def def def def def def _comp def def def def def _comp def def def def _comp def def def def def def _comp def def def def def _get_clause def def def _get_clause def _get_clause def _get_body ( self ) : NEW_LINE INDENT return self . _get_body ( ) : NEW_LINE INDENT return self . _get_body ( ) NEW_LINE DEDENT def get_clause ( self ) : NEW_LINE INDENT return self . _get_clause ( ) NEW_LINE DEDENT def _get_LINE DEDENT
def def get_top def get_top_level_functors ( self ) : NEW_LINE INDENT return self . _get_top_level_functors ( self . head , self . head , self . body ) NEW_LINE DEDENT

def get_variable_counts ( self ) : NEW_LINE INDENT return self . _variable_counts ( self . _variable_counts , self . _variable_counts ) NEW_LINE DEDENT
compile_predicate ( predicate ) : NEW_LINE INDENT if predicate is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return predicate NEW_LINE DEDENT DEDENT
def def query ( self , query ) : NEW_LINE INDENT query = self . _compile ( query ) NEW_LINE return self . _compile ( query ) NEW_LINE DEDENT
write ( self , value ) : NEW_LINE INDENT if len ( value ) == 0 : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT if len ( value ) == 0 : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT else : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT DEDENT
def convert_unicode ( self , buffer ) : NEW_LINE INDENT if isinstance ( buffer , unicode ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT elif isinstance ( buffer , unicode ) : NEW_LINE INDENT return buffer NEW_LINE DEDENT else : NEW_LINE INDENT return buffer NEW_LINE DEDENT DEDENT
get_string_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _string_value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , string_types ) : NEW_LINE INDENT self . set_value ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . set_value ( value ) NEW_LINE DEDENT DEDENT
read ( self ) : NEW_LINE INDENT content = self . content NEW_LINE if content is not None : NEW_LINE INDENT return content NEW_LINE DEDENT content = self . content . read ( ) NEW_LINE if content is not None : NEW_LINE INDENT return content NEW_LINE DEDENT DEDENT
static boolean is loadable ( Class < ? > class ) { if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } return class . getClassLoader ( ) == null ; }
static boolean is loadable ( Class < ? > class ) { if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } if ( class . getClassLoader ( ) == null ) { return false ; } return class . getClassLoader ( ) == null ; }
def check_named_child_type ( self ) : NEW_LINE INDENT if ( self . named_child_type != null ) { return self . named_child_type . equals ( self . named_child_type ) NEW_LINE DEDENT
static boolean isSubtype ( Class < ? > parent , Class < ? > child ) { if ( parent . isAssignableFrom ( child ) ) { return true ; } if ( child . isAssignableFrom ( parent ) ) { return true ; } if ( child . isAssignableFrom ( parent ) ) { return true ; } return false ; }
Class < ? > loadClass ( String className ) throws ClassNotFoundException { Class < ? > clazz = Class . forName ( className ) ; if ( clazz == null ) { throw new ClassNotFoundException ( className ) ; } return clazz ; }
static Class instantiate ( Class clazz ) { if ( clazz == null ) { throw new IllegalArgumentException ( " Class must not be null . " ) ; } if ( clazz . isInterface ( ) ) { throw new IllegalArgumentException ( " Class must be an interface . " ) ; } if ( clazz . isInterface ( ) ) { throw new IllegalArgumentException ( " Class must be an interface . " ) ; } if ( clazz . isPrimitive ( ) ) { throw new IllegalArgumentException ( " Class must be a primitive type . " ) ; } return clazz ; }
constuctor ( self , * args , ** kwargs ) : NEW_LINE INDENT if len ( args ) == 0 : NEW_LINE INDENT return self NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return args [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT DEDENT
static void invoke ( final Object object , final String methodName , final Object ... parameters ) { if ( parameters != null && ! parameters . isEmpty ( ) ) { throw new IllegalArgumentException ( " Parameter ' " + methodName + " ' does not exist . " ) ; } if ( parameters != null && ! parameters . isEmpty ( ) ) { throw new IllegalArgumentException ( " Parameter ' " + methodName + " ' does not exist . " ) ; } }
def _call_method ( self , method ) : NEW_LINE INDENT method = getattr ( self , method ) NEW_LINE if method is not None : NEW_LINE INDENT return method ( self , method ) NEW_LINE DEDENT else : NEW_LINE INDENT return method ( self , method ) NEW_LINE DEDENT DEDENT
static void staticMethod ( final Class < ? > class , final String methodName , final Object ... args ) { if ( args == null || args . length == 0 ) { throw new IllegalArgumentException ( ) ; } if ( args . length == 0 ) { throw new IllegalArgumentException ( ) ; } if ( args . length == 1 ) { throw new IllegalArgumentException ( ) ; } if ( args . length == 2 ) { throw new IllegalArgumentException ( ) ; } if ( args . length == 3 ) { throw new IllegalArgumentException ( ) ; } if ( args . length == 4 ) { throw new IllegalArgumentException ( ) ; } }
static Constructor < T > getConstructor ( Class < T > clazz ) { if ( clazz == null ) { throw new NullPointerException ( ) ; } Constructor < T > constructor = clazz . getConstructor ( ) ; if ( constructor == null ) { throw new NullPointerException ( ) ; } Constructor < T > constructor = clazz . getConstructor ( ) ; if ( constructor == null ) { throw new NullPointerException ( ) ; } return constructor ; }
void set ( String propertyName , Object value ) { if ( propertyName == null ) { throw new IllegalArgumentException ( " Property name must not be null . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Property name must not be null . " ) ; } else { throw new IllegalArgumentException ( " Property name must not be null . " ) ; } }
queue ( self ) : NEW_LINE INDENT queue = self . queue NEW_LINE if not queue : NEW_LINE INDENT return None NEW_LINE DEDENT return queue NEW_LINE DEDENT
requeue ( self , queue ) : NEW_LINE INDENT self . queue = queue NEW_LINE if self . queue is not None : NEW_LINE INDENT self . queue . requeue ( ) NEW_LINE DEDENT DEDENT
def def def get_type ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . type NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . type NEW_LINE DEDENT DEDENT
clear_queue ( self ) : NEW_LINE INDENT self . queue . clear ( ) NEW_LINE self . queue . clear ( ) NEW_LINE DEDENT
search ( self ) : NEW_LINE INDENT result = self . _search ( ) NEW_LINE if not result : NEW_LINE INDENT return None NEW_LINE DEDENT return result NEW_LINE DEDENT
create_range_type ( name ) : NEW_LINE INDENT if name not in range_types : NEW_LINE INDENT range_types [ name ] = range_types [ name ] NEW_LINE DEDENT else : NEW_LINE INDENT range_types [ name ] = range_types [ name ] NEW_LINE DEDENT DEDENT

def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def ___python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def _

calculate_free_variables ( self ) : NEW_LINE INDENT if self . free_variables is None : NEW_LINE INDENT self . free_variables = [ ] NEW_LINE DEDENT return self . free_variables NEW_LINE DEDENT
def def get_free_variables ( self ) : NEW_LINE INDENT return self . _get_free_variables ( ) NEW_LINE DEDENT
heuristic_search_nodes ( self ) : NEW_LINE INDENT heuristic_search_nodes = [ ] NEW_LINE heuristic_search_nodes . sort ( ) NEW_LINE heuristic_search_nodes . reverse ( ) NEW_LINE return heuristic_search_nodes NEW_LINE DEDENT
write ( self , object ) : NEW_LINE INDENT if isinstance ( object , str ) : NEW_LINE INDENT object . write ( object ) NEW_LINE DEDENT else : NEW_LINE INDENT object . write ( object ) NEW_LINE DEDENT DEDENT
read ( self ) : NEW_LINE INDENT reader = self . _reader NEW_LINE if reader is None : NEW_LINE INDENT return None NEW_LINE DEDENT line = reader . readline ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
def def search_nodes ( self , search ) : NEW_LINE INDENT search_nodes = [ ] NEW_LINE for search_node in self . search_nodes : NEW_LINE INDENT search_nodes . append ( search_node ) NEW_LINE DEDENT return search_nodes NEW_LINE DEDENT
indent ( self ) : NEW_LINE INDENT return self . _indent ( ) NEW_LINE DEDENT
def arity ( arity n ) : NEW_LINE INDENT n = arity ( n ) NEW_LINE if n == 0 : NEW_LINE INDENT return n NEW_LINE DEDENT else : NEW_LINE INDENT return arity ( n ) NEW_LINE DEDENT DEDENT
check_variable_exists ( self ) : NEW_LINE INDENT if self . _variable_exists ( ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
_get_goal_property ( self ) : NEW_LINE INDENT return self . _get_goal_property ( ) NEW_LINE DEDENT
test ( self , examples ) : NEW_LINE INDENT if len ( examples ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( examples ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def get_maximum_information_gain ( self ) : NEW_LINE INDENT return self . _get_maximum_information_gain ( self . _input_properties , self . _output_properties ) NEW_LINE DEDENT
functor ( self ) : NEW_LINE INDENT functor = self . functor ( ) NEW_LINE if functor is None : NEW_LINE INDENT return None NEW_LINE DEDENT return functor NEW_LINE DEDENT
create_variable ( self , variable_name ) : NEW_LINE INDENT if isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT elif isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT elif isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT elif isinstance ( variable_name , six . string_types ) : NEW_LINE INDENT return variable_name NEW_LINE DEDENT DEDENT
redirect ( self , request ) : NEW_LINE INDENT if request . isRedirect ( ) : NEW_LINE INDENT return self . _redirect ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _redirect ( request ) NEW_LINE DEDENT DEDENT
static List < String > getSubList ( int page ) { List < String > subList = new ArrayList < String > ( ) ; subList . add ( page ) ; subList . add ( page ) ; subList . add ( page ) ; return subList ; }
def set_background ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . background = self . getBackground ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . background = None NEW_LINE DEDENT else : NEW_LINE INDENT self . background = None NEW_LINE DEDENT DEDENT DEDENT
repaint ( self ) : NEW_LINE INDENT if self . surface is not None : NEW_LINE INDENT self . surface . repaint ( ) NEW_LINE DEDENT self . surface . repaint ( ) NEW_LINE DEDENT
def def def def _generate ( self ) : NEW def _generate_image ( self ) : NEW_LINE INDENT return self . _generate_image ( ) NEW_LINE DEDENT def _generate_image ( self ) : NEW_LINE INDENT return self . _generate_image ( ) NEW_LINE DEDENT def _generate ( self ) : NEW_LINE INDENT return self . _generate_image ( ) NEW_LINE DEDENT def _generate ( self ) : NEW_LINE INDENT return self . _generate_image ( ) NEW_LINE DEDENT
Graphics2D createGraphics2D ( Graphics2D context ) { if ( context == null ) { context = new Graphics2D ( ) ; } return context . createGraphics2D ( ) ; }
create_custom_grey_scale_image ( self ) : NEW_LINE INDENT self . grey_scale_image = self . create_custom_grey_scale_image ( ) NEW_LINE return self . grey_scale_image NEW_LINE DEDENT
create_custom_colour_image_format ( self , colour_image_format ) : NEW_LINE INDENT self . colour_image_format = colour_image_format NEW_LINE return self . colour_image_format NEW_LINE DEDENT
void setHead ( int head ) { if ( head < 0 ) { throw new IllegalArgumentException ( ) ; } if ( head > 0 ) { throw new IllegalArgumentException ( ) ; } this . head = head ; }
iteratively on increasing maximum bound limits until the search space is exhausted or a goal state is found .
search_goal_state ( self ) : NEW_LINE INDENT if self . goal_state is not None : NEW_LINE INDENT return self . goal_state NEW_LINE DEDENT else : NEW_LINE INDENT return self . goal_state NEW_LINE DEDENT DEDENT
parse ( self ) : NEW_LINE INDENT parser = self . parser NEW_LINE parser . parse ( ) NEW_LINE return parser . parse ( ) NEW_LINE DEDENT
def
parse ( self , terms ) : NEW_LINE INDENT if isinstance ( terms , list ) : NEW_LINE INDENT return terms NEW_LINE DEDENT else : NEW_LINE INDENT if isinstance ( terms , tuple ) : NEW_LINE INDENT return terms NEW_LINE DEDENT else : NEW_LINE INDENT return terms NEW_LINE DEDENT DEDENT DEDENT
def def first_order_order ( self ) : NEW_LINE INDENT functor = self . functor ( ) NEW_LINE if isinstance ( functor , functor ) : NEW_LINE INDENT functor = functor . functor ( ) NEW_LINE DEDENT else : NEW_LINE INDENT functor = functor NEW_LINE DEDENT return functor NEW_LINE DEDENT
def parse ( self , list ) : NEW_LINE INDENT if not isinstance ( list , list ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
parse_terms ( self , functor ) : NEW_LINE INDENT if isinstance ( functor , list ) : NEW_LINE INDENT functor = functor . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT functor = functor . pop ( ) NEW_LINE DEDENT return functor NEW_LINE DEDENT
parse ( self , sentence ) : NEW_LINE INDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT if isinstance ( sentence , str ) : NEW_LINE INDENT return sentence NEW_LINE DEDENT return sentence NEW_LINE DEDENT

parse_real_number_literal ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_real_number ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_real_number ( ) NEW_LINE DEDENT DEDENT
def def parse_string_literal ( String literal ) : NEW_LINE INDENT if isinstance ( literal , basestring ) : NEW_LINE INDENT return literal NEW_LINE DEDENT elif isinstance ( literal , basestring ) : NEW_LINE INDENT return literal NEW_LINE DEDENT return literal NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


consume_token ( self , token , kind ) : NEW_LINE INDENT if kind not in self . expected_kinds : NEW_LINE INDENT raise ValueError ( " Unexpected kind " + kind ) NEW_LINE DEDENT if kind not in self . expected_kinds : NEW_LINE INDENT raise ValueError ( " Unexpected kind " + kind ) NEW_LINE DEDENT if kind not in self . expected_kinds : NEW_LINE INDENT raise ValueError ( " Unexpected kind " + kind ) NEW_LINE DEDENT if kind not in self . expected_kinds : NEW_LINE INDENT raise ValueError ( " Unexpected kind " + kind ) NEW_LINE DEDENT self . expected_kinds [ kind ] = kind NEW_LINE DEDENT
peek ( self , token_type ) : NEW_LINE INDENT type = token_type . lower ( ) NEW_LINE if type in self . tokens : NEW_LINE INDENT return self . tokens [ type ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . tokens [ type ] NEW_LINE DEDENT DEDENT
bind ( self , context ) : NEW_LINE INDENT if context is not None : NEW_LINE INDENT return context NEW_LINE DEDENT context = self . _bind ( context ) NEW_LINE if context is not None : NEW_LINE INDENT return context NEW_LINE DEDENT DEDENT
pending_operations ( self ) : NEW_LINE INDENT pending_operations = [ ] NEW_LINE for operation in self . pending_operations : NEW_LINE INDENT pending_operations . append ( operation ) NEW_LINE DEDENT return pending_operations NEW_LINE DEDENT
extract ( self , iterator ) : NEW_LINE INDENT if isinstance ( iterator , collections . Iterator ) : NEW_LINE INDENT return iterator . next ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return iterator NEW_LINE DEDENT DEDENT
def reserve_call_point ( self ) : NEW_LINE INDENT if self . _call_point is not None : NEW_LINE INDENT self . _call_point = self . _call_point NEW_LINE DEDENT else : NEW_LINE INDENT self . _call_point = self . _call_point NEW_LINE DEDENT DEDENT
def
def extract_years ( self ) : NEW_LINE INDENT return self . _extract_years ( ) NEW_LINE DEDENT
def def def update_timestamp ( self ) : NEW_LINE INDENT timestamp = self . timestamp NEW_LINE timestamp = self . timestamp NEW_LINE self . timestamp = self . timestamp NEW_LINE return self . timestamp NEW_LINE DEDENT
def def def def def def def def update__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python__ def def def def def def get___python____python____python____python____python__ def def def def def def get_minutes__python____python____python____python____python____python____python__ def def def def def def def def get_minutes__python____python____python____python____python____python____python____python__ def def def def def def def get_minutes__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def get_minutes__python____python____python____python____python____python____python____python__ def def def def def get_minutes__python____python____python____python____python____python____python____python__ def def def def def def get_minutes__python____python__
def def update_seconds ( self , timestamp ) : NEW_LINE INDENT return self . _get_seconds ( timestamp ) NEW_LINE DEDENT
def def def def def def get_year def get_year ( self , timestamp ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def set___python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def set___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def set___python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python____python__ def def def def def def def set___python____python____python____python____python____python____python____python__ def def def def def set___python____python____python____python____python____python__ def def def _
def def def update_month def update_timestamp ( self , timestamp ) : NEW_LINE INDENT if not self . is_valid_timestamp ( timestamp ) : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return timestamp NEW_LINE DEDENT DEDENT
def def update_timestamp ( self , timestamp ) : NEW_LINE INDENT timestamp = self . _get_timestamp ( timestamp ) NEW_LINE timestamp = self . _get_timestamp ( timestamp ) NEW_LINE if timestamp is not None : NEW_LINE INDENT return timestamp NEW_LINE DEDENT return timestamp NEW_LINE DEDENT
def def get_number def get_start_start_year_year ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _start_year_year_year_to_seconds ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
get_timestamp ( self , year , month ) : NEW_LINE INDENT return self . _timestamp . get ( year , month ) NEW_LINE DEDENT
read ( self ) : NEW_LINE INDENT buffer = self . buffer NEW_LINE b = self . buffer . copy ( ) NEW_LINE self . buffer = buffer NEW_LINE return b NEW_LINE DEDENT
def get_key ( self , key ) : NEW_LINE INDENT if key not in hashtable : NEW_LINE INDENT return None NEW_LINE DEDENT key = hashtable . get ( key ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return key NEW_LINE DEDENT
get_entry ( self , key ) : NEW_LINE INDENT if key not in self . keys : NEW_LINE INDENT return None NEW_LINE DEDENT key = self . keys . get ( key ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return self [ key ] NEW_LINE DEDENT
add_entry ( self , key , value ) : NEW_LINE INDENT if not self . hash . containsKey ( key ) : NEW_LINE INDENT self . hash . put ( key , value ) NEW_LINE DEDENT else : NEW_LINE INDENT self . hash . put ( key , value ) NEW_LINE DEDENT DEDENT
rehash ( self , old , new ) : NEW_LINE INDENT if len ( old ) != len ( new ) : NEW_LINE INDENT raise ValueError ( " The new hashtable must have the same size . " ) NEW_LINE DEDENT if len ( old ) != len ( new ) : NEW_LINE INDENT raise ValueError ( " The new hashtable must have the same size . " ) NEW_LINE DEDENT if len ( old ) != len ( new ) : NEW_LINE INDENT raise ValueError ( " The new hashtable must have the same size . " ) NEW_LINE DEDENT if len ( old ) != len ( new ) : NEW_LINE INDENT raise ValueError ( " The new hashtable must have the same size . " ) NEW_LINE DEDENT DEDENT
discardWork ( self , event ) : NEW_LINE INDENT if event is Cancel : NEW_LINE INDENT return NEW_LINE DEDENT if event is Save : NEW_LINE INDENT self . saveWork ( ) NEW_LINE DEDENT if event is Apply : NEW_LINE INDENT self . saveWork ( ) NEW_LINE DEDENT if event is Cancel : NEW_LINE INDENT self . discardWork ( ) NEW_LINE DEDENT DEDENT


def def def setFinished ( self ) : NEW_LINE INDENT if self . finished : NEW_LINE INDENT self . finished = False NEW_LINE DEDENT else : NEW_LINE INDENT self . finished = False NEW_LINE DEDENT return self . finished NEW_LINE DEDENT
public public static boolean isNativeImplementation ( ) { if ( this . nativeImplementation != null ) { return true ; } else { return true ; } }
generate_solutions ( self ) : NEW_LINE INDENT iterator = self . iterator ( ) NEW_LINE if isinstance ( iterator , list ) : NEW_LINE INDENT iterator = iterator [ 0 ] NEW_LINE DEDENT return iterator NEW_LINE DEDENT
def get_expected_information_content ( self ) : NEW_LINE INDENT return self . _get_expected_information_content ( ) NEW_LINE DEDENT
probabilities given a set of counts of occurrences of symbols .
def def def def public public public public static final void setDate def def public public public static public static public Date public public public public static public static public static final public static Date public public public public public static public static public static Date public static Date public static Date public static Date public static Date public static Date public static Date public static final String toString ( final String date public static final String toString ( final long timestamp , final long timestamp ) { return this . toString ( ) ; public static final long timestamp = new Date ( ) { public static final long timestamp = new Date ( ) { public static
process_action ( self , action ) : NEW_LINE INDENT if not action : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( action , int ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
static URL toURL ( String string ) { if ( string != null ) { return new URL ( string ) ; } else { return new URL ( string ) ; } }
def def get_basic_request_info ( self ) : NEW_LINE INDENT return self . _get_basic_request_info ( ) NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _get_cookie_info ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cookie_info NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _cookie_info NEW_LINE DEDENT DEDENT
static String getRequestParameter ( String requestParameter ) { if ( requestParameter == null ) { throw new IllegalArgumentException ( " requestParameter is null " ) ; } if ( requestParameter . length ( ) == 0 ) { throw new IllegalArgumentException ( " request parameter is empty " ) ; } return requestParameter ; }
def _get_request_scope_variables ( self ) : NEW_LINE INDENT return self . _request_scope_variables NEW_LINE DEDENT
static String getString ( String name ) { if ( name == null || name . isEmpty ( ) ) { return " " ; } if ( name . isEmpty ( ) ) { return " " ; } return name ; }
def _get_session_scope_variables ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . session_scope_variables NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . session_scope_variables NEW_LINE DEDENT DEDENT
static String getApplicationScopeVariables ( ) { if ( applicationScopeVariables == null ) { applicationScopeVariables = new HashMap < String , String > ( ) ; } return applicationScopeVariables ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def def def debug__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def debug__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def def def ___python____python____python____python__ def def def def def def def debug__python____python____python____python____python__ def def def def def def debug__python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python____python____python____python__ def def def def def def def def debug__python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def ___python____python____python____python____python__ def def def def debug__python____python____python____python____python____python__ def def def def ___python____python____python____python__ def def def _
def def def table ( self ) : NEW_LINE INDENT def table ( self ) : NEW_LINE INDENT table = [ ] NEW_LINE for property in self . properties : NEW_LINE INDENT table . append ( self . getProperty ( property ) NEW_LINE DEDENT def table ( self ) : NEW_LINE INDENT table . append ( self . getProperty ( property ) ) NEW_LINE DEDENT return table NEW_LINE DEDENT return table NEW_LINE DEDENT
search_nodes ( self , nodes ) : NEW_LINE INDENT if len ( nodes ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( nodes ) == 1 : NEW_LINE INDENT return nodes [ 0 ] NEW_LINE DEDENT if len ( nodes ) == 2 : NEW_LINE INDENT return nodes [ 1 ] NEW_LINE DEDENT if len ( nodes ) == 1 : NEW_LINE INDENT return nodes [ 0 ] NEW_LINE DEDENT if len ( nodes ) == 2 : NEW_LINE INDENT return nodes [ 1 ] NEW_LINE DEDENT return nodes [ 0 ] NEW_LINE DEDENT
def public public public static void update ( ) { if ( currentScreenState != null ) { if ( currentScreenState != null ) { if ( currentScreenState != null ) { if ( currentScreenState != null ) { currentScreenState = currentScreenState . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; if ( currentScreen != null ) { currentScreen = currentScreen . get ( ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
heuristic_search_nodes ( self , f ) : NEW_LINE INDENT return self . heuristic_search_nodes ( f ) NEW_LINE DEDENT
update_register_file ( self , register_file ) : NEW_LINE INDENT self . register_file = register_file NEW_LINE if self . register_file is not None : NEW_LINE INDENT self . register_file . close ( ) NEW_LINE DEDENT DEDENT
def fire ( self , event ) : NEW_LINE INDENT self . _event . set ( event ) NEW_LINE self . _event . set ( event ) NEW_LINE return self . _event NEW_LINE DEDENT
setNonArgPosition ( self ) : NEW_LINE INDENT if self . nonArgPosition is not None : NEW_LINE INDENT self . nonArgPosition = self . nonArgPosition NEW_LINE DEDENT DEDENT
check_position ( self , position ) : NEW_LINE INDENT if position == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if position == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
static Array < T > getArray ( int size ) { if ( size == 0 ) { return null ; } else { return new Array < T > ( size , size ) ; } }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

compare ( self , object ) : NEW_LINE INDENT if isinstance ( object , Comparator ) : NEW_LINE INDENT return self . comparator . compare ( object ) NEW_LINE DEDENT if isinstance ( object , Comparator ) : NEW_LINE INDENT return self . comparator . compare ( object ) NEW_LINE DEDENT return self . comparator . compare ( object ) NEW_LINE DEDENT
def def get_work_flow_state ( self ) : NEW_LINE INDENT return self . _work_flow_state NEW_LINE DEDENT
register_button_panel ( self , button_panel ) : NEW_LINE INDENT self . _button_panel = button_panel NEW_LINE return self . _button_panel NEW_LINE DEDENT
static < T extends Enum < T > > T create ( Class < T > enumClass ) { if ( enumClass == null ) { throw new NullPointerException ( " enumClass is null " ) ; } return enumClass . newInstance ( ) ; }

get_storage_cell ( self , variable ) : NEW_LINE INDENT if isinstance ( variable , StorageCell ) : NEW_LINE INDENT return self . storage_cell NEW_LINE DEDENT else : NEW_LINE INDENT return self . storage_cell NEW_LINE DEDENT DEDENT
def def _get_value ( self ) : NEW_LINE INDENT return self . _get_value ( ) NEW_LINE return self . _get_value ( ) NEW_LINE DEDENT
addPadding ( self ) : NEW_LINE INDENT if self . padding is None : NEW_LINE INDENT self . padding = self . padding NEW_LINE DEDENT else : NEW_LINE INDENT self . padding = self . padding NEW_LINE DEDENT DEDENT
addPadding ( self ) : NEW_LINE INDENT if self . padding is None : NEW_LINE INDENT self . padding = self . padding NEW_LINE DEDENT else : NEW_LINE INDENT self . padding = self . padding NEW_LINE DEDENT DEDENT
get_columns ( self ) : NEW_LINE INDENT columns = self . _columns NEW_LINE if columns is not None : NEW_LINE INDENT return columns NEW_LINE DEDENT return self . _columns NEW_LINE DEDENT
rows ( self ) : NEW_LINE INDENT rows = [ ] NEW_LINE for row in self . rows : NEW_LINE INDENT rows . append ( row ) NEW_LINE DEDENT return rows NEW_LINE DEDENT
insert ( self , location ) : NEW_LINE INDENT return self . insert ( location ) NEW_LINE DEDENT
create_time_range_type ( name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return NEW_LINE DEDENT time_range_type = time_range_types . get ( name ) NEW_LINE if time_range_type : NEW_LINE INDENT return time_range_type NEW_LINE DEDENT else : NEW_LINE INDENT time_range_type = time_range_types . get ( name ) NEW_LINE if time_range_type : NEW_LINE INDENT return time_range_type NEW_LINE DEDENT return NEW_LINE DEDENT DEDENT
create_pattern_type ( name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT pattern_type = type ( name ) NEW_LINE if not pattern_type . name : NEW_LINE INDENT return None NEW_LINE DEDENT pattern_type . name = name NEW_LINE return pattern_type NEW_LINE DEDENT
check_type ( self , type ) : NEW_LINE INDENT if isinstance ( type , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif isinstance ( type , str ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
update_layout_registers ( self ) : NEW_LINE INDENT if self . layout_registers is not None : NEW_LINE INDENT self . layout_registers = self . layout_registers . copy ( ) NEW_LINE DEDENT DEDENT
_find_variable ( self , s ) : NEW_LINE INDENT if self . scope is not None : NEW_LINE INDENT return self . scope . find_variable ( s ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
dircetional_search ( self ) : NEW_LINE INDENT return self . _dircetional_search ( ) NEW_LINE DEDENT
def reverse ( self , path ) : NEW_LINE INDENT return self . _reverse ( path ) NEW_LINE DEDENT
fetch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT block = self . block NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT block = None NEW_LINE DEDENT if block : NEW_LINE INDENT block = self . block NEW_LINE DEDENT return block NEW_LINE DEDENT
static PropertyReader createPropertyReader ( ) { PropertyReader reader = null ; try { reader = new PropertyReader ( ) ; } catch ( IOException e ) { throw new RuntimeException ( " Unable to create property reader " , e ) ; } return reader ; }
get_throttling_rate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . throttling_rate NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
read_bytes ( self ) : NEW_LINE INDENT buffer = self . buffer NEW_LINE b = bytearray ( ) NEW_LINE for i in range ( len ( buffer ) ) : NEW_LINE INDENT b . append ( buffer [ i ] ) NEW_LINE DEDENT return b NEW_LINE DEDENT
def _skip ( self , input_stream ) : NEW_LINE INDENT if len ( input_stream ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( input_stream ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def compile ( self , disjunctions ) : NEW_LINE INDENT if isinstance ( disjunctions , list ) : NEW_LINE INDENT return self . _compile ( disjunctions ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _compile ( disjunctions ) NEW_LINE DEDENT DEDENT
extract_int_from_bytes ( self , bytes ) : NEW_LINE INDENT try : NEW_LINE INDENT return int . from_bytes ( bytes ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
static byte [ ] toBytes ( int i ) { byte [ ] bytes = new byte [ i ] ; for ( int j = 0 ; j < i ; j ++ ) { bytes [ j ] = ( byte ) i ; } return bytes ; }
static byte [ ] toByteArray ( int i ) { if ( i < 0 ) { return new byte [ i ] ; } else { return new byte [ i ] ; } }
static int extract ( byte [ ] bytes ) { if ( bytes . length == 0 ) { return 0 ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } else { return bytes [ 2 ] ; } }
extract_short ( self , bytes ) : NEW_LINE INDENT if isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT elif isinstance ( bytes , bytes ) : NEW_LINE INDENT return bytes NEW_LINE DEDENT return bytes NEW_LINE DEDENT

apply_operation ( self , operation ) : NEW_LINE INDENT if operation is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . apply_operation ( operation ) NEW_LINE DEDENT DEDENT
def get_operators ( self ) : NEW_LINE INDENT if self . is_leaf ( ) : NEW_LINE INDENT return self . operators NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
def id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return int ( self . id ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . id NEW_LINE DEDENT DEDENT
get_object_value ( self ) : NEW_LINE INDENT return self . _object_value NEW_LINE DEDENT
set_value ( self , attribute , value ) : NEW_LINE INDENT if self . is_finalized ( ) : NEW_LINE INDENT return self . set_value ( attribute , value ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . set_value ( attribute , value ) NEW_LINE DEDENT DEDENT
static String [ ] split ( String [ ] strings ) { String [ ] strings = new String [ strings . length ] ; for ( String s : strings ) { strings [ s . length - 1 ] = s . trim ( ) ; } return strings ; }
static String [ ] delimeter ( String [ ] strings ) { String [ ] delimeters = new String [ strings . length ] ; for ( String s : strings ) { delimeters [ s . length ] = s . trim ( ) ; } return delimeters ; }
camelCase ( string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return camelCase ( string ) NEW_LINE DEDENT else : NEW_LINE INDENT return camelCase ( string ) NEW_LINE DEDENT DEDENT
convert_camel_case_to_snake_case ( self , camel_case ) : NEW_LINE INDENT if camel_case is not None : NEW_LINE INDENT return camel_case NEW_LINE DEDENT return self NEW_LINE DEDENT
static String log ( String message ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( message ) ; } return logger . isInfoEnabled ( ) ? logger . info ( message ) : message ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _get_offset ( self ) : NEW_LINE INDENT return self . offset NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
is_sub_category ( self ) : NEW_LINE INDENT return self . is_sub_category ( ) NEW_LINE DEDENT
def long_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _id NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _id NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_label_value ( self ) : NEW_LINE INDENT return self . label_value NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
static void deserializeHierarchyAttribute ( String hierarchyAttribute ) { if ( hierarchyAttribute == null ) { return ; } if ( hierarchyAttribute . length ( ) == 0 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 ) { return ; } if ( hierarchyAttribute . length ( ) == 2 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 ) { return ; } if ( hierarchyAttribute . length ( ) == 2 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 ) { return ; } if ( hierarchyAttribute . length ( ) == 2 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 ) { return ; } if ( hierarchyAttribute . length ( ) == 2 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 ) { return ; } if ( hierarchyAttribute . length ( ) == 2 ) { return ; } if ( hierarchyAttribute . length ( ) == 1 )
heuristic_eval ( self , board_position ) : NEW_LINE INDENT return self . heuristic_eval ( board_position ) NEW_LINE DEDENT
def _calc def def _calc def _calc def _calc def _calculate_negative_bucket ( self ) : NEW_LINE INDENT if ( self . bucketSize == 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT else : NEW_LINE DEDENT DEDENT

static void log ( String message , String message , Throwable throwable ) { logger . error ( message , throwable ) ; logger . error ( message , throwable ) ; }
write ( self , writer ) : NEW_LINE INDENT self . writer . write ( writer ) NEW_LINE self . writer . flush ( ) NEW_LINE DEDENT
classify ( self ) : NEW_LINE INDENT return self . _decision_tree . classify ( self ) NEW_LINE DEDENT
def def def def public public public static final public static final int [ public public public public public static final public static final int [ public static final int [ public static final int [ public static final public static final int [ public static final int [ public static final public static final int [ public static final public static final int [ public static final Comparator < caret public static final Comparator < caret public static final int [ ] { return new Comparator < Integer > ( ) { @ Override public static final int [ ] [ ] { return new int [ ] { 0 }
distriubuted_iterator ( self ) : NEW_LINE INDENT return self . _distriubuted_iterator ( ) NEW_LINE DEDENT
log_base_2 ( self , x ) : NEW_LINE INDENT return self . log_base_2 ( x ) NEW_LINE DEDENT
log_base_2 ( self ) : NEW_LINE INDENT return self . log_base_2 ( ) NEW_LINE DEDENT
log_base_10 ( self ) : NEW_LINE INDENT log_base_10 = self . log_base_10 ( ) NEW_LINE return log_base_10 NEW_LINE DEDENT
log_base_10 ( self ) : NEW_LINE INDENT log_base_10 = self . log_base_10 ( ) NEW_LINE return log_base_10 NEW_LINE DEDENT
static int log ( int n ) { if ( n <= 0 ) { return 0 ; } else { return n ; } }
log_base_10 ( self ) : NEW_LINE INDENT return self . log_base_10 ( ) NEW_LINE DEDENT
def def _calculate_ascii_ascii_characters ( self ) : NEW_LINE INDENT return self . _ascii_characters . _ascii_characters . get_ascii_characters ( ) NEW_LINE DEDENT
def def _calculate_ascii_length ( int n ) : NEW_LINE INDENT return int ( n ) NEW_LINE if ( n < 0 ) : NEW_LINE INDENT return 0 ; }
static int calculate_decimal_number ( int decimal_number ) { if ( decimal_number == 0 ) { return 0 ; } if ( decimal_number == 1 ) { return 1 ; } if ( decimal_number == 2 ) { return 0 ; } if ( decimal_number == 3 ) { return 1 ; } if ( decimal_number == 4 ) { return 1 ; } if ( decimal_number == 5 ) { return 1 ; } if ( decimal_number == 6 ) { return 1 ; } if ( decimal_number == 7 ) { return 1 ; } if ( decimal_number == 8 ) { return 1 ; } if ( decimal_number == 9 ) { return 1 ; } if ( decimal_number == 10 ) { return 1 ; } return 0 ; }
def def def def def def head__python____python____python____python____python____python____python__ def def def def head__python____python____python____python____python____python____python__ def def def def def head__python____python____python____python____python__ def def def def def head__python____python____python____python____python__ def def def def def def head__python____python____python____python____python__ def def def def def def def head__python____python____python____python__ def def def def def head__python____python____python____python____python__ def def def def def def head__python____python____python____python____python__ def def def def def head__python____python____python____python____python__ def def def def def head__python____python____python____python____python____python__ def def def def head__python____python____python____python____python__ def def def head__python____python____python____python____python____python__ def def def def head__python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python__ def def def def ___python____python____python____python__ def def def _
byte [ ] write ( byte [ ] bytes ) { byte [ ] bytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = bytes [ i ] ; } return bytes ; }
void moveScreen ( Screen screen ) { if ( screen == null ) { throw new IllegalArgumentException ( " Screen cannot be null . " ) ; } if ( screen != null && screen . equals ( screen ) ) { throw new IllegalArgumentException ( " Screen cannot be null . " ) ; } if ( screen == null ) { throw new IllegalArgumentException ( " Screen cannot be null . " ) ; } }
def _eval def _eval_logical_predicate ( self , predicate ) : NEW_LINE INDENT return self . _logical_predicate ( predicate ) NEW_LINE DEDENT
static void setEnvironment ( final String environment , final String value ) throws Exception { if ( environment == null ) { throw new IllegalArgumentException ( " Environment must be set . " ) ; } if ( value == null ) { throw new IllegalArgumentException ( " Environment must be set . " ) ; } else { throw new IllegalArgumentException ( " Environment must be set . " ) ; } }
static void setEnvironment ( Environment environment ) throws Exception { if ( environment == null ) { throw new IllegalArgumentException ( " Environment must be set . " ) ; } else { throw new IllegalArgumentException ( " Environment must be set . " ) ; } }
def def def def def def def def def def def def def def def def def def def def def def def def def def def get___python____python____python____python____python____python____python__ def def def def def get___python____python____python____python____python____python____python__ def def def def _
static Properties createProperties ( Properties parent ) { Properties properties = new Properties ( parent ) ; properties . setParent ( parent ) ; properties . setParent ( parent ) ; properties . setParent ( parent ) ; properties . setParent ( parent ) ; return properties ; }
set_throttling_rate ( self , rate ) : NEW_LINE INDENT self . throttling_rate = rate NEW_LINE self . throttling_rate = rate NEW_LINE DEDENT

loadProperties ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT properties = self . properties NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT properties = self . properties NEW_LINE DEDENT return properties NEW_LINE DEDENT

static void loadProperties ( Class < ? > class ) throws ClassNotFoundException { if ( class . getClassLoader ( ) == null ) { throw new ClassNotFoundException ( ) ; } if ( class . getClassLoader ( ) == this ) { throw new ClassNotFoundException ( ) ; } if ( class . getClassLoader ( ) == this ) { throw new ClassNotFoundException ( ) ; } }
loadProperties ( self , properties ) : NEW_LINE INDENT if not self . properties : NEW_LINE INDENT return NEW_LINE DEDENT self . properties = self . properties . copy ( ) NEW_LINE self . properties . load ( ) NEW_LINE DEDENT
def transform ( self ) : NEW_LINE INDENT def transform ( self ) : NEW_LINE INDENT return self . transform ( ) NEW_LINE DEDENT DEDENT
get_value ( self ) : NEW_LINE INDENT term = self . term NEW_LINE return term . get_value ( ) NEW_LINE DEDENT
bind_variable ( self , variable , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( variable , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , int ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( value , float ) : NEW_LINE INDENT return NEW_LINE
def def _get_priority_queue_type ( self ) : NEW_LINE INDENT return self . _priority_queue_type . get ( ) NEW_LINE DEDENT

def def def def log ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def App__python____python____python____python____python____python____python____python____python__ def def def def def def def def def App__python____python____python____python____python____python__ def def def def def def def App__python____python____python____python____python____python__ def def def def def def def def log__python____python____python____python____python____python__ def def def def def def def log__python____python____python____python____python____python__ def def def def def ___python____python____python____python____python__ def def def def def log__python____python____python____python____python____python____python____python____python__ def def def def def def log__python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python__ def def def def def log__python____python____python____python____python____python____python__ def def def def def log__python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
search ( self , search_method ) : NEW_LINE INDENT self . search_method = search_method NEW_LINE if self . search_method is not None : NEW_LINE INDENT return self . search_method NEW_LINE DEDENT return self . search_method NEW_LINE DEDENT
public void commit ( ) throws IOException { if ( ! transactional ) { throw new IllegalStateException ( ) ; } if ( transactional ) { throw new IllegalStateException ( ) ; } }
public public void request ( ) throws IOException { synchronized ( lock ) { if ( lock . getLock ( ) != null ) { throw new IllegalStateException ( ) ; } if ( lock . getLock ( ) != null ) { throw new IllegalStateException ( ) ; } lock . lock ( ) ; } }
add ( self , transaction ) : NEW_LINE INDENT if not self . cache . exists ( transaction ) : NEW_LINE INDENT self . cache . add ( transaction ) NEW_LINE DEDENT else : NEW_LINE INDENT self . cache . add ( transaction ) NEW_LINE DEDENT DEDENT
def def def def def def def def acquire ( self ) : def def def def def acquire ( self ) : def def def def def acquire ( self ) : def def def def def acquire ( self ) : def def def def _ def def def def _ public void acquire ( self ) : def def def _ public void acquire ( ) : def def def _ def def def def _
release_global_write_lock ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_lock . release ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write_lock . release ( ) NEW_LINE DEDENT DEDENT
def _get_session ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . session . get_session ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static MediaQueryNode createMediaQueryNode ( RuleSetNode ruleSetNode , MediaQueryNode mediaQueryNode ) { MediaQueryNode mediaQueryNode = new MediaQueryNode ( ruleSetNode , mediaQueryNode ) ; MediaQueryNode mediaQueryNode = new MediaQueryNode ( mediaQueryNode ) ; return mediaQueryNode ; }
def public public public public void add ( int size ) { if ( size > 0 ) { if ( queue . size ( ) > 0 ) { if ( queue . size ( ) > 0 ) { if ( queue . size ( ) > 0 ) { if ( queue . size ( ) > 0 ) { if ( queue . size ( ) > 0 ) { queue . add ( queue . size ( queue . size ( ) ) ) ; } else { queue . add ( queue . size ( ) ) ; } } } } else { queue . add ( queue . size ( ) ) ; } } } } }
remove_head ( self , queue ) : NEW_LINE INDENT if not self . queue : NEW_LINE INDENT return NEW_LINE DEDENT if self . queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if self . queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if self . queue . size ( ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT self . queue . remove ( self . queue . size ( ) ) NEW_LINE DEDENT
add_element_to_queue ( self , queue , element ) : NEW_LINE INDENT queue . add ( element ) NEW_LINE queue . add ( element ) NEW_LINE DEDENT
def def insert ( self , element ) : NEW_LINE INDENT queue . put ( element ) NEW_LINE queue . put ( element ) NEW_LINE return queue . put ( element ) NEW_LINE DEDENT
next_element ( self , iterator ) : NEW_LINE INDENT if isinstance ( iterator , Iterator ) : NEW_LINE INDENT return iterator . next ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return iterator . next ( ) NEW_LINE DEDENT DEDENT
def _parse_boolean ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return Boolean . parseBoolean ( self . properties . get ( " boolean " ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT


clone ( self ) : NEW_LINE INDENT return self NEW_LINE DEDENT

void backtracks ( Node node ) { if ( node == null ) { throw new IllegalArgumentException ( " node is null " ) ; } else { if ( node == null ) { throw new IllegalArgumentException ( " node is null " ) ; } else { throw new IllegalArgumentException ( " node is null " ) ; } } }
extract_call_table_entry ( self , call_table_entry ) : NEW_LINE INDENT return self . _extract_call_table_entry ( call_table_entry ) NEW_LINE DEDENT
public public public static void run ( ) { if ( ! is_anonymous ( ) { throw new IllegalStateException ( ) ; } }
a term from the raw byte representation on the machines heap into an abstract syntax tree .

restores ( memento ) : NEW_LINE INDENT if memento is not None : NEW_LINE INDENT return memento . restores ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def def def def def def def def def public public public public public public public public public public public public public public static public static final public static String toString public static String toString ( Class < public static String value ( String name ) { return this . getClass public static final String toString ( ) { return this . getClass public static final String toString ( ) { return this . toString ( ) ; } public static final String value = this . getClass ( ) { return this . getClass ( ) . getClass ( ) . getName ( ) ; } public static final String value = this . getClass ( )
void setPlaces ( String name , String value ) { if ( value == null ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value . length ( ) == 0 ) { return ; } if ( value

get_prod_script_goal ( self ) : NEW_LINE INDENT return self . _prod_script_goal NEW_LINE DEDENT
insert ( self , element ) : NEW_LINE INDENT self . queue . append ( element ) NEW_LINE self . queue . append ( element ) NEW_LINE self . queue . append ( element ) NEW_LINE DEDENT
remove ( self , queue ) : NEW_LINE INDENT if queue is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _queue . remove ( queue ) NEW_LINE DEDENT DEDENT
def def public public public public public static final void addSearchNodes ( final SearchNode search ) { if ( searchNodes . size ( ) == 0 ) { return ; } else if ( searchNodes . size ( ) == 0 ) { return ; } else if ( searchNodes . size ( ) == 0 ) { return ; } else { return ; } } }
public public void add ( final int path cost , final int path cost , final int path cost ) { if ( cost < 0 ) { throw new IllegalArgumentException ( ) ; } else if ( cost < 0 ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
depthFirstWalk ( self , term ) : NEW_LINE INDENT if isinstance ( term , Term ) : NEW_LINE INDENT return self . depthFirstWalk ( term ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . depthFirstWalk ( term ) NEW_LINE DEDENT DEDENT
depthFirst ( self , predicate ) : NEW_LINE INDENT if not predicate : NEW_LINE INDENT return None NEW_LINE DEDENT return self . depthFirst ( predicate ) NEW_LINE DEDENT
def def walk ( self , term ) : NEW_LINE INDENT if isinstance ( term , Term ) : NEW_LINE INDENT return self . _walk ( term ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _walk ( term ) NEW_LINE DEDENT DEDENT
def walk ( self , predicate ) : NEW_LINE INDENT if not isinstance ( predicate , term ) : NEW_LINE INDENT return None NEW_LINE DEDENT return predicate . walk ( self ) NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def walk ( self ) :__python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def get_properties ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _properties NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _properties NEW_LINE DEDENT DEDENT
get_properties ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_properties ( url ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def get_properties ( self ) : NEW_LINE INDENT path = self . path NEW_LINE if not path : NEW_LINE INDENT return None NEW_LINE DEDENT path = urlparse . urljoin ( self . path , path ) NEW_LINE if not path : NEW_LINE INDENT return None NEW_LINE DEDENT return path NEW_LINE DEDENT
public public public public static void render ( ) { super . render ( ) . render ( ) ; if ( textGridModel . get ( ) != null ) { return ; } } }
set_font_size ( self , font_size ) : NEW_LINE INDENT self . font_size = font_size NEW_LINE return self . font_size NEW_LINE DEDENT
public public public static void addChangeListener ( final PropertyChangeListener listener , final PropertyChangeListener listener ) { if ( listener != null ) { final PropertyChangeListener listener = new PropertyChangeListener ( ) { @ Override public void propertyChanged ( final PropertyChangeListener listener ) { if ( listener != null ) { listener . propertyChanged ( this ) ; } } } } }

void removePropertyChangeListener ( PropertyChangeListener listener ) { if ( listener instanceof PropertyChangeListener ) { ( ( PropertyChangeListener ) listener ) . removePropertyChangeListener ( listener ) ; } }
static PropertyChangeEvent [ ] getPropertyChangeListeners ( ) { PropertyChangeEvent [ ] propertyChangeListeners = new PropertyChangeEvent [ 0 ] ; PropertyChangeEvent [ ] propertyChangeListeners = new PropertyChangeEvent [ 0 ] ; PropertyChangeEvent [ ] propertyChangeListeners = new PropertyChangeEvent [ 0 ] ; for ( PropertyChangeEvent evt : propertyChangeListeners ) { propertyChangeListeners [ evt . getPropertyName ( ) ] = evt ; } return propertyChangeListeners ; }
create_double_range_type ( name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_
color ( self , target ) : NEW_LINE INDENT if isinstance ( target , str ) : NEW_LINE INDENT return self . _color ( target ) NEW_LINE DEDENT elif isinstance ( target , str ) : NEW_LINE INDENT return self . _color ( target ) NEW_LINE DEDENT return self . _color ( target ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


ensure_radio_controls ( radio_controls ) : NEW_LINE INDENT if radio_controls is not None : NEW_LINE INDENT return radio_controls NEW_LINE DEDENT if radio_controls is not None : NEW_LINE INDENT return radio_controls NEW_LINE DEDENT return radio_controls NEW_LINE DEDENT
def def become ( self , predicate ) : NEW_LINE INDENT if predicate == null : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
timeout ( self , timeout ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _timeout = timeout NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _timeout = timeout NEW_LINE DEDENT return self . _timeout NEW_LINE DEDENT
get_goal ( self ) : NEW_LINE INDENT if self . goal is None : NEW_LINE INDENT return self . goal NEW_LINE DEDENT return self . goal NEW_LINE DEDENT
def def def def def def def def def App def def def App def def def def def def def App def def def def App def def def App def def def App def def def App def def App def def App def def App def def App def def App def def def App
create_date_range_type ( name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_LINE name = name . replace ( ' - ' , ' _ ' ) NEW_
welcome_message ( self ) : NEW_LINE INDENT welcome_message = self . _welcome_message ( ) NEW_LINE return welcome_message NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__



static byte [ ] toBytes ( byte [ ] data ) { byte [ ] data = new byte [ data . length ] ; for ( int i = 0 ; i < data . length ; i ++ ) { data [ i ] = data [ i ] ; } return data ; }




def def convert_float_to_float ( self , float value ) : NEW_LINE INDENT if isinstance ( value , float ) : NEW_LINE INDENT return float ( value ) NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT DEDENT



static Object create ( Class < ? > type , Class < ? extends Object > type ) { if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } else if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } else if ( type . isPrimitive ( ) ) { throw new IllegalArgumentException ( ) ; } }
insert_object ( scope , object ) : NEW_LINE INDENT if isinstance ( scope , Scope ) : NEW_LINE INDENT return scope . insert_object ( object ) NEW_LINE DEDENT return scope . insert_object ( object ) NEW_LINE DEDENT
clear ( self , key ) : NEW_LINE INDENT self . map . remove ( key ) NEW_LINE self . map . clear ( ) NEW_LINE DEDENT
static void expand ( int newSize ) { if ( newSize < 1 ) { throw new IllegalArgumentException ( " The size of the array is too large . " ) ; } else if ( newSize > 1 ) { throw new IllegalArgumentException ( " The size of the array is too large . " ) ; } }
void insert ( String text ) { if ( text == null ) { throw new IllegalArgumentException ( " Text cannot be null . " ) ; } if ( text . length ( ) == 0 ) { throw new IllegalArgumentException ( " Text cannot be null . " ) ; } else { throw new IllegalArgumentException ( " Text cannot be null . " ) ; } }
compare_path_costs ( self , path_costs ) : NEW_LINE INDENT if path_costs is None : NEW_LINE INDENT path_costs = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT path_costs = [ path_costs [ 0 ] for path_costs in path_costs ] NEW_LINE DEDENT DEDENT
a flat list of terms which are literals variables functors or operators into a tree .
def get_operator_table ( self , name ) : NEW_LINE INDENT operator_table = self . operator_table . get_operator_table ( name ) NEW_LINE operator_LINE return operator_table . get_operator_table ( ) NEW_LINE DEDENT
resolve ( self , fixity ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . resolve ( fixity ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT

pad ( self , string , size ) : NEW_LINE INDENT if size == 0 : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return self . pad ( string , size ) NEW_LINE DEDENT DEDENT
def parse ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse ( ) NEW_LINE DEDENT DEDENT
parse_properties ( self , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return properties NEW_LINE DEDENT DEDENT
static String createUsage ( String name , String description , String comment ) { if ( name == null || description == null || comment == null || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment . length ( ) == 0 || comment
parse_command_line ( self , command_line ) : NEW_LINE INDENT if command_line is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( command_line , str ) : NEW_LINE INDENT return command_line NEW_LINE DEDENT if isinstance ( command_line , str ) : NEW_LINE INDENT return command_line NEW_LINE DEDENT return None NEW_LINE DEDENT
set_options ( self , properties ) : NEW_LINE INDENT if not self . options : NEW_LINE INDENT self . options = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . options = { } NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
parse_command_line ( self , command_line ) : NEW_LINE INDENT args = self . parse_command_line ( command_line ) NEW_LINE if len ( args ) == 1 : NEW_LINE INDENT return args [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return args NEW_LINE DEDENT DEDENT
static String format ( String format ) { if ( format == null ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } if ( format . equals ( " " ) ) { return " " ; } return format ; }
boolean equals ( Object element ) { if ( element == null ) { return false ; } if ( element . getClass ( ) . isArray ( ) ) { return true ; } if ( element . getClass ( ) . isArray ( ) ) { return true ; } if ( element . getClass ( ) . isArray ( ) ) { return true ; } return false ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
get_current_settings ( self ) : NEW_LINE INDENT return self . _current_settings NEW_LINE DEDENT
set_stemmer_type ( self , stemmer_type ) : NEW_LINE INDENT self . _stemmer_type = stemmer_type NEW_LINE DEDENT
stemmer ( stemmer ) : NEW_LINE INDENT if stemmer is None : NEW_LINE INDENT return None NEW_LINE DEDENT return stemmer . stem ( ) NEW_LINE DEDENT
stem ( self , word ) : NEW_LINE INDENT if isinstance ( word , str ) : NEW_LINE INDENT return self . stem ( word ) NEW_LINE DEDENT elif isinstance ( word , str ) : NEW_LINE INDENT return self . stem ( word ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . stem ( word ) NEW_LINE DEDENT DEDENT
stemmer ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return stemmer . stem ( ) NEW_LINE DEDENT except stemmer . stemmer . stemmer . stemmer . stemmer . stemmer . stemmer . stemmer . stemmer . stemmer : NEW_LINE INDENT return stemmer . stemmer ( ) NEW_LINE DEDENT DEDENT
create_float_range ( name ) : NEW_LINE INDENT if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE name = name . replace ( ' _ ' , ' - ' ) NEW_LINE return float_range ( name ) NEW_LINE DEDENT
reset ( self ) : NEW_LINE INDENT if self . state is not None : NEW_LINE INDENT self . state = self . state . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . state = { } NEW_LINE DEDENT DEDENT
def def print_current_environment_frame ( self ) : NEW_LINE INDENT if self . _current_environment_frame is not None : NEW_LINE INDENT return self . _current_environment_frame NEW_LINE DEDENT return self . _current_environment_frame NEW_LINE DEDENT
print_current_choice_point_frame ( self ) : NEW_LINE INDENT if self . current_choice_point_frame is None : NEW_LINE INDENT self . current_choice_point_frame = None NEW_LINE DEDENT else : NEW_LINE INDENT self . current_choice_point_frame = self . current_choice_point_frame NEW_LINE DEDENT DEDENT
def _invokes_internal_function ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _internal_function NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _internal_function NEW_LINE DEDENT DEDENT

def next ( self ) : NEW_LINE INDENT if ( self . continuationLabel == null ) : NEW_LINE INDENT return self . continuationLabel = self . continuationLabel NEW_LINE DEDENT else : NEW_LINE INDENT return self . continuationLabel = self . continuationLabel NEW_LINE DEDENT DEDENT
def def def get_trail_address ( self ) : NEW_LINE INDENT return self . trail . trail . get_address ( ) NEW_LINE DEDENT
def reset ( self , trail ) : NEW_LINE INDENT if self . address is None : NEW_LINE INDENT self . address = None NEW_LINE DEDENT else : NEW_LINE INDENT self . address = self . address NEW_LINE DEDENT DEDENT
def trail ( self ) : NEW_LINE INDENT if self . current_choice_point != null : NEW_LINE INDENT self . current_choice_point = self . current_choice_point NEW_LINE DEDENT else : NEW_LINE INDENT self . current_choice_point = self . current_choice NEW_LINE DEDENT DEDENT
unify ( self , element ) : NEW_LINE INDENT if len ( element ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( element [ 0 ] ) == 0 : NEW
unify ( self ) : NEW_LINE INDENT return self . _unify ( ) NEW_LINE DEDENT
def def def _get_variable_allocation_slot ( self ) : NEW_LINE INDENT return self . _get_variable_allocation_slot ( ) NEW_LINE DEDENT
def generate_random_starting_position ( self ) : NEW_LINE INDENT return random . choice ( self . random_starting_position ) NEW_LINE DEDENT
check_solvability ( self , tile ) : NEW_LINE INDENT if tile . isEmpty ( ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
move ( self , board_position ) : NEW_LINE INDENT self . board_position = board_position NEW_LINE return self . board_position NEW_LINE DEDENT
static boolean isValidMove ( BoardPosition boardPosition ) { if ( boardPosition == null ) { return false ; } if ( boardPosition . isValid ( ) ) { return true ; } return false ; }
printBoard ( self , board ) : NEW_LINE INDENT if len ( board ) == 0 : NEW_LINE INDENT return " " NEW_LINE DEDENT elif len ( board ) == 1 : NEW_LINE INDENT return " " NEW_LINE DEDENT elif len ( board ) == 2 : NEW_LINE INDENT return " " NEW_LINE DEDENT elif len ( board ) == 3 : NEW_LINE INDENT return " " NEW_LINE DEDENT DEDENT
void swapsTile ( Tile tile ) { if ( tile == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . getTile ( ) == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . getTile ( ) == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . getTile ( ) == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . getTile ( ) == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . getTile ( ) == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } }
void swapTile ( Tile tile ) { if ( tile == null ) { throw new IllegalArgumentException ( " Tile cannot be null . " ) ; } if ( tile . isEmpty ( ) ) { throw new IllegalArgumentException ( " Tile cannot be empty . " ) ; } if ( tile . isEmpty ( ) ) { throw new IllegalArgumentException ( " Tile cannot be empty . " ) ; } }
def def turn_board ( self , board ) : NEW_LINE INDENT if isinstance ( board , str ) : NEW_LINE INDENT return board NEW_LINE DEDENT elif isinstance ( board , str ) : NEW_LINE INDENT return board NEW_LINE DEDENT elif isinstance ( board , str ) : NEW_LINE INDENT return board NEW_LINE DEDENT DEDENT
def turn ( self , board ) : NEW_LINE INDENT if isinstance ( board , Board ) : NEW_LINE INDENT self . board = board NEW_LINE DEDENT elif isinstance ( board , Board ) : NEW_LINE INDENT self . board = board NEW_LINE DEDENT else : NEW_LINE INDENT self . board = None NEW_LINE DEDENT DEDENT


def def place ( self , element ) : NEW_LINE INDENT if isinstance ( element , str ) : NEW_LINE INDENT return element NEW_LINE DEDENT elif isinstance ( element , str ) : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
def def _place_element ( self , element ) : NEW_LINE INDENT element = self . _get_element ( element ) NEW_LINE if element is None : NEW_LINE INDENT return element NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
add ( self , element ) : NEW_LINE INDENT if not self . sizeable : NEW_LINE INDENT self . sizeable = True NEW_LINE DEDENT else : NEW_LINE INDENT self . sizeable = False NEW_LINE DEDENT self . queue . add ( element ) NEW_LINE DEDENT
def def count ( self ) : NEW_LINE INDENT size = self . size ( ) NEW_LINE size = self . size ( ) NEW_LINE return self . size ( ) NEW_LINE DEDENT
public public public static void signal ( int size , int size ) { if ( size > 0 ) { if ( size > 0 ) { throw new IllegalArgumentException ( ) ; } if ( size < 0 ) { throw new IllegalArgumentException ( ) ; } if ( size > 0 ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
enumerate ( ) : NEW_LINE INDENT context = context . getContext ( ) NEW_LINE if not context . isBound ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not context . isBound ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT if not context . isBound ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT return context NEW_LINE DEDENT
def def _enumerate_names ( self ) : NEW_LINE INDENT return self . named_contexts . values ( ) NEW_LINE DEDENT

public void removeEnvironmentProperty ( String name ) { if ( this . environment != null ) { this . environment . remove ( this . environment ) ; } }
void run ( ) throws Exception { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { throw new Exception ( " Thread interrupted " ) ; } if ( Thread . currentThread ( ) . isInterrupted ( ) ) { throw new Exception ( " Thread interrupted " ) ; } }
evaluate ( self , tokens ) : NEW_LINE INDENT if not isinstance ( tokens , list ) : NEW_LINE INDENT return tokens NEW_LINE DEDENT if isinstance ( tokens , list ) : NEW_LINE INDENT return tokens NEW_LINE DEDENT if isinstance ( tokens , tuple ) : NEW_LINE INDENT return tokens NEW_LINE DEDENT return tokens NEW_LINE DEDENT
def def public public static final void push ( final String mixin s ) { if ( mixin s scope != null ) { if ( mixin s != null ) { if ( mixin . scope != null ) { mixin . push ( mixin ) ; } else { mixin . push ( mixin ) ; } } } else { mixin . push ( mixin ) ; } }
def def lookup ( self ) : NEW_LINE INDENT return self . _get_variable_definition ( ) NEW_LINE DEDENT
update_row_height ( self ) : NEW_LINE INDENT if self . row_height is None : NEW_LINE INDENT self . row_height = None NEW_LINE DEDENT else : NEW_LINE INDENT self . row_height = self . row_height NEW_LINE DEDENT DEDENT
static int maximumColumnWidth ( int columnWidth ) { if ( columnWidth > 0 ) { return columnWidth ; } else if ( columnWidth < 0 ) { return 0 ; } else { return columnWidth ; } }
def def update ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT paged_list = self . _get_paged_list ( ) NEW_LINE if paged_list is not None : NEW_LINE INDENT return paged_list NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT DEDENT
def add ( self , node ) : NEW_LINE INDENT if isinstance ( node , HeuristicSearchNode ) : NEW_LINE INDENT return self . add ( node ) NEW_LINE DEDENT elif isinstance ( node , HeuristicSearchNode ) : NEW_LINE INDENT return self . add ( node ) NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
handle_error ( self , error ) : NEW_LINE INDENT if self . error_handler is not None : NEW_LINE INDENT self . error_handler . handle_error ( error ) NEW_LINE DEDENT else : NEW_LINE INDENT self . error_handler . handle_error ( error ) NEW_LINE DEDENT DEDENT
built - ins within a clause with their built - in definitions .
def def def def _compile def def def def def _compile def def def def _compile def def def def _compile def def def def _compile def def def def _compile def def def def _compile def def def def _compile def _symbol_key def _symbol_key def _symbol_key_key ( self ) :
find_all_functors ( self ) : NEW_LINE INDENT return self . _find_all_functors ( ) NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def def _eval def _eval def _compare ( self ) : NEW_LINE INDENT if len ( self . numeric_argument_arguments ( self . numeric_arguments ) > 0 ) : NEW_LINE INDENT if self . numeric_arguments . numeric_arguments . size ( ) == 1 : NEW_LINE INDENT return self . numeric_arguments [ 0 ] . equals ( self . numeric_arguments [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . numeric_arguments [ 0 ] . equals ( self . numeric_arguments [ 0 ] ) NEW_LINE DEDENT DEDENT DEDENT
def
public public void run ( ) throws Exception { if ( state == null ) { throw new IllegalStateException ( ) ; } else if ( state == null ) { throw new IllegalStateException ( ) ; } } }

insert ( heap , element ) : NEW_LINE INDENT heap . append ( element ) NEW_LINE return heap NEW_LINE DEDENT
static int ceiling ( int n ) { if ( n <= 0 ) { throw new IllegalArgumentException ( " n must be greater than 0 . " ) ; } if ( n < 0 ) { throw new IllegalArgumentException ( " n must be greater than 0 . " ) ; } if ( n < 0 ) { throw new IllegalArgumentException ( " n must be greater than 0 . " ) ; } return n ; }
Comparable comparator ( ) { if ( comparator == null ) { comparator = new Comparator ( ) ; comparator . setComparator ( this ) ; } return comparator ; }
void compare ( Comparator < ? > comparator , Comparator < ? > naturalOrdering ) { if ( comparator == naturalOrdering ) { return ; } if ( comparator == null ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } if ( comparator . compare ( comparator , naturalOrdering ) == 0 ) { return ; } }
insert ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return self . insert ( node ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . insert ( node ) NEW_LINE DEDENT DEDENT
restart ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . sweep ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . sweep ( ) NEW_LINE self . sweep ( ) NEW_LINE DEDENT DEDENT
get_goal_set ( self ) : NEW_LINE INDENT return self . _goal_set NEW_LINE DEDENT
def def def def def def def search ( self ) : NEW def search ( self ) : NEW def search ( self ) : NEW def search ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def def def def ____python____python____python____python____python____python____python____python____python__ def def def def def def def def def ____python____python____python____python____python____python____python____python__ def def def def def def def ____python____python____python____python____python____python____python____python____python__ def def def def def def def get_goals__python____python____python____python____python____python____python____python____python____python____python__ def def def def def def ___python____python____python____python____python____python__ def def def def def ____python____python____python____python____python____python____python__ def def def def def ____python____python____python__
search ( self ) : NEW_LINE INDENT return self . _search ( ) NEW_LINE DEDENT
next ( self , sequence ) : NEW_LINE INDENT if isinstance ( sequence , Sequence ) : NEW_LINE INDENT return sequence . next ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return sequence . next ( ) NEW_LINE DEDENT DEDENT
restores ( memento ) : NEW_LINE INDENT if memento is not None : NEW_LINE INDENT return memento . restores ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static String getProperty ( Class < ? > class , String name ) { if ( name == null ) { return null ; } if ( name . length ( ) == 0 ) { return null ; } return name . substring ( 0 , name . length ( ) - 1 ) ; }

def def memento ( self , value ) : NEW_LINE INDENT return self . memento . memento NEW_LINE DEDENT

def def Pops ( self , object ) : NEW_LINE INDENT if not isinstance ( object , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( object , str ) : NEW_LINE INDENT return object NEW_LINE DEDENT else : NEW_LINE INDENT return object NEW_LINE DEDENT DEDENT
static String convertModifiers ( String modifiers ) { if ( modifiers == null ) { return " " ; } if ( modifiers . length ( ) == 0 ) { return " " ; } if ( modifiers . length ( ) == 1 ) { return modifiers ; } return modifiers ; }
static int convert ( String string ) { if ( string == null ) { return 0 ; } if ( string . length ( ) == 0 ) { return 0 ; } if ( string . length ( ) == 0 ) { return 0 ; } if ( string . length ( ) == 0 ) { return 0 ; } return Integer . parseInt ( string ) ; }
Date convert ( String string ) { if ( string == null ) { return null ; } if ( string . length ( ) == 0 ) { return new Date ( ) ; } if ( string . length ( ) == 1 ) { return new Date ( ) ; } if ( string . length ( ) == 2 ) { return new Date ( ) ; } if ( string . length ( ) == 3 ) { return new Date ( ) ; } return null ; }
static boolean isDate ( String date ) { if ( date == null ) { return false ; } if ( date . length ( ) == 0 ) { return false ; } if ( date . length ( ) == 0 ) { return false ; } return true ; }
timeFormat ( self , timeFormat ) : NEW_LINE INDENT if isinstance ( timeFormat , str ) : NEW_LINE INDENT return timeFormat NEW_LINE DEDENT if isinstance ( timeFormat , str ) : NEW_LINE INDENT return timeFormat NEW_LINE DEDENT if isinstance ( timeFormat , str ) : NEW_LINE INDENT return timeFormat NEW_LINE DEDENT return timeFormat NEW_LINE DEDENT
static boolean isDateTime ( String dateTimeFormat ) { if ( dateTimeFormat == null ) { return false ; } if ( dateTimeFormat . length ( ) == 0 ) { return false ; } if ( dateTimeFormat . length ( ) == 1 ) { return true ; } return false ; }
static TokenSource createTokenSource ( String source ) { TokenSource tokenSource = new TokenSource ( ) ; tokenSource . setSource ( source ) ; return tokenSource ; }
create_token_source ( self ) : NEW_LINE INDENT token_source = { } NEW_LINE try : NEW_LINE INDENT token_source = self . token_source NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT token_source = self . token_source NEW_LINE DEDENT if token_source is None : NEW_LINE INDENT return None NEW_LINE DEDENT return token_source NEW_LINE DEDENT
create_token_source ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_token_source ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _create_token_source ( ) NEW_LINE DEDENT DEDENT
check_term ( term ) : NEW_LINE INDENT if isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT elif isinstance ( term , int ) : NEW_LINE INDENT return term NEW_LINE DEDENT DEDENT
static boolean isSingleton ( final String term ) { if ( term == null ) { return false ; } if ( term . length ( ) == 0 ) { return false ; } return true ; }
check_term_argument ( self , term ) : NEW_LINE INDENT if not isinstance ( term , int ) : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( term , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( term , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( term , int ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def get_child_terms ( self ) : NEW_LINE INDENT return self . _child_terms . get_child_terms ( ) NEW_LINE DEDENT
get_argument ( self , functor , index ) : NEW_LINE INDENT index = int ( index ) NEW_LINE try : NEW_LINE INDENT return getattr ( self , functor ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return getattr ( self , functor ) NEW_LINE DEDENT DEDENT
def get_child_terms ( self ) : NEW_LINE INDENT child_terms = self . get_child_terms ( ) NEW_LINE if child_terms is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return child_terms NEW_LINE DEDENT
static String toString ( String functors ) { if ( functors == null ) { return " " ; } if ( functors . length ( ) == 0 ) { return " " ; } if ( functors . length ( ) == 1 ) { return " " ; } if ( functors . length ( ) == 2 ) { return " " ; } if ( functors . length ( ) == 3 ) { return " " ; } if ( functors . length ( ) == 4 ) { return " " ; } if ( functors . length ( ) == 5 ) { return " " ; } return " " ; }
get_summary ( self , element ) : NEW_LINE INDENT summary = self . _get_summary ( element ) NEW_LINE if summary is None : NEW_LINE INDENT return None NEW_LINE DEDENT return summary NEW_LINE DEDENT
get_records ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . query . execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
void run ( ) throws SQLException { if ( this . query != null ) { this . query . execute ( ) ; this . query . execute ( ) ; } }
write_instruction ( self , instruction ) : NEW_LINE INDENT self . write_instruction ( instruction ) NEW_LINE DEDENT

def def read_first_order_order_logic_clause ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . input_stream . read ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . input_stream . read ( ) NEW_LINE DEDENT DEDENT
def def def def def def bind__python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python____python__ def def def def def def def def ____python____python____python____python____python____python____python____python__ def def def def def def def def def def ____python____python____python____python____python____python__ def def def def def def __ def bind__python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def get___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python____python__ def def def def def ____python____python____python____python____python____python____python____python__ def def def def _

def def read ( self ) : NEW_LINE INDENT return self . _read_stream . read ( ) NEW_LINE DEDENT
read_incoming_stream ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT stream = self . incoming_stream NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT stream = self . incoming_stream NEW_LINE DEDENT return stream NEW_LINE DEDENT
void setPackageVisibility ( String packageName , String visibility ) { if ( packageName == null ) { return ; } if ( visibility == null ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } if ( visibility . equals ( " " ) ) { return ; } }
get_last_modified_timestamps ( self ) : NEW_LINE INDENT if self . _last_modified_timestamps is not None : NEW_LINE INDENT return self . _last_modified_timestamps NEW_LINE DEDENT DEDENT
void updateTrackInfo ( TrackInfo trackInfo ) { if ( trackInfo == null ) { return ; } if ( trackInfo instanceof TrackInfo ) { ( ( TrackInfo ) trackInfo ) . updateTrackInfo ( trackInfo ) ; } else if ( trackInfo instanceof TrackInfo ) { ( ( TrackInfo ) trackInfo ) . updateTrackInfo ( trackInfo ) ; } }
update_info ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _info NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
render ( self ) : NEW_LINE INDENT if self . data is not None : NEW_LINE INDENT return self . data . render ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . render ( ) NEW_LINE DEDENT DEDENT
start_playing_music ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . start_playing_music ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . start_playing_music ( request ) NEW_LINE DEDENT DEDENT
start_playing_music ( self ) : NEW_LINE INDENT if self . _playing_music : NEW_LINE INDENT self . _playing_music = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _playing_music = False NEW_LINE DEDENT return self . _playing_music NEW_LINE DEDENT
def create ( self ) : NEW_LINE INDENT self . startMusicRequest = self . startMusicRequest NEW_LINE return self . startMusicRequest NEW_LINE DEDENT

public void start ( ) throws XMPPException { if ( packetReader == null ) { throw new XMPPException ( XMPPException . class , XMPPException . class , XMPPException . class . getSimpleName ( ) , XMPPException . class . getSimpleName ( ) ) ; } }
def public public public public public static void dropPacketReader ( ) throws IOException { if ( packetReader != null ) { if ( packetReader != null ) { if ( packetReader != null ) { if ( packetReader != null ) { packetReader . close ( ) NEW_LINE if ( packetReader != null ) { packetReader . close ( ) NEW_LINE DEDENT if ( packetReader != null ) { packetReader . close ( ) ; } } } } } }
parse ( self ) : NEW_LINE INDENT parser = self . parser NEW_LINE if parser is None : NEW_LINE INDENT parser = self . parser NEW_LINE DEDENT else : NEW_LINE INDENT parser = self . parser NEW_LINE DEDENT return parser NEW_LINE DEDENT
parse_top_level_packet ( self ) : NEW_LINE INDENT if self . top_level_packet is None : NEW_LINE INDENT self . top_level_packet = self . top_level_packet NEW_LINE DEDENT return self . top_level_packet NEW_LINE DEDENT
void processPacket ( Packet packet ) throws IOException { if ( packet != null ) { if ( packet . getPacket ( ) != null ) { if ( packet . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null ) { if ( packet . getPacket ( ) . getPacket ( ) != null )
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
create_new_chat ( self ) : NEW_LINE INDENT chat = self . get_chat ( ) NEW_LINE if chat : NEW_LINE INDENT return chat NEW_LINE DEDENT else : NEW_LINE INDENT chat = self . get_chat ( ) NEW_LINE return chat NEW_LINE DEDENT DEDENT
static String convert ( String content ) { if ( content == null ) { return " " ; } if ( content . length ( ) == 0 ) { return " " ; } if ( content . length ( ) == 0 ) { return " " ; } return content . substring ( 0 , content . length ( ) - 1 ) ; }
restore ( self , object ) : NEW_LINE INDENT if object is None : NEW_LINE INDENT return NEW_LINE DEDENT state = object . __getstate__ ( ) NEW_LINE if state is None : NEW_LINE INDENT state = { } NEW_LINE DEDENT else : NEW_LINE INDENT state = state . copy ( ) NEW_LINE state . update ( object ) NEW_LINE DEDENT return state NEW_LINE DEDENT
set_property ( self , property_name , value ) : NEW_LINE INDENT if property_name not in self . properties : NEW_LINE INDENT self . properties [ property_name ] = value NEW_LINE DEDENT self . properties [ property_name ] = value NEW_LINE DEDENT
def add_filter_filter ( filter ) : NEW_LINE INDENT if ( filter != null ) { if ( filter != null ) { if ( filter != null ) { filter . add ( filter ) ; } else { filter . add ( filter ) ; } } } }
process_request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return self . process_request ( request ) NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return self . process_request ( request ) NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return self . process_request ( request ) NEW_LINE DEDENT elif request . method == ' DELETE ' : NEW_LINE INDENT return self . process_request ( request ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . process_request ( request ) NEW_LINE DEDENT DEDENT
def clear ( self ) : NEW_LINE INDENT self . properties . clear ( ) NEW_LINE self . properties . clear ( ) NEW_LINE DEDENT
def def def def public public public public public void init ( ) throws IOException ( ) throws IOException { public void close ( ) throws IOException { synchronized public void close ( ) throws IOException { if ( this . writer . writer == null ) { throw new IOException ( ) ; } public void close ( ) throws IOException { if ( writer == null ) { throw new IOException ( ) ; } else { throw new IOException ( ) ; } } } } }
send_packet ( self , packet ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . send_packet ( packet ) NEW_LINE DEDENT except : NEW_LINE INDENT self . server . send_packet ( packet ) NEW_LINE DEDENT DEDENT
def def def def get_next_next_available def get_next_available_packet ( self ) : NEW_LINE INDENT return self . _queue . get_next_packet ( ) NEW_LINE def get_next_packet ( self ) : NEW_LINE INDENT return self . _queue . get_next_packet ( ) NEW_LINE DEDENT def get_next_packet ( self ) : NEW_LINE INDENT return self . _queue . get_next_packet ( ) NEW_LINE DEDENT DEDENT

List < Descriptors > getAllDescriptors ( ) { List < Descriptors > list = new ArrayList < > ( ) ; for ( Descriptors type : Descriptors . values ( ) ) { list . add ( type . getDescriptor ( ) ) ; } return list ; }
boolean contains ( String descriptor ) { if ( descriptor == null ) { return false ; } if ( descriptor . length ( ) == 0 ) { return true ; } if ( descriptor . length ( ) == 1 ) { return true ; } return false ; }
void add ( Consumer < EventLifeCycle > consumer ) { if ( consumer != null ) { consumer . accept ( new EventLifeCycle ( consumer ) ) ; } }
def def shutdown ( self ) : NEW_LINE INDENT if self . _task_engine_service is not None : NEW_LINE INDENT return self . _task_engine_service . shutdown ( ) NEW_LINE DEDENT DEDENT
def Identical File Contents ( self ) : NEW_LINE INDENT return self . _identical_file_contents ( ) NEW_LINE DEDENT
unmap ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _unmap ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _unmap ( ) NEW_LINE DEDENT DEDENT
validate_entry ( self , entry ) : NEW_LINE INDENT if isinstance ( entry , threading . Thread ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( entry , threading . Thread ) : NEW_LINE INDENT return True NEW_LINE DEDENT if isinstance ( entry , threading . Thread ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
_get_key ( self , key ) : NEW_LINE INDENT if key is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( key , str ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , int ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , str ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , tuple ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict ) : NEW_LINE INDENT return key NEW_LINE DEDENT if isinstance ( key , dict )
static boolean equals ( Object x , Object y ) { if ( x == null || y == null ) { return false ; } if ( x == null || y == null ) { return true ; } if ( x . getClass ( ) != y . getClass ( ) ) { return false ; } if ( y . getClass ( ) != x . getClass ( ) ) { return false ; } if ( x . getClass ( ) != y . getClass ( ) ) { return false ; } return true ; }
get ( self , key ) : NEW_LINE INDENT if not self . containsKey ( key ) : NEW_LINE INDENT return None NEW_LINE DEDENT if self . containsKey ( key ) : NEW_LINE INDENT return self . get ( key ) NEW_LINE DEDENT return None NEW_LINE DEDENT
public static Map < String , Integer > rehash ( Map < String , Integer > map ) { Map < String , Integer > map = new HashMap < String , Integer > ( ) ; map . putAll ( map ) ; return map ; }
void addMappings ( Map < String , String > map ) { Map < String , String > mappings = map . get ( " mappings " ) ; if ( mappings != null ) { for ( Map . Entry < String , String > entry : mappings . entrySet ( ) ) { mappings . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } }
remove ( self , key ) : NEW_LINE INDENT if not self . containsKey ( key ) : NEW_LINE INDENT raise KeyError ( key ) NEW_LINE DEDENT if self . containsKey ( key ) : NEW_LINE INDENT self . remove ( key ) NEW_LINE DEDENT DEDENT
remove ( self , key ) : NEW_LINE INDENT if not self . containsKey ( key ) : NEW_LINE INDENT raise KeyError ( key ) NEW_LINE DEDENT if self . containsKey ( key ) : NEW_LINE INDENT raise KeyError ( key ) NEW_LINE DEDENT DEDENT
void remove ( EntrySet entrySet ) { if ( entrySet . size ( ) == 0 ) { return ; } if ( entrySet . size ( ) == 1 ) { return ; } if ( entrySet . size ( ) == 2 ) { return ; } if ( entrySet . size ( ) == 3 ) { return ; } if ( entrySet . size ( ) == 1 ) { return ; } if ( entrySet . size ( ) == 2 ) { return ; } if ( entrySet . size ( ) == 1 ) { return ; } if ( entrySet . size ( ) == 2 ) { return ; } if ( entrySet . size ( ) == 3 ) { return ; } if ( entrySet . size ( ) == 1 ) { return ; } if ( entrySet . size ( ) == 2 ) { return ; } if ( entrySet . size ( ) == 1 ) { return ; } if ( entrySet . size ( ) ==
add_entry ( self , key , value , hash_code ) : NEW_LINE INDENT bucket = self . getBucket ( key ) NEW_LINE bucket . put ( key , value ) NEW_LINE bucket . put ( key , hash_code ) NEW_LINE bucket . put ( key , hash_code ) NEW_LINE DEDENT
static Map < String , String > map ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , " value " ) ; map . put ( " key " , " value " ) ; map . put ( " key " , " value " ) ; return map ; }
parse ( self , xml ) : NEW_LINE INDENT return self . _parse ( xml ) NEW_LINE DEDENT
static String encodeHexString ( byte [ ] bytes ) { if ( bytes == null ) { return " " ; } if ( bytes . length == 0 ) { return " " ; } if ( bytes . length == 1 ) { return bytes [ 0 ] ; } if ( bytes . length == 2 ) { return bytes [ 1 ] ; } if ( bytes . length == 3 ) { return bytes [ 2 ] ; } if ( bytes . length == 4 ) { return bytes [ 3 ] ; } return bytes [ 4 ] ; }
static String encode ( String s ) { if ( s == null ) { return null ; } String base64 = Base64 . encode ( s ) ; return base64 ; }
static byte [ ] encode ( byte [ ] bytes ) { if ( bytes == null || bytes . length == 0 ) { return null ; } return new byte [ bytes . length ] ; }
get_count ( self ) : NEW_LINE INDENT count = self . count NEW_LINE if count : NEW_LINE INDENT return count NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
jump ( self , position ) : NEW_LINE INDENT if position is None : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def change_playback ( self ) : NEW_LINE INDENT if self . _playback ( ) : NEW_LINE INDENT self . _playback ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _playback ( ) NEW_LINE DEDENT DEDENT
change_volume ( self , volume ) : NEW_LINE INDENT if volume is None : NEW_LINE INDENT return NEW_LINE DEDENT if volume is not None : NEW_LINE INDENT self . volume = volume NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
get_available_playlists ( self , request ) : NEW_LINE INDENT if not self . _available_playlists : NEW_LINE INDENT self . _available_playlists = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . _available_playlists = [ ] NEW_LINE DEDENT return self . _available_playlists NEW_LINE DEDENT
update_command ( self , command ) : NEW_LINE INDENT self . _update_command ( command ) NEW_LINE return self . _update_command NEW_LINE DEDENT
handle_volume_command ( self , volume_command ) : NEW_LINE INDENT if not self . _volume_command : NEW_LINE INDENT self . _volume_command = volume_command NEW_LINE DEDENT else : NEW_LINE INDENT self . _volume_command = None NEW_LINE DEDENT DEDENT
jump_command ( self ) : NEW_LINE INDENT if self . _jump_command is not None : NEW_LINE INDENT return self . _jump_command NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
selectTrackCommand ( self , command ) : NEW_LINE INDENT if not command : NEW_LINE INDENT return None NEW_LINE DEDENT if not command : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return command NEW_LINE DEDENT DEDENT
def generate_cache_bound ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cache_bound NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _cache_bound NEW_LINE DEDENT DEDENT
cache ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cache . get ( request ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return self . _cache . get ( request ) NEW_LINE DEDENT DEDENT
get_alternatives ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _alternatives NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
ImmutableMap < String , String > convert ( ImmutableMap < String , String > map ) { checkNotNull ( map ) ; checkArgument ( ! map . isEmpty ( ) ) ; checkArgument ( ! map . isEmpty ( ) ) ; return map ; }
static SparsePrincipal getInstance ( String name ) { if ( name == null ) { throw new IllegalArgumentException ( " name must not be null " ) ; } return new SparsePrincipal ( name ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
invoke ( self , method ) : NEW_LINE INDENT target = self . target NEW_LINE if target is not None : NEW_LINE INDENT return target . invoke ( method ) NEW_LINE DEDENT else : NEW_LINE INDENT return target . invoke ( method ) NEW_LINE DEDENT DEDENT
delete_tree ( self , tree ) : NEW_LINE INDENT if not tree : NEW_LINE INDENT return NEW_LINE DEDENT self . _delete_tree ( tree ) NEW_LINE self . _delete_tree ( tree ) NEW_LINE DEDENT
update_properties ( self , properties ) : NEW_LINE INDENT if not properties : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( properties , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( properties , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( properties , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( properties , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( properties , dict ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT

schedulePingTask ( pingInterval ) : NEW_LINE INDENT if pingInterval is None : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 0 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval < 0 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 : NEW_LINE INDENT return NEW_LINE DEDENT if pingInterval > 1 :
add ( self , option ) : NEW_LINE INDENT if option == null : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , list ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( option , tuple ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance
add_option ( parser , option ) : NEW_LINE INDENT if not parser . has_option ( option ) : NEW_LINE INDENT parser . add_option ( option ) NEW_LINE DEDENT DEDENT
def parse_command_line_arguments ( self ) : NEW_LINE INDENT args = [ ] NEW_LINE for arg in self . args : NEW_LINE INDENT args . append ( arg ) NEW_LINE DEDENT return args NEW_LINE DEDENT
get_usage_screen ( self ) : NEW_LINE INDENT screen = self . _get_usage_screen ( ) NEW_LINE if not screen : NEW_LINE INDENT return None NEW_LINE DEDENT return screen NEW_LINE DEDENT
parse_command_line_arguments ( self ) : NEW_LINE INDENT args = [ ] NEW_LINE for arg in self . args : NEW_LINE INDENT args . append ( arg . strip ( ) ) NEW_LINE DEDENT args = [ ] NEW_LINE for arg in args : NEW_LINE INDENT args . append ( arg ) NEW_LINE DEDENT return args NEW_LINE DEDENT
public static XMPPConnection createConnection ( ) throws XMPPException { XMPPConnection connection = new XMPPConnection ( ) ; connection . setPacketReader ( new PacketReader ( ) ) ; connection . setPacketReader ( new PacketReader ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketReader ( new PacketReader ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter ( ) ) ; connection . setPacketWriter ( new PacketWriter (
static Notification message ( String message ) { if ( message == null || message . length ( ) == 0 ) { return null ; } if ( message . length ( ) == 0 ) { return null ; } if ( message . length ( ) == 1 ) { return null ; } return new Notification ( message ) ; }
get_compression_handler ( self ) : NEW_LINE INDENT if self . compression_handler is not None : NEW_LINE INDENT return self . compression_handler NEW_LINE DEDENT DEDENT
void start ( ) throws IOException { if ( streamCompressionEnabled ) { streamCompression . start ( ) ; } else { streamCompression . start ( ) ; } }
def start ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT logger . info ( " Start using stream compression . " ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT logger . error ( " Unable to start using stream compression . " ) NEW_LINE DEDENT else : NEW_LINE INDENT logger . info ( " Using stream compression . " ) NEW_LINE DEDENT DEDENT

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def emit ( self , message ) : NEW_LINE INDENT if message is not None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( message , Message ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( message , Message ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
emit_error_message ( self , message ) : NEW_LINE INDENT if self . error_message is None : NEW_LINE INDENT self . error_message = message NEW_LINE DEDENT else : NEW_LINE INDENT self . error_message = message NEW_LINE DEDENT DEDENT

static StartEvent createStartEvent ( ) { StartEvent startEvent = new StartEvent ( ) ; startEvent . setStartTime ( System . currentTimeMillis ( ) ) ; startEvent . setEndTime ( System . currentTimeMillis ( ) ) ; startEvent . setStartTime ( System . currentTimeMillis ( ) ) ; startEvent . setEndTime ( System . currentTimeMillis ( ) ) ; return startEvent ; }
create_start_event ( start_event ) : NEW_LINE INDENT if start_event is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return start_event NEW_LINE DEDENT DEDENT
write_string ( self , new_string ) : NEW_LINE INDENT self . write_string ( new_string ) NEW_LINE self . write_string ( new_string ) NEW_LINE DEDENT
boolean provideResource ( String resource ) { if ( resource == null ) { return false ; } if ( resource . length ( ) == 0 ) { return false ; } if ( resource . length ( ) == 0 ) { return false ; } return true ; }
is_resource_registered ( self , source ) : NEW_LINE INDENT if not source : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
static boolean isResourceContainer ( ResourceContainer resourceContainer ) { if ( resourceContainer == null ) { return false ; } return resourceContainer . isResourceContainer ( ) ; }
get_resources ( self , ID ) : NEW_LINE INDENT if not self . _resources : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if self . _resources . get ( ID ) : NEW_LINE INDENT return self . _resources . get ( ID ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _resources . get ( ID ) NEW_LINE DEDENT DEDENT
def get_cached_object ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _cached_object NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _cached_object NEW_LINE DEDENT DEDENT
def def def def def get_parameters ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def get_storage_parameters ( self ) : NEW__python____python____python____python____python____python____python____python__ def def def def def get_parameters ( self ) : NEW__python____python____python____python____python____python____python____python__ def def def def def get_parameters ( self ) : NEW__python____python____python____python____python____python____python____python__ def def def def def get_parameters ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def get_parameters ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python__ def def def def def get_parameters ( self__python____python____python____python____python__ def def def def def get_parameters ( self
remove_word ( self , word ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache . remove ( word ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . cache . remove ( word ) NEW_LINE DEDENT DEDENT
put_object ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self . cache [ key ] = value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT self . cache [ key ] = value NEW_LINE DEDENT DEDENT
static Map < String , String > collect ( Map < String , String > filters ) { Map < String , String > map = new HashMap < String , String > ( ) ; if ( filters != null ) { for ( String filter : filters ) { map . put ( filter , filter ) ; } } Map < String , String > map = new HashMap < String , String > ( ) ; map . putAll ( filters ) ; return map ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__


public public static void print ( String name ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( " Creating listeners that will print in the console when new activity is detected . " ) ; logger . debug ( name ) ; } }

register_events ( self , events ) : NEW_LINE INDENT for event in events : NEW_LINE INDENT self . register_event ( event ) NEW_LINE DEDENT DEDENT
add_event ( self , event ) : NEW_LINE INDENT self . _events . append ( event ) NEW_LINE DEDENT
add_event ( self , event ) : NEW_LINE INDENT self . _events . append ( event ) NEW_LINE DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . lock . acquire ( ) NEW_LINE self . lock . release ( ) NEW_LINE self . lock . acquire ( ) NEW_LINE self . lock . release ( ) NEW_LINE self . lock . release ( ) NEW_LINE self . lock . release ( ) NEW_LINE self . lock . release ( ) NEW_LINE self . lock . release ( ) NEW_LINE DEDENT finally : NEW_LINE INDENT self . lock . release ( ) NEW_LINE DEDENT DEDENT
unregister_event ( self , event ) : NEW_LINE INDENT if not event : NEW_LINE INDENT return NEW_LINE DEDENT if event . is_deleted ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if event . is_deleted ( ) : NEW_LINE INDENT return NEW_LINE DEDENT event . delete ( ) NEW_LINE DEDENT
execute ( self ) : NEW_LINE INDENT if self . outputExtension is not None : NEW_LINE INDENT return self . outputExtension . execute ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

MusicPlayerError create ( ) { MusicPlayerError error = new MusicPlayerError ( ) ; error . setMusicPlayer ( this ) ; return error ; }
start_playing_command ( self , command ) : NEW_LINE INDENT self . command = command NEW_LINE return self . command NEW_LINE DEDENT
stop_playing ( self ) : NEW_LINE INDENT if self . is_playing ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_playing ( ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_playing ( ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
fulfill_command ( self , command ) : NEW_LINE INDENT if not isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if not isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( command , str ) : NEW_LINE INDENT return
create_playlist ( self ) : NEW_LINE INDENT playlist = self . _create_playlist ( ) NEW_LINE if not playlist : NEW_LINE INDENT playlist = self . _create_playlist ( ) NEW_LINE DEDENT return playlist NEW_LINE DEDENT
create_playlist ( self ) : NEW_LINE INDENT playlist = self . _create_playlist ( ) NEW_LINE return playlist NEW_LINE DEDENT
static void append ( String prefix , String suffix ) { if ( prefix == null ) { return ; } if ( suffix == null ) { return ; } if ( suffix . equals ( " " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix . equals ( " / " ) ) { return ; } if ( suffix
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

get_first_playlist ( self ) : NEW_LINE INDENT playlist = self . _get_playlist ( ) NEW_LINE if playlist : NEW_LINE INDENT return playlist NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
launch_button_action ( self , action ) : NEW_LINE INDENT if action . startswith ( " launch " ) : NEW_LINE INDENT return action NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) throws IOException { System . out . println ( " Starting Nakamura " ) ; System . out . println ( " Starting Nakamura " ) ; System . out . println ( " Starting Nakamura " ) ; System . out . println ( " Starting Nakamura " ) ; }
static boolean isOK ( String url ) { if ( url == null ) { return false ; } if ( url . startsWith ( " http " ) ) { return true ; } return false ; }
public public public public void actionPerformed ( ActionEvent e e ) { if ( e . getAction ( ) != null ) { if ( e . getAction ( ) != null ) { return ; } } }
static ImageIcon getIcon ( String path ) { if ( path == null ) { return null ; } if ( path . length ( ) == 0 ) { return null ; } if ( path . length ( ) == 1 ) { return new ImageIcon ( path . charAt ( 0 ) ) ; } if ( path . length ( ) == 2 ) { return new ImageIcon ( path . charAt ( 1 ) ) ; } return null ; }
static void main ( String [ ] args ) { System . exit ( 0 ) ; }
replace_contents ( self , contents , values ) : NEW_LINE INDENT if values is None : NEW_LINE INDENT return contents NEW_LINE DEDENT if len ( contents ) == 0 : NEW_LINE INDENT return contents NEW_LINE DEDENT elif len ( contents ) == 1 : NEW_LINE INDENT return contents [ 0 ] NEW_LINE DEDENT elif len ( contents ) == 2 : NEW_LINE INDENT return contents [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return contents NEW_LINE DEDENT DEDENT
export_presence ( self , presences ) : NEW_LINE INDENT if presences is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT for presence in presences : NEW_LINE INDENT if presence is not None : NEW_LINE INDENT return presence NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT DEDENT
add_json_value ( self , value ) : NEW_LINE INDENT if value == null : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . add_json_value ( value ) NEW_LINE DEDENT DEDENT
def def set_current_json_value ( self , current_json_value ) : NEW_LINE INDENT if current_json_value == null : NEW_LINE INDENT return NEW_LINE DEDENT if current_json_value == null : NEW_LINE INDENT return NEW_LINE DEDENT current_LINE DEDENT
parse_json_value ( value ) : NEW_LINE INDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT value = json . loads ( value ) NEW_LINE DEDENT if isinstance ( value , six . integer_types ) : NEW_LINE INDENT value = json . loads ( value ) NEW_LINE DEDENT if isinstance ( value , six . string_types ) : NEW_LINE INDENT value = json . loads ( value ) NEW_LINE DEDENT return value NEW_LINE DEDENT
parse_json_value ( self , json_value ) : NEW_LINE INDENT if isinstance ( json_value , dict ) : NEW_LINE INDENT return json_value NEW_LINE DEDENT elif isinstance ( json_value , list ) : NEW_LINE INDENT return json_value NEW_LINE DEDENT elif isinstance ( json_value , dict ) : NEW_LINE INDENT return json_value NEW_LINE DEDENT elif isinstance ( json_value , dict ) : NEW_LINE INDENT return json_value NEW_LINE DEDENT elif isinstance ( json_value , dict ) : NEW_LINE INDENT return json_value NEW_LINE DEDENT else : NEW_LINE INDENT return json_value NEW_LINE DEDENT DEDENT
get_json_value ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _create ( ) NEW_LINE DEDENT DEDENT
static boolean isValidCommand ( String command ) { if ( command == null ) { return false ; } if ( command . startsWith ( " - " ) ) { return true ; } if ( command . startsWith ( " - " ) ) { return true ; } return false ; }
handle_command ( self , command ) : NEW_LINE INDENT if isinstance ( command , str ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif isinstance ( command , str ) : NEW_LINE INDENT return command NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
verifies ( self , command ) : NEW_LINE INDENT if isinstance ( command , str ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif isinstance ( command , str ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif isinstance ( command , str ) : NEW_LINE INDENT return command NEW_LINE DEDENT DEDENT
execute ( self , statement ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _execute ( statement ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _execute ( statement ) NEW_LINE DEDENT DEDENT
get_all_subclasses ( self ) : NEW_LINE INDENT return self . _get_all_subclasses ( ) NEW_LINE DEDENT
all_subclasses ( self ) : NEW_LINE INDENT return self . subclasses ( ) NEW_LINE DEDENT
static List < Class < ? > > getClasses ( Class < ? > clazz ) { if ( clazz == null ) { return Collections . emptyList ( ) ; } Class < ? > clazz = clazz . getSuperclass ( ) ; if ( clazz == null ) { return Collections . emptyList ( ) ; } return getClasses ( clazz ) ; }
List < Class < ? > > getClasses ( ) { List < Class < ? > > subclasses = new ArrayList < Class < ? > > ( ) ; for ( Class < ? > clazz : getClasses ( ) ) { subclasses . add ( clazz ) ; } return subclasses ; }
get_all_known_ subclasses ( self , location ) : NEW_LINE INDENT return self . _get_all_known_ subclasses ( location ) NEW_LINE DEDENT
create_list ( self , Element ) : NEW_LINE INDENT if isinstance ( Element , list ) : NEW_LINE INDENT return self . _create_list ( Element ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _create_list ( Element ) NEW_LINE DEDENT DEDENT
get_accumulated_size ( self ) : NEW_LINE INDENT return self . accumulated_size NEW_LINE DEDENT
process_packet ( self , packet ) : NEW_LINE INDENT if self . packet is None : NEW_LINE INDENT return NEW_LINE DEDENT if self . packet is not None : NEW_LINE INDENT return NEW_LINE DEDENT self . packet = packet NEW_LINE DEDENT
get_first_volume ( self ) : NEW_LINE INDENT return self . _get_first_volume ( ) NEW_LINE DEDENT
def get_error_response ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT response = self . _get_error_response ( ) NEW_LINE DEDENT except ValueError as e : NEW_LINE INDENT response = self . _get_error_response ( ) NEW_LINE DEDENT return response NEW_LINE DEDENT
def def def def def def def def def def def def def def def def def def def def def def def def def createErrorResponse def create_error def create_error_error_error_response ( self ) : NEW def create_error_error_response ( self ) : NEW_LINE INDENT return self . _error_response_response_error_response ( ) : NEW_LINE INDENT return self . _error_response NEW_LINE DEDENT def create_LINE DEDENT
is_target ( self , identifiable ) : NEW_LINE INDENT if isinstance ( identifiable , EventModel ) : NEW_LINE INDENT return identifiable . is_target ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return identifiable . is_target ( ) NEW_LINE DEDENT DEDENT
def def set_login_enabled_time ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _login_time = self . _login_time NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
synchronized Set < String > set ( ) { if ( set == null ) { set = new HashSet < String > ( ) ; } return set ; }
def def def get_name ( self ) : NEW_LINE INDENT name = self . name NEW_LINE if self . name is not None : NEW_LINE INDENT return self . name NEW_LINE DEDENT return self . name NEW_LINE DEDENT
update ( self ) : NEW_LINE INDENT if self . state is not None : NEW_LINE INDENT self . state = self . state . copy ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . state = None NEW_LINE DEDENT DEDENT
Collection < RosterGroup > rosterGroups ( ) { return rosterGroups . values ( ) ; }
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__

def def get_item_count ( self ) : NEW_LINE INDENT item_count = self . get_item_count ( ) NEW_LINE if item_count : NEW_LINE INDENT return item_count NEW_LINE DEDENT else : NEW_LINE INDENT return item_count NEW_LINE DEDENT DEDENT
create ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
reload ( self ) : NEW_LINE INDENT if self . roster is not None : NEW_LINE INDENT self . roster = self . roster . reload ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . roster = self . roster . reload ( ) NEW_LINE DEDENT DEDENT
update_presence_subscription ( self , presence_subscription ) : NEW_LINE INDENT if not presence_subscription : NEW_LINE INDENT return NEW_LINE DEDENT if presence_subscription : NEW_LINE INDENT return NEW_LINE DEDENT roster = self . _get_roster ( presence_subscription ) NEW_LINE if not roster : NEW_LINE INDENT return NEW_LINE DEDENT roster . update_presence_subscription ( presence_subscription ) NEW_LINE return roster NEW_LINE DEDENT
Collection < Entry > getAllEntries ( ) { return Collections . unmodifiableCollection ( getEntries ( ) ) ; }
get_presence_info ( self , user_id ) : NEW_LINE INDENT if not self . user_id : NEW_LINE INDENT return None NEW_LINE DEDENT if self . user_id == user_id : NEW_LINE INDENT return None NEW_LINE DEDENT if self . user_id == user_id : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . user_presence NEW_LINE DEDENT DEDENT
void setOfflinePresence ( boolean offlinePresence ) { if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } if ( offlinePresence ) { return ; } }
def fire_roster_changed_event ( self , roster ) : NEW_LINE INDENT if self . roster is None : NEW_LINE INDENT return NEW_LINE DEDENT self . roster = roster NEW_LINE self . roster . changed ( ) NEW_LINE DEDENT
setDigest ( self , digest , password ) : NEW_LINE INDENT self . digest = digest NEW_LINE self . password = password NEW_LINE DEDENT
def generate_resources ( self ) : NEW_LINE INDENT resources = [ ] NEW_LINE for resource in self . resources : NEW_LINE INDENT resources . append ( resource ) NEW_LINE DEDENT return resources NEW_LINE DEDENT
static PlaylistSelector getPlaylistSelector ( PlaylistSelector selector ) { if ( selector == null ) { return null ; } return selector . getPlaylistSelector ( ) ; }
time_passed ( self ) : NEW_LINE INDENT if self . time_passed : NEW_LINE INDENT return self . time_passed NEW_LINE DEDENT DEDENT
public public static void update ( Properties file ) { if ( file != null ) { Properties properties = new Properties ( ) ; properties . load ( file ) ; } else { properties = new Properties ( ) ; properties . load ( ) ; } }

loadProperties ( propertiesFile ) : NEW_LINE INDENT try : NEW_LINE INDENT properties = propertiesFile . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return None NEW_LINE DEDENT return properties NEW_LINE DEDENT

def get_available_ SASL_ mechanisms ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return [ ] NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
get_available_compression_methods ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _available_compression_methods NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _available_compression_methods NEW_LINE DEDENT DEDENT
def parse ( self ) : NEW_LINE INDENT return self . _parse_packet ( ) NEW_LINE DEDENT
static String decode ( String type ) { if ( type == null ) { return null ; } if ( type . equals ( String . class ) ) { return type ; } if ( type . equals ( String . class ) ) { return type ; } if ( type . equals ( String . class ) ) { return type ; } if ( type . equals ( String . class ) ) { return type ; } if ( type . equals ( String . class ) ) { return type ; } return type ; }
startMusicRequest ( self , startMusicRequest ) : NEW_LINE INDENT self . startMusicRequest = startMusicRequest NEW_LINE if self . startMusicRequest is not None : NEW_LINE INDENT return self . startMusicRequest NEW_LINE DEDENT return None NEW_LINE DEDENT
get_playback_state ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_playback_state ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_secret_key ( self ) : NEW_LINE INDENT if self . secret_key is not None : NEW_LINE INDENT return self . secret_key NEW_LINE DEDENT return self . secret_key NEW_LINE DEDENT
connect ( self ) : NEW_LINE INDENT return self . _connect ( ) NEW_LINE DEDENT
void put ( String key , String value ) { if ( key == null ) { throw new NullPointerException ( " key " ) ; } if ( value == null ) { throw new NullPointerException ( " value " ) ; } if ( key == null ) { throw new NullPointerException ( " key " ) ; } if ( value == null ) { throw new NullPointerException ( " value " ) ; } }
get_set_view ( self ) : NEW_LINE INDENT return self . _get_set_view ( ) NEW_LINE DEDENT
get_collection_view ( self ) : NEW_LINE INDENT return self . _get_collection_view ( ) NEW_LINE DEDENT
purge ( self , reference ) : NEW_LINE INDENT self . _purge ( reference ) NEW_LINE self . _purge ( reference ) NEW_LINE DEDENT
def get_entry ( self , key ) : NEW_LINE INDENT key = self . _get_key ( key ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _get_entry ( key ) NEW_LINE DEDENT
get_hash_code ( self ) : NEW_LINE INDENT return self . _hash_code NEW_LINE DEDENT


set_presence ( self , presence ) : NEW_LINE INDENT if not presence : NEW_LINE INDENT return NEW_LINE DEDENT self . presence = presence NEW_LINE DEDENT
mode ( self ) : NEW_LINE INDENT if self . mode is not None : NEW_LINE INDENT return self . mode NEW_LINE DEDENT return self . mode NEW_LINE DEDENT
void deliverMessage ( Chat chat , Message message ) { if ( message != null && message . getThreadId ( ) != null ) { message . getThreadId ( ) . add ( message . getThreadId ( ) ) ; } }
def generate_script ( self , script ) : NEW_LINE INDENT if isinstance ( script , str ) : NEW_LINE INDENT return script NEW_LINE DEDENT else : NEW_LINE INDENT return self . _generate_script ( script ) NEW_LINE DEDENT DEDENT
create_output_directory ( self , target ) : NEW_LINE INDENT if not os . path . exists ( target ) : NEW_LINE INDENT raise ValueError ( " The specified target does not exist . " ) NEW_LINE DEDENT if os . path . exists ( target ) : NEW_LINE INDENT raise ValueError ( " The specified target does not exist . " ) NEW_LINE DEDENT if os . path . exists ( target ) : NEW_LINE INDENT raise ValueError ( " The specified target does not exist . " ) NEW_LINE DEDENT DEDENT
load_properties ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT properties = { } NEW_LINE DEDENT except TypeError : NEW_LINE INDENT properties = { } NEW_LINE DEDENT return properties NEW_LINE DEDENT
write_file ( self , file ) : NEW_LINE INDENT self . write_file ( file ) NEW_LINE DEDENT
get_first_progress ( self , eventModel ) : NEW_LINE INDENT if isinstance ( eventModel , EventModel ) : NEW_LINE INDENT return eventModel . get_first_progress ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
synchronized void createSynchronizedCollection ( Collection < ? > collection ) { synchronized ( collection ) { if ( collection . isEmpty ( ) ) { return ; } collection . add ( this ) ; } }
static List < FireRESTService > getAllFireRESTServices ( ) { List < FireRESTService > services = new ArrayList < FireRESTService > ( ) ; for ( int i = 0 ; i < 256 ; i ++ ) { services . add ( new FireRESTService ( ) ) ; } return services ; }
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def getThreadPool ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _getThreadPool ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _getThreadPool ( ) NEW_LINE DEDENT DEDENT
create_stop_request ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_stop_request ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
StopMusicRequest ( self , StopMusicRequest request ) : NEW_LINE INDENT if isinstance ( request , StopMusicRequest ) : NEW_LINE INDENT return request NEW_LINE DEDENT else : NEW_LINE INDENT return StopMusicRequest ( request ) NEW_LINE DEDENT DEDENT
static DSECluster getInstance ( ) { return new DSECluster ( ) ; }
void addConnectionListener ( ConnectionListener connectionListener ) { if ( connectionListener != null ) { connectionListener . addConnectionListener ( connectionListener ) ; } }
void registerPacketListener ( PacketListener packetListener ) { if ( packetListener != null ) { packetListener . registerPacketListener ( packetListener ) ; } }
void registerPacketListener ( PacketListener packetListener ) { if ( packetListener != null ) { packetListener . registerPacketListener ( packetListener ) ; } }
send_packet_listeners ( self ) : NEW_LINE INDENT packet_listeners = [ ] NEW_LINE for packet in self . packet_listeners : NEW_LINE INDENT packet_listeners . append ( self . _send_packet_listener ( packet ) ) NEW_LINE DEDENT return packet_listeners NEW_LINE DEDENT
public void register ( PacketInterceptor interceptor ) { if ( interceptor != null ) { throw new IllegalArgumentException ( " The packet interceptor must be registered with this connection . " ) ; } }
public void send ( Packet packet ) throws InterceptorsException { synchronized ( this ) { if ( ! interceptors . isEmpty ( ) ) { throw new InterceptorsException ( ) ; } if ( interceptors . isEmpty ( ) ) { throw new InterceptorsException ( ) ; } } }

void connectionLost ( final Connection connection ) { if ( connection != null ) { if ( connection . isClosed ( ) ) { connection . close ( ) ; } else { connection . close ( ) ; } } else { connection . close ( ) ; } }
get_current_thread_id ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _current_thread_id NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
boolean isValid ( Node node ) { if ( node == null ) { return false ; } if ( node . isValid ( ) ) { return true ; } return false ; }
get_key ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _get_key ( value ) NEW_LINE DEDENT DEDENT
get_by_key ( self , key , value ) : NEW_LINE INDENT key = key . lower ( ) NEW_LINE value = value . lower ( ) NEW_LINE return self . get ( key , value ) NEW_LINE DEDENT
lookup ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif data is not None : NEW_LINE INDENT return data NEW_LINE DEDENT elif data is not None : NEW_LINE INDENT return data NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
lookup ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return None NEW_LINE DEDENT elif data is not None : NEW_LINE INDENT return data NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
compare_objects ( self , objects ) : NEW_LINE INDENT if len ( objects ) == 1 : NEW_LINE INDENT return objects [ 0 ] NEW_LINE DEDENT elif len ( objects ) == 2 : NEW_LINE INDENT return objects [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return objects [ 0 ] NEW_LINE DEDENT DEDENT
find_least_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _find_least_node ( node ) NEW_LINE DEDENT DEDENT
find_most_node_from_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
get_next_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . _next_node ( node ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
get_most_valid_node ( self , node ) : NEW_LINE INDENT node = self . get_node ( node ) NEW_LINE if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
find_least_valid_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _find_least_valid_node ( node ) NEW_LINE DEDENT DEDENT
copy_color ( self , node , color ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return color NEW_LINE DEDENT if color is None : NEW_LINE INDENT return color NEW_LINE DEDENT if color is not None : NEW_LINE INDENT return color NEW_LINE DEDENT if color is None : NEW_LINE INDENT return color NEW_LINE DEDENT return color NEW_LINE DEDENT
red ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT if node is not None : NEW_LINE INDENT return node NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
black_red ( node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
get_parent ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node . parent NEW_LINE DEDENT DEDENT
get_parent ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node . parent NEW_LINE DEDENT DEDENT
get_right_child ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
get_left_child ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return node NEW_LINE DEDENT DEDENT
rotateLeft ( self ) : NEW_LINE INDENT if self . fare : NEW_LINE INDENT return self . fare . rotateLeft ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . fare NEW_LINE DEDENT DEDENT
rotateRight ( self ) : NEW_LINE INDENT if self . fare is not None : NEW_LINE INDENT return self . fare . rotateRight ( ) NEW_LINE DEDENT return self . fare . rotateRight ( ) NEW_LINE DEDENT
insert ( self , key , value ) : NEW_LINE INDENT return self . insert ( key , value ) NEW_LINE DEDENT
delete ( self , key , value ) : NEW_LINE INDENT self . delete ( key ) NEW_LINE self . delete ( value ) NEW_LINE DEDENT
boolean isComparable ( Object object ) { if ( object == null ) { return false ; } if ( ! ( object instanceof Comparable ) ) { return false ; } Comparable comparator = ( Comparable ) object ; if ( comparator == null ) { return false ; } return comparator . isComparable ( ) ; }
insert_node ( self , node , value ) : NEW_LINE INDENT if node . value is None : NEW_LINE INDENT node . value = value NEW_LINE DEDENT else : NEW_LINE INDENT node . value = value NEW_LINE DEDENT DEDENT
boolean containsMapping ( String key , String value ) { if ( key == null ) { return false ; } if ( value == null ) { return false ; } if ( key . equals ( value ) ) { return true ; } return false ; }
is_map ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _map . get ( key ) == value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
get ( self , key ) : NEW_LINE INDENT if not self . map . containsKey ( key ) : NEW_LINE INDENT return None NEW_LINE DEDENT key = self . map . get ( key ) NEW_LINE if not key : NEW_LINE INDENT return None NEW_LINE DEDENT return self . map . get ( key ) NEW_LINE DEDENT
remove_mapping ( self , key ) : NEW_LINE INDENT if self . has_key ( key ) : NEW_LINE INDENT return self [ key ] NEW_LINE DEDENT return self [ key ] NEW_LINE DEDENT
remove_mappings ( self ) : NEW_LINE INDENT mappings = self . mappings . values ( ) NEW_LINE mappings . clear ( ) NEW_LINE for mapping in mappings : NEW_LINE INDENT mappings . remove ( mapping ) NEW_LINE DEDENT DEDENT
Set < Map . Entry < K , V > > mapEntrySet ( ) { Map . Entry < K , V > set = new Map . Entry < K , V > ( ) ; set . putAll ( map ) ; return set ; }
Collection < Map < String , Object > > get ( ) { Map < String , Map < String , Object > > map = new HashMap < String , Map < String , Object > > ( ) ; map . put ( " key " , " value " ) ; return map . get ( " key " ) ; }
entrySet ( self ) : NEW_LINE INDENT return self . entrySet ( ) NEW_LINE DEDENT
void copy ( Map < String , String > map ) { if ( map != null ) { if ( ! map . containsKey ( " transaction _ status " ) ) { map . put ( " transaction _ status " , map . get ( " transaction _ status " ) ) ; } else { map . remove ( " transaction _ status " ) ; } } }
clear ( self ) : NEW_LINE INDENT self . cache . clear ( ) NEW_LINE DEDENT
static int least ( int cacheSize ) { if ( cacheSize <= 0 ) { throw new IllegalArgumentException ( " Cache size must be greater than or equal to 0 . " ) ; } if ( cacheSize == 0 ) { throw new IllegalArgumentException ( " Cache size must be greater than or equal to 0" ) ; } return cacheSize ; }
activate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . bundle . activate ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . bundle . deactivate ( ) NEW_LINE DEDENT DEDENT
PlayerRequest getPlayerRequest ( String playlist ) { PlayerRequest playerRequest = new PlayerRequest ( ) ; playerRequest . setPlaylist ( playlist ) ; return playerRequest ; }
create_store ( self , rosterstore ) : NEW_LINE INDENT self . rosterstore = rosterstore NEW_LINE self . rosterstore = rosterstore NEW_LINE return self . rosterstore NEW_LINE DEDENT
def def roster_store ( self ) : NEW_LINE INDENT roster_store = self . roster_store NEW_LINE roster_store = self . roster_store NEW_LINE roster_store = roster_store . copy ( ) NEW_LINE roster_store . save ( roster_store ) NEW_LINE roster_store . close ( ) NEW_LINE roster_store . close ( ) NEW_LINE DEDENT
static InetAddress [ ] getInetAddresses ( String address ) { InetAddress [ ] addresses = InetAddress . getAllByName ( address ) ; if ( addresses != null ) { for ( InetAddress address : addresses ) { if ( address . equals ( address ) ) { return addresses ; } } } return null ; }
get_first_address ( self , address ) : NEW_LINE INDENT if address is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _get_first_address ( address ) NEW_LINE DEDENT
export_track_info ( self , track_info ) : NEW_LINE INDENT if isinstance ( track_info , TrackInfo ) : NEW_LINE INDENT return track_info NEW_LINE DEDENT else : NEW_LINE INDENT return track_info NEW_LINE DEDENT DEDENT
static TrackInfo getTrackInfo ( HashMap < String , TrackInfo > trackInfoMap ) { if ( trackInfoMap == null ) { return null ; } if ( trackInfoMap . size ( ) == 0 ) { return null ; } if ( trackInfoMap . size ( ) == 1 ) { return trackInfoMap . get ( 0 ) ; } if ( trackInfoMap . size ( ) == 1 ) { return trackInfoMap . get ( 0 ) ; } return null ; }
add_application ( self , application ) : NEW_LINE INDENT if isinstance ( application , Application ) : NEW_LINE INDENT self . add_application ( application ) NEW_LINE DEDENT else : NEW_LINE INDENT self . add_application ( application ) NEW DEDENT DEDENT
execute ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . application . execute ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . application . execute ( ) NEW_LINE DEDENT DEDENT
static List < String > getRegisteredApplications ( ) { List < String > registeredApplications = new ArrayList < String > ( ) ; registeredApplications . add ( " pre - registered " ) ; registeredApplications . add ( " found " ) ; registeredApplications . add ( " pre - registered " ) ; registeredApplications . add ( " found " ) ; return registeredApplications ; }
static void printUsage ( PrintStream out ) { out . println ( ) ; out . println ( ) ; out . println ( ) ; }
static void main ( String [ ] args ) { Application executor = new ApplicationExecutor ( ) ; executor . start ( ) ; }
MuteEvent create ( ) { MuteEvent event = new MuteEvent ( ) ; event . setId ( id ) ; event . setName ( name ) ; event . setTimestamp ( System . currentTimeMillis ( ) ) ; return event ; }
mute ( self ) : NEW_LINE INDENT if not self . mute : NEW_LINE INDENT self . mute = True NEW_LINE DEDENT else : NEW_LINE INDENT self . mute = False NEW_LINE DEDENT return self NEW_LINE DEDENT
get_schema_name ( self , schema_name ) : NEW_LINE INDENT schema = self . _get_schema ( schema_name ) NEW_LINE if schema is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return schema NEW_LINE DEDENT DEDENT
write_lines ( self , lines ) : NEW_LINE INDENT if not lines : NEW_LINE INDENT return NEW_LINE DEDENT if len ( lines ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( lines ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( lines ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( lines ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
static boolean isExecutable ( Class < ? > class ) { if ( class . getClassLoader ( ) == null ) { return false ; } return class . getClassLoader ( ) . isExecutable ( ) ; }
add_option ( self , parser , option ) : NEW_LINE INDENT self . parser . add_option ( parser , option ) NEW_LINE DEDENT
def get_schema ( self ) : NEW_LINE INDENT schema = self . schema NEW_LINE fields = self . fields NEW_LINE for field in fields : NEW_LINE INDENT fields . sort ( ) NEW_LINE DEDENT return schema NEW_LINE DEDENT
name_field ( self , name ) : NEW_LINE INDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT name = name . strip ( ) NEW_LINE if not name : NEW_LINE INDENT return None NEW_LINE DEDENT return name NEW_LINE DEDENT
static String getPackageName ( ) { String packageName = null ; try { packageName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } catch ( Exception e ) { packageName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } return packageName ; }

__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def set_state ( self , state ) : NEW_LINE INDENT if state is not None : NEW_LINE INDENT self . _state = state NEW_LINE DEDENT else : NEW_LINE INDENT self . _state = state NEW_LINE DEDENT DEDENT
void add ( final Iteration iteration ) { if ( iteration == null ) { throw new NullPointerException ( " iteration is null " ) ; } if ( iteration == null ) { throw new NullPointerException ( " iteration is null " ) ; } if ( iteration == null ) { throw new NullPointerException ( " iteration is null " ) ; } }
do_actual_iteration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _actual_iteration NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT except IndexError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_first_track_info ( self , eventModel ) : NEW_LINE INDENT if isinstance ( eventModel , EventModel ) : NEW_LINE INDENT return eventModel . first_track_info NEW_LINE DEDENT else : NEW_LINE INDENT return eventModel . first_track_info NEW_LINE DEDENT DEDENT
def _progress ( self ) : NEW_LINE INDENT return self . _progress ( ) NEW_LINE DEDENT
create_progress_object ( self , resourceModel ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_progress_object ( resourceModel ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
red_image ( self , imageWidthximageHeight ) : NEW_LINE INDENT imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE imageWidthximageHeight = self . imageWidthximageHeight NEW_LINE return imageWidthximageHeight NEW_LINE DEDENT
get_image_from_url ( self , url ) : NEW_LINE INDENT try : NEW_LINE INDENT image = Image . open ( url ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return image NEW_LINE DEDENT
def__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
def create_map ( self , source , target ) : NEW_LINE INDENT map = { } NEW_LINE for key , value in source . items ( ) : NEW_LINE INDENT map . put ( key , value ) NEW_LINE DEDENT for key , value in target . items ( ) : NEW_LINE INDENT map . put ( key , value ) NEW_LINE DEDENT DEDENT
cartesian_product ( self , two_lists ) : NEW_LINE INDENT return self . cartesian_product ( two_lists ) NEW_LINE DEDENT
def def def def set_thread_running ( self , thread_id ) : NEW_LINE INDENT try : NEW_LINE INDENT self . thread_id = thread_id NEW_LINE DEDENT def set_thread ( self , thread_id ) : NEW_LINE INDENT self . thread_id = thread_id NEW_LINE return self . thread_id NEW_LINE DEDENT def set_thread ( self , thread_id ) : NEW_LINE INDENT self . thread_id = thread_id NEW_LINE DEDENT return self . thread_id NEW_LINE DEDENT
def def get_thread ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . pool . get ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . pool . get ( ) NEW_LINE DEDENT DEDENT
create_ended_event ( self ) : NEW_LINE INDENT if self . _ended_event is not None : NEW_LINE INDENT return self . _ended_event NEW_LINE DEDENT else : NEW_LINE INDENT return self . _ended_event NEW_LINE DEDENT DEDENT
get_current_playing_track ( self ) : NEW_LINE INDENT if self . current_playing_track is None : NEW_LINE INDENT self . current_playing_track = None NEW_LINE DEDENT return self . current_playing_track NEW_LINE DEDENT
updateTrackInfo ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . TrackInfo = self . TrackInfo NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT self . TrackInfo = self . TrackInfo NEW_LINE DEDENT DEDENT
shuffle_playlist ( self , playlist ) : NEW_LINE INDENT if not playlist : NEW_LINE INDENT return NEW_LINE DEDENT shuffled_playlist = playlist . copy ( ) NEW_LINE shuffled_playlist . sort ( ) NEW_LINE shuffled_playlist . reverse ( ) NEW_LINE shuffled_playlist . reverse ( ) NEW_LINE shuffled_playlist . reverse ( ) NEW_LINE shuffled_playlist . reverse ( ) NEW_LINE return shuffled_playlist NEW_LINE DEDENT
is_supported ( self , playbackModes ) : NEW_LINE INDENT if playbackModes is None : NEW_LINE INDENT return False NEW_LINE DEDENT if isinstance ( playbackModes , list ) : NEW_LINE INDENT playbackModes = [ playbackModes ] NEW_LINE DEDENT return playbackModes NEW_LINE DEDENT
export_playlist ( self , playlist ) : NEW_LINE INDENT if isinstance ( playlist , list ) : NEW_LINE INDENT return playlist NEW_LINE DEDENT elif isinstance ( playlist , dict ) : NEW_LINE INDENT return playlist NEW_LINE DEDENT elif isinstance ( playlist , list ) : NEW_LINE INDENT return playlist NEW_LINE DEDENT elif isinstance ( playlist , dict ) : NEW_LINE INDENT return playlist NEW_LINE DEDENT elif isinstance ( playlist , dict ) : NEW_LINE INDENT return playlist NEW_LINE DEDENT else : NEW_LINE INDENT return playlist NEW_LINE DEDENT DEDENT
static String escape ( String s ) { if ( s == null ) { return " " ; } else { return s ; } }

def create ( self ) : NEW_LINE INDENT return self . _create_schema_schema_field ( ) NEW_LINE DEDENT
outputPlugin ( self ) : NEW_LINE INDENT if self . outputPlugin is not None : NEW_LINE INDENT return self . outputPlugin NEW_LINE DEDENT return self . outputPlugin NEW_LINE DEDENT
__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__
public public static void add ( final String name , final String name ) { if ( name == null ) { throw new IllegalArgumentException ( ) ; } else if ( name == null ) { throw new IllegalArgumentException ( ) ; } else { throw new IllegalArgumentException ( ) ; } } }
set ( self , athorizable ) : NEW_LINE INDENT if self . athorizable is None : NEW_LINE INDENT self . athorizable = athorizable NEW_LINE DEDENT else : NEW_LINE INDENT self . athorizable = athorizable NEW_LINE DEDENT DEDENT
removeProperty ( self , property ) : NEW_LINE INDENT self . properties . remove ( property ) NEW_LINE DEDENT
addPrincipal ( self , authorizable ) : NEW_LINE INDENT if self . principal is not None : NEW_LINE INDENT return self . principal NEW_LINE DEDENT return self . principal NEW_LINE DEDENT
removePrincipal ( self , authorizable ) : NEW_LINE INDENT if self . principal is not None : NEW_LINE INDENT self . principal . remove ( self . principal ) NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . root is not None : NEW_LINE INDENT self . root . close ( ) NEW_LINE self . root = None NEW_LINE DEDENT DEDENT
def def _call_user ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT user = self . _get_user ( ) NEW_LINE DEDENT except : NEW_LINE INDENT user = None NEW_LINE DEDENT if user is not None : NEW_LINE INDENT return user NEW_LINE DEDENT return user NEW_LINE DEDENT
def def def def activate ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python____python__ def def def def def def def ___python____python____python____python____python____python____python__ def def def def def def def activate (__python____python____python____python____python____python____python__ def def def def def def def def ___python____python____python____python____python____python____python__ def def def def__python__ def def def def def def def activate ( self__python____python____python__ def def def def activate ( self ,__python____python____python____python____python____python__ def def def def def activate ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python__ def def def def def _ def activate ( self ) : NEW__python____python____python____python____python____python____python____python____python____python____python__ def def def def ___python____python____python____python____python____python____python____python__ def def def def def ___python____python____python____python____python____python__
is_resource ( self , resource ) : NEW_LINE INDENT if isinstance ( resource , bool ) : NEW_LINE INDENT return resource NEW_LINE DEDENT elif isinstance ( resource , basestring ) : NEW_LINE INDENT return is_resource ( resource ) NEW_LINE DEDENT else : NEW_LINE INDENT return is_resource ( resource ) NEW_LINE DEDENT DEDENT

contains_key ( self , key ) : NEW_LINE INDENT return self . map . containsKey ( key ) NEW_LINE DEDENT
contains ( self , key , value ) : NEW_LINE INDENT return self . map . containsKey ( key ) and self . map . containsValue ( value ) NEW_LINE DEDENT
put ( self , key , value ) : NEW_LINE INDENT try : NEW_LINE INDENT self [ key ] = value NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT self [ key ] = value NEW_LINE DEDENT DEDENT
clear ( self ) : NEW_LINE INDENT self . map . clear ( ) NEW_LINE DEDENT
get_hash_code ( self , key ) : NEW_LINE INDENT return self . _get_hash_code ( key ) NEW_LINE DEDENT
boolean equals ( Object obj ) { if ( obj == null ) { return false ; } if ( ! ( obj instanceof Comparable ) ) { return false ; } return ( ( Comparable ) obj ) . equals ( obj ) ; }
boolean equals ( Object value ) { if ( value == null ) { return false ; } return super . equals ( value ) ; }
def size ( self ) : NEW_LINE INDENT return self . size ( ) NEW_LINE DEDENT
normalize_capacity ( self , capacity ) : NEW_LINE INDENT if capacity == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 1 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 6 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 2 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 3 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 5 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 6 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity == 4 : NEW_LINE INDENT return NEW_LINE DEDENT if capacity ==
iterator ( self ) : NEW_LINE INDENT iterator = self . _get_iterator ( ) NEW_LINE if iterator is not None : NEW_LINE INDENT return iterator NEW_LINE DEDENT return self . _get_iterator ( ) NEW_LINE DEDENT
load_map_from_binary_stream ( self , binary_stream ) : NEW_LINE INDENT if binary_stream is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return self . _load_map_from_binary_stream ( binary_stream ) NEW_LINE DEDENT DEDENT
register_modules ( self , modules ) : NEW_LINE INDENT for module in modules : NEW_LINE INDENT self . register_module ( module ) NEW_LINE DEDENT DEDENT
void prepare ( ) throws Exception { if ( this . fake_constructor != null ) { this . fake_constructor . prepare ( ) ; this . fake_constructor = null ; } }

def
