detect_operating_system ( self ) : NEW_LINE INDENT if self . operating_system : NEW_LINE INDENT return self . operating_system NEW_LINE DEDENT else : NEW_LINE INDENT return self . operating_system NEW_LINE DEDENT DEDENT
def def def def str_ def def def def def def def def _ def def def def def def def def def def __ def def def def def def def def def def def def _ def def def def def def def def def def def def def def def def def def def def def def _ def def def def def def def def def def def def _ def def def def def def def _ def def def def def def def def def
def
invoke_function ( self , function ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _invoke_function ( function ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
request ( self , ** kwargs ) : NEW_LINE INDENT request = kwargs . get ( ' request ' , None ) NEW_LINE if request is None : NEW_LINE INDENT return None NEW_LINE DEDENT return request NEW_LINE DEDENT
clear_database ( self ) : NEW_LINE INDENT if self . database is not None : NEW_LINE INDENT self . database . close ( ) NEW_LINE DEDENT DEDENT
rollback ( self , transaction ) : NEW_LINE INDENT self . transaction = transaction NEW_LINE self . transaction . rollback ( ) NEW_LINE DEDENT
get_pools ( self ) : NEW_LINE INDENT pools = [ ] NEW_LINE for pool in self . pools . values ( ) : NEW_LINE INDENT pools . append ( pool ) NEW_LINE DEDENT return pools NEW_LINE DEDENT
create_pool ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pool = self . pool NEW_LINE DEDENT return pool NEW_LINE DEDENT
delete_pool ( self , pool_name ) : NEW_LINE INDENT try : NEW_LINE INDENT self . pool . delete ( pool_name ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_container_group ( self , container_group ) : NEW_LINE INDENT self . container_group = container_group NEW_LINE self . container_group . name = self . container_group . name NEW_LINE DEDENT
delete_container_group ( self , container_group_name ) : NEW_LINE INDENT self . _delete_container_group ( container_group_name ) NEW_LINE self . _delete_container_group ( container_group_name ) NEW_LINE DEDENT

create_training_job ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT job = self . _create_job ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT job = self . _create_job ( ) NEW_LINE DEDENT return job NEW_LINE DEDENT
transform_job ( self , transform_job ) : NEW_LINE INDENT if transform_job is not None : NEW_LINE INDENT return transform_job NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
create_endpoint ( self ) : NEW_LINE INDENT if self . endpoint is None : NEW_LINE INDENT self . endpoint = self . _create_endpoint ( ) NEW_LINE DEDENT return self . endpoint NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
exists_table ( self , table_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . table_exists ( table_name ) NEW_LINE DEDENT except : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
create_queue ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT queue = self . connection . create_queue ( ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT return queue NEW_LINE DEDENT
generate_header_content ( self ) : NEW_LINE INDENT header_content = [ ] NEW_LINE for header in self . headers : NEW_LINE INDENT header_content . append ( header ) NEW_LINE DEDENT return header_content NEW_LINE DEDENT
generate_html_div ( self ) : NEW_LINE INDENT html = self . _generate_html_div ( ) NEW_LINE html = self . _generate_html_div ( html ) NEW_LINE return html NEW_LINE DEDENT


get_sqlite_connection ( self ) : NEW_LINE INDENT connection = self . connection NEW_LINE if connection is None : NEW_LINE INDENT return None NEW_LINE DEDENT return connection NEW_LINE DEDENT
static CassandraSession createSession ( ) { CassandraSession cassandraSession = new CassandraSession ( ) ; cassandraSession . setId ( cassandraSession . getId ( ) ) ; cassandraSession . setUsername ( cassandraSession . getUsername ( ) ) ; cassandraSession . setPassword ( cassandraSession . getPassword ( ) ) ; return cassandraSession ; }
_execute_sqoop_job ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT job = self . job NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT job = self . job NEW_LINE DEDENT return job NEW_LINE DEDENT
delete_role ( self , role_id ) : NEW_LINE INDENT if role_id is None : NEW_LINE INDENT return NEW_LINE DEDENT if role_id in self . _roles : NEW_LINE INDENT self . _roles [ role_id ] . delete ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _roles . remove ( role_id ) NEW_LINE DEDENT DEDENT
get_theme_name ( self ) : NEW_LINE INDENT theme_name = self . get_theme_name ( ) NEW_LINE if theme_name : NEW_LINE INDENT return theme_name NEW_LINE DEDENT return None NEW_LINE DEDENT
get_available_themes ( self ) : NEW_LINE INDENT themes = [ ] NEW_LINE for theme in self . themes : NEW_LINE INDENT themes . append ( theme ) NEW_LINE DEDENT return themes NEW_LINE DEDENT
high_low ( self ) : NEW_LINE INDENT return self . _high_low ( ) NEW_LINE DEDENT
generate_sequences ( self ) : NEW_LINE INDENT sequences = [ ] NEW_LINE for sequence in self . sequences : NEW_LINE INDENT sequences . append ( sequence ) NEW_LINE DEDENT for sequence in self . sequences : NEW_LINE INDENT sequences . append ( sequence ) NEW_LINE DEDENT return sequences NEW_LINE DEDENT
distribution_function ( self ) : NEW_LINE INDENT return self . distribution_function ( ) NEW_LINE DEDENT
_wrap_wrapper ( self , wrapper ) : NEW_LINE INDENT if not isinstance ( wrapper , Wrapper ) : NEW_LINE INDENT wrapper = Wrapper ( wrapper ) NEW_LINE DEDENT return wrapper NEW_LINE DEDENT
static Multinomial coefficient ( String coefficient ) { return new Multinomial ( 1 , coefficient ) ; }
def createSequence ( ) : NEW_LINE INDENT return new Sequence ( ) NEW_LINE DEDENT
random_sequence ( self ) : NEW_LINE INDENT random_sequence = [ ] NEW_LINE for i in range ( len ( self ) ) : NEW_LINE INDENT random_sequence . append ( self [ i ] ) NEW_LINE DEDENT return random_sequence NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
optimize ( self ) : NEW_LINE INDENT if self . _optimization : NEW_LINE INDENT self . _optimization = True NEW_LINE DEDENT else : NEW_LINE INDENT self . _optimization = False NEW_LINE DEDENT return self . _optimization NEW_LINE DEDENT
broadcasted_value ( self , value ) : NEW_LINE INDENT if isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , float ) : NEW_LINE INDENT return value NEW_LINE DEDENT elif isinstance ( value , int ) : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
_call_java_function ( self , java_function ) : NEW_LINE INDENT return self . _call_java_function ( java_function ) NEW_LINE DEDENT
get_image ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . image NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
weights ( self , layer ) : NEW_LINE INDENT weights = [ ] NEW_LINE for layer in self . layers : NEW_LINE INDENT weights . append ( layer . weights ( ) ) NEW_LINE DEDENT return weights NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
embed_text_sample ( self , text_sample ) : NEW_LINE INDENT if text_sample is None : NEW_LINE INDENT text_sample = text_sample NEW_LINE DEDENT else : NEW_LINE INDENT text_sample = text_sample NEW_LINE DEDENT return text_sample NEW_LINE DEDENT
def
_make_agent_agent ( self ) : NEW_LINE INDENT if self . _agent is not None : NEW_LINE INDENT self . _agent = self . _agent NEW_LINE DEDENT return self . _agent NEW_LINE DEDENT
tar_archive_extractor ( self ) : NEW_LINE INDENT tar_archive_extractor = self . tar_archive_extractor ( ) NEW_LINE tar_archive_extractor . extract ( self ) NEW_LINE return tar_archive_extractor NEW_LINE DEDENT
update_dict ( self , dict ) : NEW_LINE INDENT if isinstance ( dict , dict ) : NEW_LINE INDENT return dict NEW_LINE DEDENT else : NEW_LINE INDENT return dict NEW_LINE DEDENT DEDENT
run ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . method ( method ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
shutdown ( self ) : NEW_LINE INDENT self . cluster . shutdown ( ) NEW_LINE self . cluster . shutdown ( ) NEW_LINE DEDENT
mean_squared_error_loss ( self ) : NEW_LINE INDENT loss = self . _mean_squared_error_loss ( ) NEW_LINE return loss NEW_LINE DEDENT

scale_transformation ( self , scale ) : NEW_LINE INDENT self . scale = scale NEW_LINE self . save ( ) NEW_LINE return self NEW_LINE DEDENT
message ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _message NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def request ( self , request ) : NEW_LINE INDENT if request . method == ' GET ' : NEW_LINE INDENT return request NEW_LINE DEDENT elif request . method == ' POST ' : NEW_LINE INDENT return request NEW_LINE DEDENT elif request . method == ' PUT ' : NEW_LINE INDENT return request NEW_LINE DEDENT else : NEW_LINE INDENT return request NEW_LINE DEDENT DEDENT

request_body ( self ) : NEW_LINE INDENT request_body = { } NEW_LINE request_body . update ( self . request_body ) NEW_LINE request_body . update ( self . request_body ) NEW_LINE return request_body NEW_LINE DEDENT

def__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__

delete_website ( self , url ) : NEW_LINE INDENT self . _delete_website ( url ) NEW_LINE return self . _delete_website ( url ) NEW_LINE DEDENT
restart_web_site ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _restart_web_site ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _restart_web_site ( ) NEW_LINE DEDENT DEDENT
def def def url def def def def def def get_ def def def def def def def _ def def def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def def def def def def def def def def _ def def def def def def get_ def def def def def def _ def def def def def get_ def def def def def _ def def def def def _ def _
def def def def def def def def def def parse def def def def def def parse def def def def def def def parse def def def def def def def def def def parse def def def def def def def def parse def def def def def def def def parse def def def def def def def parse def def def def def parse def def def def def parse def def def def def parse def def def def def parse def def def def def parse def def def def def parse
setup_console ( self ) : NEW_LINE INDENT self . _console = None NEW_LINE self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _console = self . _
static List < String > getInstalledVersions ( ) { List < String > versions = new ArrayList < String > ( ) ; for ( int i = 0 ; i < versions . size ( ) ; i ++ ) { versions . add ( versions . get ( i ) ) ; } return versions ; }
def
def def def make_ public static final String mnemonic ( final String mnemonic , final String mnemonic , final String mnemonic ) { final String mnemonic = mnemonic ; if ( mnemonic == null ) { return " " " ; } else { final String mnemonic = mnemonic ; if ( mnemonic == null ) { return " " " ; } else { return mnemonic ; } } }
perform_proper_action ( self , action ) : NEW_LINE INDENT if action is not None : NEW_LINE INDENT return action NEW_LINE DEDENT if action is not None : NEW_LINE INDENT return action NEW_LINE DEDENT if action is not None : NEW_LINE INDENT return action NEW_LINE DEDENT DEDENT
read_prefix_code_array ( self , prefix_code_array ) : NEW_LINE INDENT if prefix_code_array is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return prefix_code_array NEW_LINE DEDENT DEDENT
clear_cursor ( self , cursor ) : NEW_LINE INDENT self . cursor = cursor NEW_LINE DEDENT
set_selection_object ( self , selection_object ) : NEW_LINE INDENT self . selection_object = selection_object NEW_LINE DEDENT
def
def get_beat_tracking_function ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _beat_tracking_function NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT


get_chroma_bin_numbers ( self ) : NEW_LINE INDENT chroma_bin_numbers = self . _chroma_bin_numbers NEW_LINE if chroma_bin_numbers is not None : NEW_LINE INDENT return chroma_bin_numbers NEW_LINE DEDENT return chroma_bin_numbers NEW_LINE DEDENT
get_time_coordinates ( self , frames ) : NEW_LINE INDENT time_coordinates = [ ] NEW_LINE for frame in frames : NEW_LINE INDENT time_coordinates = [ ] NEW_LINE for time in time_coordinates : NEW_LINE INDENT time_coordinates . append ( time ) NEW_LINE DEDENT DEDENT return time_coordinates NEW_LINE DEDENT
def def def def def def def def def _ def def def def def def def def _ def def def def def def def _get_ def def def def def def def _get_ def def def def def def def def _get_ def _get_bounded def _get_bounded def _get_bound def _get_auto def _get_correlation def _get_correlation ( self ) : NEW_LINE def _get_correlation ( self ) : NEW_LINE def _get_correlation ( self ) : NEW_LINE INDENT return self . _get_correlation ( self . _get_correlation ( ) NEW
set_detection_function ( self , detection_function ) : NEW_LINE INDENT self . detection_function = detection_function NEW_LINE if self . detection_function is not None : NEW_LINE INDENT self . detection_function = self . detection_function NEW_LINE DEDENT return self NEW_LINE DEDENT
roll_matrix ( self , matrix ) : NEW_LINE INDENT matrix = matrix . copy ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix . transpose ( ) NEW_LINE matrix . transpose ( ) NEW_LINE return matrix NEW_LINE DEDENT
get_priority_value ( self ) : NEW_LINE INDENT priority_value = self . get_priority_value ( ) NEW_LINE if priority_value : NEW_LINE INDENT return priority_value NEW_LINE DEDENT DEDENT

def init_optimizer ( self , optimizer ) : NEW_LINE INDENT self . optimizer = optimizer NEW_LINE self . optimizer . init ( ) NEW_LINE self . optimizer . init ( ) NEW_LINE DEDENT
init_logger ( logger ) : NEW_LINE INDENT logger . debug ( " Initializing logger " ) NEW_LINE logger . debug ( " Initializing logger " ) NEW_LINE logger . debug ( " Initializing logger " ) NEW_LINE logger . debug ( " Initializing logger " ) NEW_LINE logger . debug ( " Initializing logger " ) NEW_LINE logger . debug ( " Initializing logger " ) NEW_LINE DEDENT
get_learning_rates ( self ) : NEW_LINE INDENT learning_rates = self . _get_learning_rates ( ) NEW_LINE if learning_rates : NEW_LINE INDENT return learning_rates NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
start ( self ) : NEW_LINE INDENT if self . running : NEW_LINE INDENT self . running = True NEW_LINE DEDENT else : NEW_LINE INDENT self . running = False NEW_LINE DEDENT DEDENT
resize_video ( self , video ) : NEW_LINE INDENT if isinstance ( video , Video ) : NEW_LINE INDENT return self . _resize_video ( video ) NEW_LINE DEDENT DEDENT
read_image ( self ) : NEW_LINE INDENT image = self . read_image ( ) NEW_LINE if image is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return image NEW_LINE DEDENT DEDENT
write_image ( self , image ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( image , ' wb ' ) NEW_LINE file . write ( image ) NEW_LINE file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT return file NEW_LINE DEDENT
start_timer ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _timer . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _timer . stop ( ) NEW_LINE DEDENT DEDENT

process_callback_function ( self , callback_function ) : NEW_LINE INDENT if callback_function is None : NEW_LINE INDENT return NEW_LINE DEDENT def process_callback_function ( self , callback_function ) : NEW_LINE INDENT if callback_function is None : NEW_LINE INDENT return NEW_LINE DEDENT return callback_function NEW_LINE DEDENT return process_callback_function NEW_LINE DEDENT
instruction_params ( self , params ) : NEW_LINE INDENT params = params . copy ( ) NEW_LINE params . update ( params ) NEW_LINE return params NEW_LINE DEDENT
apply ( self , q , U ) : NEW_LINE INDENT if not isinstance ( q , Q ) : NEW_LINE INDENT raise TypeError ( ' q must be a Q object . ' ) NEW_LINE DEDENT if not isinstance ( q , Q ) : NEW_LINE INDENT raise TypeError ( ' q must be a Q object . ' ) NEW_LINE DEDENT return q NEW_LINE DEDENT
flatten_schedule ( self , schedule ) : NEW_LINE INDENT if not schedule : NEW_LINE INDENT return NEW_LINE DEDENT schedule = schedule . copy ( ) NEW_LINE schedule . update ( ) NEW_LINE return schedule NEW_LINE DEDENT
get_backend_status ( self ) : NEW_LINE INDENT backend_status = self . backend . get_status ( ) NEW_LINE return backend_status NEW_LINE DEDENT
def start_progress def start_progress_bar ( self ) : NEW_LINE INDENT progress_bar = self . _get_progress_bar ( ) NEW_LINE if progress_bar is not None : NEW_LINE INDENT return progress_bar . start ( ) NEW_LINE DEDENT else : NEW_LINE INDENT progress_LINE DEDENT DEDENT
front ( self , sphere ) : NEW_LINE INDENT sphere = sphere [ 0 ] NEW_LINE sphere [ 1 ] = sphere [ 1 ] NEW_LINE sphere [ 2 ] = sphere [ 2 ] NEW_LINE sphere [ 3 ] = sphere [ 3 ] NEW_LINE sphere [ 4 ] = sphere [ 4 ] NEW_LINE sphere [ 5 ] = sphere [ 5 ] NEW_LINE sphere [ 6 ] = sphere [ 6 ] NEW_LINE sphere [ 7 ] = sphere [ 7 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 9 ] = sphere [ 9 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW_LINE sphere [ 8 ] = sphere [ 8 ] NEW
pulse ( self , pulse ) : NEW_LINE INDENT self . pulse = pulse NEW_LINE return self . pulse NEW_LINE DEDENT
Continuous cosine wave ( self ) : NEW_LINE INDENT return self . _cosineWave ( ) NEW_LINE DEDENT

invert_instructions ( self , instructions ) : NEW_LINE INDENT for instruction in instructions : NEW_LINE INDENT if instruction in self . _instructions : NEW_LINE INDENT self . _instructions . remove ( instruction ) NEW_LINE DEDENT DEDENT return self . _instructions NEW_LINE DEDENT

def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def def _ def def def def def def def def def def rho def def def def def def def def def def def __ def def def def def def def def def def _get_ rho def def def def def def _get_ rho def _get_data ( self ) : NEW def _get_data ( self ) : NEW def _get_data ( self ) : NEW def _get_data ( self ) : NEW
def def invert_gate ( self ) : NEW_LINE INDENT gate = self . gate NEW_LINE for gate in self . gate . gate : NEW_LINE INDENT gate = self . gate NEW_LINE DEDENT return gate NEW_LINE DEDENT
compute_distance ( self , x , y ) : NEW_LINE INDENT distance = self . _compute_distance ( x , y ) NEW_LINE if distance is None : NEW_LINE INDENT distance = self . _compute_distance ( ) NEW_LINE DEDENT return distance NEW_LINE DEDENT
def
projectors ( self , projectors ) : NEW_LINE INDENT if projectors is None : NEW_LINE INDENT projectors = self . projectors NEW_LINE DEDENT return projectors NEW_LINE DEDENT
convert_snapshot ( self , snapshot ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _convert_snapshot ( snapshot ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
verify_register ( self , register ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _verify_register ( register ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
compute_column ( self , column ) : NEW_LINE INDENT self . column = column NEW_LINE return self . column NEW_LINE DEDENT
parse_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_data ( data ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_data ( data ) NEW_LINE DEDENT DEDENT
def parse_runner ( self , parser ) : NEW_LINE INDENT runner = self . _parse_runner ( parser ) NEW_LINE if runner is None : NEW_LINE INDENT return None NEW_LINE DEDENT return runner NEW_LINE DEDENT
parse_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_data ( data ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
truncate_long_floats ( self , long_floats ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _truncate_long_floats ( long_floats ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT self . _truncate_long_floats ( long_floats ) NEW_LINE DEDENT DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
def unmajority_gate ( self ) : NEW_LINE INDENT return self . _unmajority_gate ( ) NEW_LINE self . _unmajority_gate = self . _unmajority_gate ( ) NEW_LINE DEDENT
set_name ( self , name ) : NEW_LINE INDENT self . name = name NEW_LINE DEDENT
ammo_generator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . ammo_generator NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
compose_benchmark_block ( self , benchmark_block ) : NEW_LINE INDENT benchmark_block = benchmark_block . copy ( ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW_LINE benchmark_block . update ( benchmark_block ) NEW
helper ( self , functions ) : NEW_LINE INDENT for func in functions : NEW_LINE INDENT func = getattr ( self , func ) NEW_LINE if func is not None : NEW_LINE INDENT return func NEW_LINE DEDENT DEDENT DEDENT
publish_value ( self , value ) : NEW_LINE INDENT if value is not None : NEW_LINE INDENT return value NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

shutdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _shutdown ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _shutdown ( ) NEW_LINE DEDENT DEDENT
start_local_agent ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _start_local_agent ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _start_local_agent ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
start_remote_agent ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _remote_agent = self . _remote_agent NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _remote_agent = None NEW_LINE DEDENT DEDENT
def prepare_config_data ( self ) : NEW_LINE INDENT config = self . _get_config ( ) NEW_LINE if config : NEW_LINE INDENT return config NEW_LINE DEDENT else : NEW_LINE INDENT return { } NEW_LINE DEDENT DEDENT
render_left_blocks ( self , left_blocks ) : NEW_LINE INDENT left_blocks = left_blocks . copy ( ) NEW_LINE left_blocks . clear ( ) NEW_LINE left_blocks . add ( left_blocks ) NEW_LINE left_blocks . add ( left_blocks ) NEW_LINE return left_blocks NEW_LINE DEDENT
format_level_str ( level_str ) : NEW_LINE INDENT level_str = level_str . replace ( ' _ ' , ' - ' ) NEW_LINE level_str = level_str . replace ( ' _ ' , ' - ' ) NEW_LINE level_str = level_str . replace ( ' _ ' , ' - ' ) NEW_LINE return level_str NEW_LINE DEDENT

def
get_sections ( self , prefix = None ) : NEW_LINE INDENT if prefix is None : NEW_LINE INDENT prefix = self . prefix NEW_LINE DEDENT if prefix is not None : NEW_LINE INDENT return self . _get_sections ( prefix ) NEW_LINE DEDENT return self . _get_sections ( prefix ) NEW_LINE DEDENT
info ( self ) : NEW_LINE INDENT info = self . _info ( ) NEW_LINE if info is not None : NEW_LINE INDENT return info NEW_LINE DEDENT return info NEW_LINE DEDENT
poll_agents ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT agents = [ ] NEW_LINE for agent in data : NEW_LINE INDENT agents . append ( agent ) NEW_LINE DEDENT return agents NEW_LINE DEDENT
close_connections ( self , connections ) : NEW_LINE INDENT for connection in connections : NEW_LINE INDENT connection . close ( ) NEW_LINE DEDENT for connection in connections : NEW_LINE INDENT connection . close ( ) NEW_LINE DEDENT DEDENT
def
get_order ( self , order_id ) : NEW_LINE INDENT order = self . get_order ( order_id ) NEW_LINE if order is None : NEW_LINE INDENT return None NEW_LINE DEDENT return order NEW_LINE DEDENT
get_open_position ( self , position ) : NEW_LINE INDENT if position is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return position NEW_LINE DEDENT DEDENT
get_assets ( self ) : NEW_LINE INDENT assets = [ ] NEW_LINE for asset in self . assets : NEW_LINE INDENT assets . append ( asset ) NEW_LINE DEDENT return assets NEW_LINE DEDENT
get_asset ( self , asset_id ) : NEW_LINE INDENT asset = self . get_asset_by_id ( asset_id ) NEW_LINE if asset is None : NEW_LINE INDENT return None NEW_LINE DEDENT return asset NEW_LINE DEDENT
def selector ( self ) : NEW_LINE INDENT selector = self . selector NEW_LINE if self . selector is not None : NEW_LINE INDENT return selector NEW_LINE DEDENT else : NEW_LINE INDENT return self . selector NEW_LINE DEDENT DEDENT
initialize_handler ( self , handler ) : NEW_LINE INDENT self . handler = handler NEW_LINE DEDENT
validate_host_header ( self , host_header ) : NEW_LINE INDENT if not host_header : NEW_LINE INDENT return None NEW_LINE DEDENT if not self . _host_header . startswith ( host_header ) : NEW_LINE INDENT return None NEW_LINE DEDENT if self . _host_header . startswith ( host_header ) : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
perform_action ( self , action ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT DEDENT
perform_action ( self , action ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT DEDENT
get_event_description ( self ) : NEW_LINE INDENT event_description = self . _event_description NEW_LINE if event_description is not None : NEW_LINE INDENT return event_description NEW_LINE DEDENT else : NEW_LINE INDENT return self . _event_description NEW_LINE DEDENT DEDENT
set_property_value ( self , property_name , value ) : NEW_LINE INDENT self . property_name = property_name NEW_LINE self . value = value NEW_LINE DEDENT
get_action ( self ) : NEW_LINE INDENT action = self . _get_action ( ) NEW_LINE if action : NEW_LINE INDENT return action NEW_LINE DEDENT return None NEW_LINE DEDENT


remove_websocket_subscribers ( self ) : NEW_LINE INDENT if self . websocket_subscribers : NEW_LINE INDENT self . websocket_subscribers . remove ( self . websocket_subscribers [ 0 ] ) NEW_LINE DEDENT DEDENT
search_tree ( self , tree ) : NEW_LINE INDENT search_tree = [ ] NEW_LINE search_tree . append ( tree ) NEW_LINE search_tree . append ( tree ) NEW_LINE return search_tree NEW_LINE DEDENT
def fetch_messages ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT messages = self . _fetch_messages ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT return NEW_LINE DEDENT for message in messages : NEW_LINE INDENT self . _fetch_messages ( ) NEW_LINE DEDENT return NEW_LINE DEDENT
def def fetch_user_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fetch_user_data ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _fetch_user_data ( ) NEW_LINE DEDENT DEDENT
def fetch_entries ( self ) : NEW_LINE INDENT entries = [ ] NEW_LINE for entry in self . entries . values ( ) : NEW_LINE INDENT entries . append ( entry ) NEW_LINE DEDENT return entries NEW_LINE DEDENT
get_issue_notes ( self , issue_id ) : NEW_LINE INDENT issue_notes = self . _issue_notes ( issue_id ) NEW_LINE return issue_notes NEW_LINE DEDENT
def merge_requests ( self , merge_requests ) : NEW_LINE INDENT merge_requests = [ ] NEW_LINE for request in merge_requests : NEW_LINE INDENT merge_requests . append ( request ) NEW_LINE DEDENT return merge_requests NEW_LINE DEDENT
get_merge_notes ( self ) : NEW_LINE INDENT merge_notes = [ ] NEW_LINE for merge_note in self . merge_notes : NEW_LINE INDENT merge_notes . append ( merge_note ) NEW_LINE DEDENT return merge_notes NEW_LINE DEDENT
get_merge_versions ( self ) : NEW_LINE INDENT merge_versions = [ ] NEW_LINE for merge_version in self . merge_versions : NEW_LINE INDENT merge_versions . append ( merge_version ) NEW_LINE DEDENT return merge_versions NEW_LINE DEDENT
get_merge_version_detail ( self ) : NEW_LINE INDENT merge_version_detail = { } NEW_LINE for merge_version in self . _merge_versions : NEW_LINE INDENT merge_version_detail [ merge_version ] = self . _merge_versions [ merge_version ] NEW_LINE DEDENT return merge_version_detail NEW_LINE DEDENT
def get_rate_limit_info ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _rate_limit_info NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _rate_limit_info NEW_LINE DEDENT DEDENT
def
def
get_reviews ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _reviews NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
execute_gerrit ( self , command ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . execute_gerrit_command ( command ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . execute_gerrit ( command ) NEW_LINE DEDENT DEDENT


parse_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_file ( file ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def
initialize_repositories_directory ( self ) : NEW_LINE INDENT self . _repositories_directory = os . getcwd ( ) NEW_LINE self . _repositories_directory . chdir ( ) NEW_LINE DEDENT
update_reference ( self , reference ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _reference = reference NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _reference = reference NEW_LINE DEDENT DEDENT
run_command ( self , command ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _run_command ( command ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
def
fetch_pull_requests ( self ) : NEW_LINE INDENT pull_requests = [ ] NEW_LINE for request in self . pull_requests : NEW_LINE INDENT pull_requests . append ( request ) NEW_LINE DEDENT for request in pull_requests : NEW_LINE INDENT pull_requests . append ( request ) NEW_LINE DEDENT return pull_requests NEW_LINE DEDENT
issue_reactions ( self , issue_reactions ) : NEW_LINE INDENT issue_reactions = [ ] NEW_LINE issue_reactions . append ( issue_reactions ) NEW_LINE issue_reactions . append ( issue_reactions ) NEW_LINE issue_reactions . append ( issue_reactions ) NEW_LINE issue_reactions . append ( issue_reactions ) NEW_LINE issue_reactions . append ( issue_reactions ) NEW_LINE return issue_reactions NEW_LINE DEDENT
issue_assignees ( self , issue_assignees ) : NEW_LINE INDENT if issue_assignees is None : NEW_LINE INDENT issue_assignees = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT issue_assignees = [ issue_assignees ] NEW_LINE DEDENT return issue_assignees NEW_LINE DEDENT
get_repository_data ( self ) : NEW_LINE INDENT repository_data = self . _get_repository_data ( ) NEW_LINE return repository_data NEW_LINE DEDENT
get_requested_reviewers ( self ) : NEW_LINE INDENT reviewers = self . get_reviewers ( ) NEW_LINE if not reviewers : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return reviewers NEW_LINE DEDENT
get_pull_request_commits ( self ) : NEW_LINE INDENT pull_request_commits = self . pull_request_commits NEW_LINE return pull_request_commits NEW_LINE DEDENT
metadata ( self ) : NEW_LINE INDENT self . _metadata = { } NEW_LINE self . _metadata . update ( ) NEW_LINE return self . _metadata NEW_LINE DEDENT
remove_archive ( self , archive ) : NEW_LINE INDENT if not archive : NEW_LINE INDENT return NEW_LINE DEDENT archive . remove ( archive ) NEW_LINE DEDENT

getJobs ( self ) : NEW_LINE INDENT jobs = [ ] NEW_LINE for job in self . jobs : NEW_LINE INDENT jobs . append ( job ) NEW_LINE DEDENT return jobs NEW_LINE DEDENT
def fetch_pages ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT pages = [ ] NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pages = [ ] NEW_LINE DEDENT for page in pages : NEW_LINE INDENT pages . append ( page ) NEW_LINE DEDENT return pages NEW_LINE DEDENT
def fetch ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fetch ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT return self . _fetch ( ) NEW_LINE DEDENT DEDENT
metadata ( self ) : NEW_LINE INDENT metadata = { } NEW_LINE metadata . update ( self . metadata ) NEW_LINE metadata . update ( self . metadata ) NEW_LINE return metadata NEW_LINE DEDENT

parse_timestamp_section ( self , timestamp_section ) : NEW_LINE INDENT if timestamp_section : NEW_LINE INDENT return timestamp_section NEW_LINE DEDENT elif timestamp_section : NEW_LINE INDENT return timestamp_section NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
parse_message_section ( self , message_section ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_message_section ( message_section ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def fetch_tasks ( self ) : NEW_LINE INDENT tasks = [ ] NEW_LINE for task in self . tasks . values ( ) : NEW_LINE INDENT tasks . append ( task ) NEW_LINE DEDENT return tasks NEW_LINE DEDENT
getTasks ( self ) : NEW_LINE INDENT tasks = [ ] NEW_LINE for task in self . tasks : NEW_LINE INDENT tasks . append ( task ) NEW_LINE DEDENT for task in self . tasks : NEW_LINE INDENT tasks . append ( task ) NEW_LINE DEDENT return tasks NEW_LINE DEDENT
get_tasks_transactions ( self ) : NEW_LINE INDENT tasks = [ ] NEW_LINE for task in self . tasks : NEW_LINE INDENT tasks . append ( task ) NEW_LINE DEDENT for task in self . tasks : NEW_LINE INDENT tasks . append ( task ) NEW_LINE DEDENT return tasks NEW_LINE DEDENT
get_users ( self ) : NEW_LINE INDENT users = [ ] NEW_LINE for user in self . users : NEW_LINE INDENT try : NEW_LINE INDENT users . append ( user ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return users NEW_LINE DEDENT
call_method ( self , method ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . method ( method ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_capabilities_url ( self ) : NEW_LINE INDENT return self . _get_capabilities_url ( ) NEW_LINE DEDENT
get_attribute_elements ( self ) : NEW_LINE INDENT if self . attribute_elements is None : NEW_LINE INDENT self . attribute_elements = [ ] NEW_LINE DEDENT return self . attribute_elements NEW_LINE DEDENT

def
get_coordinate ( self ) : NEW_LINE INDENT return self . coordinate NEW_LINE DEDENT
get_items ( self ) : NEW_LINE INDENT items = [ ] NEW_LINE for item in self . items : NEW_LINE INDENT items . append ( item ) NEW_LINE DEDENT for item in self . items : NEW_LINE INDENT items . append ( item ) NEW_LINE DEDENT return items NEW_LINE DEDENT
def message_output ( self , message ) : NEW_LINE INDENT message = message . strip ( ) NEW_LINE message = message . replace ( ' \n ' , ' \n ' ) NEW_LINE return message NEW_LINE DEDENT
clean_temp_files ( self ) : NEW_LINE INDENT temp_files = [ ] NEW_LINE for temp_file in self . temp_files : NEW_LINE INDENT temp_files . append ( temp_file ) NEW_LINE DEDENT for temp_file in self . temp_files : NEW_LINE INDENT temp_files . append ( temp_file ) NEW_LINE DEDENT return temp_files NEW_LINE DEDENT
List < Bucket > getBuckets ( ) { List < Bucket > buckets = new ArrayList < Bucket > ( ) ; for ( Bucket bucket : buckets ) { buckets . add ( bucket ) ; } return buckets ; }
read_local_file_chunk ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _read_local_file_chunk ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
write_chunk ( self , chunk ) : NEW_LINE INDENT try : NEW_LINE INDENT self . write_chunk ( chunk ) NEW_LINE DEDENT except : NEW_LINE INDENT self . write_chunk ( chunk ) NEW_LINE raise NEW_LINE DEDENT DEDENT
ls_command ( command ) : NEW_LINE INDENT if command . startswith ( ' ls ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def def def def def def get_mb def def def def def def def def Handler def def def def def def def def Handler def def def def def def def def def Handler def def def def def def def def _ def def def def def def def def def def get_mb def def def def def def def get_mb def def def def def def get_mb def def def def def def get_mb def def def def def def def get_mb def def def def _
put_command ( self , command , ** kwargs ) : NEW_LINE INDENT self . put_command ( command , ** kwargs ) NEW_LINE return self NEW_LINE DEDENT
get_command ( self , command ) : NEW_LINE INDENT command = self . get_command ( command ) NEW_LINE if command : NEW_LINE INDENT return command NEW_LINE DEDENT return None NEW_LINE DEDENT
cat ( self , command ) : NEW_LINE INDENT if command . startswith ( ' cat ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' cat - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' cat ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' cat ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT else : NEW_LINE INDENT return command NEW_LINE DEDENT DEDENT
cp ( self , command ) : NEW_LINE INDENT if not isinstance ( command , str ) : NEW_LINE INDENT command = str ( command ) NEW_LINE DEDENT if not isinstance ( command , str ) : NEW_LINE INDENT command = str ( command ) NEW_LINE DEDENT if not isinstance ( command , str ) : NEW_LINE INDENT command = str ( command ) NEW_LINE DEDENT return command NEW_LINE DEDENT
mv ( self , command ) : NEW_LINE INDENT if command . startswith ( ' mv ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT if command . startswith ( ' mv - ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT if command . startswith ( ' mv ' ) : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
del_command ( self , command ) : NEW_LINE INDENT self . command = command NEW_LINE return self . command NEW_LINE DEDENT
size ( self , command ) : NEW_LINE INDENT size = self . get_size ( command ) NEW_LINE if size : NEW_LINE INDENT return size NEW_LINE DEDENT return 0 NEW_LINE DEDENT
parse_json ( self , json ) : NEW_LINE INDENT if isinstance ( json , dict ) : NEW_LINE INDENT return json NEW_LINE DEDENT elif isinstance ( json , list ) : NEW_LINE INDENT return json NEW_LINE DEDENT elif isinstance ( json , dict ) : NEW_LINE INDENT return json NEW_LINE DEDENT else : NEW_LINE INDENT return json NEW_LINE DEDENT DEDENT
startListening ( self ) : NEW_LINE INDENT if not self . listening : NEW_LINE INDENT self . listening = True NEW_LINE DEDENT else : NEW_LINE INDENT self . listening = False NEW_LINE DEDENT DEDENT
get_data ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT data = self . gateway . get_data ( ) NEW_LINE return data NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
entry_point ( self ) : NEW_LINE INDENT point = self . entry_point NEW_LINE if point is None : NEW_LINE INDENT point = self . entry_point NEW_LINE DEDENT else : NEW_LINE INDENT point = point NEW_LINE DEDENT return point NEW_LINE DEDENT
display_layouts ( self , layouts ) : NEW_LINE INDENT for layout in layouts : NEW_LINE INDENT if layout in self . _layouts : NEW_LINE INDENT self . _layouts . remove ( layout ) NEW_LINE DEDENT DEDENT return self . _layouts NEW_LINE DEDENT
get_title ( self , objects ) : NEW_LINE INDENT title = self . _get_title ( objects ) NEW_LINE return title NEW_LINE DEDENT
display_layouts ( self ) : NEW_LINE INDENT layouts = [ ] NEW_LINE for layout in self . layouts : NEW_LINE INDENT layouts . append ( layout ) NEW_LINE DEDENT for layout in self . layouts : NEW_LINE INDENT layouts . append ( layout ) NEW_LINE DEDENT return layouts NEW_LINE DEDENT
open_graph ( self , graph_name ) : NEW_LINE INDENT graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph_name = graph_name . lower ( ) NEW_LINE graph
draw_node ( self , node ) : NEW_LINE INDENT if node is None : NEW_LINE INDENT return NEW_LINE DEDENT node . draw ( ) NEW_LINE node . draw ( ) NEW_LINE node . draw ( ) NEW_LINE DEDENT
def display_section ( self , section ) : NEW_LINE INDENT if isinstance ( section , basestring ) : NEW_LINE INDENT return self . _display_section ( section ) NEW_LINE DEDENT elif isinstance ( section , basestring ) : NEW_LINE INDENT return self . _display_section ( section ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . _display_section ( section ) NEW_LINE DEDENT DEDENT
format_table ( self , table ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _format_table ( table ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _format_table ( table ) NEW_LINE DEDENT DEDENT
def
register_checker ( self , checker ) : NEW_LINE INDENT self . checker = checker NEW_LINE DEDENT
disable_reporters ( self ) : NEW_LINE INDENT if self . reporters : NEW_LINE INDENT self . reporters . clear ( ) NEW_LINE self . reporters . addAll ( self . reporters ) NEW_LINE DEDENT DEDENT
comment ( self , string ) : NEW_LINE INDENT if isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , unicode ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , str ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , list ) : NEW_LINE INDENT return string NEW_LINE DEDENT elif isinstance ( string , tuple ) : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return string NEW_LINE DEDENT DEDENT
insert_child_node ( self , child_node ) : NEW_LINE INDENT self . insert_child_node ( child_node ) NEW_LINE self . insert_child_node ( child_node ) NEW_LINE DEDENT
detect_problems ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _detect_problems ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _detect_problems ( ) NEW_LINE DEDENT DEDENT
get_ancestor_nodes ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_ancestor_nodes ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
register_report ( self , report ) : NEW_LINE INDENT self . report = report NEW_LINE DEDENT
render_registered_reports ( self ) : NEW_LINE INDENT self . render_registered_reports ( ) NEW_LINE self . render_registered_reports ( ) NEW_LINE self . render_registered_reports ( ) NEW_LINE DEDENT
setup_entry_point ( self , entry_point ) : NEW_LINE INDENT self . entry_point = entry_point NEW_LINE DEDENT
check_method_arguments ( self ) : NEW_LINE INDENT method_arguments = [ ] NEW_LINE for arg in self . method_arguments : NEW_LINE INDENT if arg in method_arguments : NEW_LINE INDENT method_arguments . append ( arg ) NEW_LINE DEDENT DEDENT return method_arguments NEW_LINE DEDENT
check_super ( self ) : NEW_LINE INDENT self . check_super ( ) NEW_LINE self . check_super ( ) NEW_LINE DEDENT
visit_variables ( self ) : NEW_LINE INDENT visit_variables = [ ] NEW_LINE visit_variables . extend ( self . visit_variables ) NEW_LINE visit_variables . extend ( self . visit_variables ) NEW_LINE visit_variables . extend ( self . visit_variables ) NEW_LINE visit_variables . extend ( self . visit_variables ) NEW_LINE return visit_variables NEW_LINE DEDENT
write_package_diagram ( self ) : NEW_LINE INDENT if self . package_diagram is not None : NEW_LINE INDENT self . package_diagram . write_package_diagram ( self . package_diagram ) NEW_LINE DEDENT DEDENT
write_class_ diagram ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . write_class ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . write_class ( ) NEW_LINE DEDENT DEDENT
pylint ( self ) : NEW_LINE INDENT if self . _pylint is None : NEW_LINE INDENT self . _pylint = self . _pylint ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _pylint = self . _pylint NEW_LINE DEDENT DEDENT
source ( self ) : NEW_LINE INDENT if self . _source is None : NEW_LINE INDENT return None NEW_LINE DEDENT return self . _source NEW_LINE DEDENT
remove_attributes ( self , attributes ) : NEW_LINE INDENT if attributes is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( attributes , dict ) : NEW_LINE INDENT for attr in attributes : NEW_LINE INDENT self . remove_attributes ( attr ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for attr in attributes : NEW_LINE INDENT self . remove_attributes ( attr ) NEW_LINE DEDENT DEDENT DEDENT
disable_abbreviations ( self , abbreviations ) : NEW_LINE INDENT self . _abbreviations = abbreviations NEW_LINE DEDENT
register_options ( self , options ) : NEW_LINE INDENT self . options = options NEW_LINE DEDENT

visit_variables ( self ) : NEW_LINE INDENT statistics = { } NEW_LINE statistics . update ( self . statistics ) NEW_LINE return statistics NEW_LINE DEDENT
check_unreachable_code ( self , unreachable_code ) : NEW_LINE INDENT if unreachable_code : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
create_ship ( self , ship_id ) : NEW_LINE INDENT ship = self . create_ship ( ship_id ) NEW_LINE return ship NEW_LINE DEDENT
visible_methods ( self ) : NEW_LINE INDENT return self . _visible_methods NEW_LINE DEDENT
create_diagram_object ( self ) : NEW_LINE INDENT diagram = self . _create_diagram_object ( ) NEW_LINE if diagram is not None : NEW_LINE INDENT return diagram NEW_LINE DEDENT DEDENT
get_user_object ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . user NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_client_secret ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _client_secret NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
exists ( self , verifier ) : NEW_LINE INDENT if not verifier : NEW_LINE INDENT return False NEW_LINE DEDENT return verifier . exists ( ) NEW_LINE DEDENT
save_ verifier ( self , verifier ) : NEW_LINE INDENT if verifier is None : NEW_LINE INDENT return NEW_LINE DEDENT verifier . save ( ) NEW_LINE verifier . save ( ) NEW_LINE DEDENT
validate_access_token ( self , access_token ) : NEW_LINE INDENT if access_token is None : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT access_token = self . _get_access_token ( access_token ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return access_token NEW_LINE DEDENT
extract_request_params ( self ) : NEW_LINE INDENT params = [ ] NEW_LINE for param in self . request_params : NEW_LINE INDENT params . append ( param ) NEW_LINE DEDENT return params NEW_LINE DEDENT
decode_base64 ( self , base64 ) : NEW_LINE INDENT if isinstance ( base64 , str ) : NEW_LINE INDENT return base64 NEW_LINE DEDENT elif isinstance ( base64 , bytes ) : NEW_LINE INDENT return base64 NEW_LINE DEDENT elif isinstance ( base64 , bytes ) : NEW_LINE INDENT return base64 NEW_LINE DEDENT else : NEW_LINE INDENT return base64 NEW_LINE DEDENT DEDENT

sign ( self , CRL ) : NEW_LINE INDENT if not self . is_valid ( CRL ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( CRL ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( CRL ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( CRL ) : NEW_LINE INDENT return NEW_LINE DEDENT if self . is_valid ( CRL ) : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
load_gene_set ( self , gene_set ) : NEW_LINE INDENT if gene_set is not None : NEW_LINE INDENT return gene_set NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
save_stats ( self , stats ) : NEW_LINE INDENT self . stats = stats NEW_LINE return self NEW_LINE DEDENT
replot ( self ) : NEW_LINE INDENT self . replot_function ( ) NEW_LINE self . replot_function ( ) NEW_LINE DEDENT
parse_gene_list ( gene_list ) : NEW_LINE INDENT gene_list = [ ] NEW_LINE for gene in gene_list : NEW_LINE INDENT gene_list . append ( gene ) NEW_LINE DEDENT return gene_list NEW_LINE DEDENT
get_background_gene ( self ) : NEW_LINE INDENT if self . background_gene is not None : NEW_LINE INDENT return self . background_gene NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def create_cube_primitive ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _create_cube_primitive ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
rename_layer_label ( self , layer_label ) : NEW_LINE INDENT if isinstance ( layer_label , str ) : NEW_LINE INDENT return layer_label NEW_LINE DEDENT elif isinstance ( layer_label , str ) : NEW_LINE INDENT return layer_label NEW_LINE DEDENT DEDENT
def _duplicate_layer ( self , layer ) : NEW_LINE INDENT if isinstance ( layer , Layer ) : NEW_LINE INDENT return layer NEW_LINE DEDENT elif isinstance ( layer , Layer ) : NEW_LINE INDENT return layer NEW_LINE DEDENT else : NEW_LINE INDENT return layer NEW_LINE DEDENT DEDENT
handle_error ( self , error ) : NEW_LINE INDENT if isinstance ( error , BaseException ) : NEW_LINE INDENT return error NEW_LINE DEDENT elif isinstance ( error , BaseException ) : NEW_LINE INDENT return error NEW_LINE DEDENT elif isinstance ( error , BaseException ) : NEW_LINE INDENT return error NEW_LINE DEDENT DEDENT
delete_mesh_layer ( self , mesh_layer ) : NEW_LINE INDENT if mesh_layer is None : NEW_LINE INDENT return NEW_LINE DEDENT mesh_layer . delete ( ) NEW_LINE DEDENT
run_script ( self , script ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _run_script ( script ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
run_main_script ( self ) : NEW_LINE INDENT self . _run_main_script ( ) NEW_LINE self . _run_main_script ( ) NEW_LINE self . _run_main_script ( ) NEW_LINE DEDENT
flatten_plane_parameterization ( plane_parameterization ) : NEW_LINE INDENT if plane_parameterization : NEW_LINE INDENT return plane_parameterization NEW_LINE DEDENT return plane_parameterization NEW_LINE DEDENT
multiply_vector_by_scalar ( vector , scalar ) : NEW_LINE INDENT if scalar is not None : NEW_LINE INDENT return vector * scalar NEW_LINE DEDENT else : NEW_LINE INDENT return vector NEW_LINE DEDENT DEDENT
def
memory_overhead ( self ) : NEW_LINE INDENT return self . _memory_overhead ( ) NEW_LINE DEDENT
get_call_tree ( self ) : NEW_LINE INDENT return self . _call_tree NEW_LINE DEDENT
def init ( self ) : NEW_LINE INDENT self . _db = None NEW_LINE self . _db = None NEW_LINE DEDENT

__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
static StandardScaler convert ( StandardScaler scaler ) { if ( scaler instanceof StandardScaler ) { return ( StandardScaler ) scaler ; } return scaler ; }
fit_linear_model ( self ) : NEW_LINE INDENT model = self . model NEW_LINE model . fit ( ) NEW_LINE return model NEW_LINE DEDENT
block ( self , rdd ) : NEW_LINE INDENT if isinstance ( rdd , RDD ) : NEW_LINE INDENT return rdd . block ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return rdd NEW_LINE DEDENT DEDENT
def homeassistant_url ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse ( self . url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def get_device_name ( self ) : NEW
daemon_mode ( daemon_mode ) : NEW_LINE INDENT if daemon_mode : NEW_LINE INDENT return daemon_mode NEW_LINE DEDENT else : NEW_LINE INDENT return daemon_mode NEW_LINE DEDENT DEDENT
static void setCallback ( Callback callback ) { if ( callback == null ) { return ; } if ( callback instanceof Callback ) { Callback callback = ( Callback ) callback ; } else { if ( callback instanceof Callback ) { Callback callback = ( ( Callback ) callback ) ; } else { return ; } } }
def def destroy_transport_transport ( self ) : NEW_LINE def destroy_transport ( self ) : NEW_LINE INDENT transport = self . transport NEW_LINE if self . transport is not None : NEW_LINE INDENT self . transport = self . transport NEW_LINE self . transport = None NEW_LINE self . transport = None NEW_LINE self . transport = None NEW_LINE DEDENT self . transport = None NEW_LINE DEDENT
acquire ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . lock . acquire ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . lock . release ( ) NEW_LINE raise NEW_LINE DEDENT self . lock . release ( ) NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
index_mappings ( self ) : NEW_LINE INDENT mappings = { } NEW_LINE mappings . update ( self . mappings ) NEW_LINE mappings . update ( self . mappings ) NEW_LINE mappings . update ( self . mappings ) NEW_LINE return mappings NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__

load_configuration ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . configuration NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
strip_leading_whitespace ( self ) : NEW_LINE INDENT if self . _leading_whitespace : NEW_LINE INDENT return self . _leading_whitespace NEW_LINE DEDENT return self . _leading_whitespace NEW_LINE DEDENT
get_line_endings ( self ) : NEW_LINE INDENT if self . line_endings : NEW_LINE INDENT return self . line_endings NEW_LINE DEDENT elif self . line_endings : NEW_LINE INDENT return self . line_endings NEW_LINE DEDENT DEDENT
def get_filenames ( self ) : NEW_LINE INDENT filenames = [ ] NEW_LINE for filename in self . filenames : NEW_LINE INDENT filenames . append ( filename ) NEW_LINE DEDENT return filenames NEW_LINE DEDENT
exit_status ( self ) : NEW_LINE INDENT if self . exit_status : NEW_LINE INDENT return self . exit_status NEW_LINE DEDENT return self . exit_status NEW_LINE DEDENT
stop_server ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . stop ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

generate_action ( self , action ) : NEW_LINE INDENT if not action : NEW_LINE INDENT return None NEW_LINE DEDENT if action . startswith ( ' _ ' ) : NEW_LINE INDENT return action NEW_LINE DEDENT elif action . startswith ( ' _ _ ' ) : NEW_LINE INDENT return action NEW_LINE DEDENT elif action . startswith ( ' _ _ ' ) : NEW_LINE INDENT return action NEW_LINE DEDENT return None NEW_LINE DEDENT
generate_form ( self ) : NEW_LINE INDENT form = self . get_form ( ) NEW_LINE if form is None : NEW_LINE INDENT form = self . get_form ( ) NEW_LINE DEDENT else : NEW_LINE INDENT form = self . get_form ( ) NEW_LINE DEDENT return form NEW_LINE DEDENT
def generate_model ( self ) : NEW_LINE INDENT model = self . _get_model ( ) NEW_LINE if model is not None : NEW_LINE INDENT return model NEW_LINE DEDENT else : NEW_LINE INDENT return model NEW_LINE DEDENT DEDENT
mkdir ( path ) : NEW_LINE INDENT if not path : NEW_LINE INDENT return NEW_LINE DEDENT path = os . path . join ( path , os . path . basename ( path ) ) NEW_LINE if os . path . isdir ( path ) : NEW_LINE INDENT mkdir ( path ) NEW_LINE DEDENT elif os . path . isfile ( path ) : NEW_LINE INDENT mkdir ( path ) NEW_LINE DEDENT elif os . path . isdir ( path ) : NEW_LINE INDENT mkdir ( path ) NEW_LINE DEDENT elif os . path . isfile ( path ) : NEW_LINE INDENT mkdir ( path ) NEW_LINE DEDENT DEDENT

def url_schema_schema ( self ) : NEW_LINE INDENT return self . url_schema NEW_LINE DEDENT
def json_decorator ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return json . dumps ( self . decorator ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . decorator NEW_LINE DEDENT DEDENT
load_config ( self ) : NEW_LINE INDENT config = { } NEW_LINE config . update ( self . config ) NEW_LINE return config NEW_LINE DEDENT

get_current_user ( self ) : NEW_LINE INDENT current_user = self . get_user ( ) NEW_LINE if current_user : NEW_LINE INDENT return current_user NEW_LINE DEDENT return None NEW_LINE DEDENT
create_app ( self ) : NEW_LINE INDENT app = Flask ( self . app_name ) NEW_LINE app . app_name = self . app_name NEW_LINE app . app_name = self . app_name NEW_LINE return app NEW_LINE DEDENT


serialize_dataframe ( self , dataframe ) : NEW_LINE INDENT if isinstance ( dataframe , pd . DataFrame ) : NEW_LINE INDENT return dataframe NEW_LINE DEDENT else : NEW_LINE INDENT return dataframe NEW_LINE DEDENT DEDENT
deserialize_dataframe ( self , dataframe ) : NEW_LINE INDENT if isinstance ( dataframe , DataFrame ) : NEW_LINE INDENT return dataframe NEW_LINE DEDENT else : NEW_LINE INDENT return dataframe NEW_LINE DEDENT DEDENT

__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
def def def def write ( self ) : NEW def write ( self , message ) : NEW def write ( self , message ) : NEW_LINE def write ( self , message ) : NEW_LINE INDENT self . write ( message ) NEW_LINE def write ( self , message ) : NEW_LINE def write ( self , message ) : NEW_LINE INDENT self . write ( message ) NEW_LINE def write ( self , message ) : NEW_LINE INDENT self . write ( message ) NEW_LINE self . write ( message ) NEW_LINE DEDENT def write ( self , message ) : NEW_LINE INDENT self . write ( message ) NEW_LINE DEDENT DEDENT DEDENT
close_port ( port ) : NEW_LINE INDENT try : NEW_LINE INDENT port . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
system_default ( self ) : NEW_LINE INDENT if self . system_default is not None : NEW_LINE INDENT return self . system_default NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
shallow_copy ( self ) : NEW_LINE INDENT return self . shallow_copy ( ) NEW_LINE DEDENT
update_token ( self , token ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _update_token ( token ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def get_allocations ( self ) : NEW_LINE INDENT allocations = [ ] NEW_LINE for i in self . allocations : NEW_LINE INDENT allocations . append ( self . allocations [ i ] ) NEW_LINE DEDENT return allocations NEW_LINE DEDENT
fuzz ( self ) : NEW_LINE INDENT if self . fuzzing : NEW_LINE INDENT return self . fuzzing NEW_LINE DEDENT else : NEW_LINE INDENT return self . fuzzing NEW_LINE DEDENT DEDENT
start_servers ( self , servers ) : NEW_LINE INDENT for server in servers : NEW_LINE INDENT try : NEW_LINE INDENT server . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
kill_servers ( self , servers ) : NEW_LINE INDENT for server in servers : NEW_LINE INDENT try : NEW_LINE INDENT server . kill ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
build_string_instance ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
build_and_instance ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _build_and_instance ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
def
random_float ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return random . random ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
save_notebook ( self , notebook ) : NEW_LINE INDENT self . _notebook = notebook NEW_LINE self . _notebook . save ( ) NEW_LINE DEDENT
create_directory ( self , directory ) : NEW_LINE INDENT self . _mkdir ( directory ) NEW_LINE self . _mkdir ( directory ) NEW_LINE DEDENT
delete_directory ( self , directory ) : NEW_LINE INDENT try : NEW_LINE INDENT os . rmdir ( directory ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if os . path . isdir ( directory ) : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT else : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT DEDENT DEDENT
rename_directory ( directory ) : NEW_LINE INDENT try : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' wb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT return file NEW_LINE DEDENT
create_user ( self , user_id ) : NEW_LINE INDENT if not user_id : NEW_LINE INDENT return NEW_LINE DEDENT user_id = user_id . encode ( ' utf - 8' ) NEW_LINE user_id = user_id . encode ( ' utf - 8' ) NEW_LINE user_id = user_id . encode ( ' utf - 8' ) NEW_LINE user_id = user_id . encode ( ' utf - 8' ) NEW_LINE user_id = user_id . encode ( ' utf - 8' ) NEW_LINE user_id = user_id . encode ( ' utf - 8' ) NEW_LINE return user_id NEW_LINE DEDENT
get_file_extension ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _file_extension NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . _file_extension NEW_LINE DEDENT DEDENT
read_amount ( self , amount ) : NEW_LINE INDENT if amount is None : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT amount = int ( amount ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT return amount NEW_LINE DEDENT
finalize_counter ( self , counter ) : NEW_LINE INDENT self . _counter = counter NEW_LINE return self . _counter NEW_LINE DEDENT
acquire ( self ) : NEW_LINE INDENT self . semaphore . acquire ( ) NEW_LINE self . semaphore . release ( ) NEW_LINE self . semaphore . release ( ) NEW_LINE DEDENT
release ( self ) : NEW_LINE INDENT self . semaphore . release ( ) NEW_LINE DEDENT
shutdown_transfermanager ( self ) : NEW_LINE INDENT if self . _transferManager : NEW_LINE INDENT self . _transferManager . shutdown ( ) NEW_LINE DEDENT DEDENT


delete_room ( self , room_id ) : NEW_LINE INDENT if room_id not in self . rooms : NEW_LINE INDENT self . rooms . add ( room_id ) NEW_LINE DEDENT return self . rooms [ room_id ] NEW_LINE DEDENT
create_webhook ( self ) : NEW_LINE INDENT webhook = self . _create_webhook ( ) NEW_LINE if not webhook : NEW_LINE INDENT return None NEW_LINE DEDENT return webhook NEW_LINE DEDENT
delete_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT message . delete ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
list_roles ( self ) : NEW_LINE INDENT roles = [ ] NEW_LINE for role in self . roles : NEW_LINE INDENT roles . append ( role ) NEW_LINE DEDENT return roles NEW_LINE DEDENT
create_team ( self , team_id ) : NEW_LINE INDENT self . _team_id = team_id NEW_LINE return self . _team_id NEW_LINE DEDENT
delete_team ( self , team_id ) : NEW_LINE INDENT team = self . get_team ( team_id ) NEW_LINE if not team : NEW_LINE INDENT return NEW_LINE DEDENT team . delete ( ) NEW_LINE DEDENT

wrap_setup_command ( self , command ) : NEW_LINE INDENT if isinstance ( command , six . string_types ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif isinstance ( command , six . string_types ) : NEW_LINE INDENT return command NEW_LINE DEDENT DEDENT
static void main ( String [ ] args ) { for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( args [ i ] ) ; System . out . println ( args [ i ] ) ; } }
update_query ( self , query ) : NEW_LINE INDENT self . query = query NEW_LINE return self . query NEW_LINE DEDENT
def def start_step ( self ) : NEW_LINE INDENT step = self . _step ( ) NEW_LINE self . _step = self . _step ( ) NEW_LINE return step NEW_LINE DEDENT
stop_step ( self , step ) : NEW_LINE INDENT if self . _step is not None : NEW_LINE INDENT self . _step . stop ( ) NEW_LINE DEDENT DEDENT

reset_client ( self ) : NEW_LINE INDENT self . client = None NEW_LINE DEDENT
update_device ( self , device_id ) : NEW_LINE INDENT self . _device_id = device_id NEW_LINE self . _device_id = device_id NEW_LINE return self . _device_id NEW_LINE DEDENT
formfield ( self , ** kwargs ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . formfield ( ** kwargs ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return self . formfield ( ** kwargs ) NEW_LINE DEDENT DEDENT
def get_url ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return urlparse ( self . url ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . url NEW_LINE DEDENT DEDENT
build_attribute_dictionary ( self ) : NEW_LINE INDENT if self . attribute_dictionary is None : NEW_LINE INDENT self . attribute_dictionary = { } NEW_LINE DEDENT return self . attribute_dictionary NEW_LINE DEDENT
get_filtered_path ( self , path ) : NEW_LINE INDENT if path is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return path NEW_LINE DEDENT DEDENT
connect ( self , server ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server = server NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
close_connection ( self , connection ) : NEW_LINE INDENT try : NEW_LINE INDENT connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def debug def def debug def def def get_ def def def def _ def def def def def debug def def def def def def get_ def def def def def def get_ def def def def _ def def def def def def get_ def def def def def def debug def def def def def get_ def def def def debug def def def def _ def def def def debug def def def _ def def def def get_ def _
remove_snapshot ( self , snapshot ) : NEW_LINE INDENT if not snapshot : NEW_LINE INDENT return NEW_LINE DEDENT self . _snapshot = snapshot NEW_LINE self . _snapshot . delete ( ) NEW_LINE DEDENT
def def def def R def def def def def R def def def def R def def def def def R def def def def def def R def def def def def def def _ def _ def def def def def def R def def def def def def def _ def def def def def def _ def def def def def _ def def def def _ def def def def _ def _get_ def _get_ def _get_snapshot ( self , def _get_snapshot ( self ) : NEW def _get_
void removeSnapshot ( Snapshot snapshot ) { if ( snapshot == null ) { return ; } if ( snapshot . isSnapshot ( ) ) { return ; } snapshot . removeSnapshot ( ) ; }
copy ( self ) : NEW_LINE INDENT return self . _copy ( ) NEW_LINE DEDENT
remove_items ( self , items ) : NEW_LINE INDENT for item in items : NEW_LINE INDENT self . remove_item ( item ) NEW_LINE DEDENT DEDENT
def def def def _ public public public static void run ( ) throws IOException { try__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
_get_program_counter ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _program_counter NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
static void displayIntegerValue ( int value ) { if ( value == 0 ) { return ; } if ( value == 1 ) { return ; } if ( value == 2 ) { return ; } if ( value == 3 ) { return ; } if ( value == 4 ) { return ; } if ( value == 5 ) { return ; } if ( value == 6 ) { return ; } if ( value == 7 ) { return ; } if ( value == 8 ) { return ; } if ( value == 9 ) { return ; } if ( value == 10 ) { return ; } if ( value == 0 ) { return ; } if ( value == 1 ) { return ; } if ( value == 2 ) { return ; } if ( value == 3 ) { return ; } if ( value == 4 ) { return ; } if ( value == 5 ) { return ; } if ( value == 6 ) { return ; } }
display_value ( self , subcommand , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT value = ' ' NEW_LINE DEDENT elif value is not None : NEW_LINE INDENT value = value . strip ( ) NEW_LINE DEDENT return value NEW_LINE DEDENT
display_item ( self , item ) : NEW_LINE INDENT item = self . format_item ( item ) NEW_LINE return item NEW_LINE DEDENT
get_file_info ( self ) : NEW_LINE INDENT file_info = self . _get_file_info ( ) NEW_LINE if file_info is None : NEW_LINE INDENT return None NEW_LINE DEDENT return file_info NEW_LINE DEDENT
remove_bp ( self , bp ) : NEW_LINE INDENT if not self . is_bp ( bp ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def r def def r def def r def def r def def def def r def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def r def def def def def def def _ def def def def def def r def def def def def def _ def def def def def _ def def def def _ def def def def def _ def def def def def _ def def def def def _ def def def def def _
def def r def def def r def def def def _ def def def def def _ def def def def def def _ def def def def def def _ def def def def def def def __ def def def def def def def __ def def def def def def __ def def def def __ def def def def _ def def def def def __ def def def def _ def def def def _ def def def def __ def def def def _ def def def def def _ def def def _

get_data ( self ) : NEW_LINE INDENT data = { } NEW_LINE for key in self . data : NEW_LINE INDENT data [ key ] = self . data [ key ] NEW_LINE DEDENT return data NEW_LINE DEDENT
render_rendering ( self ) : NEW_LINE INDENT if self . render_rendering : NEW_LINE INDENT return self . render_rendering ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . render_rendering ( ) NEW_LINE DEDENT DEDENT
print_dataset_statistics ( self , dataset_statistics ) : NEW_LINE INDENT self . print_dataset_statistics ( dataset_statistics ) NEW_LINE self . print_dataset_statistics ( ) NEW_LINE DEDENT
def get_time ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return time . time ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
decode_layers ( self , layers ) : NEW_LINE INDENT layers = [ ] NEW_LINE for layer in layers : NEW_LINE INDENT layers . append ( layer ) NEW_LINE DEDENT for layer in layers : NEW_LINE INDENT layers . append ( layer ) NEW_LINE DEDENT return layers NEW_LINE DEDENT
Encode ( self , input ) : NEW_LINE INDENT if isinstance ( input , str ) : NEW_LINE INDENT return self . _encode ( input ) NEW_LINE DEDENT elif isinstance ( input , str ) : NEW_LINE INDENT return self . _encode ( input ) NEW_LINE DEDENT return self . _encode ( input ) NEW_LINE DEDENT
decode ( self , representation ) : NEW_LINE INDENT if representation is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( representation , str ) : NEW_LINE INDENT return representation NEW_LINE DEDENT if isinstance ( representation , unicode ) : NEW_LINE INDENT return representation NEW_LINE DEDENT if isinstance ( representation , str ) : NEW_LINE INDENT return representation NEW_LINE DEDENT if isinstance ( representation , unicode ) : NEW_LINE INDENT return representation NEW_LINE DEDENT if isinstance ( representation , str ) : NEW_LINE INDENT return representation NEW_LINE DEDENT return representation NEW_LINE DEDENT
get_parameters ( self ) : NEW_LINE INDENT parameters = self . params NEW_LINE if not parameters : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return parameters NEW_LINE DEDENT
set_up_variables ( self , variables ) : NEW_LINE INDENT self . set_up_variables ( variables ) NEW_LINE DEDENT
get_network_output ( self ) : NEW_LINE INDENT network_output = [ ] NEW_LINE for network in self . networks . values ( ) : NEW_LINE INDENT network_output . append ( network ) NEW_LINE DEDENT return network_output NEW_LINE DEDENT
print_network_statistics ( self , network_statistics ) : NEW_LINE INDENT self . print_network_statistics ( network_statistics ) NEW_LINE DEDENT
register_parameters ( self , parameters ) : NEW_LINE INDENT self . parameters = parameters NEW_LINE DEDENT
shiftLeft ( self , left ) : NEW_LINE INDENT if left : NEW_LINE INDENT return left NEW_LINE DEDENT elif left : NEW_LINE INDENT return left NEW_LINE DEDENT else : NEW_LINE INDENT return left NEW_LINE DEDENT DEDENT
uniq ( self , key ) : NEW_LINE INDENT if key in self . _keys : NEW_LINE INDENT return self . _keys [ key ] NEW_LINE DEDENT else : NEW_LINE INDENT return self . _keys [ key ] NEW_LINE DEDENT DEDENT
write ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _write_data ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _write_data ( data ) NEW_LINE DEDENT DEDENT
print_interface ( self , interface ) : NEW_LINE INDENT if interface is None : NEW_LINE INDENT return None NEW_LINE DEDENT if isinstance ( interface , str ) : NEW_LINE INDENT return interface NEW_LINE DEDENT if isinstance ( interface , int ) : NEW_LINE INDENT return interface NEW_LINE DEDENT if isinstance ( interface , str ) : NEW_LINE INDENT return interface NEW_LINE DEDENT if isinstance ( interface , list ) : NEW_LINE INDENT return interface NEW_LINE DEDENT if isinstance ( interface , tuple ) : NEW_LINE INDENT return interface NEW_LINE DEDENT return interface NEW_LINE DEDENT
hdl_vector_value ( hdl_vector_value ) : NEW_LINE INDENT hdl_vector_value = hdl_vector_value NEW_LINE hdl_vector_value = hdl_vector_value NEW_LINE hdl_vector_value = hdl_vector_value NEW_LINE return hdl_vector_value NEW_LINE DEDENT
get_parameter_value ( self , parameter ) : NEW_LINE INDENT value = self . get_parameter_value ( parameter ) NEW_LINE if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT return value NEW_LINE DEDENT
register_interface ( self , interface ) : NEW_LINE INDENT self . interface = interface NEW_LINE return self . interface NEW_LINE DEDENT
get_root ( self ) : NEW_LINE INDENT root = self . root NEW_LINE if root is None : NEW_LINE INDENT root = self . root NEW_LINE DEDENT return root NEW_LINE DEDENT
get_indent_getter ( self ) : NEW_LINE INDENT if self . indent_getter is not None : NEW_LINE INDENT return self . indent_getter NEW_LINE DEDENT return self . indent_getter NEW_LINE DEDENT
mute_volume ( self , volume ) : NEW_LINE INDENT self . _volume = volume NEW_LINE if self . _volume is not None : NEW_LINE INDENT self . _volume = self . _volume . copy ( ) NEW_LINE DEDENT DEDENT
set_volume_level ( self , volume_level ) : NEW_LINE INDENT self . volume_level = volume_level NEW_LINE DEDENT
static List < String > values ( ) { List < String > values = new ArrayList < String > ( ) ; for ( int i = 0 ; i < values . size ( ) ; i ++ ) { values . get ( i ) ; } return values ; }
close_file ( self , file ) : NEW_LINE INDENT if os . path . isfile ( file ) : NEW_LINE INDENT if os . path . isfile ( file ) : NEW_LINE INDENT os . remove ( file ) NEW_LINE DEDENT DEDENT DEDENT
process_arguments ( self , arguments ) : NEW_LINE INDENT arguments = [ ] NEW_LINE for arg in arguments : NEW_LINE INDENT arguments . append ( arg ) NEW_LINE DEDENT for arg in arguments : NEW_LINE INDENT arguments . append ( arg ) NEW_LINE DEDENT return arguments NEW_LINE DEDENT
process_keyword_arguments ( keyword_arguments ) : NEW_LINE INDENT keyword_arguments = [ ] NEW_LINE for arg in keyword_arguments : NEW_LINE INDENT keyword_arguments . append ( arg ) NEW_LINE DEDENT return keyword_arguments NEW_LINE DEDENT
process ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT yield self NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
add_price ( self , price ) : NEW_LINE INDENT if price is None : NEW_LINE INDENT return None NEW_LINE DEDENT if price is not None : NEW_LINE INDENT return price NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
static List < Price > getAllPrices ( ) { List < Price > prices = new ArrayList < Price > ( ) ; for ( int i = 0 ; i < prices . size ( ) ; i ++ ) { prices . add ( prices . get ( i ) ) ; } return prices ; }
get_latest_prices ( self ) : NEW_LINE INDENT prices = [ ] NEW_LINE for price in self . prices : NEW_LINE INDENT prices . append ( price ) NEW_LINE DEDENT return prices NEW_LINE DEDENT
def create_symbol_mapping ( self ) : NEW_LINE INDENT symbol_mapping = { } NEW_LINE for key , value in self . symbol_mapping . items ( ) : NEW_LINE INDENT symbol_mapping [ key ] = value NEW_LINE DEDENT DEDENT
def
read_config_file ( self , config_file ) : NEW_LINE INDENT try : NEW_LINE INDENT config = ConfigParser . ConfigParser ( ) NEW_LINE config . read ( config_file ) NEW_LINE return config NEW_LINE DEDENT except ConfigParser . NoOptionError : NEW_LINE INDENT pass NEW_LINE DEDENT except ConfigParser . NoOptionError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
set_config_value ( self , config , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( config , dict ) : NEW_LINE INDENT config = dict ( config ) NEW_LINE DEDENT elif isinstance ( config , dict ) : NEW_LINE INDENT config = dict ( config ) NEW_LINE DEDENT elif isinstance ( config , dict ) : NEW_LINE INDENT config = dict ( config ) NEW_LINE DEDENT return config NEW_LINE DEDENT
get_config_value ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _config_value NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save_config_file ( self , config_file ) : NEW_LINE INDENT self . config_file = config_file NEW_LINE return self . config_file NEW_LINE DEDENT
add_price ( self , price ) : NEW_LINE INDENT if not price : NEW_LINE INDENT return NEW_LINE DEDENT if isinstance ( price , float ) : NEW_LINE INDENT price = float ( price ) NEW_LINE DEDENT return price NEW_LINE DEDENT
save_price ( self , price ) : NEW_LINE INDENT if not price : NEW_LINE INDENT return NEW_LINE DEDENT price = price . copy ( ) NEW_LINE price . save ( ) NEW_LINE price . save ( ) NEW_LINE price . save ( ) NEW_LINE return price NEW_LINE DEDENT
current_db_session ( self ) : NEW_LINE INDENT db_session = self . db_session NEW_LINE if db_session is None : NEW_LINE INDENT return None NEW_LINE DEDENT return db_session NEW_LINE DEDENT
get_parser_outputs ( self ) : NEW_LINE INDENT if self . _parser_outputs is None : NEW_LINE INDENT self . _parser_outputs = [ ] NEW_LINE DEDENT return self . _parser_outputs NEW_LINE DEDENT
def def def connection ( self ) : NEW
search_labels ( self , labels ) : NEW_LINE INDENT if not labels : NEW_LINE INDENT return [ ] NEW_LINE DEDENT for label in labels : NEW_LINE INDENT if label in self . labels : NEW_LINE INDENT return [ label ] NEW_LINE DEDENT DEDENT DEDENT
def def def def def def record def def def def def def get_ def def def def def def def def get_ def def def def def def def def def _ def def def def def def def get_ def def def def def def def def def def getTimingValue ( self ) : NEW def getTimingValue ( self ) : NEW def getTimingValue ( self ) : NEW def getTimingValue ( self , value ) : NEW def getTiming ( self ) : NEW_LINE def getTiming ( self ) : NEW_LINE def getTimingValue ( self ) : NEW_LINE def getTiming ( self ) : NEW_LINE INDENT return self . _
def
def histogram ( self ) : NEW_LINE INDENT return self . _histogram ( ) NEW_LINE def _histogram ( self ) : NEW_LINE INDENT return self . _histogram ( ) NEW_LINE DEDENT return self . _histogram ( ) NEW_LINE DEDENT
mean ( self , value ) : NEW_LINE INDENT if value is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT
close ( self ) : NEW_LINE INDENT if self . closed : NEW_LINE INDENT return NEW_LINE DEDENT self . closed = True NEW_LINE DEDENT
setup_rule ( self , rule ) : NEW_LINE INDENT self . rule = rule NEW_LINE DEDENT
def
sigmoid ( self ) : NEW_LINE INDENT return self . _sigmoid ( ) NEW_LINE DEDENT
remove_nested_ brackets ( self , brackets ) : NEW_LINE INDENT if isinstance ( brackets , list ) : NEW_LINE INDENT brackets = [ brackets ] NEW_LINE DEDENT for brackets in brackets : NEW_LINE INDENT if isinstance ( brackets , list ) : NEW_LINE INDENT brackets . remove ( brackets ) NEW_LINE DEDENT DEDENT DEDENT

validate_pipeline_string ( pipeline_string ) : NEW_LINE INDENT pipeline_string = pipeline_string . strip ( ) NEW_LINE if not pipeline_string : NEW_LINE INDENT return None NEW_LINE DEDENT return pipeline_string NEW_LINE DEDENT
write_report ( self , report ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _writer . write_report ( report ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
main ( ) : NEW_LINE INDENT builder = PipelineBuilder ( ) NEW_LINE builder . build ( ) NEW_LINE return builder . build ( ) NEW_LINE DEDENT
print_results ( self , results ) : NEW_LINE INDENT if not results : NEW_LINE INDENT return NEW_LINE DEDENT for result in results : NEW_LINE INDENT print ( result ) NEW_LINE DEDENT return NEW_LINE DEDENT
accumulator ( self ) : NEW_LINE INDENT if self . accumulator is None : NEW_LINE INDENT self . accumulator = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT self . accumulator . append ( self . accumulator ) NEW_LINE DEDENT DEDENT
standard_variance ( self ) : NEW_LINE INDENT standard_variance = self . _standard_variance ( ) NEW_LINE standard_variance /= self . _standard_variance ( ) NEW_LINE return standard_variance NEW_LINE DEDENT
create_distributed_function_distribution ( self ) : NEW_LINE INDENT self . _distributed_function_distribution = self . _distributed_function_distribution NEW_LINE self . _distributed_function_distribution = self . _distributed_function_distribution NEW_LINE DEDENT
def
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
static void send ( String instruction ) { if ( instruction == null ) return ; if ( instruction . length ( ) == 0 ) return ; if ( instruction . length ( ) == 1 ) return ; if ( instruction . length ( ) == 2 ) return ; if ( instruction . length ( ) == 3 ) return ; if ( instruction . length ( ) == 4 ) return ; if ( instruction . length ( ) == 2 ) return ; if ( instruction . length ( ) == 1 ) return ; if ( instruction . length ( ) == 2 ) return ; if ( instruction . length ( ) == 1 ) return ; if ( instruction . length ( ) == 2 ) return ; if ( instruction . length ( ) == 3 ) return ; if ( instruction . length ( ) == 1 ) return ; if ( instruction . length ( ) == 2 ) return ; if ( instruction . length ( ) == 1 ) return ; if ( instruction . length ( ) == 2 ) return ; if (
get_child_object_class ( self ) : NEW_LINE INDENT child_object_class = self . __class__ NEW_LINE if child_object_class : NEW_LINE INDENT return child_object_class NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
cancel_task ( self , task ) : NEW_LINE INDENT if task is None : NEW_LINE INDENT return NEW_LINE DEDENT task . cancel ( ) NEW_LINE DEDENT
truncate_string_values ( self , values ) : NEW_LINE INDENT if len ( values ) == 0 : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if len ( values ) == 1 : NEW_LINE INDENT return values [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
def set_default_options ( self ) : NEW_LINE INDENT self . options = { } NEW_LINE self . default_options = { } NEW_LINE DEDENT
format_row ( self , row ) : NEW_LINE INDENT if row is None : NEW_LINE INDENT return ' ' NEW_LINE DEDENT if row is None : NEW_LINE INDENT return ' ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
generate_secret_key ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _generate_secret_key ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
generate_key_pair ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _generate_key_pair ( ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_docstring ( self ) : NEW_LINE INDENT docstring = self . _get_docstring ( ) NEW_LINE if docstring is not None : NEW_LINE INDENT return docstring NEW_LINE DEDENT return docstring NEW_LINE DEDENT
get_variant_info ( self ) : NEW_LINE INDENT variant_info = { } NEW_LINE for variant in self . _variant_info : NEW_LINE INDENT variant_info [ variant ] = self . _variant_info [ variant ] NEW_LINE DEDENT return variant_info NEW_LINE DEDENT
buildIndividual ( self ) : NEW_LINE INDENT return self . _buildIndividual ( ) NEW_LINE DEDENT
get_variant ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _variant NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
get_opened_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _opened_file NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_individual_information ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_individual_information ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_individual_information ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_individual_information ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _parse_individual_information ( ) NEW_LINE DEDENT DEDENT
def def def def def def get_ def def def def def def def get_
delete_event ( self , event_id ) : NEW_LINE INDENT event = self . _get_event ( event_id ) NEW_LINE if event is not None : NEW_LINE INDENT event . delete ( ) NEW_LINE DEDENT return event NEW_LINE DEDENT
def def def def def def def def def configure def def def def def def def def def def def def _ def def def def def def def def def def _ def def def def def def def def def def _ def def def def def def def def def def def def def def def def def def def def def def def def def def def _setup def def def def def def def def def def def def def def def def def def def _ def def def def
setup ( self ) : NEW_LINE INDENT self . _setup ( ) NEW_LINE self . _setup ( ) NEW_LINE self . _setup ( ) NEW_LINE DEDENT
create_indexes ( self ) : NEW_LINE INDENT indexes = [ ] NEW_LINE for index in self . indexes : NEW_LINE INDENT indexes . append ( index ) NEW_LINE DEDENT return indexes NEW_LINE DEDENT
parse_rank_score ( self , rank_score ) : NEW_LINE INDENT if rank_score is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return rank_score NEW_LINE DEDENT DEDENT
initialize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT from flask import Flask NEW_LINE DEDENT except ImportError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
decorator ( self ) : NEW_LINE INDENT if self . __class__ . __name__ in self . __dict__ : NEW_LINE INDENT return self . __class__ . __name__ NEW_LINE DEDENT else : NEW_LINE INDENT return self . __class__ NEW_LINE DEDENT DEDENT
get_gene_panels ( self ) : NEW_LINE INDENT gene_panels = [ ] NEW_LINE for panel in self . gene_panels : NEW_LINE INDENT gene_panels . append ( panel ) NEW_LINE DEDENT return gene_panels NEW_LINE DEDENT

def def def Display def def def def display def def def def Display def def def def def Display def def def def def Display def def def def def def Display def def def def def def def Display def def def def def def def Display def def def def def def def Display def def def def def def Display def def def def def def _ def def def def Display def def def def Display def def def def _ def def def def def def Display def def def def def def _

def
def get_delivery_report ( self ) : NEW_LINE INDENT delivery_report = self . _get_delivery_report ( ) NEW_LINE if delivery_report : NEW_LINE INDENT return delivery_report NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
load_variant_object ( self , variant_object ) : NEW_LINE INDENT if isinstance ( variant_object , Variant ) : NEW_LINE INDENT return variant_object NEW_LINE DEDENT else : NEW_LINE INDENT return self . _load_variant_object ( variant_object ) NEW_LINE DEDENT DEDENT



header_information ( self ) : NEW_LINE INDENT header_information = self . header_information ( ) NEW_LINE if header_information : NEW_LINE INDENT return header_information NEW_LINE DEDENT return None NEW_LINE DEDENT
def channel_border ( self ) : NEW_LINE INDENT if self . channel_border : NEW_LINE INDENT return self . channel_border NEW_LINE DEDENT else : NEW_LINE INDENT return self . channel_border NEW_LINE DEDENT DEDENT
PopulateFrequencyAxis ( self , axis ) : NEW_LINE INDENT self . axis = axis NEW_LINE return self NEW_LINE DEDENT
def def read_data ( self ) : NEW_LINE INDENT data = self . _read_data ( ) NEW_LINE data = self . _read_data ( ) NEW_LINE return data NEW_LINE DEDENT
read_header ( self , file ) : NEW_LINE INDENT header = self . read_header ( file ) NEW_LINE if header : NEW_LINE INDENT return header NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
generate_constants_declaration ( self ) : NEW_LINE INDENT if self . constants_declaration : NEW_LINE INDENT return self . constants_declaration NEW_LINE DEDENT return None NEW_LINE DEDENT
get_array_declaration ( self ) : NEW_LINE INDENT return self . _array_declaration NEW_LINE DEDENT
def def configure_argument_parser ( parser ) : NEW_LINE INDENT parser = parser . parse_argument_parser ( ) NEW_LINE parser . add_argument ( " - - - parser " ) NEW_LINE parser . add_argument ( " - - - parser " ) NEW_LINE DEDENT
def retry ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _retry ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self . _retry ( ) NEW_LINE DEDENT DEDENT

static void startAllServices ( ) { for ( Service service : Services . values ( ) ) { service . start ( ) ; } for ( Service service : Services . values ( ) ) { service . start ( ) ; } }
simpleFragment ( self ) : NEW_LINE INDENT fragment = self . fragment NEW_LINE if fragment is None : NEW_LINE INDENT return None NEW_LINE DEDENT return fragment NEW_LINE DEDENT
def

create_mapping ( self , mapping ) : NEW_LINE INDENT if not isinstance ( mapping , Mapping ) : NEW_LINE INDENT return mapping NEW_LINE DEDENT if isinstance ( mapping , Mapping ) : NEW_LINE INDENT return mapping NEW_LINE DEDENT if isinstance ( mapping , dict ) : NEW_LINE INDENT return mapping NEW_LINE DEDENT return mapping NEW_LINE DEDENT
def def json_encoder_handler ( self ) : NEW_LINE INDENT return self . json_handler NEW_LINE DEDENT
write_items ( self , queue , items ) : NEW_LINE INDENT if len ( items ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT for item in items : NEW_LINE INDENT queue . put ( item ) NEW_LINE DEDENT DEDENT
schedule ( self , jobs ) : NEW_LINE INDENT jobs = [ ] NEW_LINE for job in jobs : NEW_LINE INDENT jobs . append ( job ) NEW_LINE DEDENT for job in jobs : NEW_LINE INDENT jobs . append ( job ) NEW_LINE DEDENT return jobs NEW_LINE DEDENT
schedule_task ( self , task_id ) : NEW_LINE INDENT self . _schedule_task ( task_id ) NEW_LINE DEDENT

get_user_info ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _user_info NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def def def def R def def def def R def def def def _ def def def def def def _ def def def def def def def _ def _get_ def def def def def def def def _get_ def _get_node def _get_tree ( self ) : NEW def _get_tree ( self ) : NEW def _get_tree ( self ) : NEW_LINE def _get_tree ( self ) : NEW_LINE def _get_tree ( self ) : NEW_LINE INDENT return self . _get_tree ( ) NEW_LINE def _get_tree ( self ) : NEW_LINE def _get_tree_node
get_children ( self ) : NEW_LINE INDENT children = { } NEW_LINE for child in self . children . values ( ) : NEW_LINE INDENT children [ child . name ] = child NEW_LINE DEDENT return children NEW_LINE DEDENT
get_link_dictionary ( self ) : NEW_LINE INDENT if self . link_dictionary is None : NEW_LINE INDENT self . link_dictionary = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . link_dictionary = { } NEW_LINE DEDENT return self . link_dictionary NEW_LINE DEDENT
fitness ( self ) : NEW_LINE INDENT if self . fitness_function is not None : NEW_LINE INDENT return self . fitness_function NEW_LINE DEDENT elif self . fitness_function is not None : NEW_LINE INDENT return self . fitness_function NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
get_annotations_as_dictionary ( self ) : NEW_LINE INDENT annotations = self . get_annotations ( ) NEW_LINE if annotations is None : NEW_LINE INDENT return None NEW_LINE DEDENT return annotations NEW_LINE DEDENT
remove_key_from_annotations ( annotations ) : NEW_LINE INDENT for key in annotations . keySet ( ) : NEW_LINE INDENT if key . startswith ( ' _ ' ) : NEW_LINE INDENT return key NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT
get_data_from_queue ( self , queue ) : NEW_LINE INDENT data = [ ] NEW_LINE for item in queue : NEW_LINE INDENT data . append ( item ) NEW_LINE DEDENT return data NEW_LINE DEDENT
main ( self ) : NEW_LINE INDENT def main ( self ) : NEW_LINE INDENT self . simulation_function ( ) NEW_LINE self . simulation_function ( ) NEW_LINE self . simulation_function ( ) NEW_LINE self . simulation_function ( ) NEW_LINE DEDENT self . simulation_function ( ) NEW_LINE self . simulation_function ( ) NEW_LINE self . simulation_function ( ) NEW_LINE DEDENT
load_dictionary ( self ) : NEW_LINE INDENT if self . dictionary is None : NEW_LINE INDENT self . dictionary = { } NEW_LINE DEDENT else : NEW_LINE INDENT self . dictionary = { } NEW_LINE DEDENT return self . dictionary NEW_LINE DEDENT
merge_links ( self , links ) : NEW_LINE INDENT for link in links : NEW_LINE INDENT self . merge_links ( link ) NEW_LINE DEDENT DEDENT
upload_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _upload_file ( file ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
download_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _download_file ( filename ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
SIGINTHandler ( self ) : NEW_LINE INDENT SIGINTHandler = self . SIGINTHandler NEW_LINE try : NEW_LINE INDENT SIGINTHandler = self . SIGINTHandler NEW_LINE DEDENT except KeyError : NEW_LINE INDENT SIGINTHandler = self . SIGINTHandler NEW_LINE DEDENT return SIGINTHandler NEW_LINE DEDENT
set_hold ( self , hold ) : NEW_LINE INDENT self . _hold = hold NEW_LINE DEDENT
set_humidity_level ( self , humidity_level ) : NEW_LINE INDENT self . humidity_level = humidity_level NEW_LINE DEDENT


init ( self , ** kwargs ) : NEW_LINE INDENT self . _init ( ** kwargs ) NEW_LINE self . _init ( ** kwargs ) NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
REBINDING_STATE ( self ) : NEW_LINE INDENT if self . state is not None : NEW_LINE INDENT return self . state NEW_LINE DEDENT else : NEW_LINE INDENT return self . state NEW_LINE DEDENT DEDENT
def def end def def end def def def end def def def def def _ def def def def def def end def def def def def def def _ def def def def def def def _ def _get_ def def def def def def __ def def def def def def __ def _get_ def def def _get_ def _get_ def _get_ def _get_state ( self ) : NEW def _get_state ( self ) : NEW def _get_state ( self ) : NEW def _get_state ( self ) : NEW def _get_state ( self ) : NEW def _get_state ( self ,
def error ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT state = self . _state NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT state = self . _state NEW_LINE DEDENT else : NEW_LINE INDENT state = self . _state NEW_LINE DEDENT return state NEW_LINE DEDENT
get_programs_status ( self ) : NEW_LINE INDENT statuses = [ ] NEW_LINE for status in self . _programs . values ( ) : NEW_LINE INDENT statuses . append ( status ) NEW_LINE DEDENT return statuses NEW_LINE DEDENT
main ( ) : NEW_LINE INDENT try : NEW_LINE INDENT main ( ) NEW_LINE DEDENT except SystemExit : NEW_LINE INDENT raise NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
copy_file_to_destination ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT os . makedirs ( filename ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os . makedirs ( filename ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
unapply_top_patch ( self , patch ) : NEW_LINE INDENT self . patch = patch NEW_LINE self . patch = patch NEW_LINE return self . patch NEW_LINE DEDENT
apply_patches ( self , patches ) : NEW_LINE INDENT self . patches = patches NEW_LINE self . patches . append ( patches ) NEW_LINE DEDENT
process_way ( self , way ) : NEW_LINE INDENT self . _process ( way ) NEW_LINE self . _process ( way ) NEW_LINE DEDENT
process_node ( self , node ) : NEW_LINE INDENT self . _process_node ( node ) NEW_LINE self . _process_node ( node ) NEW_LINE self . _process_node ( node ) NEW_LINE DEDENT
process_relationships ( relationships ) : NEW_LINE INDENT relationships = [ ] NEW_LINE for relationships in relationships : NEW_LINE INDENT relationships . append ( relation ) NEW_LINE DEDENT for relationships in relationships : NEW_LINE INDENT relationships . append ( relation ) NEW_LINE DEDENT return relationships NEW_LINE DEDENT
parse_numeric_fields ( self , fields ) : NEW_LINE INDENT if isinstance ( fields , dict ) : NEW_LINE INDENT for field in fields . values ( ) : NEW_LINE INDENT self . _parse_numeric_fields ( field ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT self . _parse_numeric_fields ( fields ) NEW_LINE DEDENT DEDENT
get_user_profile_data ( self ) : NEW_LINE INDENT user_profile_data = { } NEW_LINE user_profile_data . update ( self . user_profile ) NEW_LINE user_profile_data . update ( self . user_profile ) NEW_LINE return user_profile_data NEW_LINE DEDENT
PUT ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT args = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT args = list ( args ) NEW_LINE DEDENT for arg in args : NEW_LINE INDENT setattr ( self , arg , kwargs [ arg ] ) NEW_LINE DEDENT return self NEW_LINE DEDENT
post ( self , data ) : NEW_LINE INDENT if data is None : NEW_LINE INDENT data = { } NEW_LINE DEDENT else : NEW_LINE INDENT data = data . copy ( ) NEW_LINE DEDENT data . update ( data ) NEW_LINE return data NEW_LINE DEDENT
delete ( self , * args , ** kwargs ) : NEW_LINE INDENT self . _delete ( * args , ** kwargs ) NEW_LINE self . _delete ( * args , ** kwargs ) NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
def def def def def def def def def def def def def def def def def def def def def def def def
call_api ( self , api_key , api_secret ) : NEW_LINE INDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_secret is None : NEW_LINE INDENT api_key = self . api_secret NEW_LINE DEDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_key is None : NEW_LINE INDENT api_key = self . api_key NEW_LINE DEDENT if api_key is not None : NEW_LINE
public__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
static Map < String , String > newMap ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( " key " , key ) ; map . put ( " value " , value ) ; return map ; }
def create_symbol ( self , symbol ) : NEW_LINE INDENT symbol = self . symbol NEW_LINE self . symbol = symbol NEW_LINE return symbol NEW_LINE DEDENT
public public static final void add ( final Set < String > set ) { if ( set == null ) { throw new IllegalArgumentException ( " set is null " ) ; } if ( set . isEmpty ( ) ) { throw new IllegalArgumentException ( " set is empty " ) ; } }
def def new_list ( self ) : NEW_LINE INDENT new_list = [ ] NEW_LINE def new_list ( self ) : NEW_LINE INDENT new_list = [ ] NEW_LINE new_list . append ( self ) NEW_LINE return new_list NEW_LINE DEDENT return new_list NEW_LINE DEDENT
close_stream ( stream ) : NEW_LINE INDENT try : NEW_LINE INDENT stream . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
_generate_changelog ( self ) : NEW_LINE INDENT changelog = self . _get_changelog ( ) NEW_LINE if changelog is None : NEW_LINE INDENT changelog = self . _get_changelog ( ) NEW_LINE DEDENT return changelog NEW_LINE DEDENT

trace_parameters ( self ) : NEW_LINE INDENT trace_parameters = [ ] NEW_LINE for param in self . trace_parameters : NEW_LINE INDENT trace_parameters . append ( param ) NEW_LINE DEDENT return trace_parameters NEW_LINE DEDENT
def
get_database_statistics ( self ) : NEW_LINE INDENT statistics = self . _get_database_statistics ( ) NEW_LINE if statistics is None : NEW_LINE INDENT return None NEW_LINE DEDENT return statistics NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
flatten_nested_objects ( self , nested_objects ) : NEW_LINE INDENT if isinstance ( nested_objects , list ) : NEW_LINE INDENT return flatten_nested_objects ( nested_objects ) NEW_LINE DEDENT else : NEW_LINE INDENT return flatten_nested_objects ( nested_objects ) NEW_LINE DEDENT DEDENT
parse_function_calls ( self , function_calls ) : NEW_LINE INDENT if isinstance ( function_calls , list ) : NEW_LINE INDENT return function_calls NEW_LINE DEDENT elif isinstance ( function_calls , dict ) : NEW_LINE INDENT return function_calls NEW_LINE DEDENT elif isinstance ( function_calls , dict ) : NEW_LINE INDENT return function_calls NEW_LINE DEDENT elif isinstance ( function_calls , dict ) : NEW_LINE INDENT return function_calls NEW_LINE DEDENT else : NEW_LINE INDENT return function_calls NEW_LINE DEDENT DEDENT

remove_consecutive_delimiters ( self , delimiters ) : NEW_LINE INDENT if len ( delimiters ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( delimiters ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( delimiters ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( delimiters ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( delimiters ) == 4 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT

get_schema ( self ) : NEW_LINE INDENT schema = self . schema NEW_LINE if not schema : NEW_LINE INDENT return None NEW_LINE DEDENT return schema NEW_LINE DEDENT
def open_shell ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT shell = subprocess . Popen ( [ ' shell ' ] , shell = True ) NEW_LINE DEDENT except OSError : NEW_LINE INDENT shell = None NEW_LINE DEDENT return shell NEW_LINE DEDENT
process_outgoing_communication ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _process_outgoing_communication ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _process_outgoing_communication ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
static void show ( String message ) { if ( message == null ) { return ; } if ( message . length ( ) == 0 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 1 ) { return ; } if ( message . length ( ) == 2 ) { return ; } if ( message . length ( ) == 3 ) { return
move_selected_object ( self ) : NEW_LINE INDENT if self . selected_object is not None : NEW_LINE INDENT self . selected_object = self . selected_object . copy ( ) NEW_LINE DEDENT DEDENT
def
update_displayed_values ( self ) : NEW_LINE INDENT if self . displayed_values is not None : NEW_LINE INDENT self . displayed_values = self . displayed_values NEW_LINE DEDENT DEDENT
process_submission ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _process_submission ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def

send_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _send_message ( message ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _send_message ( message ) NEW_LINE DEDENT DEDENT

disable_camera ( self ) : NEW_LINE INDENT self . _camera = None NEW_LINE DEDENT
addAnnotation ( self , annotation ) : NEW_LINE INDENT self . annotations . add ( annotation ) NEW_LINE DEDENT
add_external_reference ( self , external_reference ) : NEW_LINE INDENT self . _external_reference = external_reference NEW_LINE self . _external_reference . append ( external_reference ) NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
remove_tier ( self , tier ) : NEW_LINE INDENT self . _remove_tier ( tier ) NEW_LINE self . _remove_tier ( tier ) NEW_LINE DEDENT

add_svg_definitions ( self , svg_definitions ) : NEW_LINE INDENT self . add_svg_definitions ( svg_definitions ) NEW_LINE DEDENT
create_svg_document ( self ) : NEW_LINE INDENT if self . _svg_document is None : NEW_LINE INDENT self . _svg_document = self . _create_svg_document ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _svg_document = self . _create_svg_document ( ) NEW_LINE DEDENT return self NEW_LINE DEDENT
def executor ( self ) : NEW_LINE INDENT global executor NEW_LINE executor = self . _executor NEW_LINE executor = self . _executor NEW_LINE if executor is None : NEW_LINE INDENT executor = self . _executor NEW_LINE DEDENT else : NEW_LINE INDENT executor = executor . executor NEW_LINE DEDENT return executor NEW_LINE DEDENT
def def def def def single__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__ def def def def def def public public public public public public public public public public static final public static synchronized public static synchronized public static synchronized public static synchronized void add__java____java____java____java____java____java____java____java__ public static public static final public static final public static Client__java____java____java____java____java____java____java____java____java____java____java____java__ public public public public public public static public static public static final public static Client__java____java____java____java____java____java____java____java____java__ public static public static public static final public static Client__java__ public static Client__java____java____java____java____java__ public static final public static Client__java____java____java____java____java____java____java____java__ public static public static final public static final public static final public static final public static synchronized public static synchronized public static Client client
docker_method ( self ) : NEW_LINE INDENT docker_method = getattr ( self , ' docker _ method ' , None ) NEW_LINE if docker_method is not None : NEW_LINE INDENT docker_method ( self ) NEW_LINE DEDENT return docker_method NEW_LINE DEDENT
validate_email_handler ( self , email_handler ) : NEW_LINE INDENT if email_handler is None : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT email_handler . validate_email ( email_handler ) NEW_LINE DEDENT except ValidationError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
list_available_volumes ( self ) : NEW_LINE INDENT return self . _get_all_available_volumes ( ) NEW_LINE DEDENT
get_volume ( self , volume_id ) : NEW_LINE INDENT volume = self . _get_volume ( volume_id ) NEW_LINE if not volume : NEW_LINE INDENT return None NEW_LINE DEDENT return volume NEW_LINE DEDENT
volume_size ( self ) : NEW_LINE INDENT volume_size = self . volume_size ( ) NEW_LINE volume_size = self . volume_size ( ) NEW_LINE return volume_size NEW_LINE DEDENT
get_disk_info ( self , disk_id ) : NEW_LINE INDENT if disk_id is None : NEW_LINE INDENT return None NEW_LINE DEDENT if disk_id is not None : NEW_LINE INDENT return disk_id NEW_LINE DEDENT elif disk_id is not None : NEW_LINE INDENT return disk_id NEW_LINE DEDENT return None NEW_LINE DEDENT
get_organisation ( self ) : NEW_LINE INDENT organisation = self . get_organisation ( ) NEW_LINE if not organisation : NEW_LINE INDENT return None NEW_LINE DEDENT return organisation NEW_LINE DEDENT
get_board ( self ) : NEW_LINE INDENT board = self . _get_board ( ) NEW_LINE if not board : NEW_LINE INDENT return None NEW_LINE DEDENT return board NEW_LINE DEDENT
get_list ( self ) : NEW_LINE INDENT return self . _list NEW_LINE DEDENT
get_card_id ( self ) : NEW_LINE INDENT return self . _get_card_id ( ) NEW_LINE DEDENT
get_checklist ( self ) : NEW_LINE INDENT checklist = [ ] NEW_LINE for item in self . checklist : NEW_LINE INDENT checklist . append ( item ) NEW_LINE DEDENT return checklist NEW_LINE DEDENT
sample_statistics ( self ) : NEW_LINE INDENT sample_statistics = [ ] NEW_LINE for sample in self . sample_statistics : NEW_LINE INDENT sample_statistics . append ( sample ) NEW_LINE DEDENT return sample_statistics NEW_LINE DEDENT
apply_threshold ( self , threshold ) : NEW_LINE INDENT self . threshold = threshold NEW_LINE if self . threshold is not None : NEW_LINE INDENT self . threshold = self . threshold NEW_LINE DEDENT DEDENT
calculate_correlation_filter ( self ) : NEW_LINE INDENT if self . correlation_filter is None : NEW_LINE INDENT self . correlation_filter = { } NEW_LINE DEDENT return self . correlation_filter NEW_LINE DEDENT
gaussian ( self , x , y ) : NEW_LINE INDENT x = np . atleast_1d ( x ) NEW_LINE y = np . atleast_1d ( y ) NEW_LINE x = np . atleast_1d ( x ) NEW_LINE y = np . atleast_1d ( y ) NEW_LINE return x , y NEW_LINE DEDENT
sample_statistics ( self ) : NEW_LINE INDENT sample_statistics = [ ] NEW_LINE for i in self . sample_statistics : NEW_LINE INDENT sample_statistics . append ( self . sample_statistics [ i ] ) NEW_LINE DEDENT return sample_statistics NEW_LINE DEDENT
def
remove_filter ( self , filter ) : NEW_LINE INDENT if self . _filter is not None : NEW_LINE INDENT self . _filter . remove ( filter ) NEW_LINE DEDENT return self . _filter NEW_LINE DEDENT
clear_filters ( self ) : NEW_LINE INDENT self . filters . clear ( ) NEW_LINE DEDENT
remove_filters ( self , filters ) : NEW_LINE INDENT if len ( filters ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( filters ) == 1 : NEW_LINE INDENT return filters [ 0 ] NEW_LINE DEDENT if len ( filters ) == 2 : NEW_LINE INDENT return filters [ 1 ] NEW_LINE DEDENT if len ( filters ) == 3 : NEW_LINE INDENT return filters [ 2 ] NEW_LINE DEDENT if len ( filters ) == 4 : NEW_LINE INDENT return filters [ 3 ] NEW_LINE DEDENT DEDENT
save_thumbnail_image ( self , thumbnail_image ) : NEW_LINE INDENT if thumbnail_image is not None : NEW_LINE INDENT return thumbnail_image NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
simulate_incoming_message ( self , message ) : NEW_LINE INDENT if self . incoming_message is None : NEW_LINE INDENT self . incoming_message = message NEW_LINE DEDENT else : NEW_LINE INDENT self . incoming_message = self . incoming_message NEW_LINE DEDENT DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__

read_line ( self , line ) : NEW_LINE INDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT line = line . strip ( ) NEW_LINE if not line : NEW_LINE INDENT return None NEW_LINE DEDENT return line NEW_LINE DEDENT
create_email ( self , email ) : NEW_LINE INDENT if email is None : NEW_LINE INDENT return None NEW_LINE DEDENT if email is not None : NEW_LINE INDENT return email NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
exit ( self , * args , ** kwargs ) : NEW_LINE INDENT if not args : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if len ( args ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 2 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 3 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 4 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 5 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 6 : NEW_LINE INDENT return NEW_LINE DEDENT elif len ( args ) == 7 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
download_file ( filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . seek ( 0 ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . seek ( 0 ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT return NEW_LINE DEDENT
save_data ( self , data ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _save_data ( data ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
polling_loop_control ( self ) : NEW_LINE INDENT if self . polling_loop_control is not None : NEW_LINE INDENT return self . polling_loop_control NEW_LINE DEDENT return self . polling_loop_control NEW_LINE DEDENT
paragraphs ( self ) : NEW_LINE INDENT paragraphs = [ ] NEW_LINE for i in range ( len ( self . paragraphs ) ) : NEW_LINE INDENT paragraphs . append ( self . paragraphs [ i ] ) NEW_LINE DEDENT return paragraphs NEW_LINE DEDENT
def text ( self , text ) : NEW_LINE INDENT text = text . replace ( ' \n ' , ' ' ) NEW_LINE return text . replace ( ' \n ' , ' ' ) NEW_LINE DEDENT
run ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _run ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT self . _run ( ) NEW_LINE DEDENT DEDENT
register_path_hook ( self , path_hook ) : NEW_LINE INDENT self . path_hook = path_hook NEW_LINE DEDENT
parse_argument_parser ( self ) : NEW_LINE INDENT parser = self . _parse_argument_parser ( ) NEW_LINE if not parser : NEW_LINE INDENT return None NEW_LINE DEDENT return parser NEW_LINE DEDENT
def
remove_process ( self , process_id ) : NEW_LINE INDENT if process_id in self . process_ids : NEW_LINE INDENT self . process_ids . remove ( process_id ) NEW_LINE self . process_ids . remove ( process_id ) NEW_LINE DEDENT DEDENT
restart_process ( self , process ) : NEW_LINE INDENT try : NEW_LINE INDENT process . kill ( ) NEW_LINE process . wait ( ) NEW_LINE process . kill ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE process . wait ( ) NEW_LINE DEDENT except :
def
check_processes ( self , processes ) : NEW_LINE INDENT if len ( processes ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT elif len ( processes ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( processes ) == 2 : NEW_LINE INDENT return True NEW_LINE DEDENT elif len ( processes ) == 3 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def def def get_http_http_state ( self ) : NEW_LINE def get_http_state ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_http_state ( ) NEW_LINE def get_http_state ( self ) : NEW_LINE INDENT return self . _get_http_state ( ) NEW_LINE DEDENT def get_http_state ( self ) : NEW_LINE INDENT return self . _get_http_state ( ) NEW_LINE DEDENT return self . _get_http_state ( ) NEW_LINE DEDENT return self . _get_http_state ( ) NEW_LINE DEDENT
output_processors ( self ) : NEW_LINE INDENT output_processors = [ ] NEW_LINE for output_processor in self . output_processors : NEW_LINE INDENT output_processors . append ( output_processor ) NEW_LINE DEDENT return output_processors NEW_LINE DEDENT
validate_message ( self , message ) : NEW_LINE INDENT try : NEW_LINE INDENT message . validate ( ) NEW_LINE DEDENT except ValidationError : NEW_LINE INDENT pass NEW_LINE DEDENT return message NEW_LINE DEDENT
request_accept ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return request . accept ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
request ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _request ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
confirm_email_address ( email_address ) : NEW_LINE INDENT email_address = email_address . strip ( ) NEW_LINE if email_address : NEW_LINE INDENT email_address = email_address . strip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT email_address = email_address . strip ( ) NEW_LINE DEDENT return email_address NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
stop_client ( self ) : NEW_LINE INDENT if self . client is not None : NEW_LINE INDENT self . client . stop ( ) NEW_LINE DEDENT DEDENT
def
build ( self ) : NEW_LINE INDENT self . _build ( ) NEW_LINE self . _build ( ) NEW_LINE DEDENT
clean ( self ) : NEW_LINE INDENT self . _clean ( ) NEW_LINE DEDENT
reloadChildren ( self ) : NEW_LINE INDENT children = self . children NEW_LINE for child in children . values ( ) : NEW_LINE INDENT child . reload ( ) NEW_LINE DEDENT return children NEW_LINE DEDENT
get_icon ( self , index ) : NEW_LINE INDENT icon = self . _get_icon ( index ) NEW_LINE if icon is not None : NEW_LINE INDENT return icon NEW_LINE DEDENT return self . _get_icon ( index ) NEW_LINE DEDENT

download_file_content ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT return file . read ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def def def def def def def def def def def def def __ def def def def def def def def def _ def def def def def def def def def def def __ def def def def def def def def def def def def def def def def def def _ def def def def def def def def def __ def def def def def def def def def def def def _ def def def def def def def def _
create_user ( self , user ) : NEW_LINE INDENT self . user = user NEW_LINE self . save ( ) NEW_LINE return self . user NEW_LINE DEDENT
_get_members ( self , population ) : NEW_LINE INDENT return self . _get_members ( population ) NEW_LINE DEDENT
request_params ( self ) : NEW_LINE INDENT request_params = { } NEW_LINE request_params . update ( self . request_params ) NEW_LINE request_params . update ( self . request_params ) NEW_LINE return request_params NEW_LINE DEDENT
request_id ( self ) : NEW_LINE INDENT request_id = self . request_id ( ) NEW_LINE if request_id : NEW_LINE INDENT return request_id NEW_LINE DEDENT return None NEW_LINE DEDENT
render_sourcecode ( self , sourcecode ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _render_sourcecode ( sourcecode ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def
parse_format_patterns ( self , format_patterns ) : NEW_LINE INDENT patterns = [ ] NEW_LINE for pattern in format_patterns : NEW_LINE INDENT patterns . append ( parse_format_pattern ( pattern ) ) NEW_LINE DEDENT return patterns NEW_LINE DEDENT
apply_application_method ( self , application_method ) : NEW_LINE INDENT self . application_method = application_method NEW_LINE if self . application_method is not None : NEW_LINE INDENT self . application_method = self . application_method NEW_LINE DEDENT DEDENT
get_implementation_version ( self ) : NEW_LINE INDENT return self . _implementation_version NEW_LINE DEDENT

visit_imports ( self , imports ) : NEW_LINE INDENT if not isinstance ( imports , list ) : NEW_LINE INDENT imports = [ imports ] NEW_LINE DEDENT for imports in imports : NEW_LINE INDENT if not isinstance ( imports , list ) : NEW_LINE INDENT imports = [ imports ] NEW_LINE DEDENT DEDENT return imports NEW_LINE DEDENT
start_server ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . server . start ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . server . stop ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
iterate_pages ( self , pages ) : NEW_LINE INDENT for page in pages : NEW_LINE INDENT yield page NEW_LINE DEDENT DEDENT
_get_element ( self , element ) : NEW_LINE INDENT if element is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return element NEW_LINE DEDENT DEDENT
get_element_text ( self ) : NEW_LINE INDENT text = self . get_element_text ( ) NEW_LINE if text : NEW_LINE INDENT return text NEW_LINE DEDENT DEDENT
def def get_price_list ( self ) : NEW_LINE INDENT return self . _get_price_list ( ) NEW_LINE DEDENT
static void setStyle ( Node node ) { if ( node == null ) { return ; } node . setStyle ( node . getStyle ( ) ) ; node . setStyle ( node . getStyle ( ) ) ; }
set_font_name ( self , font_name ) : NEW_LINE INDENT self . font_name = font_name NEW_LINE DEDENT
text_components ( self ) : NEW_LINE INDENT return self . _text_components ( ) NEW_LINE DEDENT
save_to_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' wb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
load_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
perform_action ( self , action ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _perform_action ( action ) NEW_LINE DEDENT DEDENT
static void print ( String item ) { if ( item == null ) { return ; } if ( item . length ( ) == 0 ) { return ; } System . out . println ( item ) ; }
static boolean isNonDeterministic ( String name ) { if ( name == null ) { return false ; } if ( name . length ( ) == 0 ) { return false ; } return true ; }
highest_lock ( self ) : NEW_LINE INDENT height = self . height ( ) NEW_LINE height = self . height ( ) NEW_LINE height = self . height ( ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE height = self . height ( height ) NEW_LINE return height NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
is_unknown ( self ) : NEW_LINE INDENT return self . _is_unknown ( ) NEW_LINE DEDENT
private private static void helperMethod ( final String methodName , final String methodName ) { if ( methodName == null ) { return ; } if ( methodName == null ) { return ; } if ( methodName . startsWith ( " _ " ) ) { return ; } if ( methodName . endsWith ( " _ " ) ) { return ; } if ( methodName . startsWith ( " _ " ) ) { return ; } if ( methodName . endsWith ( " _ " ) ) { return ; } if ( methodName . startsWith ( " _ " ) ) { return ; } if ( methodName . endsWith ( " _ " ) ) { return ; } if ( methodName . startsWith ( " _ " ) ) { return ; } if ( methodName . endsWith ( " _ " ) ) { return ; } if ( methodName . startsWith ( " _ " ) ) { return ; } if ( methodName . endsWith ( " _ " ) ) { return ; } if ( methodName . startsWith ( " _ " ) )
pack ( self , template_pack ) : NEW_LINE INDENT self . template_pack = template_pack NEW_LINE return self . template_pack NEW_LINE DEDENT
write_output_file ( self , output_file ) : NEW_LINE INDENT self . _output_file = output_file NEW_LINE return self . _output_file NEW_LINE DEDENT
update_user_data ( self , user_data ) : NEW_LINE INDENT if user_data is None : NEW_LINE INDENT user_data = { } NEW_LINE DEDENT user_data . update ( user_data ) NEW_LINE return user_data NEW_LINE DEDENT
login ( self , user ) : NEW_LINE INDENT if not user : NEW_LINE INDENT return NEW_LINE DEDENT user = self . get_user ( user ) NEW_LINE if not user : NEW_LINE INDENT return NEW_LINE DEDENT user = self . get_user ( user ) NEW_LINE if not user : NEW_LINE INDENT return NEW_LINE DEDENT user = self . get_user ( user ) NEW_LINE return user NEW_LINE DEDENT
changePassword ( self , password ) : NEW_LINE INDENT self . password = password NEW_LINE return self . password NEW_LINE DEDENT
merge_dict ( self , dict_merge ) : NEW_LINE INDENT if isinstance ( dict_merge , dict ) : NEW_LINE INDENT return dict_merge NEW_LINE DEDENT elif isinstance ( dict_merge , dict ) : NEW_LINE INDENT return dict_merge NEW_LINE DEDENT return dict_merge NEW_LINE DEDENT
truncate_tables ( self , tables ) : NEW_LINE INDENT self . _truncate_tables ( tables ) NEW_LINE self . _truncate_tables ( tables ) NEW_LINE DEDENT
update_command_options ( command_options ) : NEW_LINE INDENT command_options . update ( ) NEW_LINE return command_options NEW_LINE DEDENT
build ( self ) : NEW_LINE INDENT self . _build ( ) NEW_LINE return self NEW_LINE DEDENT
ping ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . handler . ping ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . handler . ping ( ) NEW_LINE DEDENT DEDENT
def subHandler ( self ) : NEW_LINE INDENT handler = self . get_handler ( ) NEW_LINE if handler is not None : NEW_LINE INDENT return handler NEW_LINE DEDENT handler = self . get_handler ( ) NEW_LINE if handler is not None : NEW_LINE INDENT return handler NEW_LINE DEDENT return handler NEW_LINE DEDENT
Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward selection algorithm Fast forward
update_video ( self , video_id ) : NEW_LINE INDENT self . _video_id = video_id NEW_LINE if self . _video_id is None : NEW_LINE INDENT return NEW_LINE DEDENT self . _video_id = self . _video_id NEW_LINE DEDENT
delete_video ( self , video_id ) : NEW_LINE INDENT self . delete_video ( video_id ) NEW_LINE self . delete_video ( video_id ) NEW_LINE DEDENT
add_attachments ( self , attachments ) : NEW_LINE INDENT for attachment in attachments : NEW_LINE INDENT self . add_attachment ( attachment ) NEW_LINE DEDENT DEDENT
add_attachments ( self , attachments ) : NEW_LINE INDENT for attachment in attachments : NEW_LINE INDENT self . add_attachment ( attachment ) NEW_LINE DEDENT DEDENT
save_metadata_tags ( self , metadata_tags ) : NEW_LINE INDENT for tag in metadata_tags : NEW_LINE INDENT self . save_metadata_tags ( tag ) NEW_LINE DEDENT DEDENT
def read_chunks_data ( self ) : NEW_LINE INDENT chunks = [ ] NEW_LINE for chunk in self . chunks : NEW_LINE INDENT chunks . append ( chunk ) NEW_LINE DEDENT return chunks NEW_LINE DEDENT
draw_image ( self , image ) : NEW_LINE INDENT self . image = image NEW_LINE return self . image NEW_LINE DEDENT
def get_frame_size ( self ) : NEW_LINE INDENT frame_size = self . frame_size NEW_LINE return self . frame_size NEW_LINE DEDENT
dump_encoding ( self , encoding ) : NEW_LINE INDENT if encoding is None : NEW_LINE INDENT encoding = self . encoding NEW_LINE DEDENT return self . _dump_encoding ( encoding ) NEW_LINE DEDENT
dumps ( self , encoding ) : NEW_LINE INDENT if encoding is None : NEW_LINE INDENT encoding = self . encoding NEW_LINE DEDENT return self . _dumps ( encoding ) NEW_LINE DEDENT
main ( ) : NEW_LINE INDENT main_program_body = { } NEW_LINE main_program_body . update ( ) NEW_LINE main_program_body . update ( ) NEW_LINE main_program_body . update ( ) NEW_LINE main_program_body . update ( ) NEW_LINE main_program_body . update ( ) NEW_LINE DEDENT
stop_command ( command ) : NEW_LINE INDENT if command : NEW_LINE INDENT command . stop ( ) NEW_LINE DEDENT DEDENT
parse_stream ( self , stream ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_stream ( stream ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
close_stream ( self , stream ) : NEW_LINE INDENT try : NEW_LINE INDENT stream . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def power def def def def power def def def def def def power def def def def def def _ def def def def def def _power def def def def def def def def _power def def def def _power def def def def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def _power def def def _
def def power def def def def power def def def def def def power def def def def def def _ def def def def def def def def power def def def def def def def def power def def def def def def def power def def def def def def _ def def def def def def power def def def def def def power def def def def def def _ def def def def def _ _power def def def def def def def def
get_crate_versions ( self ) : NEW_LINE INDENT crate_versions = { } NEW_LINE for version in self . crate_versions : NEW_LINE INDENT crate_versions [ version ] = self . crate_versions [ version ] NEW_LINE DEDENT return crate_versions NEW_LINE DEDENT
get_version_downloads ( self ) : NEW_LINE INDENT version_downloads = [ ] NEW_LINE for version in self . version_downloads : NEW_LINE INDENT version_downloads . append ( version ) NEW_LINE DEDENT return version_downloads NEW_LINE DEDENT
get_crate_data ( self ) : NEW_LINE INDENT crate_data = { } NEW_LINE crate_data . update ( self . crate_data ) NEW_LINE crate_data . update ( self . crate_data ) NEW_LINE return crate_data NEW_LINE DEDENT
get_crate_attributes ( self ) : NEW_LINE INDENT crate_attributes = [ ] NEW_LINE for attribute in self . crate_attributes : NEW_LINE INDENT crate_attributes . append ( attribute ) NEW_LINE DEDENT return crate_attributes NEW_LINE DEDENT
display_record_view ( self ) : NEW_LINE INDENT record_view = self . _display_record_view ( ) NEW_LINE if record_view is not None : NEW_LINE INDENT return record_view NEW_LINE DEDENT return record_view NEW_LINE DEDENT
def display_default_view ( self ) : NEW_LINE INDENT view = self . view NEW_LINE if view is not None : NEW_LINE INDENT return view NEW_LINE DEDENT else : NEW_LINE INDENT return self . view NEW_LINE DEDENT DEDENT
increment_counter ( self ) : NEW_LINE INDENT if self . _counter is None : NEW_LINE INDENT self . _counter = Counter ( ) NEW_LINE DEDENT else : NEW_LINE INDENT self . _counter = self . _counter NEW_LINE DEDENT DEDENT
create_permission_factory ( self , permission_factory ) : NEW_LINE INDENT self . permission_factory = permission_factory NEW_LINE return self . permission_factory NEW_LINE DEDENT
deploy_version_tag ( self , version_tag ) : NEW_LINE INDENT self . version_tag = version_tag NEW_LINE if self . version_tag is not None : NEW_LINE INDENT self . version_tag = self . version_tag NEW_LINE DEDENT return self . version_tag NEW_LINE DEDENT
clone_repository ( self , repository ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _clone_repository ( repository ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
update_subcommand ( subcommand ) : NEW_LINE INDENT subcommand . update ( ) NEW_LINE return subcommand NEW_LINE DEDENT
update_repository ( self , repository ) : NEW_LINE INDENT self . _update_repository ( repository ) NEW_LINE self . _update_repository ( repository ) NEW_LINE DEDENT
def
print_workspace_status ( self , workspace_status ) : NEW_LINE INDENT if workspace_status is not None : NEW_LINE INDENT return workspace_status NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
static void printStatus ( String status ) { if ( status == null ) { return ; } if ( status . length ( ) == 0 ) { return ; } if ( status . length ( ) == 0 ) { return ; } if ( status . length ( ) == 1 ) { return ; } if ( status . length ( ) == 2 ) { return ; } if ( status . length ( ) == 3 ) { return ; } if ( status . length ( ) == 4 ) { return ; } if ( status . length ( ) == 2 ) { return ; } if ( status . length ( ) == 1 ) { return ; } if ( status . length ( ) == 2 ) { return ; } if ( status . length ( ) == 3 ) { return ; } if ( status . length ( ) == 1 ) { return ; } if ( status . length ( ) == 2 ) { return ; } if ( status . length ( ) == 1 ) {
clone_repository_from_url ( url ) : NEW_LINE INDENT try : NEW_LINE INDENT repository = Repo . from_url ( url ) NEW_LINE DEDENT except Repo . DoesNotExist : NEW_LINE INDENT return None NEW_LINE DEDENT return repository NEW_LINE DEDENT
show_subcommand ( self , subcommand ) : NEW_LINE INDENT if subcommand is None : NEW_LINE INDENT return None NEW_LINE DEDENT if subcommand . startswith ( ' - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT elif subcommand . startswith ( ' - - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT elif subcommand . startswith ( ' - - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT elif subcommand . startswith ( ' - - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT elif subcommand . startswith ( ' - - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT elif subcommand . startswith ( ' - - ' ) : NEW_LINE INDENT return subcommand NEW_LINE DEDENT else : NEW_LINE INDENT return subcommand NEW_LINE DEDENT DEDENT
show_ subcommand ( self , subcommand ) : NEW_LINE INDENT if subcommand is None : NEW_LINE INDENT subcommand = self . subcommand NEW_LINE DEDENT else : NEW_LINE INDENT subcommand = self . subcommand NEW_LINE DEDENT if subcommand is not None : NEW_LINE INDENT subcommand . show ( ) NEW_LINE DEDENT return subcommand NEW_LINE DEDENT
show_workspace ( self , workspace_name ) : NEW_LINE INDENT workspace = self . _get_workspace ( workspace_name ) NEW_LINE if workspace is None : NEW_LINE INDENT return None NEW_LINE DEDENT return workspace NEW_LINE DEDENT
generate_dataset_dictionary ( self ) : NEW_LINE INDENT dataset_dictionary = { } NEW_LINE for key in self . dataset_dictionary : NEW_LINE INDENT dataset_dictionary [ key ] = self . dataset_dictionary [ key ] NEW_LINE DEDENT return dataset_dictionary NEW_LINE DEDENT
calculate_percentage ( self , percentage ) : NEW_LINE INDENT self . percentage = percentage NEW_LINE if self . percentage is not None : NEW_LINE INDENT return self . percentage NEW_LINE DEDENT return self . percentage NEW_LINE DEDENT
get_stats_info ( self ) : NEW_LINE INDENT stats = self . _get_stats_info ( ) NEW_LINE if stats : NEW_LINE INDENT return stats NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT

__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
create_file ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT file . close ( ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
remove_directory ( directory ) : NEW_LINE INDENT if not os . path . isdir ( directory ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isdir ( directory ) : NEW_LINE INDENT shutil . rmtree ( directory ) NEW_LINE DEDENT DEDENT
def def def def def def inline_ def def def def def def def _ def def def def def def def def _ def def def def def def def Mod def def def def def def def _ def def def def def def def def _Mod def def def def def def def _mod def def def def def def def def _mod def def def def def def _mod def def def def _mod def def def def def def _mod def def def def def def _

def

cycle_detector ( self , detector ) : NEW_LINE INDENT if detector is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return detector NEW_LINE DEDENT DEDENT
compare_x_coordinate ( x_coordinate , y_coordinate ) : NEW_LINE INDENT x_coordinate = x_coordinate NEW_LINE y_coordinate = y_coordinate NEW_LINE x_coordinate = x_coordinate NEW_LINE y_coordinate = y_coordinate NEW_LINE return x_coordinate == y_coordinate NEW_LINE DEDENT
y_coordinate ( self , y_coordinate ) : NEW_LINE INDENT if y_coordinate is None : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT y_coordinate = y_coordinate NEW_LINE DEDENT return y_coordinate NEW_LINE DEDENT
get_labels ( self ) : NEW_LINE INDENT labels = [ ] NEW_LINE for label in self . labels : NEW_LINE INDENT labels . append ( label ) NEW_LINE DEDENT return labels NEW_LINE DEDENT
get_labels ( self , name ) : NEW_LINE INDENT labels = self . _get_labels ( name ) NEW_LINE if labels is None : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return labels NEW_LINE DEDENT
update_label ( self , label ) : NEW_LINE INDENT if not label : NEW_LINE INDENT return NEW_LINE DEDENT label = Label ( label ) NEW_LINE return label NEW_LINE DEDENT
delete_label ( self , label ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _delete_label ( label ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
create_tag ( self , tag ) : NEW_LINE INDENT self . tag = tag NEW_LINE return self . tag NEW_LINE DEDENT
get_tags ( self ) : NEW_LINE INDENT tags = [ ] NEW_LINE for tag in self . tags : NEW_LINE INDENT tags . append ( tag ) NEW_LINE DEDENT return tags NEW_LINE DEDENT
create_hook ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT hook = self . hook NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT hook = self . hook NEW_LINE DEDENT return hook NEW_LINE DEDENT
get_current_hooks ( self ) : NEW_LINE INDENT hooks = self . hooks NEW_LINE if hooks : NEW_LINE INDENT return hooks NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT
update_hook ( self , hook ) : NEW_LINE INDENT self . _hook = hook NEW_LINE self . _hook . update ( ) NEW_LINE DEDENT
create_new_alert ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT alert = self . _create_alert ( ) NEW_LINE DEDENT except : NEW_LINE INDENT alert = self . _create_alert ( ) NEW_LINE DEDENT return alert NEW_LINE DEDENT
update_alert ( self , alert ) : NEW_LINE INDENT if not alert : NEW_LINE INDENT return NEW_LINE DEDENT alert = alert [ 0 ] NEW_LINE alert [ 1 ] = alert [ 1 ] NEW_LINE alert [ 2 ] = alert [ 2 ] NEW_LINE alert [ 3 ] = alert [ 3 ] NEW_LINE alert [ 4 ] = alert [ 4 ] NEW_LINE alert [ 5 ] = alert [ 5 ] NEW_LINE alert [ 6 ] = alert [ 6 ] NEW_LINE alert [ 7 ] = alert [ 7 ] NEW_LINE alert [ 8 ] = alert [ 8 ] NEW_LINE DEDENT
static SphinxExtension create SphinxExtension ( ) { return new SphinxExtension ( ) ; }
get_log_sets ( self ) : NEW_LINE INDENT log_sets = [ ] NEW_LINE for log_set in self . log_sets : NEW_LINE INDENT log_sets . append ( log_set ) NEW_LINE DEDENT for log_set in self . log_sets : NEW_LINE INDENT log_sets . append ( log_set ) NEW_LINE DEDENT return log_sets NEW_LINE DEDENT
def find_slider ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _find_slider ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
quit ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _quit ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _quit ( ) NEW_LINE DEDENT DEDENT
def def def get_command_command ( self , * args , ** kwargs ) : NEW_LINE def get_command ( self , * args , ** kwargs ) : NEW_LINE INDENT command = kwargs . get ( ' command ' command ' ) NEW_LINE def get_command ( self , * args , ** kwargs ) : NEW_LINE INDENT command = kwargs . get ( ' command ' ) NEW_LINE return command . format ( * args , ** kwargs ) NEW_LINE DEDENT def get_command ( self , ** kwargs ) : NEW_LINE INDENT command = kwargs . get ( ' command ' ) NEW_LINE return command NEW_LINE DEDENT return command NEW_LINE DEDENT
def
def
def run ( self , command ) : NEW_LINE INDENT command = ' ' . join ( command . split ( ' ' ) ) NEW_LINE if command . startswith ( ' LIST ' ) : NEW_LINE INDENT command = ' LIST ' . join ( command . split ( ' ' ) ) NEW_LINE DEDENT else : NEW_LINE INDENT command = ' LIST ' . join ( command . split ( ' ' ) ) NEW_LINE DEDENT return command NEW_LINE DEDENT
def def def public public public static final void run ( self ) : NEW__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
next_command ( self ) : NEW_LINE INDENT command = self . _next_command ( ) NEW_LINE if command is not None : NEW_LINE INDENT return command NEW_LINE DEDENT return None NEW_LINE DEDENT
HEAD ( self ) : NEW_LINE INDENT if self . command . startswith ( ' HEAD ' ) : NEW_LINE INDENT return self . command NEW_LINE DEDENT else : NEW_LINE INDENT return self . command NEW_LINE DEDENT DEDENT
def command ( self , command ) : NEW_LINE INDENT if command . startswith ( ' - - - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' - - - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' - - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' - - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT elif command . startswith ( ' - - ' ) : NEW_LINE INDENT return command NEW_LINE DEDENT else : NEW_LINE INDENT return command NEW_LINE DEDENT DEDENT
def def command ( self , command ) : NEW def def def def def def command_ def def def def def def def def command_ def def def def def def command_ def def def def def def def command_ def def def def def def def command_ def def def def command_ def def def def def command_ def def def def command_ def def def def def command_ def def def command_ def def def command_ def def def _ def _
def def def post def def def def def def def def _ def def def def def def def def def def def _ def def def def def def def def def def def def def def def def def def def _ def def def def def def def def def post def def def def def def def def create_ def def def def def def def _ def def def def def def def create_ def def def def def def def def _ def def def def def _
def
set_value ( self , value ) : NEW_LINE INDENT self . value = value NEW_LINE DEDENT
set_parameter_error_ estimate ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . parameter_error_estimates = [ ] NEW_LINE DEDENT except TypeError : NEW_LINE INDENT self . parameter_error_estimates = [ ] NEW_LINE DEDENT DEDENT
def
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
delete_request ( self , request ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _delete_request ( request ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
validate_band_parameters ( self , bands ) : NEW_LINE INDENT if bands is None : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( bands ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( bands ) == 1 : NEW_LINE INDENT return bands [ 0 ] NEW_LINE DEDENT elif len ( bands ) == 2 : NEW_LINE INDENT return bands [ 1 ] NEW_LINE DEDENT elif len ( bands ) == 3 : NEW_LINE INDENT return bands [ 2 ] NEW_LINE DEDENT DEDENT
def _parse_rules ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_rules ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
comment ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _comment ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
save_position ( self , position ) : NEW_LINE INDENT self . position = position NEW_LINE DEDENT
update_internal_counters ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _update_internal_counters ( ) NEW_LINE self . _update_internal_counters ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _update_internal_counters ( ) NEW_LINE raise NEW_LINE DEDENT DEDENT
get_values ( self ) : NEW_LINE INDENT return self . _values NEW_LINE DEDENT
def reversed ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . __reversed__ ( ) NEW_LINE DEDENT except : NEW_LINE INDENT return self NEW_LINE DEDENT DEDENT
def
read_one_byte ( self , stream ) : NEW_LINE INDENT if len ( stream ) == 1 : NEW_LINE INDENT return stream [ 0 ] NEW_LINE DEDENT elif len ( stream ) == 2 : NEW_LINE INDENT return stream [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return stream [ 0 ] NEW_LINE DEDENT DEDENT
consume_whitespace_characters ( self ) : NEW_LINE INDENT self . _consume_whitespace_characters ( ) NEW_LINE self . _consume_whitespace_characters ( ) NEW_LINE DEDENT
def create_tree ( self ) : NEW_LINE INDENT tree = self . _create_tree ( ) NEW_LINE return self . _create_tree ( tree ) NEW_LINE DEDENT
def add_rule_name ( self , rule_name ) : NEW_LINE INDENT try : NEW_LINE INDENT rule_name = rule_name . lower ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT rule_name = rule_name . lower ( ) NEW_LINE DEDENT return rule_name NEW_LINE DEDENT
def create_tree ( self , tree ) : NEW_LINE INDENT tree = self . _create_tree ( tree ) NEW_LINE if tree . depth == 0 : NEW_LINE INDENT return tree NEW_LINE DEDENT else : NEW_LINE INDENT return tree NEW_LINE DEDENT DEDENT
def
def create_tree ( self ) : NEW_LINE INDENT tree = self . _create_tree ( ) NEW_LINE return self . _create_tree ( tree ) NEW_LINE DEDENT
parse_hook_name ( self , hook_name ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_hook_name ( hook_name ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
parse_hook_parameter ( self , hook_parameter ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _parse_hook_parameter ( hook_parameter ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
print_nodes ( self , nodes ) : NEW_LINE INDENT nodes = [ ] NEW_LINE for node in nodes : NEW_LINE INDENT nodes . append ( node ) NEW_LINE DEDENT return nodes NEW_LINE DEDENT
bibdocs ( self ) : NEW_LINE INDENT bibdocs = [ ] NEW_LINE for bibdoc in self . bibdocs : NEW_LINE INDENT bibdocs . append ( bibdoc ) NEW_LINE DEDENT for bibdoc in self . bibdocs : NEW_LINE INDENT bibdocs . append ( bibdoc ) NEW_LINE DEDENT return bibdocs NEW_LINE DEDENT
getCommunities ( self ) : NEW_LINE INDENT communities = self . communities NEW_LINE if not communities : NEW_LINE INDENT return None NEW_LINE DEDENT return communities NEW_LINE DEDENT
get_record_revision ( self ) : NEW_LINE INDENT revisions = [ ] NEW_LINE for revision in self . revisions : NEW_LINE INDENT revisions . append ( revision ) NEW_LINE DEDENT return revisions NEW_LINE DEDENT

run_sql ( run_sql ) : NEW_LINE INDENT run_sql . run ( ) NEW_LINE return run_sql NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
load_users ( self ) : NEW_LINE INDENT users = [ ] NEW_LINE for user in self . users : NEW_LINE INDENT users . append ( user ) NEW_LINE DEDENT for user in self . users : NEW_LINE INDENT users . append ( user ) NEW_LINE DEDENT return users NEW_LINE DEDENT
deposit ( self , deposit_id ) : NEW_LINE INDENT deposit_id = deposit_id . strip ( ) NEW_LINE deposit_id = deposit_id . strip ( ) NEW_LINE deposit_id = deposit_id . strip ( ) NEW_LINE deposit_id = deposit_id . strip ( ) NEW_LINE deposit_id = deposit_id . strip ( ) NEW_LINE return deposit_id NEW_LINE DEDENT
get_statistics ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _statistics NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
clear_statistics ( self ) : NEW_LINE INDENT self . _stats . clear ( ) NEW_LINE self . _stats . clear ( ) NEW_LINE DEDENT
stop_profiler ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . profiler . stop ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT

def _create_files ( self ) : NEW_LINE INDENT files = [ ] NEW_LINE for f in self . files : NEW_LINE INDENT files . append ( f ) NEW_LINE DEDENT for f in self . files : NEW_LINE INDENT files . append ( f ) NEW_LINE DEDENT DEDENT
delete_bucket ( self , bucket_name ) : NEW_LINE INDENT bucket = self . get_bucket ( bucket_name ) NEW_LINE if bucket : NEW_LINE INDENT bucket . delete ( ) NEW_LINE DEDENT DEDENT

prepare_data ( self , data ) : NEW_LINE INDENT data = data . copy ( ) NEW_LINE data . update ( ) NEW_LINE data . update ( ) NEW_LINE data . update ( ) NEW_LINE return data NEW_LINE DEDENT
prepare_identifiers ( self , identifiers ) : NEW_LINE INDENT self . identifiers = { } NEW_LINE for identifier in identifiers : NEW_LINE INDENT self . identifiers [ identifier ] = identifiers [ identifier ] NEW_LINE DEDENT DEDENT
render_world ( self ) : NEW_LINE INDENT world = self . world NEW_LINE world . render ( ) NEW_LINE return world NEW_LINE DEDENT


def run_pipeline ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _run_pipeline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
template ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _template NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def def def Y def
calculate_error_difference ( self ) : NEW_LINE INDENT if self . error_difference is None : NEW_LINE INDENT self . error_difference = self . error_difference NEW_LINE DEDENT return self . error_difference NEW_LINE DEDENT
root_mean_squared_error ( self ) : NEW_LINE INDENT root_mean_squared_error = self . root_mean_squared_error NEW_LINE root_mean_squared_error = self . root_mean_squared_error NEW_LINE root_mean_squared_error = self . root_mean_squared_error NEW_LINE return root_mean_squared_error NEW_LINE DEDENT
neutron_ separation_energy ( self , energy ) : NEW_LINE INDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT DEDENT
neutron_ separation_energy ( self , energy ) : NEW_LINE INDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT if energy is not None : NEW_LINE INDENT return energy NEW_LINE DEDENT return None NEW_LINE DEDENT
initialize_database ( self , database ) : NEW_LINE INDENT self . database = database NEW_LINE DEDENT
def
print_data ( self , data ) : NEW_LINE INDENT print ( data ) NEW_LINE DEDENT
config_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _config NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
status_report ( self ) : NEW_LINE INDENT status = self . _status_report ( ) NEW_LINE if status : NEW_LINE INDENT return status NEW_LINE DEDENT return None NEW_LINE DEDENT
random_title ( self ) : NEW_LINE INDENT title = self . random_title ( ) NEW_LINE if title : NEW_LINE INDENT return title NEW_LINE DEDENT else : NEW_LINE INDENT return self . random_title ( ) NEW_LINE DEDENT DEDENT
random_floating_number ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return random . random ( ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return random . random ( ) NEW_LINE DEDENT DEDENT
def get_os ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . os . environ [ ' os . name ' ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT return self . os . environ [ ' os . name ' ] NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__

remove_factory ( self , factory ) : NEW_LINE INDENT if not self . factory : NEW_LINE INDENT return NEW_LINE DEDENT self . factory = factory NEW_LINE DEDENT
_apply_standard_padding ( self , padding ) : NEW_LINE INDENT if padding is None : NEW_LINE INDENT padding = self . padding NEW_LINE DEDENT else : NEW_LINE INDENT padding = padding . copy ( ) NEW_LINE DEDENT return padding NEW_LINE DEDENT
_remove_standard_padding ( self , padding ) : NEW_LINE INDENT if padding is not None : NEW_LINE INDENT self . padding = padding NEW_LINE DEDENT else : NEW_LINE INDENT self . padding = None NEW_LINE DEDENT DEDENT
get_docstring ( self ) : NEW_LINE INDENT docstring = self . get_docstring ( ) NEW_LINE if docstring : NEW_LINE INDENT return docstring NEW_LINE DEDENT return docstring NEW_LINE DEDENT
get_docstring ( self ) : NEW_LINE INDENT docstring = self . _get_docstring ( ) NEW_LINE if docstring : NEW_LINE INDENT return docstring NEW_LINE DEDENT return docstring NEW_LINE DEDENT
def init ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _init ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
def init ( self , ** kwargs ) : NEW_LINE INDENT self . __init__ ( ** kwargs ) NEW_LINE self . __init__ ( ) NEW_LINE DEDENT
init ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . mq = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . mq = { } NEW_LINE DEDENT self . mq . update ( ) NEW_LINE DEDENT
init ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . mq = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . mq = { } NEW_LINE DEDENT DEDENT
init_heat mq ( self ) : NEW_LINE INDENT self . heat_mq = { } NEW_LINE self . heat_mq . clear ( ) NEW_LINE self . heat_mq . clear ( ) NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
def def def r def def def def def _ def def def def def _ def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def def _ def def def def def def def __ def def def def def def __ def def def def def def __ def def def def def _ def def def def def __ def def def def def _ def def def def _ def def def def def _ def def def def _
def def r def def r def def def r def def def def def _ def def def def def _ def def def def def def def def _ def def def def def def def _ def def def def def def def _ def def def def def def def def __ def def def def def def def _ def def def def def get_ def def def def def _ def def def def _ def def def def _ def def def def _ def def def def def _
search ( self , text ) : NEW_LINE INDENT if not isinstance ( text , basestring ) : NEW_LINE INDENT text = text . decode ( ' utf - 8' ) NEW_LINE DEDENT return text NEW_LINE DEDENT
index ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _index ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
delete_storage ( self ) : NEW_LINE INDENT storage = self . storage NEW_LINE storage . delete ( ) NEW_LINE return storage NEW_LINE DEDENT
def def __init def def def def def __ def def def def def _ def def def def def _ def def def def def def def __ def __ def def def def def def def _ def def def def def def __ def def def def def def def __ def def def def def def _ def def def def def get_ def def def def def _ def def def def def get_ def def def def def _ def def def def def _ def def def def def _
def escape ( self , r ) : NEW_LINE INDENT r = r NEW_LINE r = r NEW_LINE try : NEW_LINE INDENT return r NEW_LINE DEDENT except TypeError : NEW_LINE INDENT r = r NEW_LINE DEDENT DEDENT
def def r def def def def _ def def def def _ def def def def def def _ def def def def def def _ def def def def def def def def _ def def def def _ def def def def def def def def _ def def def def def def def __ def def def _ def def __ def def def def def _ def def def def __ def _remove def def def def def def _ def def def def _ def def def def _ def def _
def def __init def def def def __ def def def def _ def def def def def _ def def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def def def __ def def def def def def def __ def def def _ def def __ def def def def def def __ def __ def def def def _ def def def def def _ def def def def _ def def def def def _ def def def def _
def def escape ( self , text ) : NEW_LINE INDENT return self . _escape ( self . _escape ( text ) ) NEW_LINE DEDENT
def def def __init def def def def def __ def def def def def def _ def def def def def def def _ def def def def def def def def _ def def def def def def def def def def _ def def __ def def def def def def def def def __ def def def def def def def def _get_ def def def def def def __ def def def def get_ def def def def def _ def def def def def def _ def def def def def get_ def def def _
def def def r def def def def def _ def def def def def def _ def def def def def def _ def def def def def def def _ def def def def def _ def def def def def def def def _ def def def def def def def __ def def def def def def def __ def def def def def def _ def def def def def __ def def def _ def def def def def def get_ def def def _ def def def _ def def def def _ def def def def def _ _
def def r def def def r def def def def _ def def def def def def _ def def def def def def def def _ def def def def def def def def _ def def def def def def def def def _ def def def def def def def def __ def def def def def def def __ def def def def def _ def def def def def __ def def def def def _ def def def def _ def def def def def _ def def def def _ def def def def _
def def def def def r def def def def def _ def def def def def def def _ def def def def def def def def def _ def def def def def def def _ def def def def def def def def _ def def def def def def def _ def def def def def def _ def def def def def __ def def def def _ def def def def def get_ def def def def def _ def def def def def _ def def def def def _ def def def def def _
def def escape ( self , r ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _escape ( r ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return r NEW_LINE DEDENT return r NEW_LINE DEDENT
def def def def def def _ def def def def def def _ def def def def def _ def def def def def def def def def _ def def def def def def def _ def def def def def def def _ def def def def def __ def def def def def def def __ def def def def def def def _ def def def def def def def __ def def def def def _ def def def def def _ def def def def def def _ def def def def def def _ def def def _
def def def def r def def def def def _ def def def def def def def def def _ def def def def def def def def def _ def def def def def def def _ def def def def def def def def def _ def def def def def def def def _ def def def def def def _ def def def def def _ def def def def def def _ def def def def def _ def def def def def _ def def def def def def def def def _
def def r def def r def def def def def _ def def def def def def def _ def def def def def def _ def def def def def def def _ def def def def def def def def r def def def def def def def def _ def def def def def def def def __ def _add def def def def def def _get_ def def def def def _add def def def def def get_ def def def def _ def def def def def get_ def def def def def get_ def _
def cacheMetadata ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . metadata NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT return self . metadata NEW_LINE DEDENT DEDENT
partitions ( self ) : NEW_LINE INDENT partitions = [ ] NEW_LINE for partition in self . partitions : NEW_LINE INDENT partitions . append ( partition ) NEW_LINE DEDENT return partitions NEW_LINE DEDENT
initialize_storage ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _storage = { } NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . _storage = { } NEW_LINE DEDENT DEDENT
create_empty_record ( self , record ) : NEW_LINE INDENT if not record : NEW_LINE INDENT return None NEW_LINE DEDENT if not record : NEW_LINE INDENT return None NEW_LINE DEDENT else : NEW_LINE INDENT return record NEW_LINE DEDENT DEDENT
static ImageTag helper ( Image tag ) { if ( tag == null ) { throw new IllegalArgumentException ( " Image tag cannot be null " ) ; } return tag ; }
set_hook ( self , hook ) : NEW_LINE INDENT self . hook = hook NEW_LINE DEDENT
show_traceback ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _show_traceback ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
new_macro ( self ) : NEW_LINE INDENT def new_macro ( self ) : NEW_LINE INDENT return self . macro ( ) NEW_LINE DEDENT return new_macro NEW_LINE DEDENT
print_usage ( self , usage , examples ) : NEW_LINE INDENT self . print_usage ( usage ) NEW_LINE self . print_examples ( examples ) NEW_LINE DEDENT
def def def def def def url def def def def def def url def def def def def def def def def def def def def def def _ def def def def def def def def def def def _ def def def def def def url def def def def def def def def url def def def def def url def def def def def _ def def def def def url def def def def def def def _ def def def def def _ def _
set_cursor_position ( self , cursor_position ) : NEW_LINE INDENT self . cursor_position = cursor_position NEW_LINE DEDENT
cancel_completion ( self ) : NEW_LINE INDENT if self . _completion is not None : NEW_LINE INDENT self . _completion . cancel ( ) NEW_LINE self . _completion = None NEW_LINE DEDENT DEDENT
move_cursor_up ( self , cursor ) : NEW_LINE INDENT if cursor is not None : NEW_LINE INDENT cursor . move ( cursor ) NEW_LINE DEDENT DEDENT
move_cursor_down ( self , cursor ) : NEW_LINE INDENT if cursor is not None : NEW_LINE INDENT cursor . move ( cursor ) NEW_LINE DEDENT DEDENT
move_cursor_left ( self , cursor ) : NEW_LINE INDENT self . cursor = cursor NEW_LINE self . cursor . move ( cursor ) NEW_LINE DEDENT
move_cursor_right ( self , cursor ) : NEW_LINE INDENT self . cursor = cursor NEW_LINE self . cursor . move ( cursor ) NEW_LINE DEDENT
send_single_file ( self , file ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . send_single_file ( file ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
fetch_single_file ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _fetch_single_file ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
match_system_aliases ( self , system_aliases ) : NEW_LINE INDENT if system_aliases is None : NEW_LINE INDENT return False NEW_LINE DEDENT if system_aliases is not None : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT



clear_namespaces ( self ) : NEW_LINE INDENT self . _namespaces = [ ] NEW_LINE for namespace in self . _namespaces : NEW_LINE INDENT self . _namespaces . clear ( ) NEW_LINE DEDENT DEDENT
abort_tasks ( self , tasks ) : NEW_LINE INDENT for task in tasks : NEW_LINE INDENT try : NEW_LINE INDENT task . abort ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
initialize_profile_dir ( self , profile_dir ) : NEW_LINE INDENT self . profile_dir = profile_dir NEW_LINE DEDENT
def def add_line_data ( self , line_data ) : NEW_LINE INDENT line_data = [ ] NEW_LINE for line in line_data : NEW_LINE INDENT line_data . append ( line_data ) NEW_LINE DEDENT def add_line_data ( self , line_data ) : NEW_LINE INDENT line_data . append ( line_data ) NEW_LINE DEDENT DEDENT
def def measured_arc_arc_data ( self ) : NEW_LINE INDENT data = self . measured_arc_data NEW_LINE data = self . measured_arc_data . copy ( ) NEW_LINE return data NEW_LINE DEDENT
start_mainloop ( self ) : NEW_LINE INDENT if self . mainloop is not None : NEW_LINE INDENT self . mainloop . start ( ) NEW_LINE DEDENT DEDENT
def
format_traceback ( self , traceback ) : NEW_LINE INDENT try : NEW_LINE INDENT return ' ' . join ( traceback ) NEW_LINE DEDENT except TypeError : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT
def _reject ( self , connection ) : NEW_LINE INDENT try : NEW_LINE INDENT connection . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT
flush ( self ) : NEW_LINE INDENT if self . _control_replies : NEW_LINE INDENT self . _control_replies . clear ( ) NEW_LINE DEDENT DEDENT
render_context_aware_template ( self ) : NEW_LINE INDENT template = self . render_context_aware_template ( ) NEW_LINE return template NEW_LINE DEDENT
create_session ( self ) : NEW_LINE INDENT self . session = { } NEW_LINE self . session . save ( ) NEW_LINE return self . session NEW_LINE DEDENT
initialize_app ( self , app ) : NEW_LINE INDENT self . app = app NEW_LINE DEDENT
process_name ( self ) : NEW_LINE INDENT return self . _process_name NEW_LINE DEDENT
__java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java____java__
register_checker ( self , checker ) : NEW_LINE INDENT self . checker = checker NEW_LINE DEDENT
def create_default_handlers ( self ) : NEW_LINE INDENT handlers = [ ] NEW_LINE for handler in self . handlers : NEW_LINE INDENT handlers . append ( handler ) NEW_LINE DEDENT return handlers NEW_LINE DEDENT
execute_magic_functions ( self ) : NEW_LINE INDENT magic_functions = [ ] NEW_LINE for func in self . magic_functions : NEW_LINE INDENT magic_functions . append ( func ) NEW_LINE DEDENT return magic_functions NEW_LINE DEDENT
clear_console ( self ) : NEW_LINE INDENT self . console . clear ( ) NEW_LINE DEDENT
beat ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . _heartbeat ( ) NEW_LINE DEDENT except : NEW_LINE INDENT self . _heartbeat ( ) NEW_LINE DEDENT self . _heartbeat ( ) NEW_LINE DEDENT
def

save_wave_log ( self , wave_log ) : NEW_LINE INDENT if wave_log is None : NEW_LINE INDENT return NEW_LINE DEDENT wave_log = wave_log . copy ( ) NEW_LINE wave_log . save ( ) NEW_LINE DEDENT


load_file_object ( self , filename ) : NEW_LINE INDENT try : NEW_LINE INDENT file = open ( filename , ' rb ' ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT return None NEW_LINE DEDENT return file NEW_LINE DEDENT
edit_block ( self , block ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _edit_block ( block ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def countdown ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _countdown ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return self . _countdown ( ) NEW_LINE DEDENT DEDENT
get_notebook ( self ) : NEW_LINE INDENT notebook = self . _get_notebook ( ) NEW_LINE if not notebook : NEW_LINE INDENT return None NEW_LINE DEDENT return notebook NEW_LINE DEDENT
initialize ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . InteractiveShell = self . InteractiveShell NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT self . InteractiveShell = self . InteractiveShell NEW_LINE DEDENT DEDENT
display_banner ( self , banner ) : NEW_LINE INDENT if not banner : NEW_LINE INDENT return NEW_LINE DEDENT self . banner = banner NEW_LINE DEDENT
print_binary_tree ( self , tree ) : NEW_LINE INDENT if isinstance ( tree , binary_tree ) : NEW_LINE INDENT return tree NEW_LINE DEDENT elif isinstance ( tree , binary_tree ) : NEW_LINE INDENT return tree NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
shutdown ( self ) : NEW_LINE INDENT if self . _shutdown_request : NEW_LINE INDENT return self . _shutdown_request NEW_LINE DEDENT else : NEW_LINE INDENT return self . _shutdown_request NEW_LINE DEDENT DEDENT
go_to_path ( self , path ) : NEW_LINE INDENT if not path : NEW_LINE INDENT return NEW_LINE DEDENT path = os . path . abspath ( path ) NEW_LINE if not os . path . isdir ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isdir ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isdir ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isdir ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path . isfile ( path ) : NEW_LINE INDENT return NEW_LINE DEDENT if os . path
get_standard_message ( self , message ) : NEW_LINE INDENT if message is not None : NEW_LINE INDENT return message NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT return self . _get_standard_message ( message ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
run ( self ) : NEW_LINE INDENT subprocess . Popen ( [ ' python ' , ' - c ' , ' - - version ' , ' - m ' ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) NEW_LINE subprocess . Popen ( [ ' python ' , ' - m ' ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) NEW_LINE DEDENT
execute_script ( self , script ) : NEW_LINE INDENT try : NEW_LINE INDENT execfile ( script , { ' script ' : script } ) NEW_LINE DEDENT except : NEW_LINE INDENT raise NEW_LINE DEDENT DEDENT
def def run_report ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT return self . _run_report ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT


